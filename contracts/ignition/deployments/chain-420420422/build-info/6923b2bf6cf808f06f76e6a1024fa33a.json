{
  "id": "6923b2bf6cf808f06f76e6a1024fa33a",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/HabitTracker.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title HabitTracker\n * @notice Gamified habit tracking with financial commitment\n * @dev Uses epoch-based time (86400-second days) for daily cycles\n * @author HabitChain Team\n */\ncontract HabitTracker {\n    uint256 public constant STAKE_PER_DAY = 10 ether;\n    uint256 private constant SECONDS_PER_DAY = 86400;\n    uint32 private constant MAX_SETTLE_BATCH = 50;\n    address public immutable treasury;\n    \n    // ============ Structs ============\n    \n    struct UserState {\n        uint256 depositBalance;\n        uint256 blockedBalance;\n        uint256 claimableBalance;\n        uint32 activeHabitCount;\n    }\n    \n    struct Habit {\n        uint32 id;\n        address owner;\n        bytes32 text;\n        uint64 createdAtEpoch;\n        bool archived;\n    }\n    \n    struct DailyStatus {\n        uint8 flags; // bit 0: funded, bit 1: checked, bit 2: settled\n    }\n    \n    mapping(address => UserState) public userStates;\n    mapping(address => mapping(uint32 => Habit)) public habits;\n    mapping(address => uint32) public userHabitCounters;\n    mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses;\n    \n    event Deposited(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event Claimed(address indexed user, uint256 amount);\n    event RedepositedFromClaimable(address indexed user, uint256 amount);\n    event HabitCreated(address indexed user, uint32 indexed habitId, bytes32 text);\n    event HabitArchived(address indexed user, uint32 indexed habitId);\n    event DayPrepared(address indexed user, uint64 indexed epoch, uint32 fundedCount, uint32 insufficientCount);\n    event CheckedIn(address indexed user, uint32 indexed habitId, uint64 indexed epoch);\n    event SettledSuccess(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 reward);\n    event SettledFail(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 slashed);\n    \n    error InvalidTreasury();\n    error InvalidAmount();\n    error InsufficientBalance();\n    error HabitNotFound();\n    error NotHabitOwner();\n    error HabitAlreadyArchived();\n    error InvalidEpoch();\n    error DayNotFunded();\n    error AlreadyCheckedIn();\n    error AlreadySettled();\n    error CannotSettleCurrentDay();\n    error InvalidBatchSize();\n    error TransferFailed();\n    error HabitTextTooLong();\n    \n    modifier onlyHabitOwner(uint32 habitId) {\n        if (habits[msg.sender][habitId].owner != msg.sender) revert NotHabitOwner();\n        _;\n    }\n    \n    // ============ Constructor ============\n    \n    constructor(address _treasury) {\n        if (_treasury == address(0)) revert InvalidTreasury();\n        treasury = _treasury;\n    }\n    \n    function epochNow() public view returns (uint64) {\n        return uint64(block.timestamp / SECONDS_PER_DAY);\n    }\n    \n    function deposit() external payable {\n        if (msg.value == 0) revert InvalidAmount();\n        userStates[msg.sender].depositBalance += msg.value;\n        emit Deposited(msg.sender, msg.value);\n    }\n    \n    function withdraw(uint256 amount) external {\n        if (amount == 0) revert InvalidAmount();\n        UserState storage state = userStates[msg.sender];\n        if (state.depositBalance < amount) revert InsufficientBalance();\n        unchecked { state.depositBalance -= amount; }\n        _transfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n    \n    function claim(uint256 amount) external {\n        if (amount == 0) revert InvalidAmount();\n        UserState storage state = userStates[msg.sender];\n        if (state.claimableBalance < amount) revert InsufficientBalance();\n        unchecked { state.claimableBalance -= amount; }\n        _transfer(msg.sender, amount);\n        emit Claimed(msg.sender, amount);\n    }\n    \n    function redepositFromClaimable(uint256 amount) external {\n        if (amount == 0) revert InvalidAmount();\n        UserState storage state = userStates[msg.sender];\n        if (state.claimableBalance < amount) revert InsufficientBalance();\n        unchecked {\n            state.claimableBalance -= amount;\n            state.depositBalance += amount;\n        }\n        emit RedepositedFromClaimable(msg.sender, amount);\n    }\n    \n    function _transfer(address to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n    }\n    \n    // ============ Habit Management Functions ============\n    \n    /**\n     * @notice Create a new habit\n     * @param text Description of the habit (up to 32 bytes)\n     * @return habitId The ID of the newly created habit\n     */\n    function createHabit(bytes32 text) external returns (uint32) {\n        if (text == bytes32(0)) revert HabitTextTooLong();\n        \n        uint32 habitId = ++userHabitCounters[msg.sender];\n        \n        habits[msg.sender][habitId] = Habit({\n            id: habitId,\n            owner: msg.sender,\n            text: text,\n            createdAtEpoch: epochNow(),\n            archived: false\n        });\n        \n        unchecked { userStates[msg.sender].activeHabitCount++; }\n        \n        emit HabitCreated(msg.sender, habitId, text);\n        return habitId;\n    }\n    \n    /**\n     * @notice Archive a habit (soft delete)\n     * @param habitId ID of the habit to archive\n     */\n    function archiveHabit(uint32 habitId) external onlyHabitOwner(habitId) {\n        Habit storage habit = habits[msg.sender][habitId];\n        if (habit.archived) revert HabitAlreadyArchived();\n        habit.archived = true;\n        unchecked { userStates[msg.sender].activeHabitCount--; }\n        emit HabitArchived(msg.sender, habitId);\n    }\n    \n    // ============ Daily Cycle Functions ============\n    \n    /**\n     * @notice Prepare the day by locking funds for active habits\n     * @param epoch The epoch to prepare (must be current day)\n     */\n    function prepareDay(uint64 epoch) external {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        \n        UserState storage state = userStates[msg.sender];\n        uint32 count = userHabitCounters[msg.sender];\n        uint32 fundedCount;\n        uint32 insufficientCount;\n        \n        for (uint32 i = 1; i <= count;) {\n            Habit storage habit = habits[msg.sender][i];\n            \n            if (!habit.archived && habit.owner != address(0)) {\n                DailyStatus storage status = dailyStatuses[msg.sender][epoch][i];\n                \n                if (status.flags & 1 == 0) { // Check if funded bit is 0\n                    if (state.depositBalance >= STAKE_PER_DAY) {\n                        unchecked {\n                            state.depositBalance -= STAKE_PER_DAY;\n                            state.blockedBalance += STAKE_PER_DAY;\n                            fundedCount++;\n                        }\n                        status.flags |= 1; // Set funded bit\n                    } else {\n                        unchecked { insufficientCount++; }\n                    }\n                }\n            }\n            unchecked { i++; }\n        }\n        \n        emit DayPrepared(msg.sender, epoch, fundedCount, insufficientCount);\n    }\n    \n    /**\n     * @notice Check in to a habit for the current day\n     * @param habitId ID of the habit\n     * @param epoch The epoch to check in (must be current day)\n     */\n    function checkIn(uint32 habitId, uint64 epoch) external onlyHabitOwner(habitId) {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        if (habits[msg.sender][habitId].archived) revert HabitNotFound();\n        \n        DailyStatus storage status = dailyStatuses[msg.sender][epoch][habitId];\n        if (status.flags & 1 == 0) revert DayNotFunded(); // Check funded bit\n        if (status.flags & 2 != 0) revert AlreadyCheckedIn(); // Check checked bit\n        \n        status.flags |= 2; // Set checked bit\n        emit CheckedIn(msg.sender, habitId, epoch);\n    }\n    \n    /**\n     * @notice Settle a specific habit for a past day\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (must be past day)\n     * @param habitId ID of the habit to settle\n     */\n    function settle(address user, uint64 epoch, uint32 habitId) public {\n        if (epoch >= epochNow()) revert CannotSettleCurrentDay();\n        _settleInternal(user, epoch, habitId);\n    }\n    \n    /**\n     * @notice Internal settlement logic without epoch validation\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle\n     * @param habitId ID of the habit to settle\n     */\n    function _settleInternal(address user, uint64 epoch, uint32 habitId) private {\n        if (habits[user][habitId].owner == address(0)) revert HabitNotFound();\n        \n        DailyStatus storage status = dailyStatuses[user][epoch][habitId];\n        uint8 flags = status.flags;\n        if (flags & 1 == 0) revert DayNotFunded();\n        if (flags & 4 != 0) revert AlreadySettled();\n        \n        status.flags = flags | 4;\n        UserState storage state = userStates[user];\n        \n        unchecked { state.blockedBalance -= STAKE_PER_DAY; }\n        \n        if (flags & 2 != 0) {\n            unchecked { state.claimableBalance += STAKE_PER_DAY; }\n            emit SettledSuccess(user, habitId, epoch, STAKE_PER_DAY);\n        } else {\n            _transfer(treasury, STAKE_PER_DAY);\n            emit SettledFail(user, habitId, epoch, STAKE_PER_DAY);\n        }\n    }\n    \n    /**\n     * @notice Settle all funded habits for a user for a specific past day\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (must be past day)\n     * @param maxCount Maximum number of habits to settle (gas limit protection)\n     */\n    function settleAll(address user, uint64 epoch, uint32 maxCount) external {\n        if (epoch >= epochNow()) revert CannotSettleCurrentDay();\n        if (maxCount == 0 || maxCount > MAX_SETTLE_BATCH) revert InvalidBatchSize();\n        \n        uint32 count = userHabitCounters[user];\n        uint32 settled;\n        \n        for (uint32 i = 1; i <= count && settled < maxCount;) {\n            Habit storage habit = habits[user][i];\n            if (habit.owner != address(0) && !habit.archived) {\n                uint8 flags = dailyStatuses[user][epoch][i].flags;\n                if ((flags & 1 != 0) && (flags & 4 == 0)) {\n                    _settleInternal(user, epoch, i);\n                    unchecked { settled++; }\n                }\n            }\n            unchecked { i++; }\n        }\n    }\n    \n    /**\n     * @notice Force settle a specific day without epoch validation (TESTING ONLY)\n     * @dev Same as settleAll but bypasses the \"cannot settle current day\" check\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (can be any epoch, including current)\n     * @param maxCount Maximum number of habits to settle (gas limit protection)\n     */\n    function forceSettleDay(address user, uint64 epoch, uint32 maxCount) external {\n        if (maxCount == 0 || maxCount > MAX_SETTLE_BATCH) revert InvalidBatchSize();\n        \n        uint32 count = userHabitCounters[user];\n        uint32 settled;\n        \n        for (uint32 i = 1; i <= count && settled < maxCount;) {\n            Habit storage habit = habits[user][i];\n            if (habit.owner != address(0) && !habit.archived) {\n                uint8 flags = dailyStatuses[user][epoch][i].flags;\n                if ((flags & 1 != 0) && (flags & 4 == 0)) {\n                    _settleInternal(user, epoch, i);\n                    unchecked { settled++; }\n                }\n            }\n            unchecked { i++; }\n        }\n    }\n    \n    /**\n     * @notice Force settle all unsettled habits across all past epochs (TESTING ONLY)\n     * @dev Scans all habits and all past epochs to find and settle any funded but unsettled days\n     * @param user Address of habit owner\n     * @param startEpoch Starting epoch to scan from (usually habit creation epoch or 0)\n     * @param maxSettlements Maximum number of settlements to process (gas limit protection)\n     */\n    function forceSettleAllEpochs(address user, uint64 startEpoch, uint32 maxSettlements) external {\n        if (maxSettlements == 0 || maxSettlements > MAX_SETTLE_BATCH) revert InvalidBatchSize();\n        \n        uint32 habitCount = userHabitCounters[user];\n        uint64 currentEpoch = epochNow();\n        uint32 settledCount;\n        \n        for (uint32 habitId = 1; habitId <= habitCount && settledCount < maxSettlements;) {\n            Habit storage habit = habits[user][habitId];\n            \n            if (habit.owner != address(0) && !habit.archived) {\n                uint64 scanStart = startEpoch > habit.createdAtEpoch ? startEpoch : habit.createdAtEpoch;\n                \n                for (uint64 epoch = scanStart; epoch < currentEpoch && settledCount < maxSettlements;) {\n                    uint8 flags = dailyStatuses[user][epoch][habitId].flags;\n                    \n                    if ((flags & 1 != 0) && (flags & 4 == 0)) {\n                        _settleInternal(user, epoch, habitId);\n                        unchecked { settledCount++; }\n                    }\n                    unchecked { epoch++; }\n                }\n            }\n            unchecked { habitId++; }\n        }\n    }\n}\n\n"
      }
    },
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "parameters": "z",
        "fallbackOz": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi"
          ]
        }
      },
      "resolc": {
        "version": "latest",
        "compilerSource": "npm",
        "settings": {
          "optimizer": {
            "enabled": true,
            "parameters": "z",
            "fallbackOz": true,
            "runs": 200
          }
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
    "sources": {
      "contracts/HabitTracker.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/HabitTracker.sol",
          "exportedSymbols": {
            "HabitTracker": [
              1231
            ]
          },
          "id": 1232,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "HabitTracker",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "58:185:0",
                "text": " @title HabitTracker\n @notice Gamified habit tracking with financial commitment\n @dev Uses epoch-based time (86400-second days) for daily cycles\n @author HabitChain Team"
              },
              "fullyImplemented": true,
              "id": 1231,
              "linearizedBaseContracts": [
                1231
              ],
              "name": "HabitTracker",
              "nameLocation": "253:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "functionSelector": "4a91f7ae",
                  "id": 5,
                  "mutability": "constant",
                  "name": "STAKE_PER_DAY",
                  "nameLocation": "296:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "272:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "272:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3130",
                    "id": 4,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "312:8:0",
                    "subdenomination": "ether",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_10000000000000000000_by_1",
                      "typeString": "int_const 10000000000000000000"
                    },
                    "value": "10"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 8,
                  "mutability": "constant",
                  "name": "SECONDS_PER_DAY",
                  "nameLocation": "351:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "326:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "326:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3836343030",
                    "id": 7,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "369:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_86400_by_1",
                      "typeString": "int_const 86400"
                    },
                    "value": "86400"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 11,
                  "mutability": "constant",
                  "name": "MAX_SETTLE_BATCH",
                  "nameLocation": "404:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "380:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "380:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "value": {
                    "hexValue": "3530",
                    "id": 10,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "423:2:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_50_by_1",
                      "typeString": "int_const 50"
                    },
                    "value": "50"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "61d027b3",
                  "id": 13,
                  "mutability": "immutable",
                  "name": "treasury",
                  "nameLocation": "456:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "431:33:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "431:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "canonicalName": "HabitTracker.UserState",
                  "id": 22,
                  "members": [
                    {
                      "constant": false,
                      "id": 15,
                      "mutability": "mutable",
                      "name": "depositBalance",
                      "nameLocation": "556:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "548:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "548:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 17,
                      "mutability": "mutable",
                      "name": "blockedBalance",
                      "nameLocation": "588:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "580:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 16,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "580:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 19,
                      "mutability": "mutable",
                      "name": "claimableBalance",
                      "nameLocation": "620:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "612:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 18,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "612:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 21,
                      "mutability": "mutable",
                      "name": "activeHabitCount",
                      "nameLocation": "653:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "646:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 20,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "646:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserState",
                  "nameLocation": "528:9:0",
                  "nodeType": "StructDefinition",
                  "scope": 1231,
                  "src": "521:155:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "HabitTracker.Habit",
                  "id": 33,
                  "members": [
                    {
                      "constant": false,
                      "id": 24,
                      "mutability": "mutable",
                      "name": "id",
                      "nameLocation": "716:2:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 33,
                      "src": "709:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 23,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "709:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 26,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "736:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 33,
                      "src": "728:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 25,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "728:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 28,
                      "mutability": "mutable",
                      "name": "text",
                      "nameLocation": "759:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 33,
                      "src": "751:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 27,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "751:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 30,
                      "mutability": "mutable",
                      "name": "createdAtEpoch",
                      "nameLocation": "780:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 33,
                      "src": "773:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 29,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "773:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 32,
                      "mutability": "mutable",
                      "name": "archived",
                      "nameLocation": "809:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 33,
                      "src": "804:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 31,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "804:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Habit",
                  "nameLocation": "693:5:0",
                  "nodeType": "StructDefinition",
                  "scope": 1231,
                  "src": "686:138:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "HabitTracker.DailyStatus",
                  "id": 36,
                  "members": [
                    {
                      "constant": false,
                      "id": 35,
                      "mutability": "mutable",
                      "name": "flags",
                      "nameLocation": "869:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 36,
                      "src": "863:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 34,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "863:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "DailyStatus",
                  "nameLocation": "841:11:0",
                  "nodeType": "StructDefinition",
                  "scope": 1231,
                  "src": "834:96:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0ecc535f",
                  "id": 41,
                  "mutability": "mutable",
                  "name": "userStates",
                  "nameLocation": "977:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "940:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                    "typeString": "mapping(address => struct HabitTracker.UserState)"
                  },
                  "typeName": {
                    "id": 40,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 37,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "948:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "940:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                      "typeString": "mapping(address => struct HabitTracker.UserState)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 39,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 38,
                        "name": "UserState",
                        "nameLocations": [
                          "959:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 22,
                        "src": "959:9:0"
                      },
                      "referencedDeclaration": 22,
                      "src": "959:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                        "typeString": "struct HabitTracker.UserState"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "99626634",
                  "id": 48,
                  "mutability": "mutable",
                  "name": "habits",
                  "nameLocation": "1045:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "993:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                  },
                  "typeName": {
                    "id": 47,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 42,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1001:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "993:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 46,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 43,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1020:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1012:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                        "typeString": "mapping(uint32 => struct HabitTracker.Habit)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 45,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 44,
                          "name": "Habit",
                          "nameLocations": [
                            "1030:5:0"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 33,
                          "src": "1030:5:0"
                        },
                        "referencedDeclaration": 33,
                        "src": "1030:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                          "typeString": "struct HabitTracker.Habit"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0e08454a",
                  "id": 52,
                  "mutability": "mutable",
                  "name": "userHabitCounters",
                  "nameLocation": "1091:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "1057:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                    "typeString": "mapping(address => uint32)"
                  },
                  "typeName": {
                    "id": 51,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 49,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1065:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1057:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                      "typeString": "mapping(address => uint32)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 50,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1076:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "88b21c87",
                  "id": 61,
                  "mutability": "mutable",
                  "name": "dailyStatuses",
                  "nameLocation": "1191:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1231,
                  "src": "1114:90:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                    "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus)))"
                  },
                  "typeName": {
                    "id": 60,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 53,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1122:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1114:69:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                      "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus)))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 59,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 54,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "1141:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1133:49:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                        "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus))"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 58,
                        "keyName": "",
                        "keyNameLocation": "-1:-1:-1",
                        "keyType": {
                          "id": 55,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1159:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1151:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                          "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus)"
                        },
                        "valueName": "",
                        "valueNameLocation": "-1:-1:-1",
                        "valueType": {
                          "id": 57,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 56,
                            "name": "DailyStatus",
                            "nameLocations": [
                              "1169:11:0"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 36,
                            "src": "1169:11:0"
                          },
                          "referencedDeclaration": 36,
                          "src": "1169:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                            "typeString": "struct HabitTracker.DailyStatus"
                          }
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4",
                  "id": 67,
                  "name": "Deposited",
                  "nameLocation": "1221:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 66,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 63,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1247:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "1231:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 62,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1231:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 65,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1261:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "1253:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 64,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1253:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1230:38:0"
                  },
                  "src": "1215:54:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5",
                  "id": 73,
                  "name": "Withdrawn",
                  "nameLocation": "1280:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 72,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1306:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 73,
                        "src": "1290:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1290:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 71,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1320:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 73,
                        "src": "1312:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 70,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1312:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1289:38:0"
                  },
                  "src": "1274:54:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "d8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a",
                  "id": 79,
                  "name": "Claimed",
                  "nameLocation": "1339:7:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 78,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 75,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1363:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 79,
                        "src": "1347:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 74,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1347:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 77,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1377:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 79,
                        "src": "1369:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 76,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1369:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1346:38:0"
                  },
                  "src": "1333:52:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "d6dbb592654017b4a03c128427776d8827794b54dcbd9b8529b81c69792e567c",
                  "id": 85,
                  "name": "RedepositedFromClaimable",
                  "nameLocation": "1396:24:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 84,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 81,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1437:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 85,
                        "src": "1421:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 80,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1421:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 83,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1451:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 85,
                        "src": "1443:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1443:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1420:38:0"
                  },
                  "src": "1390:69:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453",
                  "id": 93,
                  "name": "HabitCreated",
                  "nameLocation": "1470:12:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 92,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 87,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1499:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "1483:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 86,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1483:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 89,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "1520:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "1505:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 88,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1505:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 91,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "1537:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "1529:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 90,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1529:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1482:60:0"
                  },
                  "src": "1464:79:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3",
                  "id": 99,
                  "name": "HabitArchived",
                  "nameLocation": "1554:13:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 95,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1584:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "1568:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1568:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "1605:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "1590:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1590:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1567:46:0"
                  },
                  "src": "1548:66:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "c3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5",
                  "id": 109,
                  "name": "DayPrepared",
                  "nameLocation": "1625:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 108,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 101,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1653:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 109,
                        "src": "1637:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1637:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 103,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "1674:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 109,
                        "src": "1659:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 102,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1659:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 105,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "fundedCount",
                        "nameLocation": "1688:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 109,
                        "src": "1681:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 104,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1681:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 107,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "insufficientCount",
                        "nameLocation": "1708:17:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 109,
                        "src": "1701:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1701:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1636:90:0"
                  },
                  "src": "1619:108:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "b004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682",
                  "id": 117,
                  "name": "CheckedIn",
                  "nameLocation": "1738:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 116,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 111,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1764:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "1748:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 110,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1748:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 113,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "1785:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "1770:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1770:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 115,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "1809:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "1794:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1794:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1747:68:0"
                  },
                  "src": "1732:84:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "ebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209",
                  "id": 127,
                  "name": "SettledSuccess",
                  "nameLocation": "1827:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 126,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 119,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1858:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 127,
                        "src": "1842:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1842:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 121,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "1879:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 127,
                        "src": "1864:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1864:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 123,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "1903:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 127,
                        "src": "1888:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 122,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1888:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 125,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "reward",
                        "nameLocation": "1918:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 127,
                        "src": "1910:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 124,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1910:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1841:84:0"
                  },
                  "src": "1821:105:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "be6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba",
                  "id": 137,
                  "name": "SettledFail",
                  "nameLocation": "1937:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 129,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1965:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 137,
                        "src": "1949:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 128,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1949:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 131,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "1986:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 137,
                        "src": "1971:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1971:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2010:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 137,
                        "src": "1995:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1995:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 135,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "slashed",
                        "nameLocation": "2025:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 137,
                        "src": "2017:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2017:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1948:85:0"
                  },
                  "src": "1931:103:0"
                },
                {
                  "errorSelector": "14bcf5c8",
                  "id": 139,
                  "name": "InvalidTreasury",
                  "nameLocation": "2050:15:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 138,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2065:2:0"
                  },
                  "src": "2044:24:0"
                },
                {
                  "errorSelector": "2c5211c6",
                  "id": 141,
                  "name": "InvalidAmount",
                  "nameLocation": "2079:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 140,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2092:2:0"
                  },
                  "src": "2073:22:0"
                },
                {
                  "errorSelector": "f4d678b8",
                  "id": 143,
                  "name": "InsufficientBalance",
                  "nameLocation": "2106:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 142,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2125:2:0"
                  },
                  "src": "2100:28:0"
                },
                {
                  "errorSelector": "a7a9536d",
                  "id": 145,
                  "name": "HabitNotFound",
                  "nameLocation": "2139:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 144,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2152:2:0"
                  },
                  "src": "2133:22:0"
                },
                {
                  "errorSelector": "6f1cf7db",
                  "id": 147,
                  "name": "NotHabitOwner",
                  "nameLocation": "2166:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 146,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2179:2:0"
                  },
                  "src": "2160:22:0"
                },
                {
                  "errorSelector": "c1c184c8",
                  "id": 149,
                  "name": "HabitAlreadyArchived",
                  "nameLocation": "2193:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 148,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2213:2:0"
                  },
                  "src": "2187:29:0"
                },
                {
                  "errorSelector": "d5b25b63",
                  "id": 151,
                  "name": "InvalidEpoch",
                  "nameLocation": "2227:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2239:2:0"
                  },
                  "src": "2221:21:0"
                },
                {
                  "errorSelector": "afa4e2b6",
                  "id": 153,
                  "name": "DayNotFunded",
                  "nameLocation": "2253:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2265:2:0"
                  },
                  "src": "2247:21:0"
                },
                {
                  "errorSelector": "c98289f0",
                  "id": 155,
                  "name": "AlreadyCheckedIn",
                  "nameLocation": "2279:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 154,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2295:2:0"
                  },
                  "src": "2273:25:0"
                },
                {
                  "errorSelector": "560ff900",
                  "id": 157,
                  "name": "AlreadySettled",
                  "nameLocation": "2309:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2323:2:0"
                  },
                  "src": "2303:23:0"
                },
                {
                  "errorSelector": "cf114bd9",
                  "id": 159,
                  "name": "CannotSettleCurrentDay",
                  "nameLocation": "2337:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2359:2:0"
                  },
                  "src": "2331:31:0"
                },
                {
                  "errorSelector": "7862e959",
                  "id": 161,
                  "name": "InvalidBatchSize",
                  "nameLocation": "2373:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2389:2:0"
                  },
                  "src": "2367:25:0"
                },
                {
                  "errorSelector": "90b8ec18",
                  "id": 163,
                  "name": "TransferFailed",
                  "nameLocation": "2403:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 162,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2417:2:0"
                  },
                  "src": "2397:23:0"
                },
                {
                  "errorSelector": "cc67c13b",
                  "id": 165,
                  "name": "HabitTextTooLong",
                  "nameLocation": "2431:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 164,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2447:2:0"
                  },
                  "src": "2425:25:0"
                },
                {
                  "body": {
                    "id": 184,
                    "nodeType": "Block",
                    "src": "2500:103:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 178,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 169,
                                  "name": "habits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "2514:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                  }
                                },
                                "id": 172,
                                "indexExpression": {
                                  "expression": {
                                    "id": 170,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2521:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 171,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2525:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2521:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2514:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                  "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                }
                              },
                              "id": 174,
                              "indexExpression": {
                                "id": 173,
                                "name": "habitId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 167,
                                "src": "2533:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2514:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$33_storage",
                                "typeString": "struct HabitTracker.Habit storage ref"
                              }
                            },
                            "id": 175,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2542:5:0",
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "2514:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "expression": {
                              "id": 176,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2551:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 177,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2555:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2551:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2514:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 182,
                        "nodeType": "IfStatement",
                        "src": "2510:75:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 179,
                              "name": "NotHabitOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "2570:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2570:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 181,
                          "nodeType": "RevertStatement",
                          "src": "2563:22:0"
                        }
                      },
                      {
                        "id": 183,
                        "nodeType": "PlaceholderStatement",
                        "src": "2595:1:0"
                      }
                    ]
                  },
                  "id": 185,
                  "name": "onlyHabitOwner",
                  "nameLocation": "2469:14:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 168,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 167,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2491:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 185,
                        "src": "2484:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 166,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2484:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2483:16:0"
                  },
                  "src": "2460:143:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 204,
                    "nodeType": "Block",
                    "src": "2694:100:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 195,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 190,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 187,
                            "src": "2708:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 193,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2729:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2721:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 191,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2721:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 194,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2721:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2708:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 199,
                        "nodeType": "IfStatement",
                        "src": "2704:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 196,
                              "name": "InvalidTreasury",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 139,
                              "src": "2740:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 197,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2740:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 198,
                          "nodeType": "RevertStatement",
                          "src": "2733:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 200,
                            "name": "treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13,
                            "src": "2767:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 201,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 187,
                            "src": "2778:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2767:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 203,
                        "nodeType": "ExpressionStatement",
                        "src": "2767:20:0"
                      }
                    ]
                  },
                  "id": 205,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 188,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 187,
                        "mutability": "mutable",
                        "name": "_treasury",
                        "nameLocation": "2683:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 205,
                        "src": "2675:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 186,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2675:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2674:19:0"
                  },
                  "returnParameters": {
                    "id": 189,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2694:0:0"
                  },
                  "scope": 1231,
                  "src": "2663:131:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 218,
                    "nodeType": "Block",
                    "src": "2853:65:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 215,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 212,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967292,
                                  "src": "2877:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 213,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2883:9:0",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "2877:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 214,
                                "name": "SECONDS_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8,
                                "src": "2895:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2877:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 211,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2870:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint64_$",
                              "typeString": "type(uint64)"
                            },
                            "typeName": {
                              "id": 210,
                              "name": "uint64",
                              "nodeType": "ElementaryTypeName",
                              "src": "2870:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 216,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2870:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "functionReturnParameters": 209,
                        "id": 217,
                        "nodeType": "Return",
                        "src": "2863:48:0"
                      }
                    ]
                  },
                  "functionSelector": "222ae786",
                  "id": 219,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "epochNow",
                  "nameLocation": "2813:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2821:2:0"
                  },
                  "returnParameters": {
                    "id": 209,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 208,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 219,
                        "src": "2845:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 207,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2845:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2844:8:0"
                  },
                  "scope": 1231,
                  "src": "2804:114:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 246,
                    "nodeType": "Block",
                    "src": "2964:166:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 222,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2978:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2982:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "2978:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2991:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2978:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 229,
                        "nodeType": "IfStatement",
                        "src": "2974:42:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 226,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "3001:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 227,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3001:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 228,
                          "nodeType": "RevertStatement",
                          "src": "2994:22:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 237,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 230,
                                "name": "userStates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "3026:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                                  "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                }
                              },
                              "id": 233,
                              "indexExpression": {
                                "expression": {
                                  "id": 231,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3037:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 232,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3041:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3037:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3026:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage",
                                "typeString": "struct HabitTracker.UserState storage ref"
                              }
                            },
                            "id": 234,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3049:14:0",
                            "memberName": "depositBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15,
                            "src": "3026:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 235,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3067:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 236,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3071:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "3067:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3026:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 238,
                        "nodeType": "ExpressionStatement",
                        "src": "3026:50:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 240,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3101:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3105:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3101:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 242,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3113:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 243,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3117:5:0",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3113:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 239,
                            "name": "Deposited",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 67,
                            "src": "3091:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3091:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 245,
                        "nodeType": "EmitStatement",
                        "src": "3086:37:0"
                      }
                    ]
                  },
                  "functionSelector": "d0e30db0",
                  "id": 247,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "2937:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2944:2:0"
                  },
                  "returnParameters": {
                    "id": 221,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2964:0:0"
                  },
                  "scope": 1231,
                  "src": "2928:202:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 294,
                    "nodeType": "Block",
                    "src": "3183:324:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 252,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 249,
                            "src": "3197:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 253,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3207:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3197:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 258,
                        "nodeType": "IfStatement",
                        "src": "3193:39:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 255,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "3217:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 256,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3217:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 257,
                          "nodeType": "RevertStatement",
                          "src": "3210:22:0"
                        }
                      },
                      {
                        "assignments": [
                          261
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 261,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "3260:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 294,
                            "src": "3242:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 260,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 259,
                                "name": "UserState",
                                "nameLocations": [
                                  "3242:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 22,
                                "src": "3242:9:0"
                              },
                              "referencedDeclaration": 22,
                              "src": "3242:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 266,
                        "initialValue": {
                          "baseExpression": {
                            "id": 262,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "3268:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 265,
                          "indexExpression": {
                            "expression": {
                              "id": 263,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3279:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 264,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3283:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3279:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3268:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$22_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3242:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 267,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 261,
                              "src": "3304:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState storage pointer"
                              }
                            },
                            "id": 268,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3310:14:0",
                            "memberName": "depositBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15,
                            "src": "3304:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 269,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 249,
                            "src": "3327:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3304:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 274,
                        "nodeType": "IfStatement",
                        "src": "3300:63:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 271,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "3342:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3342:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 273,
                          "nodeType": "RevertStatement",
                          "src": "3335:28:0"
                        }
                      },
                      {
                        "id": 281,
                        "nodeType": "UncheckedBlock",
                        "src": "3373:45:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 279,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 275,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 261,
                                  "src": "3385:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 277,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "3391:14:0",
                                "memberName": "depositBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 15,
                                "src": "3385:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 278,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 249,
                                "src": "3409:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3385:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 280,
                            "nodeType": "ExpressionStatement",
                            "src": "3385:30:0"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 283,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3437:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 284,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3441:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3437:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 285,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 249,
                              "src": "3449:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 282,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 414,
                            "src": "3427:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3427:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 287,
                        "nodeType": "ExpressionStatement",
                        "src": "3427:29:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 289,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3481:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3485:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3481:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 291,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 249,
                              "src": "3493:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 288,
                            "name": "Withdrawn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 73,
                            "src": "3471:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3471:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 293,
                        "nodeType": "EmitStatement",
                        "src": "3466:34:0"
                      }
                    ]
                  },
                  "functionSelector": "2e1a7d4d",
                  "id": 295,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nameLocation": "3149:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 250,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 249,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3166:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 295,
                        "src": "3158:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 248,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3158:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3157:16:0"
                  },
                  "returnParameters": {
                    "id": 251,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3183:0:0"
                  },
                  "scope": 1231,
                  "src": "3140:367:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 342,
                    "nodeType": "Block",
                    "src": "3557:326:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 300,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "3571:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3581:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3571:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 306,
                        "nodeType": "IfStatement",
                        "src": "3567:39:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 303,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "3591:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 304,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3591:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 305,
                          "nodeType": "RevertStatement",
                          "src": "3584:22:0"
                        }
                      },
                      {
                        "assignments": [
                          309
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 309,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "3634:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 342,
                            "src": "3616:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 308,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 307,
                                "name": "UserState",
                                "nameLocations": [
                                  "3616:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 22,
                                "src": "3616:9:0"
                              },
                              "referencedDeclaration": 22,
                              "src": "3616:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 314,
                        "initialValue": {
                          "baseExpression": {
                            "id": 310,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "3642:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 313,
                          "indexExpression": {
                            "expression": {
                              "id": 311,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3653:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3657:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3653:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3642:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$22_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3616:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 318,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 315,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "3678:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState storage pointer"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3684:16:0",
                            "memberName": "claimableBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 19,
                            "src": "3678:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 317,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "3703:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3678:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 322,
                        "nodeType": "IfStatement",
                        "src": "3674:65:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 319,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "3718:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 320,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3718:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 321,
                          "nodeType": "RevertStatement",
                          "src": "3711:28:0"
                        }
                      },
                      {
                        "id": 329,
                        "nodeType": "UncheckedBlock",
                        "src": "3749:47:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 327,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 323,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 309,
                                  "src": "3761:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 325,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "3767:16:0",
                                "memberName": "claimableBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 19,
                                "src": "3761:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 326,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "3787:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3761:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 328,
                            "nodeType": "ExpressionStatement",
                            "src": "3761:32:0"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 331,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3815:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 332,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3819:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3815:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 333,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "3827:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 330,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 414,
                            "src": "3805:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3805:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 335,
                        "nodeType": "ExpressionStatement",
                        "src": "3805:29:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 337,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3857:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 338,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3861:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3857:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 339,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "3869:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 336,
                            "name": "Claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79,
                            "src": "3849:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3849:27:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 341,
                        "nodeType": "EmitStatement",
                        "src": "3844:32:0"
                      }
                    ]
                  },
                  "functionSelector": "379607f5",
                  "id": 343,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claim",
                  "nameLocation": "3526:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 297,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3540:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 343,
                        "src": "3532:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3532:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3531:16:0"
                  },
                  "returnParameters": {
                    "id": 299,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3557:0:0"
                  },
                  "scope": 1231,
                  "src": "3517:366:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 390,
                    "nodeType": "Block",
                    "src": "3950:368:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 348,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 345,
                            "src": "3964:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 349,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3974:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3964:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 354,
                        "nodeType": "IfStatement",
                        "src": "3960:39:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 351,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 141,
                              "src": "3984:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 352,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3984:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 353,
                          "nodeType": "RevertStatement",
                          "src": "3977:22:0"
                        }
                      },
                      {
                        "assignments": [
                          357
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 357,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "4027:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 390,
                            "src": "4009:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 356,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 355,
                                "name": "UserState",
                                "nameLocations": [
                                  "4009:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 22,
                                "src": "4009:9:0"
                              },
                              "referencedDeclaration": 22,
                              "src": "4009:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 362,
                        "initialValue": {
                          "baseExpression": {
                            "id": 358,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "4035:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 361,
                          "indexExpression": {
                            "expression": {
                              "id": 359,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "4046:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 360,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4050:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4046:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4035:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$22_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4009:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 363,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 357,
                              "src": "4071:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState storage pointer"
                              }
                            },
                            "id": 364,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4077:16:0",
                            "memberName": "claimableBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 19,
                            "src": "4071:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 365,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 345,
                            "src": "4096:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4071:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 370,
                        "nodeType": "IfStatement",
                        "src": "4067:65:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 367,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "4111:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4111:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 369,
                          "nodeType": "RevertStatement",
                          "src": "4104:28:0"
                        }
                      },
                      {
                        "id": 383,
                        "nodeType": "UncheckedBlock",
                        "src": "4142:111:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 375,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 371,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 357,
                                  "src": "4166:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 373,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "4172:16:0",
                                "memberName": "claimableBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 19,
                                "src": "4166:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 374,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 345,
                                "src": "4192:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4166:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 376,
                            "nodeType": "ExpressionStatement",
                            "src": "4166:32:0"
                          },
                          {
                            "expression": {
                              "id": 381,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 377,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 357,
                                  "src": "4212:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 379,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "4218:14:0",
                                "memberName": "depositBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 15,
                                "src": "4212:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "id": 380,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 345,
                                "src": "4236:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4212:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 382,
                            "nodeType": "ExpressionStatement",
                            "src": "4212:30:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 385,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4292:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4296:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4292:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 387,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 345,
                              "src": "4304:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 384,
                            "name": "RedepositedFromClaimable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 85,
                            "src": "4267:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 388,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4267:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 389,
                        "nodeType": "EmitStatement",
                        "src": "4262:49:0"
                      }
                    ]
                  },
                  "functionSelector": "8f23d36c",
                  "id": 391,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "redepositFromClaimable",
                  "nameLocation": "3902:22:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 345,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3933:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 391,
                        "src": "3925:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 344,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3925:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3924:16:0"
                  },
                  "returnParameters": {
                    "id": 347,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3950:0:0"
                  },
                  "scope": 1231,
                  "src": "3893:425:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 413,
                    "nodeType": "Block",
                    "src": "4383:109:0",
                    "statements": [
                      {
                        "assignments": [
                          399,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 399,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "4399:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 413,
                            "src": "4394:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 398,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "4394:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 406,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 404,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4435:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 400,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 393,
                                "src": "4412:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 401,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4415:4:0",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "4412:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 402,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 395,
                                "src": "4427:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "4412:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4412:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4393:45:0"
                      },
                      {
                        "condition": {
                          "id": 408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "4452:8:0",
                          "subExpression": {
                            "id": 407,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 399,
                            "src": "4453:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 412,
                        "nodeType": "IfStatement",
                        "src": "4448:37:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 409,
                              "name": "TransferFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "4469:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 410,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4469:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 411,
                          "nodeType": "RevertStatement",
                          "src": "4462:23:0"
                        }
                      }
                    ]
                  },
                  "id": 414,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "4337:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 396,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 393,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4355:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "4347:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 392,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4347:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 395,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4367:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "4359:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 394,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4359:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4346:28:0"
                  },
                  "returnParameters": {
                    "id": 397,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4383:0:0"
                  },
                  "scope": 1231,
                  "src": "4328:164:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 474,
                    "nodeType": "Block",
                    "src": "4796:509:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 427,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 422,
                            "name": "text",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 417,
                            "src": "4810:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 425,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4826:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 424,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4818:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": {
                                "id": 423,
                                "name": "bytes32",
                                "nodeType": "ElementaryTypeName",
                                "src": "4818:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4818:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "4810:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 431,
                        "nodeType": "IfStatement",
                        "src": "4806:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 428,
                              "name": "HabitTextTooLong",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "4837:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4837:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 430,
                          "nodeType": "RevertStatement",
                          "src": "4830:25:0"
                        }
                      },
                      {
                        "assignments": [
                          433
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 433,
                            "mutability": "mutable",
                            "name": "habitId",
                            "nameLocation": "4881:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 474,
                            "src": "4874:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 432,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "4874:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 439,
                        "initialValue": {
                          "id": 438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "4891:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 434,
                              "name": "userHabitCounters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 52,
                              "src": "4893:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                "typeString": "mapping(address => uint32)"
                              }
                            },
                            "id": 437,
                            "indexExpression": {
                              "expression": {
                                "id": 435,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4911:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 436,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4915:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4911:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4893:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4874:48:0"
                      },
                      {
                        "expression": {
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 440,
                                "name": "habits",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "4941:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                }
                              },
                              "id": 444,
                              "indexExpression": {
                                "expression": {
                                  "id": 441,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "4948:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 442,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4952:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4948:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4941:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                              }
                            },
                            "id": 445,
                            "indexExpression": {
                              "id": 443,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 433,
                              "src": "4960:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4941:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$33_storage",
                              "typeString": "struct HabitTracker.Habit storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 447,
                                "name": "habitId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 433,
                                "src": "4995:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 448,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "5023:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 449,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5027:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "5023:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 450,
                                "name": "text",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 417,
                                "src": "5053:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 451,
                                  "name": "epochNow",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 219,
                                  "src": "5087:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                    "typeString": "function () view returns (uint64)"
                                  }
                                },
                                "id": 452,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5087:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 453,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5121:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "id": 446,
                              "name": "Habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33,
                              "src": "4971:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Habit_$33_storage_ptr_$",
                                "typeString": "type(struct HabitTracker.Habit storage pointer)"
                              }
                            },
                            "id": 454,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "nameLocations": [
                              "4991:2:0",
                              "5016:5:0",
                              "5047:4:0",
                              "5071:14:0",
                              "5111:8:0"
                            ],
                            "names": [
                              "id",
                              "owner",
                              "text",
                              "createdAtEpoch",
                              "archived"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "4971:166:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$33_memory_ptr",
                              "typeString": "struct HabitTracker.Habit memory"
                            }
                          },
                          "src": "4941:196:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$33_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "id": 456,
                        "nodeType": "ExpressionStatement",
                        "src": "4941:196:0"
                      },
                      {
                        "id": 464,
                        "nodeType": "UncheckedBlock",
                        "src": "5156:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 462,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": false,
                              "src": "5168:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 457,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 41,
                                    "src": "5168:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 460,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 458,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "5179:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 459,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5183:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "5179:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5168:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 461,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "5191:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 21,
                                "src": "5168:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 463,
                            "nodeType": "ExpressionStatement",
                            "src": "5168:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 466,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "5248:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 467,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5252:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5248:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 468,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 433,
                              "src": "5260:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 469,
                              "name": "text",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 417,
                              "src": "5269:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 465,
                            "name": "HabitCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 93,
                            "src": "5235:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_bytes32_$returns$__$",
                              "typeString": "function (address,uint32,bytes32)"
                            }
                          },
                          "id": 470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5235:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 471,
                        "nodeType": "EmitStatement",
                        "src": "5230:44:0"
                      },
                      {
                        "expression": {
                          "id": 472,
                          "name": "habitId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 433,
                          "src": "5291:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 421,
                        "id": 473,
                        "nodeType": "Return",
                        "src": "5284:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 415,
                    "nodeType": "StructuredDocumentation",
                    "src": "4567:163:0",
                    "text": " @notice Create a new habit\n @param text Description of the habit (up to 32 bytes)\n @return habitId The ID of the newly created habit"
                  },
                  "functionSelector": "e9714e07",
                  "id": 475,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "createHabit",
                  "nameLocation": "4744:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 418,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 417,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "4764:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 475,
                        "src": "4756:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 416,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4756:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4755:14:0"
                  },
                  "returnParameters": {
                    "id": 421,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 420,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 475,
                        "src": "4788:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 419,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4788:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4787:8:0"
                  },
                  "scope": 1231,
                  "src": "4735:570:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 520,
                    "nodeType": "Block",
                    "src": "5496:270:0",
                    "statements": [
                      {
                        "assignments": [
                          486
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 486,
                            "mutability": "mutable",
                            "name": "habit",
                            "nameLocation": "5520:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 520,
                            "src": "5506:19:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                              "typeString": "struct HabitTracker.Habit"
                            },
                            "typeName": {
                              "id": 485,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 484,
                                "name": "Habit",
                                "nameLocations": [
                                  "5506:5:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 33,
                                "src": "5506:5:0"
                              },
                              "referencedDeclaration": 33,
                              "src": "5506:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                "typeString": "struct HabitTracker.Habit"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 493,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 487,
                              "name": "habits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48,
                              "src": "5528:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                              }
                            },
                            "id": 490,
                            "indexExpression": {
                              "expression": {
                                "id": 488,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "5535:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 489,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5539:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5535:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5528:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                            }
                          },
                          "id": 492,
                          "indexExpression": {
                            "id": 491,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 478,
                            "src": "5547:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5528:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$33_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5506:49:0"
                      },
                      {
                        "condition": {
                          "expression": {
                            "id": 494,
                            "name": "habit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 486,
                            "src": "5569:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                              "typeString": "struct HabitTracker.Habit storage pointer"
                            }
                          },
                          "id": 495,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5575:8:0",
                          "memberName": "archived",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 32,
                          "src": "5569:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 499,
                        "nodeType": "IfStatement",
                        "src": "5565:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 496,
                              "name": "HabitAlreadyArchived",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 149,
                              "src": "5592:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5592:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 498,
                          "nodeType": "RevertStatement",
                          "src": "5585:29:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 504,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 500,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 486,
                              "src": "5624:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 502,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "5630:8:0",
                            "memberName": "archived",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 32,
                            "src": "5624:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5641:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "5624:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 505,
                        "nodeType": "ExpressionStatement",
                        "src": "5624:21:0"
                      },
                      {
                        "id": 513,
                        "nodeType": "UncheckedBlock",
                        "src": "5655:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 511,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "--",
                              "prefix": false,
                              "src": "5667:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 506,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 41,
                                    "src": "5667:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 509,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 507,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "5678:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 508,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5682:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "5678:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5667:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 510,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "5690:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 21,
                                "src": "5667:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 512,
                            "nodeType": "ExpressionStatement",
                            "src": "5667:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 515,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "5739:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 516,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5743:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5739:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 517,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 478,
                              "src": "5751:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 514,
                            "name": "HabitArchived",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 99,
                            "src": "5725:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint32)"
                            }
                          },
                          "id": 518,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5725:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 519,
                        "nodeType": "EmitStatement",
                        "src": "5720:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 476,
                    "nodeType": "StructuredDocumentation",
                    "src": "5315:105:0",
                    "text": " @notice Archive a habit (soft delete)\n @param habitId ID of the habit to archive"
                  },
                  "functionSelector": "b650673a",
                  "id": 521,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 481,
                          "name": "habitId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 478,
                          "src": "5487:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "id": 482,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 480,
                        "name": "onlyHabitOwner",
                        "nameLocations": [
                          "5472:14:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 185,
                        "src": "5472:14:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "5472:23:0"
                    }
                  ],
                  "name": "archiveHabit",
                  "nameLocation": "5434:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 479,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "5454:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 521,
                        "src": "5447:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5447:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5446:16:0"
                  },
                  "returnParameters": {
                    "id": 483,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5496:0:0"
                  },
                  "scope": 1231,
                  "src": "5425:341:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 653,
                    "nodeType": "Block",
                    "src": "6024:1237:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 527,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 524,
                            "src": "6038:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 528,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "6047:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6047:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "6038:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 534,
                        "nodeType": "IfStatement",
                        "src": "6034:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 531,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "6066:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 532,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6066:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 533,
                          "nodeType": "RevertStatement",
                          "src": "6059:21:0"
                        }
                      },
                      {
                        "assignments": [
                          537
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 537,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "6117:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 653,
                            "src": "6099:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 536,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 535,
                                "name": "UserState",
                                "nameLocations": [
                                  "6099:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 22,
                                "src": "6099:9:0"
                              },
                              "referencedDeclaration": 22,
                              "src": "6099:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 542,
                        "initialValue": {
                          "baseExpression": {
                            "id": 538,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "6125:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 541,
                          "indexExpression": {
                            "expression": {
                              "id": 539,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "6136:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 540,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6140:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6136:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6125:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$22_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6099:48:0"
                      },
                      {
                        "assignments": [
                          544
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 544,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "6164:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 653,
                            "src": "6157:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 543,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6157:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 549,
                        "initialValue": {
                          "baseExpression": {
                            "id": 545,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "6172:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 548,
                          "indexExpression": {
                            "expression": {
                              "id": 546,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "6190:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6194:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6190:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6172:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6157:44:0"
                      },
                      {
                        "assignments": [
                          551
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 551,
                            "mutability": "mutable",
                            "name": "fundedCount",
                            "nameLocation": "6218:11:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 653,
                            "src": "6211:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 550,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6211:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 552,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6211:18:0"
                      },
                      {
                        "assignments": [
                          554
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 554,
                            "mutability": "mutable",
                            "name": "insufficientCount",
                            "nameLocation": "6246:17:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 653,
                            "src": "6239:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 553,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6239:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 555,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6239:24:0"
                      },
                      {
                        "body": {
                          "id": 643,
                          "nodeType": "Block",
                          "src": "6314:855:0",
                          "statements": [
                            {
                              "assignments": [
                                565
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 565,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "6342:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 643,
                                  "src": "6328:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 564,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 563,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "6328:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 33,
                                      "src": "6328:5:0"
                                    },
                                    "referencedDeclaration": 33,
                                    "src": "6328:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 572,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 566,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 48,
                                    "src": "6350:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 569,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 567,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "6357:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 568,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6361:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "6357:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6350:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 571,
                                "indexExpression": {
                                  "id": 570,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 557,
                                  "src": "6369:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6350:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$33_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6328:43:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 575,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "6402:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 573,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 565,
                                      "src": "6403:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 574,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6409:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 32,
                                    "src": "6403:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 582,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 576,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 565,
                                      "src": "6421:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 577,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6427:5:0",
                                    "memberName": "owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "6421:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 580,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6444:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 579,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "6436:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 578,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "6436:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 581,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6436:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "6421:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "6402:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 638,
                              "nodeType": "IfStatement",
                              "src": "6398:730:0",
                              "trueBody": {
                                "id": 637,
                                "nodeType": "Block",
                                "src": "6448:680:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      586
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 586,
                                        "mutability": "mutable",
                                        "name": "status",
                                        "nameLocation": "6486:6:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 637,
                                        "src": "6466:26:0",
                                        "stateVariable": false,
                                        "storageLocation": "storage",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                          "typeString": "struct HabitTracker.DailyStatus"
                                        },
                                        "typeName": {
                                          "id": 585,
                                          "nodeType": "UserDefinedTypeName",
                                          "pathNode": {
                                            "id": 584,
                                            "name": "DailyStatus",
                                            "nameLocations": [
                                              "6466:11:0"
                                            ],
                                            "nodeType": "IdentifierPath",
                                            "referencedDeclaration": 36,
                                            "src": "6466:11:0"
                                          },
                                          "referencedDeclaration": 36,
                                          "src": "6466:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                            "typeString": "struct HabitTracker.DailyStatus"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 595,
                                    "initialValue": {
                                      "baseExpression": {
                                        "baseExpression": {
                                          "baseExpression": {
                                            "id": 587,
                                            "name": "dailyStatuses",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 61,
                                            "src": "6495:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                              "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                            }
                                          },
                                          "id": 590,
                                          "indexExpression": {
                                            "expression": {
                                              "id": 588,
                                              "name": "msg",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4294967281,
                                              "src": "6509:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_message",
                                                "typeString": "msg"
                                              }
                                            },
                                            "id": 589,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "6513:6:0",
                                            "memberName": "sender",
                                            "nodeType": "MemberAccess",
                                            "src": "6509:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "6495:25:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                            "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                                          }
                                        },
                                        "id": 592,
                                        "indexExpression": {
                                          "id": 591,
                                          "name": "epoch",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 524,
                                          "src": "6521:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "6495:32:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                                          "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                                        }
                                      },
                                      "id": 594,
                                      "indexExpression": {
                                        "id": 593,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 557,
                                        "src": "6528:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "6495:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                                        "typeString": "struct HabitTracker.DailyStatus storage ref"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "6466:64:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      },
                                      "id": 601,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        },
                                        "id": 599,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "expression": {
                                            "id": 596,
                                            "name": "status",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 586,
                                            "src": "6569:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                              "typeString": "struct HabitTracker.DailyStatus storage pointer"
                                            }
                                          },
                                          "id": 597,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "6576:5:0",
                                          "memberName": "flags",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 35,
                                          "src": "6569:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "hexValue": "31",
                                          "id": 598,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "6584:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1_by_1",
                                            "typeString": "int_const 1"
                                          },
                                          "value": "1"
                                        },
                                        "src": "6569:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 600,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6589:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "6569:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 636,
                                    "nodeType": "IfStatement",
                                    "src": "6565:549:0",
                                    "trueBody": {
                                      "id": 635,
                                      "nodeType": "Block",
                                      "src": "6592:522:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 605,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 602,
                                                "name": "state",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 537,
                                                "src": "6646:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                                  "typeString": "struct HabitTracker.UserState storage pointer"
                                                }
                                              },
                                              "id": 603,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "6652:14:0",
                                              "memberName": "depositBalance",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 15,
                                              "src": "6646:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">=",
                                            "rightExpression": {
                                              "id": 604,
                                              "name": "STAKE_PER_DAY",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 5,
                                              "src": "6670:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "6646:37:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 633,
                                            "nodeType": "Block",
                                            "src": "7014:82:0",
                                            "statements": [
                                              {
                                                "id": 632,
                                                "nodeType": "UncheckedBlock",
                                                "src": "7040:34:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 630,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "7052:19:0",
                                                      "subExpression": {
                                                        "id": 629,
                                                        "name": "insufficientCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 554,
                                                        "src": "7052:17:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 631,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "7052:19:0"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          "id": 634,
                                          "nodeType": "IfStatement",
                                          "src": "6642:454:0",
                                          "trueBody": {
                                            "id": 628,
                                            "nodeType": "Block",
                                            "src": "6685:323:0",
                                            "statements": [
                                              {
                                                "id": 621,
                                                "nodeType": "UncheckedBlock",
                                                "src": "6711:214:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 610,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 606,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 537,
                                                          "src": "6751:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 608,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "6757:14:0",
                                                        "memberName": "depositBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 15,
                                                        "src": "6751:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "-=",
                                                      "rightHandSide": {
                                                        "id": 609,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 5,
                                                        "src": "6775:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "6751:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 611,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "6751:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 616,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 612,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 537,
                                                          "src": "6818:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 614,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "6824:14:0",
                                                        "memberName": "blockedBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 17,
                                                        "src": "6818:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "+=",
                                                      "rightHandSide": {
                                                        "id": 615,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 5,
                                                        "src": "6842:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "6818:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 617,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "6818:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 619,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "6885:13:0",
                                                      "subExpression": {
                                                        "id": 618,
                                                        "name": "fundedCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 551,
                                                        "src": "6885:11:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 620,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "6885:13:0"
                                                  }
                                                ]
                                              },
                                              {
                                                "expression": {
                                                  "id": 626,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "expression": {
                                                      "id": 622,
                                                      "name": "status",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 586,
                                                      "src": "6950:6:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                                        "typeString": "struct HabitTracker.DailyStatus storage pointer"
                                                      }
                                                    },
                                                    "id": 624,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": true,
                                                    "memberLocation": "6957:5:0",
                                                    "memberName": "flags",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 35,
                                                    "src": "6950:12:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint8",
                                                      "typeString": "uint8"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "|=",
                                                  "rightHandSide": {
                                                    "hexValue": "31",
                                                    "id": 625,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "6966:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_1_by_1",
                                                      "typeString": "int_const 1"
                                                    },
                                                    "value": "1"
                                                  },
                                                  "src": "6950:17:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint8",
                                                    "typeString": "uint8"
                                                  }
                                                },
                                                "id": 627,
                                                "nodeType": "ExpressionStatement",
                                                "src": "6950:17:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "id": 642,
                              "nodeType": "UncheckedBlock",
                              "src": "7141:18:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 640,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "7153:3:0",
                                    "subExpression": {
                                      "id": 639,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 557,
                                      "src": "7153:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 641,
                                  "nodeType": "ExpressionStatement",
                                  "src": "7153:3:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 560,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 557,
                            "src": "6301:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 561,
                            "name": "count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 544,
                            "src": "6306:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "6301:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 644,
                        "initializationExpression": {
                          "assignments": [
                            557
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 557,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "6294:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 644,
                              "src": "6287:8:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 556,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "6287:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 559,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6298:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "6287:12:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "6282:887:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 646,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7204:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 647,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7208:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7204:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 648,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 524,
                              "src": "7216:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 649,
                              "name": "fundedCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 551,
                              "src": "7223:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 650,
                              "name": "insufficientCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 554,
                              "src": "7236:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 645,
                            "name": "DayPrepared",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 109,
                            "src": "7192:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint64_$_t_uint32_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32,uint32)"
                            }
                          },
                          "id": 651,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7192:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 652,
                        "nodeType": "EmitStatement",
                        "src": "7187:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 522,
                    "nodeType": "StructuredDocumentation",
                    "src": "5836:140:0",
                    "text": " @notice Prepare the day by locking funds for active habits\n @param epoch The epoch to prepare (must be current day)"
                  },
                  "functionSelector": "48cc36b8",
                  "id": 654,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "prepareDay",
                  "nameLocation": "5990:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 525,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 524,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "6008:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 654,
                        "src": "6001:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 523,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "6001:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6000:14:0"
                  },
                  "returnParameters": {
                    "id": 526,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6024:0:0"
                  },
                  "scope": 1231,
                  "src": "5981:1280:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 729,
                    "nodeType": "Block",
                    "src": "7524:494:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 665,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 659,
                            "src": "7538:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 666,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "7547:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7547:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "7538:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 672,
                        "nodeType": "IfStatement",
                        "src": "7534:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 669,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "7566:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7566:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 671,
                          "nodeType": "RevertStatement",
                          "src": "7559:21:0"
                        }
                      },
                      {
                        "condition": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 673,
                                "name": "habits",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "7594:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                }
                              },
                              "id": 676,
                              "indexExpression": {
                                "expression": {
                                  "id": 674,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "7601:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 675,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7605:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "7601:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7594:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                              }
                            },
                            "id": 678,
                            "indexExpression": {
                              "id": 677,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 657,
                              "src": "7613:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7594:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$33_storage",
                              "typeString": "struct HabitTracker.Habit storage ref"
                            }
                          },
                          "id": 679,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7622:8:0",
                          "memberName": "archived",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 32,
                          "src": "7594:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 683,
                        "nodeType": "IfStatement",
                        "src": "7590:64:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 680,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 145,
                              "src": "7639:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 681,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7639:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 682,
                          "nodeType": "RevertStatement",
                          "src": "7632:22:0"
                        }
                      },
                      {
                        "assignments": [
                          686
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 686,
                            "mutability": "mutable",
                            "name": "status",
                            "nameLocation": "7693:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 729,
                            "src": "7673:26:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                              "typeString": "struct HabitTracker.DailyStatus"
                            },
                            "typeName": {
                              "id": 685,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 684,
                                "name": "DailyStatus",
                                "nameLocations": [
                                  "7673:11:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 36,
                                "src": "7673:11:0"
                              },
                              "referencedDeclaration": 36,
                              "src": "7673:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                "typeString": "struct HabitTracker.DailyStatus"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 695,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 687,
                                "name": "dailyStatuses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61,
                                "src": "7702:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                }
                              },
                              "id": 690,
                              "indexExpression": {
                                "expression": {
                                  "id": 688,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "7716:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 689,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7720:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "7716:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7702:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                              }
                            },
                            "id": 692,
                            "indexExpression": {
                              "id": 691,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 659,
                              "src": "7728:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7702:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                            }
                          },
                          "id": 694,
                          "indexExpression": {
                            "id": 693,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 657,
                            "src": "7735:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7702:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                            "typeString": "struct HabitTracker.DailyStatus storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7673:70:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 699,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 696,
                                "name": "status",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 686,
                                "src": "7757:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                  "typeString": "struct HabitTracker.DailyStatus storage pointer"
                                }
                              },
                              "id": 697,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7764:5:0",
                              "memberName": "flags",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 35,
                              "src": "7757:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 698,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7772:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "7757:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 700,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7777:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "7757:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 705,
                        "nodeType": "IfStatement",
                        "src": "7753:48:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 702,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "7787:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7787:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 704,
                          "nodeType": "RevertStatement",
                          "src": "7780:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 711,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 709,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 706,
                                "name": "status",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 686,
                                "src": "7835:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                  "typeString": "struct HabitTracker.DailyStatus storage pointer"
                                }
                              },
                              "id": 707,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7842:5:0",
                              "memberName": "flags",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 35,
                              "src": "7835:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "32",
                              "id": 708,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7850:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "7835:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 710,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7855:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "7835:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 715,
                        "nodeType": "IfStatement",
                        "src": "7831:52:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 712,
                              "name": "AlreadyCheckedIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 155,
                              "src": "7865:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 713,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7865:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 714,
                          "nodeType": "RevertStatement",
                          "src": "7858:25:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 716,
                              "name": "status",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "7923:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                "typeString": "struct HabitTracker.DailyStatus storage pointer"
                              }
                            },
                            "id": 718,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "7930:5:0",
                            "memberName": "flags",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35,
                            "src": "7923:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "|=",
                          "rightHandSide": {
                            "hexValue": "32",
                            "id": 719,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7939:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "7923:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "id": 721,
                        "nodeType": "ExpressionStatement",
                        "src": "7923:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 723,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7984:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7988:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7984:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 725,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 657,
                              "src": "7996:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 726,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 659,
                              "src": "8005:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "id": 722,
                            "name": "CheckedIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 117,
                            "src": "7974:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$returns$__$",
                              "typeString": "function (address,uint32,uint64)"
                            }
                          },
                          "id": 727,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7974:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 728,
                        "nodeType": "EmitStatement",
                        "src": "7969:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 655,
                    "nodeType": "StructuredDocumentation",
                    "src": "7271:168:0",
                    "text": " @notice Check in to a habit for the current day\n @param habitId ID of the habit\n @param epoch The epoch to check in (must be current day)"
                  },
                  "functionSelector": "a0145927",
                  "id": 730,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 662,
                          "name": "habitId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 657,
                          "src": "7515:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "id": 663,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 661,
                        "name": "onlyHabitOwner",
                        "nameLocations": [
                          "7500:14:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 185,
                        "src": "7500:14:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7500:23:0"
                    }
                  ],
                  "name": "checkIn",
                  "nameLocation": "7453:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 660,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 657,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "7468:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 730,
                        "src": "7461:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 656,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "7461:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 659,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "7484:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 730,
                        "src": "7477:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 658,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "7477:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7460:30:0"
                  },
                  "returnParameters": {
                    "id": 664,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7524:0:0"
                  },
                  "scope": 1231,
                  "src": "7444:574:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 754,
                    "nodeType": "Block",
                    "src": "8314:120:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 740,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 735,
                            "src": "8328:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 741,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "8337:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 742,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8337:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "8328:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 747,
                        "nodeType": "IfStatement",
                        "src": "8324:56:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 744,
                              "name": "CannotSettleCurrentDay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "8356:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 745,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8356:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 746,
                          "nodeType": "RevertStatement",
                          "src": "8349:31:0"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 749,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 733,
                              "src": "8406:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 750,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 735,
                              "src": "8412:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 751,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 737,
                              "src": "8419:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 748,
                            "name": "_settleInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 871,
                            "src": "8390:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32)"
                            }
                          },
                          "id": 752,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8390:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 753,
                        "nodeType": "ExpressionStatement",
                        "src": "8390:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 731,
                    "nodeType": "StructuredDocumentation",
                    "src": "8028:214:0",
                    "text": " @notice Settle a specific habit for a past day\n @param user Address of habit owner\n @param epoch The epoch to settle (must be past day)\n @param habitId ID of the habit to settle"
                  },
                  "functionSelector": "9c14eb6e",
                  "id": 755,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "settle",
                  "nameLocation": "8256:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 738,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 733,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "8271:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "8263:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 732,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8263:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 735,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "8284:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "8277:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 734,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "8277:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 737,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "8298:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "8291:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 736,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8291:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8262:44:0"
                  },
                  "returnParameters": {
                    "id": 739,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8314:0:0"
                  },
                  "scope": 1231,
                  "src": "8247:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 870,
                    "nodeType": "Block",
                    "src": "8733:792:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 765,
                                  "name": "habits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "8747:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                  }
                                },
                                "id": 767,
                                "indexExpression": {
                                  "id": 766,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 758,
                                  "src": "8754:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8747:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                  "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                }
                              },
                              "id": 769,
                              "indexExpression": {
                                "id": 768,
                                "name": "habitId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 762,
                                "src": "8760:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8747:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$33_storage",
                                "typeString": "struct HabitTracker.Habit storage ref"
                              }
                            },
                            "id": 770,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8769:5:0",
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "8747:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 773,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8786:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 772,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8778:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 771,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8778:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 774,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8778:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "8747:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 779,
                        "nodeType": "IfStatement",
                        "src": "8743:69:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 776,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 145,
                              "src": "8797:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 777,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8797:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 778,
                          "nodeType": "RevertStatement",
                          "src": "8790:22:0"
                        }
                      },
                      {
                        "assignments": [
                          782
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 782,
                            "mutability": "mutable",
                            "name": "status",
                            "nameLocation": "8851:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 870,
                            "src": "8831:26:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                              "typeString": "struct HabitTracker.DailyStatus"
                            },
                            "typeName": {
                              "id": 781,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 780,
                                "name": "DailyStatus",
                                "nameLocations": [
                                  "8831:11:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 36,
                                "src": "8831:11:0"
                              },
                              "referencedDeclaration": 36,
                              "src": "8831:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                "typeString": "struct HabitTracker.DailyStatus"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 790,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 783,
                                "name": "dailyStatuses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61,
                                "src": "8860:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                }
                              },
                              "id": 785,
                              "indexExpression": {
                                "id": 784,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 758,
                                "src": "8874:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8860:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                              }
                            },
                            "id": 787,
                            "indexExpression": {
                              "id": 786,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 760,
                              "src": "8880:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8860:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                            }
                          },
                          "id": 789,
                          "indexExpression": {
                            "id": 788,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 762,
                            "src": "8887:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8860:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                            "typeString": "struct HabitTracker.DailyStatus storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8831:64:0"
                      },
                      {
                        "assignments": [
                          792
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 792,
                            "mutability": "mutable",
                            "name": "flags",
                            "nameLocation": "8911:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 870,
                            "src": "8905:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 791,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "8905:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 795,
                        "initialValue": {
                          "expression": {
                            "id": 793,
                            "name": "status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 782,
                            "src": "8919:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                              "typeString": "struct HabitTracker.DailyStatus storage pointer"
                            }
                          },
                          "id": 794,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8926:5:0",
                          "memberName": "flags",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 35,
                          "src": "8919:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8905:26:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 800,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 798,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 796,
                              "name": "flags",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 792,
                              "src": "8945:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8953:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "8945:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 799,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8958:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "8945:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 804,
                        "nodeType": "IfStatement",
                        "src": "8941:41:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 801,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "8968:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 802,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8968:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 803,
                          "nodeType": "RevertStatement",
                          "src": "8961:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 807,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 805,
                              "name": "flags",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 792,
                              "src": "8996:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "34",
                              "id": 806,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9004:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "src": "8996:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9009:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "8996:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 813,
                        "nodeType": "IfStatement",
                        "src": "8992:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 810,
                              "name": "AlreadySettled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 157,
                              "src": "9019:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 811,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9019:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 812,
                          "nodeType": "RevertStatement",
                          "src": "9012:23:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 820,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 814,
                              "name": "status",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 782,
                              "src": "9054:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DailyStatus_$36_storage_ptr",
                                "typeString": "struct HabitTracker.DailyStatus storage pointer"
                              }
                            },
                            "id": 816,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "9061:5:0",
                            "memberName": "flags",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35,
                            "src": "9054:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 819,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 817,
                              "name": "flags",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 792,
                              "src": "9069:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "|",
                            "rightExpression": {
                              "hexValue": "34",
                              "id": 818,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9077:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "src": "9069:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "9054:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "id": 821,
                        "nodeType": "ExpressionStatement",
                        "src": "9054:24:0"
                      },
                      {
                        "assignments": [
                          824
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 824,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "9106:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 870,
                            "src": "9088:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 823,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 822,
                                "name": "UserState",
                                "nameLocations": [
                                  "9088:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 22,
                                "src": "9088:9:0"
                              },
                              "referencedDeclaration": 22,
                              "src": "9088:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 828,
                        "initialValue": {
                          "baseExpression": {
                            "id": 825,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "9114:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$22_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 827,
                          "indexExpression": {
                            "id": 826,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 758,
                            "src": "9125:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9114:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$22_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9088:42:0"
                      },
                      {
                        "id": 835,
                        "nodeType": "UncheckedBlock",
                        "src": "9149:52:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 833,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 829,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 824,
                                  "src": "9161:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 831,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "9167:14:0",
                                "memberName": "blockedBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 17,
                                "src": "9161:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 832,
                                "name": "STAKE_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "9185:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9161:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 834,
                            "nodeType": "ExpressionStatement",
                            "src": "9161:37:0"
                          }
                        ]
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 840,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 838,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 836,
                              "name": "flags",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 792,
                              "src": "9223:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "32",
                              "id": 837,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9231:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "9223:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 839,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9236:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "9223:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 868,
                          "nodeType": "Block",
                          "src": "9393:126:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 857,
                                    "name": "treasury",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 13,
                                    "src": "9417:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 858,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5,
                                    "src": "9427:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 856,
                                  "name": "_transfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 414,
                                  "src": "9407:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 859,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9407:34:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 860,
                              "nodeType": "ExpressionStatement",
                              "src": "9407:34:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 862,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 758,
                                    "src": "9472:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 863,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 762,
                                    "src": "9478:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 864,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 760,
                                    "src": "9487:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 865,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5,
                                    "src": "9494:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 861,
                                  "name": "SettledFail",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 137,
                                  "src": "9460:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9460:48:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 867,
                              "nodeType": "EmitStatement",
                              "src": "9455:53:0"
                            }
                          ]
                        },
                        "id": 869,
                        "nodeType": "IfStatement",
                        "src": "9219:300:0",
                        "trueBody": {
                          "id": 855,
                          "nodeType": "Block",
                          "src": "9239:148:0",
                          "statements": [
                            {
                              "id": 847,
                              "nodeType": "UncheckedBlock",
                              "src": "9253:54:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 845,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 841,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 824,
                                        "src": "9265:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$22_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 843,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "9271:16:0",
                                      "memberName": "claimableBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 19,
                                      "src": "9265:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 844,
                                      "name": "STAKE_PER_DAY",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5,
                                      "src": "9291:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "9265:39:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 846,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9265:39:0"
                                }
                              ]
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 849,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 758,
                                    "src": "9340:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 850,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 762,
                                    "src": "9346:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 851,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 760,
                                    "src": "9355:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 852,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5,
                                    "src": "9362:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 848,
                                  "name": "SettledSuccess",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 127,
                                  "src": "9325:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 853,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9325:51:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 854,
                              "nodeType": "EmitStatement",
                              "src": "9320:56:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 756,
                    "nodeType": "StructuredDocumentation",
                    "src": "8444:207:0",
                    "text": " @notice Internal settlement logic without epoch validation\n @param user Address of habit owner\n @param epoch The epoch to settle\n @param habitId ID of the habit to settle"
                  },
                  "id": 871,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_settleInternal",
                  "nameLocation": "8665:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 758,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "8689:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 871,
                        "src": "8681:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 757,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8681:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 760,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "8702:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 871,
                        "src": "8695:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 759,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "8695:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 762,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "8716:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 871,
                        "src": "8709:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 761,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8709:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8680:44:0"
                  },
                  "returnParameters": {
                    "id": 764,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8733:0:0"
                  },
                  "scope": 1231,
                  "src": "8656:869:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 984,
                    "nodeType": "Block",
                    "src": "9881:725:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 884,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 881,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 876,
                            "src": "9895:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 882,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "9904:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 883,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9904:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "9895:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 888,
                        "nodeType": "IfStatement",
                        "src": "9891:56:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 885,
                              "name": "CannotSettleCurrentDay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "9923:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 886,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9923:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 887,
                          "nodeType": "RevertStatement",
                          "src": "9916:31:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 895,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 891,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 889,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 878,
                              "src": "9961:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9973:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "9961:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 894,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 892,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 878,
                              "src": "9978:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 893,
                              "name": "MAX_SETTLE_BATCH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11,
                              "src": "9989:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "9978:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9961:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 899,
                        "nodeType": "IfStatement",
                        "src": "9957:75:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 896,
                              "name": "InvalidBatchSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "10014:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10014:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 898,
                          "nodeType": "RevertStatement",
                          "src": "10007:25:0"
                        }
                      },
                      {
                        "assignments": [
                          901
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 901,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "10058:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 984,
                            "src": "10051:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 900,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "10051:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 905,
                        "initialValue": {
                          "baseExpression": {
                            "id": 902,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "10066:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 904,
                          "indexExpression": {
                            "id": 903,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 874,
                            "src": "10084:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10066:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10051:38:0"
                      },
                      {
                        "assignments": [
                          907
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 907,
                            "mutability": "mutable",
                            "name": "settled",
                            "nameLocation": "10106:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 984,
                            "src": "10099:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 906,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "10099:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 908,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10099:14:0"
                      },
                      {
                        "body": {
                          "id": 982,
                          "nodeType": "Block",
                          "src": "10186:414:0",
                          "statements": [
                            {
                              "assignments": [
                                922
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 922,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "10214:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 982,
                                  "src": "10200:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 921,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 920,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "10200:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 33,
                                      "src": "10200:5:0"
                                    },
                                    "referencedDeclaration": 33,
                                    "src": "10200:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 928,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 923,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 48,
                                    "src": "10222:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 925,
                                  "indexExpression": {
                                    "id": 924,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 874,
                                    "src": "10229:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "10222:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 927,
                                "indexExpression": {
                                  "id": 926,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 910,
                                  "src": "10235:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10222:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$33_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "10200:37:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 939,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 935,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 929,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 922,
                                      "src": "10255:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 930,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "10261:5:0",
                                    "memberName": "owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "10255:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 933,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10278:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 932,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "10270:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 931,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "10270:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 934,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "10270:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "10255:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "id": 938,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "10284:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 936,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 922,
                                      "src": "10285:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 937,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "10291:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 32,
                                    "src": "10285:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "10255:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 977,
                              "nodeType": "IfStatement",
                              "src": "10251:308:0",
                              "trueBody": {
                                "id": 976,
                                "nodeType": "Block",
                                "src": "10301:258:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      941
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 941,
                                        "mutability": "mutable",
                                        "name": "flags",
                                        "nameLocation": "10325:5:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 976,
                                        "src": "10319:11:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        },
                                        "typeName": {
                                          "id": 940,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "10319:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 950,
                                    "initialValue": {
                                      "expression": {
                                        "baseExpression": {
                                          "baseExpression": {
                                            "baseExpression": {
                                              "id": 942,
                                              "name": "dailyStatuses",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 61,
                                              "src": "10333:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                                "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                              }
                                            },
                                            "id": 944,
                                            "indexExpression": {
                                              "id": 943,
                                              "name": "user",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 874,
                                              "src": "10347:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "10333:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                              "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                                            }
                                          },
                                          "id": 946,
                                          "indexExpression": {
                                            "id": 945,
                                            "name": "epoch",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 876,
                                            "src": "10353:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint64",
                                              "typeString": "uint64"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "10333:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                                            "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                                          }
                                        },
                                        "id": 948,
                                        "indexExpression": {
                                          "id": 947,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 910,
                                          "src": "10360:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint32",
                                            "typeString": "uint32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "10333:29:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                                          "typeString": "struct HabitTracker.DailyStatus storage ref"
                                        }
                                      },
                                      "id": 949,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "10363:5:0",
                                      "memberName": "flags",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 35,
                                      "src": "10333:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "10319:49:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 963,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            },
                                            "id": 955,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 953,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 951,
                                                "name": "flags",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 941,
                                                "src": "10391:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "&",
                                              "rightExpression": {
                                                "hexValue": "31",
                                                "id": 952,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "10399:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_1_by_1",
                                                  "typeString": "int_const 1"
                                                },
                                                "value": "1"
                                              },
                                              "src": "10391:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "!=",
                                            "rightExpression": {
                                              "hexValue": "30",
                                              "id": 954,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "10404:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "10391:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          }
                                        ],
                                        "id": 956,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "10390:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            },
                                            "id": 961,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 959,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 957,
                                                "name": "flags",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 941,
                                                "src": "10411:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "&",
                                              "rightExpression": {
                                                "hexValue": "34",
                                                "id": 958,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "10419:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_4_by_1",
                                                  "typeString": "int_const 4"
                                                },
                                                "value": "4"
                                              },
                                              "src": "10411:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "hexValue": "30",
                                              "id": 960,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "10424:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "10411:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          }
                                        ],
                                        "id": 962,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "10410:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "10390:36:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 975,
                                    "nodeType": "IfStatement",
                                    "src": "10386:159:0",
                                    "trueBody": {
                                      "id": 974,
                                      "nodeType": "Block",
                                      "src": "10428:117:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 965,
                                                "name": "user",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 874,
                                                "src": "10466:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "id": 966,
                                                "name": "epoch",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 876,
                                                "src": "10472:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                }
                                              },
                                              {
                                                "id": 967,
                                                "name": "i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 910,
                                                "src": "10479:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              ],
                                              "id": 964,
                                              "name": "_settleInternal",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 871,
                                              "src": "10450:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                                                "typeString": "function (address,uint64,uint32)"
                                              }
                                            },
                                            "id": 968,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "10450:31:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 969,
                                          "nodeType": "ExpressionStatement",
                                          "src": "10450:31:0"
                                        },
                                        {
                                          "id": 973,
                                          "nodeType": "UncheckedBlock",
                                          "src": "10503:24:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "id": 971,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "UnaryOperation",
                                                "operator": "++",
                                                "prefix": false,
                                                "src": "10515:9:0",
                                                "subExpression": {
                                                  "id": 970,
                                                  "name": "settled",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 907,
                                                  "src": "10515:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint32",
                                                    "typeString": "uint32"
                                                  }
                                                },
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              },
                                              "id": 972,
                                              "nodeType": "ExpressionStatement",
                                              "src": "10515:9:0"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "id": 981,
                              "nodeType": "UncheckedBlock",
                              "src": "10572:18:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 979,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "10584:3:0",
                                    "subExpression": {
                                      "id": 978,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 910,
                                      "src": "10584:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 980,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10584:3:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 919,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 915,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 913,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 910,
                              "src": "10151:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "id": 914,
                              "name": "count",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 901,
                              "src": "10156:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "10151:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 918,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 916,
                              "name": "settled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 907,
                              "src": "10165:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 917,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 878,
                              "src": "10175:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "10165:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "10151:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 983,
                        "initializationExpression": {
                          "assignments": [
                            910
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 910,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "10144:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 983,
                              "src": "10137:8:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 909,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "10137:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 912,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10148:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "10137:12:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "10132:468:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 872,
                    "nodeType": "StructuredDocumentation",
                    "src": "9535:268:0",
                    "text": " @notice Settle all funded habits for a user for a specific past day\n @param user Address of habit owner\n @param epoch The epoch to settle (must be past day)\n @param maxCount Maximum number of habits to settle (gas limit protection)"
                  },
                  "functionSelector": "45123cce",
                  "id": 985,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "settleAll",
                  "nameLocation": "9817:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 879,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 874,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "9835:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 985,
                        "src": "9827:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 873,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9827:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 876,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "9848:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 985,
                        "src": "9841:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 875,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "9841:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 878,
                        "mutability": "mutable",
                        "name": "maxCount",
                        "nameLocation": "9862:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 985,
                        "src": "9855:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 877,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9855:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9826:45:0"
                  },
                  "returnParameters": {
                    "id": 880,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9881:0:0"
                  },
                  "scope": 1231,
                  "src": "9808:798:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1090,
                    "nodeType": "Block",
                    "src": "11075:659:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 997,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 995,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 992,
                              "src": "11089:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 996,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11101:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "11089:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1000,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 998,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 992,
                              "src": "11106:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 999,
                              "name": "MAX_SETTLE_BATCH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11,
                              "src": "11117:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "11106:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11089:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1005,
                        "nodeType": "IfStatement",
                        "src": "11085:75:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1002,
                              "name": "InvalidBatchSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "11142:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1003,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11142:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1004,
                          "nodeType": "RevertStatement",
                          "src": "11135:25:0"
                        }
                      },
                      {
                        "assignments": [
                          1007
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1007,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "11186:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1090,
                            "src": "11179:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 1006,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "11179:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1011,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1008,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "11194:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 1010,
                          "indexExpression": {
                            "id": 1009,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 988,
                            "src": "11212:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11194:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11179:38:0"
                      },
                      {
                        "assignments": [
                          1013
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1013,
                            "mutability": "mutable",
                            "name": "settled",
                            "nameLocation": "11234:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1090,
                            "src": "11227:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 1012,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "11227:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1014,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11227:14:0"
                      },
                      {
                        "body": {
                          "id": 1088,
                          "nodeType": "Block",
                          "src": "11314:414:0",
                          "statements": [
                            {
                              "assignments": [
                                1028
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1028,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "11342:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1088,
                                  "src": "11328:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 1027,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1026,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "11328:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 33,
                                      "src": "11328:5:0"
                                    },
                                    "referencedDeclaration": 33,
                                    "src": "11328:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1034,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1029,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 48,
                                    "src": "11350:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 1031,
                                  "indexExpression": {
                                    "id": 1030,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 988,
                                    "src": "11357:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "11350:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 1033,
                                "indexExpression": {
                                  "id": 1032,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1016,
                                  "src": "11363:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11350:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$33_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "11328:37:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 1045,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 1041,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1035,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1028,
                                      "src": "11383:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 1036,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "11389:5:0",
                                    "memberName": "owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "11383:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 1039,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "11406:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 1038,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "11398:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1037,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "11398:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1040,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "11398:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "11383:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "id": 1044,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "11412:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 1042,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1028,
                                      "src": "11413:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 1043,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "11419:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 32,
                                    "src": "11413:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "11383:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1083,
                              "nodeType": "IfStatement",
                              "src": "11379:308:0",
                              "trueBody": {
                                "id": 1082,
                                "nodeType": "Block",
                                "src": "11429:258:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      1047
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1047,
                                        "mutability": "mutable",
                                        "name": "flags",
                                        "nameLocation": "11453:5:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1082,
                                        "src": "11447:11:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        },
                                        "typeName": {
                                          "id": 1046,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "11447:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1056,
                                    "initialValue": {
                                      "expression": {
                                        "baseExpression": {
                                          "baseExpression": {
                                            "baseExpression": {
                                              "id": 1048,
                                              "name": "dailyStatuses",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 61,
                                              "src": "11461:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                                "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                              }
                                            },
                                            "id": 1050,
                                            "indexExpression": {
                                              "id": 1049,
                                              "name": "user",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 988,
                                              "src": "11475:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "11461:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                              "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                                            }
                                          },
                                          "id": 1052,
                                          "indexExpression": {
                                            "id": 1051,
                                            "name": "epoch",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 990,
                                            "src": "11481:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint64",
                                              "typeString": "uint64"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "11461:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                                            "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                                          }
                                        },
                                        "id": 1054,
                                        "indexExpression": {
                                          "id": 1053,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1016,
                                          "src": "11488:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint32",
                                            "typeString": "uint32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "11461:29:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                                          "typeString": "struct HabitTracker.DailyStatus storage ref"
                                        }
                                      },
                                      "id": 1055,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "11491:5:0",
                                      "memberName": "flags",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 35,
                                      "src": "11461:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "11447:49:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 1069,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            },
                                            "id": 1061,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 1059,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 1057,
                                                "name": "flags",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1047,
                                                "src": "11519:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "&",
                                              "rightExpression": {
                                                "hexValue": "31",
                                                "id": 1058,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "11527:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_1_by_1",
                                                  "typeString": "int_const 1"
                                                },
                                                "value": "1"
                                              },
                                              "src": "11519:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "!=",
                                            "rightExpression": {
                                              "hexValue": "30",
                                              "id": 1060,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "11532:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "11519:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          }
                                        ],
                                        "id": 1062,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "11518:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            },
                                            "id": 1067,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 1065,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 1063,
                                                "name": "flags",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1047,
                                                "src": "11539:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "&",
                                              "rightExpression": {
                                                "hexValue": "34",
                                                "id": 1064,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "11547:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_4_by_1",
                                                  "typeString": "int_const 4"
                                                },
                                                "value": "4"
                                              },
                                              "src": "11539:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "hexValue": "30",
                                              "id": 1066,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "11552:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "11539:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          }
                                        ],
                                        "id": 1068,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "11538:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "11518:36:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1081,
                                    "nodeType": "IfStatement",
                                    "src": "11514:159:0",
                                    "trueBody": {
                                      "id": 1080,
                                      "nodeType": "Block",
                                      "src": "11556:117:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1071,
                                                "name": "user",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 988,
                                                "src": "11594:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "id": 1072,
                                                "name": "epoch",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 990,
                                                "src": "11600:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                }
                                              },
                                              {
                                                "id": 1073,
                                                "name": "i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1016,
                                                "src": "11607:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              ],
                                              "id": 1070,
                                              "name": "_settleInternal",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 871,
                                              "src": "11578:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                                                "typeString": "function (address,uint64,uint32)"
                                              }
                                            },
                                            "id": 1074,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "11578:31:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1075,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11578:31:0"
                                        },
                                        {
                                          "id": 1079,
                                          "nodeType": "UncheckedBlock",
                                          "src": "11631:24:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "id": 1077,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "UnaryOperation",
                                                "operator": "++",
                                                "prefix": false,
                                                "src": "11643:9:0",
                                                "subExpression": {
                                                  "id": 1076,
                                                  "name": "settled",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1013,
                                                  "src": "11643:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint32",
                                                    "typeString": "uint32"
                                                  }
                                                },
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              },
                                              "id": 1078,
                                              "nodeType": "ExpressionStatement",
                                              "src": "11643:9:0"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "id": 1087,
                              "nodeType": "UncheckedBlock",
                              "src": "11700:18:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 1085,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "11712:3:0",
                                    "subExpression": {
                                      "id": 1084,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1016,
                                      "src": "11712:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 1086,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11712:3:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1025,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1021,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1019,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1016,
                              "src": "11279:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "id": 1020,
                              "name": "count",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1007,
                              "src": "11284:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "11279:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1024,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1022,
                              "name": "settled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1013,
                              "src": "11293:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 1023,
                              "name": "maxCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 992,
                              "src": "11303:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "11293:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11279:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1089,
                        "initializationExpression": {
                          "assignments": [
                            1016
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1016,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "11272:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1089,
                              "src": "11265:8:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 1015,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "11265:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1018,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 1017,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11276:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "11265:12:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "11260:468:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 986,
                    "nodeType": "StructuredDocumentation",
                    "src": "10616:376:0",
                    "text": " @notice Force settle a specific day without epoch validation (TESTING ONLY)\n @dev Same as settleAll but bypasses the \"cannot settle current day\" check\n @param user Address of habit owner\n @param epoch The epoch to settle (can be any epoch, including current)\n @param maxCount Maximum number of habits to settle (gas limit protection)"
                  },
                  "functionSelector": "6196d285",
                  "id": 1091,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "forceSettleDay",
                  "nameLocation": "11006:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 993,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 988,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "11029:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1091,
                        "src": "11021:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 987,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11021:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 990,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "11042:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1091,
                        "src": "11035:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 989,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "11035:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 992,
                        "mutability": "mutable",
                        "name": "maxCount",
                        "nameLocation": "11056:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1091,
                        "src": "11049:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 991,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11049:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11020:45:0"
                  },
                  "returnParameters": {
                    "id": 994,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11075:0:0"
                  },
                  "scope": 1231,
                  "src": "10997:737:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1229,
                    "nodeType": "Block",
                    "src": "12264:1123:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1103,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1101,
                              "name": "maxSettlements",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "12278:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1102,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12296:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "12278:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1104,
                              "name": "maxSettlements",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "12301:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 1105,
                              "name": "MAX_SETTLE_BATCH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11,
                              "src": "12318:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "12301:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "12278:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1111,
                        "nodeType": "IfStatement",
                        "src": "12274:87:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1108,
                              "name": "InvalidBatchSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "12343:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1109,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12343:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1110,
                          "nodeType": "RevertStatement",
                          "src": "12336:25:0"
                        }
                      },
                      {
                        "assignments": [
                          1113
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1113,
                            "mutability": "mutable",
                            "name": "habitCount",
                            "nameLocation": "12387:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1229,
                            "src": "12380:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 1112,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "12380:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1117,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1114,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "12400:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 1116,
                          "indexExpression": {
                            "id": 1115,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "12418:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12400:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12380:43:0"
                      },
                      {
                        "assignments": [
                          1119
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1119,
                            "mutability": "mutable",
                            "name": "currentEpoch",
                            "nameLocation": "12440:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1229,
                            "src": "12433:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            "typeName": {
                              "id": 1118,
                              "name": "uint64",
                              "nodeType": "ElementaryTypeName",
                              "src": "12433:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1122,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1120,
                            "name": "epochNow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 219,
                            "src": "12455:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                              "typeString": "function () view returns (uint64)"
                            }
                          },
                          "id": 1121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12455:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12433:32:0"
                      },
                      {
                        "assignments": [
                          1124
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1124,
                            "mutability": "mutable",
                            "name": "settledCount",
                            "nameLocation": "12482:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1229,
                            "src": "12475:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 1123,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "12475:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1125,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12475:19:0"
                      },
                      {
                        "body": {
                          "id": 1227,
                          "nodeType": "Block",
                          "src": "12595:786:0",
                          "statements": [
                            {
                              "assignments": [
                                1139
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1139,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "12623:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1227,
                                  "src": "12609:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 1138,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1137,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "12609:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 33,
                                      "src": "12609:5:0"
                                    },
                                    "referencedDeclaration": 33,
                                    "src": "12609:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1145,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1140,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 48,
                                    "src": "12631:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 1142,
                                  "indexExpression": {
                                    "id": 1141,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1094,
                                    "src": "12638:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "12631:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$33_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 1144,
                                "indexExpression": {
                                  "id": 1143,
                                  "name": "habitId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1127,
                                  "src": "12644:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12631:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$33_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "12609:43:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 1156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 1152,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1146,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1139,
                                      "src": "12683:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 1147,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "12689:5:0",
                                    "memberName": "owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "12683:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 1150,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "12706:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 1149,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "12698:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1148,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "12698:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1151,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "12698:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "12683:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "id": 1155,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "12712:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 1153,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1139,
                                      "src": "12713:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 1154,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "12719:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 32,
                                    "src": "12713:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "12683:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1222,
                              "nodeType": "IfStatement",
                              "src": "12679:655:0",
                              "trueBody": {
                                "id": 1221,
                                "nodeType": "Block",
                                "src": "12729:605:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      1158
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1158,
                                        "mutability": "mutable",
                                        "name": "scanStart",
                                        "nameLocation": "12754:9:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1221,
                                        "src": "12747:16:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        },
                                        "typeName": {
                                          "id": 1157,
                                          "name": "uint64",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "12747:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1167,
                                    "initialValue": {
                                      "condition": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        },
                                        "id": 1162,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1159,
                                          "name": "startEpoch",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1096,
                                          "src": "12766:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": ">",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 1160,
                                            "name": "habit",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1139,
                                            "src": "12779:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                              "typeString": "struct HabitTracker.Habit storage pointer"
                                            }
                                          },
                                          "id": 1161,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "12785:14:0",
                                          "memberName": "createdAtEpoch",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 30,
                                          "src": "12779:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "src": "12766:33:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "falseExpression": {
                                        "expression": {
                                          "id": 1164,
                                          "name": "habit",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1139,
                                          "src": "12815:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Habit_$33_storage_ptr",
                                            "typeString": "struct HabitTracker.Habit storage pointer"
                                          }
                                        },
                                        "id": 1165,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "12821:14:0",
                                        "memberName": "createdAtEpoch",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 30,
                                        "src": "12815:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        }
                                      },
                                      "id": 1166,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "Conditional",
                                      "src": "12766:69:0",
                                      "trueExpression": {
                                        "id": 1163,
                                        "name": "startEpoch",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1096,
                                        "src": "12802:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint64",
                                        "typeString": "uint64"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "12747:88:0"
                                  },
                                  {
                                    "body": {
                                      "id": 1219,
                                      "nodeType": "Block",
                                      "src": "12957:363:0",
                                      "statements": [
                                        {
                                          "assignments": [
                                            1180
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 1180,
                                              "mutability": "mutable",
                                              "name": "flags",
                                              "nameLocation": "12985:5:0",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 1219,
                                              "src": "12979:11:0",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "typeName": {
                                                "id": 1179,
                                                "name": "uint8",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "12979:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "visibility": "internal"
                                            }
                                          ],
                                          "id": 1189,
                                          "initialValue": {
                                            "expression": {
                                              "baseExpression": {
                                                "baseExpression": {
                                                  "baseExpression": {
                                                    "id": 1181,
                                                    "name": "dailyStatuses",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 61,
                                                    "src": "12993:13:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$_$",
                                                      "typeString": "mapping(address => mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref)))"
                                                    }
                                                  },
                                                  "id": 1183,
                                                  "indexExpression": {
                                                    "id": 1182,
                                                    "name": "user",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1094,
                                                    "src": "13007:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "12993:19:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$_$",
                                                    "typeString": "mapping(uint64 => mapping(uint32 => struct HabitTracker.DailyStatus storage ref))"
                                                  }
                                                },
                                                "id": 1185,
                                                "indexExpression": {
                                                  "id": 1184,
                                                  "name": "epoch",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1169,
                                                  "src": "13013:5:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint64",
                                                    "typeString": "uint64"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "12993:26:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_DailyStatus_$36_storage_$",
                                                  "typeString": "mapping(uint32 => struct HabitTracker.DailyStatus storage ref)"
                                                }
                                              },
                                              "id": 1187,
                                              "indexExpression": {
                                                "id": 1186,
                                                "name": "habitId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1127,
                                                "src": "13020:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint32",
                                                  "typeString": "uint32"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "12993:35:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_DailyStatus_$36_storage",
                                                "typeString": "struct HabitTracker.DailyStatus storage ref"
                                              }
                                            },
                                            "id": 1188,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "13029:5:0",
                                            "memberName": "flags",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 35,
                                            "src": "12993:41:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "12979:55:0"
                                        },
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            },
                                            "id": 1202,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "components": [
                                                {
                                                  "commonType": {
                                                    "typeIdentifier": "t_uint8",
                                                    "typeString": "uint8"
                                                  },
                                                  "id": 1194,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "commonType": {
                                                      "typeIdentifier": "t_uint8",
                                                      "typeString": "uint8"
                                                    },
                                                    "id": 1192,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                      "id": 1190,
                                                      "name": "flags",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1180,
                                                      "src": "13082:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint8",
                                                        "typeString": "uint8"
                                                      }
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "&",
                                                    "rightExpression": {
                                                      "hexValue": "31",
                                                      "id": 1191,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "13090:1:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_1_by_1",
                                                        "typeString": "int_const 1"
                                                      },
                                                      "value": "1"
                                                    },
                                                    "src": "13082:9:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint8",
                                                      "typeString": "uint8"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "!=",
                                                  "rightExpression": {
                                                    "hexValue": "30",
                                                    "id": 1193,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "13095:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_0_by_1",
                                                      "typeString": "int_const 0"
                                                    },
                                                    "value": "0"
                                                  },
                                                  "src": "13082:14:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                }
                                              ],
                                              "id": 1195,
                                              "isConstant": false,
                                              "isInlineArray": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "TupleExpression",
                                              "src": "13081:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "&&",
                                            "rightExpression": {
                                              "components": [
                                                {
                                                  "commonType": {
                                                    "typeIdentifier": "t_uint8",
                                                    "typeString": "uint8"
                                                  },
                                                  "id": 1200,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "commonType": {
                                                      "typeIdentifier": "t_uint8",
                                                      "typeString": "uint8"
                                                    },
                                                    "id": 1198,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                      "id": 1196,
                                                      "name": "flags",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1180,
                                                      "src": "13102:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint8",
                                                        "typeString": "uint8"
                                                      }
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "&",
                                                    "rightExpression": {
                                                      "hexValue": "34",
                                                      "id": 1197,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "13110:1:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_4_by_1",
                                                        "typeString": "int_const 4"
                                                      },
                                                      "value": "4"
                                                    },
                                                    "src": "13102:9:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint8",
                                                      "typeString": "uint8"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "==",
                                                  "rightExpression": {
                                                    "hexValue": "30",
                                                    "id": 1199,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "13115:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_0_by_1",
                                                      "typeString": "int_const 0"
                                                    },
                                                    "value": "0"
                                                  },
                                                  "src": "13102:14:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                }
                                              ],
                                              "id": 1201,
                                              "isConstant": false,
                                              "isInlineArray": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "TupleExpression",
                                              "src": "13101:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "src": "13081:36:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 1214,
                                          "nodeType": "IfStatement",
                                          "src": "13077:182:0",
                                          "trueBody": {
                                            "id": 1213,
                                            "nodeType": "Block",
                                            "src": "13119:140:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1204,
                                                      "name": "user",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1094,
                                                      "src": "13161:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    {
                                                      "id": 1205,
                                                      "name": "epoch",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1169,
                                                      "src": "13167:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint64",
                                                        "typeString": "uint64"
                                                      }
                                                    },
                                                    {
                                                      "id": 1206,
                                                      "name": "habitId",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1127,
                                                      "src": "13174:7:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_uint64",
                                                        "typeString": "uint64"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    ],
                                                    "id": 1203,
                                                    "name": "_settleInternal",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 871,
                                                    "src": "13145:15:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                                                      "typeString": "function (address,uint64,uint32)"
                                                    }
                                                  },
                                                  "id": 1207,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "nameLocations": [],
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "13145:37:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1208,
                                                "nodeType": "ExpressionStatement",
                                                "src": "13145:37:0"
                                              },
                                              {
                                                "id": 1212,
                                                "nodeType": "UncheckedBlock",
                                                "src": "13208:29:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 1210,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "13220:14:0",
                                                      "subExpression": {
                                                        "id": 1209,
                                                        "name": "settledCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1124,
                                                        "src": "13220:12:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 1211,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "13220:14:0"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "id": 1218,
                                          "nodeType": "UncheckedBlock",
                                          "src": "13280:22:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "id": 1216,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "UnaryOperation",
                                                "operator": "++",
                                                "prefix": false,
                                                "src": "13292:7:0",
                                                "subExpression": {
                                                  "id": 1215,
                                                  "name": "epoch",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1169,
                                                  "src": "13292:5:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint64",
                                                    "typeString": "uint64"
                                                  }
                                                },
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                }
                                              },
                                              "id": 1217,
                                              "nodeType": "ExpressionStatement",
                                              "src": "13292:7:0"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 1178,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        },
                                        "id": 1174,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1172,
                                          "name": "epoch",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1169,
                                          "src": "12901:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 1173,
                                          "name": "currentEpoch",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1119,
                                          "src": "12909:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          }
                                        },
                                        "src": "12901:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        },
                                        "id": 1177,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1175,
                                          "name": "settledCount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1124,
                                          "src": "12925:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint32",
                                            "typeString": "uint32"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 1176,
                                          "name": "maxSettlements",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1098,
                                          "src": "12940:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint32",
                                            "typeString": "uint32"
                                          }
                                        },
                                        "src": "12925:29:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "12901:53:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1220,
                                    "initializationExpression": {
                                      "assignments": [
                                        1169
                                      ],
                                      "declarations": [
                                        {
                                          "constant": false,
                                          "id": 1169,
                                          "mutability": "mutable",
                                          "name": "epoch",
                                          "nameLocation": "12882:5:0",
                                          "nodeType": "VariableDeclaration",
                                          "scope": 1220,
                                          "src": "12875:12:0",
                                          "stateVariable": false,
                                          "storageLocation": "default",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint64",
                                            "typeString": "uint64"
                                          },
                                          "typeName": {
                                            "id": 1168,
                                            "name": "uint64",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "12875:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint64",
                                              "typeString": "uint64"
                                            }
                                          },
                                          "visibility": "internal"
                                        }
                                      ],
                                      "id": 1171,
                                      "initialValue": {
                                        "id": 1170,
                                        "name": "scanStart",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1158,
                                        "src": "12890:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint64",
                                          "typeString": "uint64"
                                        }
                                      },
                                      "nodeType": "VariableDeclarationStatement",
                                      "src": "12875:24:0"
                                    },
                                    "isSimpleCounterLoop": false,
                                    "nodeType": "ForStatement",
                                    "src": "12870:450:0"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 1226,
                              "nodeType": "UncheckedBlock",
                              "src": "13347:24:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 1224,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "13359:9:0",
                                    "subExpression": {
                                      "id": 1223,
                                      "name": "habitId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1127,
                                      "src": "13359:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 1225,
                                  "nodeType": "ExpressionStatement",
                                  "src": "13359:9:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1130,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1127,
                              "src": "12538:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "id": 1131,
                              "name": "habitCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1113,
                              "src": "12549:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "12538:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1133,
                              "name": "settledCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1124,
                              "src": "12563:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 1134,
                              "name": "maxSettlements",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "12578:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "12563:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "12538:54:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1228,
                        "initializationExpression": {
                          "assignments": [
                            1127
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1127,
                              "mutability": "mutable",
                              "name": "habitId",
                              "nameLocation": "12525:7:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1228,
                              "src": "12518:14:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 1126,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "12518:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1129,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 1128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12535:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "12518:18:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "12513:868:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1092,
                    "nodeType": "StructuredDocumentation",
                    "src": "11744:420:0",
                    "text": " @notice Force settle all unsettled habits across all past epochs (TESTING ONLY)\n @dev Scans all habits and all past epochs to find and settle any funded but unsettled days\n @param user Address of habit owner\n @param startEpoch Starting epoch to scan from (usually habit creation epoch or 0)\n @param maxSettlements Maximum number of settlements to process (gas limit protection)"
                  },
                  "functionSelector": "494bc62d",
                  "id": 1230,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "forceSettleAllEpochs",
                  "nameLocation": "12178:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1099,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1094,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "12207:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1230,
                        "src": "12199:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1093,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12199:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1096,
                        "mutability": "mutable",
                        "name": "startEpoch",
                        "nameLocation": "12220:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1230,
                        "src": "12213:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 1095,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "12213:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1098,
                        "mutability": "mutable",
                        "name": "maxSettlements",
                        "nameLocation": "12239:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1230,
                        "src": "12232:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 1097,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "12232:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12198:56:0"
                  },
                  "returnParameters": {
                    "id": 1100,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12264:0:0"
                  },
                  "scope": 1231,
                  "src": "12169:1218:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1232,
              "src": "244:13145:0",
              "usedErrors": [
                139,
                141,
                143,
                145,
                147,
                149,
                151,
                153,
                155,
                157,
                159,
                161,
                163,
                165
              ],
              "usedEvents": [
                67,
                73,
                79,
                85,
                93,
                99,
                109,
                117,
                127,
                137
              ]
            }
          ],
          "src": "32:13359:0"
        }
      }
    },
    "contracts": {
      "contracts/HabitTracker.sol": {
        "HabitTracker": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_treasury",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AlreadyCheckedIn",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "AlreadySettled",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "CannotSettleCurrentDay",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "DayNotFunded",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitAlreadyArchived",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitNotFound",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitTextTooLong",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidAmount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidBatchSize",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidEpoch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidTreasury",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotHabitOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "CheckedIn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Claimed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "fundedCount",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "insufficientCount",
                  "type": "uint32"
                }
              ],
              "name": "DayPrepared",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Deposited",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "HabitArchived",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "HabitCreated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "RedepositedFromClaimable",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "slashed",
                  "type": "uint256"
                }
              ],
              "name": "SettledFail",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                }
              ],
              "name": "SettledSuccess",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Withdrawn",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "STAKE_PER_DAY",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "archiveHabit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "checkIn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "claim",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "createHabit",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "name": "dailyStatuses",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "flags",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "epochNow",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startEpoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "maxSettlements",
                  "type": "uint32"
                }
              ],
              "name": "forceSettleAllEpochs",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "maxCount",
                  "type": "uint32"
                }
              ],
              "name": "forceSettleDay",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "name": "habits",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "createdAtEpoch",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "archived",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "prepareDay",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "redepositFromClaimable",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "settle",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "maxCount",
                  "type": "uint32"
                }
              ],
              "name": "settleAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "treasury",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userHabitCounters",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userStates",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "depositBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "blockedBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimableBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "activeHabitCount",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyCheckedIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSettleCurrentDay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DayNotFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitAlreadyArchived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitTextTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotHabitOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fundedCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"insufficientCount\",\"type\":\"uint32\"}],\"name\":\"DayPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"HabitArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"HabitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedepositedFromClaimable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashed\",\"type\":\"uint256\"}],\"name\":\"SettledFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SettledSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STAKE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"archiveHabit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"createHabit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"dailyStatuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxSettlements\",\"type\":\"uint32\"}],\"name\":\"forceSettleAllEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxCount\",\"type\":\"uint32\"}],\"name\":\"forceSettleDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"habits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"createdAtEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"archived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"prepareDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redepositFromClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxCount\",\"type\":\"uint32\"}],\"name\":\"settleAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHabitCounters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activeHabitCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"HabitChain Team\",\"details\":\"Uses epoch-based time (86400-second days) for daily cycles\",\"kind\":\"dev\",\"methods\":{\"archiveHabit(uint32)\":{\"params\":{\"habitId\":\"ID of the habit to archive\"}},\"checkIn(uint32,uint64)\":{\"params\":{\"epoch\":\"The epoch to check in (must be current day)\",\"habitId\":\"ID of the habit\"}},\"createHabit(bytes32)\":{\"params\":{\"text\":\"Description of the habit (up to 32 bytes)\"},\"returns\":{\"_0\":\"habitId The ID of the newly created habit\"}},\"forceSettleAllEpochs(address,uint64,uint32)\":{\"details\":\"Scans all habits and all past epochs to find and settle any funded but unsettled days\",\"params\":{\"maxSettlements\":\"Maximum number of settlements to process (gas limit protection)\",\"startEpoch\":\"Starting epoch to scan from (usually habit creation epoch or 0)\",\"user\":\"Address of habit owner\"}},\"forceSettleDay(address,uint64,uint32)\":{\"details\":\"Same as settleAll but bypasses the \\\"cannot settle current day\\\" check\",\"params\":{\"epoch\":\"The epoch to settle (can be any epoch, including current)\",\"maxCount\":\"Maximum number of habits to settle (gas limit protection)\",\"user\":\"Address of habit owner\"}},\"prepareDay(uint64)\":{\"params\":{\"epoch\":\"The epoch to prepare (must be current day)\"}},\"settle(address,uint64,uint32)\":{\"params\":{\"epoch\":\"The epoch to settle (must be past day)\",\"habitId\":\"ID of the habit to settle\",\"user\":\"Address of habit owner\"}},\"settleAll(address,uint64,uint32)\":{\"params\":{\"epoch\":\"The epoch to settle (must be past day)\",\"maxCount\":\"Maximum number of habits to settle (gas limit protection)\",\"user\":\"Address of habit owner\"}}},\"title\":\"HabitTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"archiveHabit(uint32)\":{\"notice\":\"Archive a habit (soft delete)\"},\"checkIn(uint32,uint64)\":{\"notice\":\"Check in to a habit for the current day\"},\"createHabit(bytes32)\":{\"notice\":\"Create a new habit\"},\"forceSettleAllEpochs(address,uint64,uint32)\":{\"notice\":\"Force settle all unsettled habits across all past epochs (TESTING ONLY)\"},\"forceSettleDay(address,uint64,uint32)\":{\"notice\":\"Force settle a specific day without epoch validation (TESTING ONLY)\"},\"prepareDay(uint64)\":{\"notice\":\"Prepare the day by locking funds for active habits\"},\"settle(address,uint64,uint32)\":{\"notice\":\"Settle a specific habit for a past day\"},\"settleAll(address,uint64,uint32)\":{\"notice\":\"Settle all funded habits for a user for a specific past day\"}},\"notice\":\"Gamified habit tracking with financial commitment\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HabitTracker.sol\":\"HabitTracker\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HabitTracker.sol\":{\"keccak256\":\"0x2596bc79d8fe57bca1a02f77b6c4a4f8ee17bf0266f800b83100f2bf742029be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c74ab7cdd1858bae7cf23dae2d6ef54b403ec001b6f02579e0a771028a0c38c\",\"dweb:/ipfs/QmWG7TYxArGmhrviS14y1fj2r4SRjFiPSF5KkPx64ypYSj\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 364/65984 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 10734\n// Code size = 37842 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x20168\n    16: s0 = i32 [0x20168]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x301a0\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 6 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x20168]\n    41: u32 [0x20168] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x20168]\n    68: jump @54 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x301a0\n    77: i32 a0 = a0 + 0\n    79: ecalli 14 // 'set_immutable_data'\n    81: jump @54\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @21\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @21\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 7 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 15 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 (gas: 24)\n   874: sp = sp + 0xffffffffffffff60\n   878: u64 [sp + 0x98] = ra\n   882: u64 [sp + 0x90] = s0\n   886: u64 [sp + 0x88] = s1\n   890: s0 = sp + 0xa0\n   894: sp = sp & 0xffffffffffffffe0\n   897: a4 = u64 [a3]\n   899: u64 [sp + 0x38] = a4\n   902: a4 = u64 [a3 + 0x8]\n   905: u64 [sp + 0x30] = a4\n   908: a4 = u64 [a3 + 0x10]\n   911: u64 [sp + 0x28] = a4\n   914: a3 = u64 [a3 + 0x18]\n   917: u64 [sp + 0x20] = a3\n   920: a3 = u64 [a2]\n   922: u64 [sp + 0x18] = a3\n   925: a3 = u64 [a2 + 0x8]\n   928: u64 [sp + 0x10] = a3\n   931: a3 = u64 [a2 + 0x10]\n   934: u64 [sp + 0x8] = a3\n   937: a2 = u64 [a2 + 0x18]\n   940: u64 [sp] = a2\n   942: s1 = a1\n   944: ra = 6, jump @21\n      : @14 [@dyn 3] (gas: 35)\n   949: a1 = u64 [sp]\n   951: a1 = reverse a1\n   953: a2 = u64 [sp + 0x8]\n   956: a2 = reverse a2\n   958: a3 = u64 [sp + 0x10]\n   961: a3 = reverse a3\n   963: a4 = u64 [sp + 0x18]\n   966: a4 = reverse a4\n   968: u64 [sp + 0x58] = a4\n   971: u64 [sp + 0x50] = a3\n   974: u64 [sp + 0x48] = a2\n   977: u64 [sp + 0x40] = a1\n   980: a1 = u64 [sp + 0x20]\n   983: a1 = reverse a1\n   985: a2 = u64 [sp + 0x28]\n   988: a2 = reverse a2\n   990: a3 = u64 [sp + 0x30]\n   993: a3 = reverse a3\n   995: a4 = u64 [sp + 0x38]\n   998: a4 = reverse a4\n  1000: u64 [sp + 0x78] = a4\n  1003: u64 [sp + 0x70] = a3\n  1006: u64 [sp + 0x68] = a2\n  1009: u64 [sp + 0x60] = a1\n  1012: i32 a2 = a0 + 0\n  1014: i32 a3 = s1 + 0\n  1016: i32 a0 = sp + 0x40\n  1019: a1 = 0x2\n  1022: ecalli 5 // 'deposit_event'\n  1024: sp = s0 + 0xffffffffffffff60\n  1028: ra = u64 [sp + 0x98]\n  1032: s0 = u64 [sp + 0x90]\n  1036: s1 = u64 [sp + 0x88]\n  1040: sp = sp + 0xa0\n  1044: ret\n      : @15 (gas: 15)\n  1046: sp = sp + 0xffffffffffffff20\n  1050: u64 [sp + 0xd8] = ra\n  1054: u64 [sp + 0xd0] = s0\n  1058: u64 [sp + 0xc8] = s1\n  1062: s0 = sp + 0xe0\n  1066: sp = sp & 0xffffffffffffffe0\n  1069: a5 = u64 [a4]\n  1071: u64 [sp + 0x40] = a5\n  1074: a5 = u64 [a4 + 0x8]\n  1077: u64 [sp + 0x48] = a5\n  1080: a5 = u64 [a4 + 0x10]\n  1083: u64 [sp + 0x50] = a5\n  1086: a4 = u64 [a4 + 0x18]\n  1089: u64 [sp + 0x58] = a4\n  1092: t0 = 8, jump @1456\n      : @16 [@dyn 4] (gas: 2)\n  1098: u64 [sp + 0x38] = a1\n  1101: ra = 10, jump @21\n      : @17 [@dyn 5] (gas: 46)\n  1106: a1 = reverse s1\n  1108: u64 [sp + 0x78] = a1\n  1111: a1 = u64 [sp]\n  1113: a1 = reverse a1\n  1115: u64 [sp + 0x70] = a1\n  1118: a1 = u64 [sp + 0x8]\n  1121: a1 = reverse a1\n  1123: u64 [sp + 0x68] = a1\n  1126: a1 = u64 [sp + 0x10]\n  1129: a1 = reverse a1\n  1131: u64 [sp + 0x60] = a1\n  1134: a1 = u64 [sp + 0x18]\n  1137: a1 = reverse a1\n  1139: u64 [sp + 0x98] = a1\n  1143: a1 = u64 [sp + 0x20]\n  1146: a1 = reverse a1\n  1148: u64 [sp + 0x90] = a1\n  1152: a1 = u64 [sp + 0x28]\n  1155: a1 = reverse a1\n  1157: u64 [sp + 0x88] = a1\n  1161: a1 = u64 [sp + 0x30]\n  1164: a1 = reverse a1\n  1166: u64 [sp + 0x80] = a1\n  1170: a1 = u64 [sp + 0x40]\n  1173: a1 = reverse a1\n  1175: u64 [sp + 0xb8] = a1\n  1179: a1 = u64 [sp + 0x48]\n  1182: a1 = reverse a1\n  1184: u64 [sp + 0xb0] = a1\n  1188: a1 = u64 [sp + 0x50]\n  1191: a1 = reverse a1\n  1193: u64 [sp + 0xa8] = a1\n  1197: a1 = u64 [sp + 0x58]\n  1200: a1 = reverse a1\n  1202: u64 [sp + 0xa0] = a1\n  1206: i32 a2 = a0 + 0\n  1208: a3 = i32 [sp + 0x38]\n  1211: i32 a0 = sp + 0x60\n  1214: a1 = 0x3\n  1217: ecalli 5 // 'deposit_event'\n  1219: sp = s0 + 0xffffffffffffff20\n  1223: ra = u64 [sp + 0xd8]\n  1227: s0 = u64 [sp + 0xd0]\n  1231: s1 = u64 [sp + 0xc8]\n  1235: sp = sp + 0xe0\n  1239: ret\n      : @18 (gas: 23)\n  1241: sp = sp + 0xfffffffffffffee0\n  1245: u64 [sp + 0x118] = ra\n  1249: u64 [sp + 0x110] = s0\n  1253: u64 [sp + 0x108] = s1\n  1257: s0 = sp + 0x120\n  1261: sp = sp & 0xffffffffffffffe0\n  1264: s1 = u64 [a5]\n  1266: u64 [sp + 0x60] = s1\n  1269: s1 = u64 [a5 + 0x8]\n  1272: u64 [sp + 0x68] = s1\n  1275: s1 = u64 [a5 + 0x10]\n  1278: u64 [sp + 0x70] = s1\n  1281: a5 = u64 [a5 + 0x18]\n  1284: u64 [sp + 0x78] = a5\n  1287: a5 = u64 [a4]\n  1289: u64 [sp + 0x38] = a5\n  1292: a5 = u64 [a4 + 0x8]\n  1295: u64 [sp + 0x40] = a5\n  1298: a5 = u64 [a4 + 0x10]\n  1301: u64 [sp + 0x48] = a5\n  1304: a4 = u64 [a4 + 0x18]\n  1307: u64 [sp + 0x50] = a4\n  1310: t0 = 12, jump @1456\n      : @19 [@dyn 6] (gas: 2)\n  1316: u64 [sp + 0x58] = a1\n  1319: ra = 14, jump @21\n      : @20 [@dyn 7] (gas: 58)\n  1324: a1 = reverse s1\n  1326: u64 [sp + 0x98] = a1\n  1330: a1 = u64 [sp]\n  1332: a1 = reverse a1\n  1334: u64 [sp + 0x90] = a1\n  1338: a1 = u64 [sp + 0x8]\n  1341: a1 = reverse a1\n  1343: u64 [sp + 0x88] = a1\n  1347: a1 = u64 [sp + 0x10]\n  1350: a1 = reverse a1\n  1352: u64 [sp + 0x80] = a1\n  1356: a1 = u64 [sp + 0x18]\n  1359: a1 = reverse a1\n  1361: u64 [sp + 0xb8] = a1\n  1365: a1 = u64 [sp + 0x20]\n  1368: a1 = reverse a1\n  1370: u64 [sp + 0xb0] = a1\n  1374: a1 = u64 [sp + 0x28]\n  1377: a1 = reverse a1\n  1379: u64 [sp + 0xa8] = a1\n  1383: a1 = u64 [sp + 0x30]\n  1386: a1 = reverse a1\n  1388: u64 [sp + 0xa0] = a1\n  1392: a1 = u64 [sp + 0x38]\n  1395: a1 = reverse a1\n  1397: u64 [sp + 0xd8] = a1\n  1401: a1 = u64 [sp + 0x40]\n  1404: a1 = reverse a1\n  1406: u64 [sp + 0xd0] = a1\n  1410: a1 = u64 [sp + 0x48]\n  1413: a1 = reverse a1\n  1415: u64 [sp + 0xc8] = a1\n  1419: a1 = u64 [sp + 0x50]\n  1422: a1 = reverse a1\n  1424: u64 [sp + 0xc0] = a1\n  1428: a1 = u64 [sp + 0x60]\n  1431: a1 = reverse a1\n  1433: u64 [sp + 0xf8] = a1\n  1437: a1 = u64 [sp + 0x68]\n  1440: a1 = reverse a1\n  1442: u64 [sp + 0xf0] = a1\n  1446: a1 = u64 [sp + 0x70]\n  1449: a1 = reverse a1\n  1451: u64 [sp + 0xe8] = a1\n  1455: a1 = u64 [sp + 0x78]\n  1458: a1 = reverse a1\n  1460: u64 [sp + 0xe0] = a1\n  1464: i32 a2 = a0 + 0\n  1466: a3 = i32 [sp + 0x58]\n  1469: i32 a0 = sp + 0x80\n  1473: a1 = 0x4\n  1476: ecalli 5 // 'deposit_event'\n  1478: sp = s0 + 0xfffffffffffffee0\n  1482: ra = u64 [sp + 0x118]\n  1486: s0 = u64 [sp + 0x110]\n  1490: s1 = u64 [sp + 0x108]\n  1494: sp = sp + 0x120\n  1498: ret\n      : @21 (gas: 2)\n  1500: i32 a2 = a0 >> 0x10\n  1503: jump @26 if a2 != 0\n      : @22 (gas: 4)\n  1506: a1 = a1 + a0\n  1509: i32 a1 = a1 + 0x1f\n  1512: a1 = a1 & 0xffffffffffffffe0\n  1515: jump @26 if a1 >u 65536\n      : @23 (gas: 3)\n  1521: a2 = 0x20170\n  1526: a3 = i32 [0x20170]\n  1531: jump @25 if a3 >=u a1\n      : @24 (gas: 2)\n  1534: u32 [0x20170] = a1\n  1539: fallthrough\n      : @25 (gas: 4)\n  1540: a1 = 0x20180\n  1545: i32 a0 = a0 + 0\n  1547: a0 = a0 + a1\n  1550: ret\n      : @26 (gas: 1)\n  1552: trap\n      : @27 (gas: 6)\n  1553: sp = sp + 0xfffffffffffffff0\n  1556: u64 [sp + 0x8] = ra\n  1559: u64 [sp] = s0\n  1561: s0 = a0 & 0x1\n  1564: ecalli 3 // 'call_data_size'\n  1566: fallthrough\n      : @28 (gas: 2)\n  1567: u32 [0x2016c] = a0\n  1572: jump @30 if s0 == 0\n      : @29 (gas: 1)\n  1575: ra = 16, jump @31\n      : @30 [@dyn 8] (gas: 1)\n  1579: ra = 18, jump @57\n      : @31 [@dyn 9] (gas: 13)\n  1584: sp = sp + 0xffffffffffffff00\n  1588: u64 [sp + 0xf8] = ra\n  1592: u64 [sp + 0xf0] = s0\n  1596: u64 [sp + 0xe8] = s1\n  1600: s0 = sp + 0x100\n  1604: sp = sp & 0xffffffffffffffe0\n  1607: u64 [sp + 216] = 0\n  1611: u64 [sp + 208] = 0\n  1615: u64 [sp + 200] = 0\n  1619: u64 [sp + 192] = 0\n  1623: i32 a0 = sp + 0xc0\n  1627: ecalli 16 // 'value_transferred'\n  1629: fallthrough\n      : @32 (gas: 8)\n  1630: a0 = u64 [sp + 0xd0]\n  1634: a1 = u64 [sp + 0xd8]\n  1638: a2 = u64 [sp + 0xc8]\n  1642: a3 = u64 [sp + 0xc0]\n  1646: a1 = a1 | a2\n  1649: a0 = a0 | a3\n  1652: a0 = a0 | a1\n  1655: jump @44 if a0 != 0\n      : @33 (gas: 15)\n  1659: s1 = i32 [0x2016c]\n  1664: a0 = s1 << 0x20\n  1667: a0 = a0 >> 0x20\n  1670: a0 = a0 + 0x1f\n  1673: a0 = a0 & 0xffffffffffffffe0\n  1676: a1 = a0 + 0xa0\n  1680: a0 = a1 <u a0\n  1683: u64 [sp + 0xa0] = a1\n  1687: u64 [sp + 0xa8] = a0\n  1691: a0 = 0 if a0 != 0\n  1693: u64 [sp + 0xb0] = a0\n  1697: a0 = 0x40\n  1700: a1 = sp + 0xa0\n  1704: u64 [sp + 184] = 0\n  1708: ra = 20, jump @9\n      : @34 [@dyn 10] (gas: 3)\n  1713: a0 = 0xa0\n  1717: a1 = s1\n  1719: ra = 22, jump @21\n      : @35 [@dyn 11] (gas: 5)\n  1724: i32 a0 = a0 + 0\n  1726: a1 = s1\n  1728: a2 = 0\n  1730: ecalli 1 // 'call_data_copy'\n  1732: fallthrough\n      : @36 (gas: 1)\n  1733: jump @45 if s1 <=u 31\n      : @37 (gas: 3)\n  1738: a0 = sp + 0x80\n  1742: a1 = 0xa0\n  1746: ra = 24, jump @7\n      : @38 [@dyn 12] (gas: 10)\n  1751: a0 = u64 [sp + 0x90]\n  1755: a2 = u64 [sp + 0x98]\n  1759: a1 = 0x100000000\n  1769: a1 = a1 ^ a0\n  1772: a1 = a1 | a2\n  1775: a3 = a0 >> 0x20\n  1778: a3 = a3 <u 0x1\n  1781: a3 = 0 if a2 != 0\n  1783: a3 = 0 if a1 == 0\n  1785: jump @46 if a3 == 0\n      : @39 (gas: 6)\n  1788: a1 = u64 [sp + 0x80]\n  1792: a3 = u64 [sp + 0x88]\n  1796: a4 = a1 | a0\n  1799: a5 = a3 | a2\n  1802: a4 = a4 | a5\n  1805: jump @47 if a4 == 0\n      : @40 (gas: 7)\n  1808: u64 [sp + 0x60] = a1\n  1811: u64 [sp + 0x68] = a3\n  1814: u64 [sp + 0x70] = a0\n  1817: a0 = 0x80\n  1821: a1 = sp + 0x60\n  1824: u64 [sp + 0x78] = a2\n  1827: ra = 26, jump @9\n      : @41 [@dyn 13] (gas: 3)\n  1832: a0 = sp + 0x40\n  1835: a1 = 0x40\n  1838: ra = 28, jump @7\n      : @42 [@dyn 14] (gas: 12)\n  1843: a0 = u64 [sp + 0x58]\n  1846: a1 = u64 [sp + 0x50]\n  1849: a2 = u64 [sp + 0x48]\n  1852: s1 = u64 [sp + 0x40]\n  1855: a0 = a0 | a2\n  1858: a2 = s1 | a1\n  1861: a2 = a2 | a0\n  1864: a2 = a2 >> 0x20\n  1867: a0 = a0 | a1\n  1870: a0 = a0 << 0x20\n  1873: a0 = a0 | a2\n  1876: jump @51 if a0 == 0\n      : @43 (gas: 1)\n  1879: trap\n      : @44 (gas: 4)\n  1880: a1 = 0x20180\n  1885: i32 a1 = a1 + 0\n  1887: a0 = 0x1\n  1890: jump @56\n      : @45 (gas: 4)\n  1893: a1 = 0x20180\n  1898: i32 a1 = a1 + 0\n  1900: a0 = 0x1\n  1903: jump @56\n      : @46 (gas: 4)\n  1906: a1 = 0x20180\n  1911: i32 a1 = a1 + 0\n  1913: a0 = 0x1\n  1916: jump @56\n      : @47 (gas: 8)\n  1919: u64 [sp + 16] = 0\n  1922: u64 [sp + 8] = 0\n  1925: u64 [sp + 0] = 0\n  1927: a0 = 0x14bcf5c800000000\n  1937: a1 = sp\n  1939: u64 [sp + 0x18] = a0\n  1942: a0 = 0\n  1944: ra = 30, jump @9\n      : @48 [@dyn 15] (gas: 2)\n  1949: a1 = i32 [0x20170]\n  1954: jump @50 if a1 >u 31\n      : @49 (gas: 2)\n  1958: u32 [0x20170] = 0x20\n  1964: fallthrough\n      : @50 (gas: 6)\n  1965: a1 = 0x20180\n  1970: i32 a1 = a1 + 0\n  1972: a0 = 0x1\n  1975: a2 = 0x4\n  1978: ecalli 13 // 'seal_return'\n  1980: fallthrough\n      : @51 (gas: 3)\n  1981: a0 = s1\n  1983: a1 = 0\n  1985: ra = 32, jump @21\n      : @52 [@dyn 16] (gas: 7)\n  1990: i32 a0 = a0 + 0\n  1992: a1 = 0\n  1994: a2 = 0\n  1996: ecalli 1 // 'call_data_copy'\n  1998: a0 = sp + 0x20\n  2001: a1 = 0x80\n  2005: ra = 34, jump @7\n      : @53 [@dyn 17] (gas: 9)\n  2010: a0 = u64 [sp + 0x38]\n  2013: a2 = u64 [sp + 0x30]\n  2016: a3 = u64 [sp + 0x28]\n  2019: a4 = u64 [sp + 0x20]\n  2022: u64 [0x301b8] = a0\n  2027: u64 [0x301b0] = a2\n  2032: u64 [0x301a8] = a3\n  2037: u64 [0x301a0] = a4\n  2042: jump @5\n      : @54 (gas: 3)\n  2045: a0 = s1\n  2047: a1 = 0\n  2049: ra = 36, jump @21\n      : @55 [@dyn 18] (gas: 6)\n  2054: i32 a1 = a0 + 0\n  2056: a0 = 0\n  2058: a2 = 0\n  2060: ra = 0x26\n  2063: ecalli 13 // 'seal_return'\n  2065: jump @57\n      : @56 (gas: 4)\n  2067: a2 = 0\n  2069: ra = 0x26\n  2072: ecalli 13 // 'seal_return'\n  2074: fallthrough\n      : @57 [@dyn 19] (gas: 16)\n  2075: sp = sp + 0xfffffffffffffe10\n  2079: u64 [sp + 0x1e8] = ra\n  2083: u64 [sp + 0x1e0] = s0\n  2087: u64 [sp + 0x1d8] = s1\n  2091: s0 = sp + 0x1f0\n  2095: sp = sp + 0xffffffffffffd410\n  2099: sp = sp & 0xffffffffffffffe0\n  2102: s1 = sp\n  2104: a2 = s1 + 0x20b8\n  2108: u64 [a2 + 1120] = 0\n  2112: u64 [a2 + 1112] = 0\n  2116: u64 [a2 + 1096] = 0x80\n  2122: a0 = 0x40\n  2125: a1 = s1 + 0x2500\n  2129: u64 [a2 + 1104] = 0\n  2133: ra = 40, jump @9\n      : @58 [@dyn 20] (gas: 4)\n  2138: a0 = 0x2016c\n  2143: u64 [s1 + 0x118] = a0\n  2147: a0 = i32 [0x2016c]\n  2152: jump @60 if a0 >=u 4\n      : @59 (gas: 1)\n  2156: jump @986\n      : @60 (gas: 8)\n  2159: a0 = s1 + 0x2000\n  2163: i32 a0 = a0 + 0x520\n  2167: a1 = 0\n  2169: ra = 0x2a\n  2172: ecalli 2 // 'call_data_load'\n  2174: t0 = 0x2c\n  2177: a3 = s1 + 0x20b8\n  2181: jump @62\n      : @61 [@dyn 21] (gas: 3)\n  2183: t0 = 0x2c\n  2186: a3 = s1 + 0x20b8\n  2190: fallthrough\n      : @62 [@dyn 22] (gas: 2)\n  2191: a0 = i32 [a3 + 0x484]\n  2195: jump @64 if a0 != 2293374087\n      : @63 (gas: 1)\n  2202: jump @250\n      : @64 (gas: 1)\n  2205: jump @89 if a0 == 2401489772\n      : @65 (gas: 2)\n  2213: a2 = s1 + 0x28b8\n  2217: jump @67 if a0 != 2573362740\n      : @66 (gas: 1)\n  2224: jump @383\n      : @67 (gas: 1)\n  2227: jump @69 if a0 != 3504541104\n      : @68 (gas: 1)\n  2234: jump @219\n      : @69 (gas: 1)\n  2237: jump @183 if a0 == 3916516871\n      : @70 (gas: 1)\n  2245: jump @72 if a0 != 248271711\n      : @71 (gas: 1)\n  2252: jump @347\n      : @72 (gas: 1)\n  2255: jump @120 if a0 == 573237126\n      : @73 (gas: 1)\n  2263: jump @148 if a0 == 773487949\n      : @74 (gas: 1)\n  2271: jump @76 if a0 != 932579317\n      : @75 (gas: 1)\n  2278: jump @289\n      : @76 (gas: 1)\n  2281: jump @78 if a0 != 1221342904\n      : @77 (gas: 1)\n  2288: jump @325\n      : @78 (gas: 1)\n  2291: jump @80 if a0 == 1251080110\n      : @79 (gas: 1)\n  2298: jump @434\n      : @80 (gas: 8)\n  2301: u64 [a2 + 128] = 0\n  2305: u64 [a2 + 120] = 0\n  2308: u64 [a2 + 112] = 0\n  2311: u64 [a2 + 104] = 0\n  2314: a0 = s1 + 0x3000\n  2318: i32 a0 = a0 + 0xfffffffffffff920\n  2322: ecalli 16 // 'value_transferred'\n  2324: fallthrough\n      : @81 (gas: 9)\n  2325: a3 = s1 + 0x28b8\n  2329: a0 = u64 [a3 + 0x78]\n  2332: a1 = u64 [a3 + 0x80]\n  2336: a2 = u64 [a3 + 0x70]\n  2339: a3 = u64 [a3 + 0x68]\n  2342: a1 = a1 | a2\n  2345: a0 = a0 | a3\n  2348: a0 = a0 | a1\n  2351: jump @83 if a0 == 0\n      : @82 (gas: 1)\n  2354: jump @623\n      : @83 (gas: 3)\n  2357: a0 = u64 [s1 + 0x118]\n  2361: a0 = i32 [a0]\n  2363: jump @85 if a0 >u 3\n      : @84 (gas: 1)\n  2367: jump @624\n      : @85 (gas: 3)\n  2370: a0 = s1 + 0x1000\n  2374: a1 = 0x40\n  2377: ra = 46, jump @7\n      : @86 [@dyn 23] (gas: 15)\n  2382: a3 = s1 + 0x7ff\n  2386: a3 = a3 + 0x99\n  2390: a5 = a3 + 0x700\n  2394: a4 = u64 [a5 + 0x80]\n  2398: a1 = u64 [a5 + 0x78]\n  2401: a2 = u64 [a5 + 0x70]\n  2404: a0 = u64 [a5 + 0x68]\n  2407: a4 = a4 | a2\n  2410: a2 = a0 | a1\n  2413: a2 = a2 | a4\n  2416: a2 = a2 >> 0x20\n  2419: a1 = a1 | a4\n  2422: a1 = a1 << 0x20\n  2425: a1 = a1 | a2\n  2428: jump @88 if a1 == 0\n      : @87 (gas: 1)\n  2431: jump @622\n      : @88 (gas: 10)\n  2434: a1 = u64 [0x200a0]\n  2439: u64 [a3 + 1888] = 0\n  2443: u64 [a3 + 1880] = 0\n  2447: u64 [a3 + 0x748] = a1\n  2451: a1 = s1 + 0x7ff\n  2455: a1 = a1 + 0x7e1\n  2459: u64 [a3 + 1872] = 0\n  2463: u64 [s1 + 0x118] = a0\n  2467: ra = 0x114\n  2471: jump @9\n      : @89 (gas: 11)\n  2474: a0 = s1 + 0x28b8\n  2478: u64 [a0 + 320] = 0\n  2482: u64 [a0 + 312] = 0\n  2486: u64 [a0 + 304] = 0\n  2490: u64 [a0 + 296] = 0\n  2494: a0 = s1 + 0x3000\n  2498: i32 a0 = a0 + 0xfffffffffffff9e0\n  2502: ra = 0x30\n  2505: ecalli 16 // 'value_transferred'\n  2507: t0 = 0x32\n  2510: jump @1483\n      : @90 [@dyn 24] (gas: 1)\n  2514: t0 = 50, jump @1483\n      : @91 [@dyn 25] (gas: 8)\n  2520: a0 = u64 [a4 + 0x38]\n  2523: a1 = u64 [a4 + 0x40]\n  2526: a2 = u64 [a4 + 0x30]\n  2529: a3 = u64 [a4 + 0x28]\n  2532: a1 = a1 | a2\n  2535: a0 = a0 | a3\n  2538: a0 = a0 | a1\n  2541: jump @93 if a0 == 0\n      : @92 (gas: 1)\n  2544: jump @625\n      : @93 (gas: 1)\n  2547: t0 = 52, jump @1474\n      : @94 [@dyn 26] (gas: 1)\n  2553: jump @96 if a1 <u a0\n      : @95 (gas: 1)\n  2556: jump @626\n      : @96 (gas: 6)\n  2559: a0 = s1 + 0x3000\n  2563: i32 a0 = a0 + 0xfffffffffffffa00\n  2567: a1 = 0x4\n  2570: ra = 0x36\n  2573: ecalli 2 // 'call_data_load'\n  2575: fallthrough\n      : @97 [@dyn 27] (gas: 7)\n  2576: a0 = s1 + 0x28b8\n  2580: a5 = a0 + 0x100\n  2584: a1 = u64 [a5 + 0x60]\n  2587: a2 = u64 [a5 + 0x58]\n  2590: a3 = u64 [a5 + 0x50]\n  2593: a4 = u64 [a5 + 0x48]\n  2596: t0 = 56, jump @1450\n      : @98 [@dyn 28] (gas: 1)\n  2602: jump @100 if a0 != 0\n      : @99 (gas: 1)\n  2605: jump @627\n      : @100 (gas: 28)\n  2608: a0 = 0x30180\n  2613: u64 [s1 + 0xf0] = a0\n  2617: i32 a0 = a0 + 0\n  2619: u64 [s1 + 0xc0] = a0\n  2623: ecalli 4 // 'caller'\n  2625: a2 = u64 [s1 + 0xf0]\n  2629: a0 = u64 [a2 + 0x8]\n  2632: a1 = i32 [a2 + 0x10]\n  2635: a2 = u64 [a2]\n  2637: a0 = reverse a0\n  2639: a3 = a0 << 0x20\n  2642: a1 = reverse a1\n  2644: a1 = a1 >> 0x20\n  2647: a3 = a3 | a1\n  2650: a0 = a0 >> 0x20\n  2653: a1 = reverse a2\n  2655: a2 = a1 << 0x20\n  2658: a0 = a0 | a2\n  2661: a1 = a1 >> 0x20\n  2664: a2 = s1 + 0x10b8\n  2668: u64 [a2 + 1344] = 0\n  2672: a4 = a2 + 0x500\n  2676: u64 [a4 + 0x38] = a1\n  2679: u64 [a4 + 0x30] = a0\n  2682: a1 = s1 + 0x15e0\n  2686: u64 [a4 + 0x28] = a3\n  2689: a0 = 0\n  2691: ra = 58, jump @9\n      : @101 [@dyn 29] (gas: 9)\n  2696: a0 = s1 + 0x10b8\n  2700: u64 [a0 + 1312] = 0\n  2704: u64 [a0 + 1304] = 0\n  2708: u64 [a0 + 1296] = 0\n  2712: a2 = a0\n  2714: a0 = 0x20\n  2717: a1 = s1 + 0x15c0\n  2721: u64 [a2 + 1288] = 0\n  2725: ra = 60, jump @9\n      : @102 [@dyn 30] (gas: 7)\n  2730: a0 = sp + 0xffffffffffffffe0\n  2733: a0 = a0 & 0xffffffffffffffe0\n  2736: u64 [s1 + 0x100] = a0\n  2740: sp = a0\n  2742: a2 = 0x20170\n  2747: a0 = i32 [0x20170]\n  2752: jump @104 if a0 >u 63\n      : @103 (gas: 2)\n  2756: u32 [0x20170] = 0x40\n  2762: fallthrough\n      : @104 (gas: 15)\n  2763: u64 [s1 + 0xb8] = a2\n  2767: a0 = sp + 0xffffffffffffffe0\n  2770: a2 = a0 & 0xffffffffffffffe0\n  2773: u64 [s1 + 0xe8] = a2\n  2777: sp = a2\n  2779: a0 = 0x20180\n  2784: i32 a0 = a0 + 0\n  2786: i32 a2 = a2 + 0\n  2788: a1 = 0x40\n  2791: u64 [s1 + 0xc8] = a0\n  2795: ra = 0x3e\n  2798: ecalli 8 // 'hash_keccak_256'\n  2800: a3 = u64 [s1 + 0xe8]\n  2804: t0 = 0x40\n  2807: jump @1458\n      : @105 [@dyn 31] (gas: 2)\n  2811: a3 = u64 [s1 + 0xe8]\n  2815: t0 = 64, jump @1458\n      : @106 [@dyn 32] (gas: 26)\n  2821: a5 = reverse a1\n  2823: a2 = reverse a2\n  2825: t0 = reverse a3\n  2827: a4 = u64 [s1 + 0x100]\n  2831: u64 [a4 + 0x18] = t0\n  2834: u64 [a4 + 0x10] = a2\n  2837: u64 [a4 + 0x8] = a5\n  2840: u64 [a4] = a0\n  2842: a4 = sp + 0xffffffffffffffe0\n  2845: a1 = a4 & 0xffffffffffffffe0\n  2848: sp = a1\n  2850: a4 = a0 + 0x2\n  2853: a0 = a4 <u a0\n  2856: a3 = a5 + a0\n  2859: a5 = a3 <u a5\n  2862: a5 = a0 if a0 == 0\n  2865: a5 = a5 + a2\n  2868: a0 = a5 <u a2\n  2871: a0 = a0 + t0\n  2874: u64 [a1 + 0x10] = a5\n  2877: u64 [a1 + 0x8] = a3\n  2880: u64 [a1] = a4\n  2882: u64 [a1 + 0x18] = a0\n  2885: a0 = s1 + 0x15a0\n  2889: u64 [s1 + 0xe8] = a1\n  2893: ra = 66, jump @11\n      : @107 [@dyn 33] (gas: 25)\n  2898: a0 = s1 + 0x10b8\n  2902: t1 = u64 [a0 + 0x500]\n  2906: t2 = u64 [a0 + 0x4f8]\n  2910: t0 = u64 [a0 + 0x4f0]\n  2914: a3 = u64 [a0 + 0x4e8]\n  2918: a0 = u64 [s1 + 0x118]\n  2922: a4 = t1 ^ a0\n  2925: a5 = t1 <u a0\n  2928: a1 = u64 [s1 + 0xf8]\n  2932: a0 = t2 <u a1\n  2935: u64 [s1 + 0xd8] = a0\n  2939: a5 = a0 if a4 == 0\n  2942: a0 = u64 [s1 + 0x110]\n  2946: ra = t0 ^ a0\n  2949: a0 = t0 <u a0\n  2952: a2 = u64 [s1 + 0x108]\n  2956: u64 [s1 + 0xe0] = a3\n  2960: a2 = a3 <u a2\n  2963: u64 [s1 + 0xd0] = a2\n  2967: a0 = a2 if ra == 0\n  2970: ra = a1\n  2972: a1 = t2 ^ a1\n  2975: a1 = a1 | a4\n  2978: a5 = a0 if a1 == 0\n  2981: jump @109 if a5 == 0\n      : @108 (gas: 1)\n  2984: jump @632\n      : @109 (gas: 24)\n  2987: a1 = t2 - ra\n  2990: a2 = u64 [s1 + 0x118]\n  2994: a2 = t1 - a2\n  2997: a3 = u64 [s1 + 0xd8]\n  3001: a2 = a2 - a3\n  3004: a3 = a1 <u a0\n  3007: a2 = a2 - a3\n  3010: a1 = a1 - a0\n  3013: a0 = u64 [s1 + 0x110]\n  3017: a0 = t0 - a0\n  3020: a3 = u64 [s1 + 0xd0]\n  3024: a0 = a0 - a3\n  3027: a3 = u64 [s1 + 0xe0]\n  3031: a4 = u64 [s1 + 0x108]\n  3035: a3 = a3 - a4\n  3038: a4 = s1 + 0x28b8\n  3042: a5 = a4 + 0x100\n  3046: u64 [a5 + 0x68] = a3\n  3049: u64 [a5 + 0x70] = a0\n  3052: u64 [a5 + 0x78] = a1\n  3055: u64 [a5 + 0x80] = a2\n  3059: a1 = s1 + 0x2a20\n  3063: a0 = u64 [s1 + 0xe8]\n  3067: ra = 68, jump @12\n      : @110 [@dyn 34] (gas: 3)\n  3072: a0 = s1 + 0x1580\n  3076: a1 = u64 [s1 + 0x100]\n  3080: ra = 70, jump @11\n      : @111 [@dyn 35] (gas: 33)\n  3085: a2 = s1 + 0x10b8\n  3089: a4 = a2 + 0x400\n  3093: a0 = u64 [a4 + 0xd0]\n  3097: a1 = u64 [a4 + 0xc8]\n  3101: t0 = u64 [a2 + 0x4e0]\n  3105: a3 = u64 [a4 + 0xd8]\n  3109: a4 = u64 [s1 + 0x110]\n  3113: a4 = a4 + a0\n  3116: a5 = u64 [s1 + 0x108]\n  3120: a5 = a5 + a1\n  3123: a1 = a5 <u a1\n  3126: a4 = a4 + a1\n  3129: a2 = a4 ^ a0\n  3132: a0 = a4 <u a0\n  3135: a0 = a1 if a2 == 0\n  3138: a1 = u64 [s1 + 0xf8]\n  3142: a1 = a1 + a3\n  3145: a2 = u64 [s1 + 0x118]\n  3149: t0 = t0 + a2\n  3152: a2 = a1 <u a3\n  3155: a2 = a2 + t0\n  3158: a0 = a0 + a1\n  3161: a1 = a0 <u a1\n  3164: a1 = a1 + a2\n  3167: a2 = s1 + 0x28b8\n  3171: a3 = a2 + 0x100\n  3175: u64 [a3 + 0x88] = a5\n  3179: u64 [a3 + 0x90] = a4\n  3183: u64 [a3 + 0x98] = a0\n  3187: u64 [a3 + 0xa0] = a1\n  3191: a1 = s1 + 0x2a40\n  3195: a0 = u64 [s1 + 0x100]\n  3199: ra = 72, jump @12\n      : @112 [@dyn 36] (gas: 3)\n  3204: a0 = s1 + 0x1560\n  3208: a1 = 0x40\n  3211: ra = 74, jump @7\n      : @113 [@dyn 37] (gas: 7)\n  3216: a4 = s1 + 0x10b8\n  3220: a5 = a4 + 0x400\n  3224: a0 = u64 [a5 + 0xc0]\n  3228: a1 = u64 [a5 + 0xb8]\n  3232: a2 = u64 [a5 + 0xb0]\n  3236: a3 = u64 [a5 + 0xa8]\n  3240: t0 = 76, jump @1443\n      : @114 [@dyn 38] (gas: 1)\n  3246: jump @116 if a0 == 0\n      : @115 (gas: 1)\n  3249: jump @622\n      : @116 (gas: 14)\n  3252: a2 = s1 + 0x100\n  3256: a0 = u64 [a2 + 0x8]\n  3259: a5 = a4 + 0x400\n  3263: u64 [a5 + 0x88] = a0\n  3267: a0 = u64 [a2 + 0x10]\n  3270: u64 [a5 + 0x90] = a0\n  3274: a0 = u64 [s1 + 0xf8]\n  3278: u64 [a5 + 0x98] = a0\n  3282: a1 = s1 + 0x1540\n  3286: a0 = u64 [a2 + 0x18]\n  3289: u64 [a5 + 0xa0] = a0\n  3293: a0 = a3\n  3295: u64 [a2 + 0x18] = a3\n  3298: ra = 78, jump @9\n      : @117 [@dyn 39] (gas: 6)\n  3303: a0 = u64 [s1 + 0xc0]\n  3307: ra = 0x50\n  3310: ecalli 4 // 'caller'\n  3312: a2 = u64 [s1 + 0xf0]\n  3316: t0 = 0x52\n  3319: jump @1419\n      : @118 [@dyn 40] (gas: 2)\n  3322: a2 = u64 [s1 + 0xf0]\n  3326: t0 = 82, jump @1419\n      : @119 [@dyn 41] (gas: 26)\n  3331: t0 = a1 | a0\n  3334: a3 = a3 >> 0x20\n  3337: a2 = reverse a2\n  3339: a1 = a2 << 0x20\n  3342: a1 = a1 | a3\n  3345: a2 = a2 >> 0x20\n  3348: a3 = u64 [0x20080]\n  3353: a0 = s1 + 0x10b8\n  3357: u64 [a0 + 0x480] = a3\n  3361: a3 = u64 [0x20088]\n  3366: a4 = u64 [0x20090]\n  3371: a5 = u64 [0x20098]\n  3376: u64 [a0 + 0x478] = a3\n  3380: a3 = a0 + 0x400\n  3384: u64 [a3 + 0x70] = a4\n  3387: u64 [a0 + 1120] = 0\n  3391: u64 [a3 + 0x68] = a5\n  3394: u64 [a3 + 0x58] = a2\n  3397: u64 [a3 + 0x50] = a1\n  3400: a1 = 0x20\n  3403: a2 = s1 + 0x1520\n  3407: a3 = s1 + 0x1500\n  3411: u64 [a0 + 0x448] = t0\n  3415: a0 = u64 [s1 + 0x118]\n  3419: ra = 0x142\n  3423: jump @13\n      : @120 (gas: 10)\n  3426: u64 [a3 + 1376] = 0\n  3430: u64 [a3 + 1368] = 0\n  3434: u64 [a3 + 1360] = 0\n  3438: u64 [a3 + 1352] = 0\n  3442: a0 = s1 + 0x2000\n  3446: i32 a0 = a0 + 0x600\n  3450: ra = 0x54\n  3453: ecalli 16 // 'value_transferred'\n  3455: t0 = 0x56\n  3458: jump @1481\n      : @121 [@dyn 42] (gas: 1)\n  3462: t0 = 86, jump @1481\n      : @122 [@dyn 43] (gas: 1)\n  3468: t0 = 88, jump @1492\n      : @123 [@dyn 44] (gas: 1)\n  3474: jump @125 if a0 == 0\n      : @124 (gas: 1)\n  3477: jump @636\n      : @125 (gas: 3)\n  3480: a0 = u64 [s1 + 0x118]\n  3484: a0 = i32 [a0]\n  3486: jump @127 if a0 >u 3\n      : @126 (gas: 1)\n  3490: jump @637\n      : @127 (gas: 16)\n  3493: a0 = s1 + 0x2000\n  3497: i32 a0 = a0 + 0x620\n  3501: ecalli 9 // 'now'\n  3503: a0 = s1 + 0x20b8\n  3507: a2 = a0 + 0x500\n  3511: a1 = u64 [a2 + 0x80]\n  3515: u64 [s1 + 0xd8] = a1\n  3519: a1 = u64 [a2 + 0x78]\n  3522: u64 [s1 + 0xd0] = a1\n  3526: a1 = u64 [a2 + 0x70]\n  3529: u64 [s1 + 0x118] = a1\n  3533: a0 = u64 [a2 + 0x68]\n  3536: u64 [s1 + 0x110] = a0\n  3540: a0 = s1 + 0x360\n  3544: a1 = 0x40\n  3547: ra = 90, jump @7\n      : @128 [@dyn 45] (gas: 6)\n  3552: a4 = s1 + 0x300\n  3556: a0 = u64 [a4 + 0x78]\n  3559: a1 = u64 [a4 + 0x70]\n  3562: a2 = u64 [a4 + 0x68]\n  3565: a3 = u64 [a4 + 0x60]\n  3568: t0 = 92, jump @1443\n      : @129 [@dyn 46] (gas: 1)\n  3574: jump @131 if a0 == 0\n      : @130 (gas: 1)\n  3577: jump @622\n      : @131 (gas: 46)\n  3580: u64 [s1 + 0x98] = a3\n  3584: t1 = u64 [s1 + 0xd0]\n  3588: a0 = clz t1\n  3590: a0 = a0 + 0x40\n  3593: ra = u64 [s1 + 0xd8]\n  3597: a2 = clz ra\n  3599: a2 = a0 if ra == 0\n  3602: t2 = u64 [s1 + 0x110]\n  3606: a0 = clz t2\n  3608: a0 = a0 + 0x40\n  3611: t0 = u64 [s1 + 0x118]\n  3615: a1 = clz t0\n  3617: a1 = a0 if t0 == 0\n  3620: a0 = a1 + 0x80\n  3624: a3 = t1 | ra\n  3627: a2 = a0 if a3 == 0\n  3630: a5 = a0 <u a1\n  3633: a5 = 0 if a3 != 0\n  3635: a4 = a5 >u 0\n  3637: a0 = a2 <u 0xf0\n  3641: a3 = a0 ^ 0x1\n  3644: a4 = a3 if a5 == 0\n  3647: a0 = a4 <u 0x1\n  3650: a0 = a0 + 0xffffffffffffffff\n  3653: a1 = -a4\n  3655: a5 = -a5\n  3657: a3 = a5 - a3\n  3660: a2 = 0xef - a2\n  3664: u64 [s1 + 0xf8] = a1\n  3668: a5 = a1 >u 0\n  3670: a1 = a0 >u 0\n  3672: a1 = a5 if a0 == 0\n  3675: a5 = a3 >u 0\n  3677: u64 [s1 + 0xe8] = a2\n  3681: a2 = a2 <u 0x100\n  3685: a2 = a2 ^ 0x1\n  3688: a2 = a5 if a3 != 0\n  3691: a2 = a1 if a4 != 0\n  3694: a1 = t2 | t1\n  3697: a4 = t0 | ra\n  3700: a1 = a1 | a4\n  3703: a1 = a1 <u 0x1\n  3706: a1 = a1 | a2\n  3709: a4 = t2\n  3711: a4 = 0 if a1 != 0\n  3713: jump @133 if a1 == 0\n      : @132 (gas: 1)\n  3716: jump @719\n      : @133 (gas: 7)\n  3719: a1 = u64 [s1 + 0xe8]\n  3723: a1 = a1 ^ 0xff\n  3727: a2 = u64 [s1 + 0xf8]\n  3731: a1 = a1 | a2\n  3734: a2 = a3 | a0\n  3737: a1 = a1 | a2\n  3740: jump @135 if a1 != 0\n      : @134 (gas: 1)\n  3743: jump @719\n      : @135 (gas: 20)\n  3746: a4 = u64 [s1 + 0xe8]\n  3750: a2 = a4 + 0x1\n  3753: u64 [s1 + 0x108] = a2\n  3757: a1 = a2 <u 0x1\n  3760: a1 = a1 + a3\n  3763: u64 [s1 + 0x100] = a1\n  3767: a1 = a1 | a2\n  3770: a1 = a1 <u 0x1\n  3773: a3 = u64 [s1 + 0xf8]\n  3777: a1 = a1 + a3\n  3780: u64 [s1 + 0xf0] = a1\n  3784: a1 = a1 <u a3\n  3787: a0 = a0 + a1\n  3790: u64 [s1 + 0xf8] = a0\n  3794: a1 = 0xff - a4\n  3798: u64 [s1 + 0xc0] = a1\n  3802: a2 = 0x80 - a1\n  3806: a0 = u64 [s1 + 0x110]\n  3810: a1 = u64 [s1 + 0x118]\n  3814: ra = 94, jump @1493\n      : @136 [@dyn 47] (gas: 6)\n  3820: u64 [s1 + 0xb8] = a0\n  3824: u64 [s1 + 0xc8] = a1\n  3828: a0 = u64 [s1 + 0xd0]\n  3832: a1 = u64 [s1 + 0xd8]\n  3836: a2 = u64 [s1 + 0xc0]\n  3840: ra = 96, jump @1498\n      : @137 [@dyn 48] (gas: 7)\n  3846: u64 [s1 + 0xb0] = a0\n  3850: u64 [s1 + 0xa8] = a1\n  3854: a0 = u64 [s1 + 0xc0]\n  3858: a2 = a0 + 0xffffffffffffff80\n  3861: a0 = u64 [s1 + 0x110]\n  3865: a1 = u64 [s1 + 0x118]\n  3869: ra = 98, jump @1498\n      : @138 [@dyn 49] (gas: 8)\n  3875: u64 [s1 + 0xa0] = a0\n  3879: u64 [s1 + 0x90] = a1\n  3883: a2 = u64 [s1 + 0xc0]\n  3887: a0 = a2 <u 0x80\n  3891: u64 [s1 + 0x88] = a0\n  3895: a0 = u64 [s1 + 0x110]\n  3899: a1 = u64 [s1 + 0x118]\n  3903: ra = 100, jump @1498\n      : @139 [@dyn 50] (gas: 12)\n  3909: u64 [s1 + 0xe0] = a1\n  3913: a1 = u64 [s1 + 0x100]\n  3917: a2 = u64 [s1 + 0xf8]\n  3921: a2 = a2 | a1\n  3924: a1 = u64 [s1 + 0x108]\n  3928: a3 = u64 [s1 + 0xf0]\n  3932: a1 = a1 | a3\n  3935: a1 = a1 | a2\n  3938: a3 = u64 [s1 + 0x88]\n  3942: a0 = 0 if a3 == 0\n  3944: u64 [s1 + 0xe8] = a0\n  3948: jump @141 if a1 != 0\n      : @140 (gas: 1)\n  3951: jump @717\n      : @141 (gas: 30)\n  3954: a2 = a3\n  3956: a0 = u64 [s1 + 0xc8]\n  3960: a1 = u64 [s1 + 0xa8]\n  3964: a0 = a0 | a1\n  3967: a5 = a3\n  3969: a1 = u64 [s1 + 0x90]\n  3973: a0 = a1 if a2 == 0\n  3976: a2 = u64 [s1 + 0xd8]\n  3980: a3 = a2\n  3982: a1 = a2\n  3984: a2 = u64 [s1 + 0xc0]\n  3988: a3 = a0 if a2 != 0\n  3991: u64 [s1 + 0xc8] = a3\n  3995: a0 = u64 [s1 + 0xb8]\n  3999: a3 = u64 [s1 + 0xb0]\n  4003: a0 = a0 | a3\n  4006: a3 = u64 [s1 + 0xa0]\n  4010: a0 = a3 if a5 == 0\n  4013: a4 = u64 [s1 + 0xd0]\n  4017: a3 = a4\n  4019: a3 = a0 if a2 != 0\n  4022: u64 [s1 + 0xc0] = a3\n  4026: a0 = u64 [s1 + 0xe0]\n  4030: a0 = 0 if a5 == 0\n  4032: u64 [s1 + 0xe0] = a0\n  4036: u64 [s1 + 176] = 0x15180\n  4043: a0 = u64 [s1 + 0x108]\n  4047: a2 = a0 + 0xffffffffffffff80\n  4050: a0 = a4\n  4052: ra = 102, jump @1493\n      : @142 [@dyn 51] (gas: 6)\n  4058: u64 [s1 + 0xb8] = a0\n  4062: u64 [s1 + 0xa0] = a1\n  4066: a0 = u64 [s1 + 0x110]\n  4070: a1 = u64 [s1 + 0x118]\n  4074: a2 = u64 [s1 + 0x108]\n  4078: ra = 104, jump @1493\n      : @143 [@dyn 52] (gas: 7)\n  4084: u64 [s1 + 0x90] = a0\n  4088: u64 [s1 + 0xa8] = a1\n  4092: a1 = u64 [s1 + 0x108]\n  4096: a2 = 0x80 - a1\n  4100: a0 = u64 [s1 + 0xd0]\n  4104: a1 = u64 [s1 + 0xd8]\n  4108: ra = 106, jump @1498\n      : @144 [@dyn 53] (gas: 21)\n  4114: a2 = u64 [s1 + 0xa8]\n  4118: a1 = a1 | a2\n  4121: a5 = s1 + 0x100\n  4125: a2 = u64 [a5 + 0x8]\n  4128: a3 = a2 <u 0x80\n  4132: u64 [s1 + 0xa8] = a3\n  4136: a4 = u64 [s1 + 0xa0]\n  4140: a1 = a4 if a3 == 0\n  4143: a4 = u64 [a5 + 0x18]\n  4146: a4 = a1 if a2 != 0\n  4149: u64 [a5 + 0x18] = a4\n  4152: a1 = u64 [s1 + 0x90]\n  4156: a0 = a0 | a1\n  4159: a1 = u64 [s1 + 0xb8]\n  4163: a0 = a1 if a3 == 0\n  4166: a1 = u64 [a5 + 0x10]\n  4169: a1 = a0 if a2 != 0\n  4172: u64 [a5 + 0x10] = a1\n  4175: a0 = u64 [s1 + 0xd0]\n  4179: a1 = u64 [s1 + 0xd8]\n  4183: ra = 108, jump @1493\n      : @145 [@dyn 54] (gas: 15)\n  4189: t2 = u64 [s1 + 0x110]\n  4193: t1 = u64 [s1 + 0x118]\n  4197: u64 [s1 + 216] = 0\n  4201: u64 [s1 + 208] = 0\n  4205: a2 = u64 [s1 + 0xa8]\n  4209: a1 = 0 if a2 == 0\n  4211: a0 = 0 if a2 == 0\n  4213: u64 [s1 + 0xb8] = a0\n  4217: a3 = u64 [s1 + 0xb0]\n  4221: a2 = a3 + 0xffffffffffffffff\n  4224: u64 [s1 + 0xa8] = a2\n  4228: a2 = a3 >u 0\n  4230: a2 = a2 + 0xffffffffffffffff\n  4233: u64 [s1 + 0xa0] = a2\n  4237: fallthrough\n      : @146 (gas: 89)\n  4238: a2 = t2 >> 0x3f\n  4241: a3 = t1 << 0x1\n  4244: a2 = a2 | a3\n  4247: a3 = t2 << 0x1\n  4250: t2 = u64 [s1 + 0xc8]\n  4254: a4 = t2 >> 0x3f\n  4257: a3 = a3 | a4\n  4260: u64 [s1 + 0x118] = a3\n  4264: ra = u64 [s1 + 0xa0]\n  4268: a0 = t1\n  4270: t1 = ra ^ a2\n  4273: t0 = ra <u a2\n  4276: a4 = u64 [s1 + 0xa8]\n  4280: a5 = a4 <u a3\n  4283: a5 = t0 if t1 != 0\n  4286: a1 = a1 << 0x1\n  4289: a4 = u64 [s1 + 0xb8]\n  4293: a3 = a4 >> 0x3f\n  4296: a1 = a1 | a3\n  4299: u64 [s1 + 0x110] = a1\n  4303: a3 = a0 >> 0x3f\n  4306: a0 = a4 << 0x1\n  4309: a3 = a3 | a0\n  4312: a0 = t2 << 0x1\n  4315: a4 = u64 [s1 + 0xc0]\n  4319: a1 = a4 >> 0x3f\n  4322: t0 = a0 | a1\n  4325: a1 = a4 << 0x1\n  4328: a4 = u64 [s1 + 0xe0]\n  4332: t1 = a4 >> 0x3f\n  4335: t1 = a1 | t1\n  4338: a1 = a4 << 0x1\n  4341: a4 = u64 [s1 + 0xe8]\n  4345: t2 = a4 >> 0x3f\n  4348: a1 = a1 | t2\n  4351: a4 = a4 << 0x1\n  4354: a0 = u64 [s1 + 0xd8]\n  4358: a4 = a4 | a0\n  4361: u64 [s1 + 0xe8] = a4\n  4365: a0 = u64 [s1 + 0xd0]\n  4369: a1 = a1 | a0\n  4372: u64 [s1 + 0xe0] = a1\n  4376: a1 = a0 | t1\n  4379: u64 [s1 + 0xc0] = a1\n  4383: a0 = a0 | t0\n  4386: u64 [s1 + 0xc8] = a0\n  4390: a0 = ra - a3\n  4393: a0 = a0 <u a5\n  4396: a1 = ra <u a3\n  4399: a5 = u64 [s1 + 0x110]\n  4403: a4 = ra - a5\n  4406: a4 = a4 - a1\n  4409: a4 = a4 - a0\n  4412: ra = a4 >>a 0x3f\n  4415: a0 = u64 [s1 + 0xb0]\n  4419: a0 = ra & a0\n  4422: a1 = u64 [s1 + 0x118]\n  4426: t2 = a1 - a0\n  4429: a1 = a1 <u a0\n  4432: t1 = a2 - a1\n  4435: a1 = 0 if a2 != 0\n  4437: a0 = a3 - a1\n  4440: u64 [s1 + 0xb8] = a0\n  4444: a1 = a3 <u a1\n  4447: a1 = a5 - a1\n  4450: a0 = s1 + 0x100\n  4454: a3 = u64 [a0 + 0x8]\n  4457: a5 = u64 [a0]\n  4459: a2 = a3 | a5\n  4462: a2 = a2 <u 0x1\n  4465: a4 = u64 [s1 + 0xf0]\n  4469: t0 = a4 <u a2\n  4472: a2 = a4 - a2\n  4475: a4 = a3 <u 0x1\n  4478: a5 = a5 - a4\n  4481: a4 = u64 [s1 + 0xf8]\n  4485: a4 = a4 - t0\n  4488: a3 = a3 + 0xffffffffffffffff\n  4491: u64 [a0] = a5\n  4493: u64 [s1 + 0xf8] = a4\n  4497: t0 = a5 | a4\n  4500: u64 [a0 + 0x8] = a3\n  4503: a4 = a3 | a2\n  4506: a3 = a4 | t0\n  4509: a4 = ra & 0x1\n  4512: u64 [s1 + 0xd8] = a4\n  4516: u64 [s1 + 0xf0] = a2\n  4520: u64 [s1 + 208] = 0\n  4524: jump @146 if a3 != 0\n      : @147 (gas: 1)\n  4528: jump @718\n      : @148 (gas: 10)\n  4531: u64 [a3 + 1440] = 0\n  4535: u64 [a3 + 1432] = 0\n  4539: u64 [a3 + 1424] = 0\n  4543: u64 [a3 + 1416] = 0\n  4547: a0 = s1 + 0x2000\n  4551: i32 a0 = a0 + 0x640\n  4555: ra = 0x6e\n  4558: ecalli 16 // 'value_transferred'\n  4560: t0 = 0x70\n  4563: jump @1481\n      : @149 [@dyn 55] (gas: 1)\n  4567: t0 = 112, jump @1481\n      : @150 [@dyn 56] (gas: 8)\n  4573: a0 = u64 [a4 + 0x98]\n  4577: a1 = u64 [a4 + 0xa0]\n  4581: a2 = u64 [a4 + 0x90]\n  4585: a3 = u64 [a4 + 0x88]\n  4589: a1 = a1 | a2\n  4592: a0 = a0 | a3\n  4595: a0 = a0 | a1\n  4598: jump @152 if a0 == 0\n      : @151 (gas: 1)\n  4601: jump @638\n      : @152 (gas: 1)\n  4604: t0 = 114, jump @1474\n      : @153 [@dyn 57] (gas: 1)\n  4610: jump @155 if a1 <u a0\n      : @154 (gas: 1)\n  4613: jump @639\n      : @155 (gas: 6)\n  4616: a0 = s1 + 0x2000\n  4620: i32 a0 = a0 + 0x660\n  4624: a1 = 0x4\n  4627: ra = 0x74\n  4630: ecalli 2 // 'call_data_load'\n  4632: fallthrough\n      : @156 [@dyn 58] (gas: 7)\n  4633: a0 = s1 + 0x20b8\n  4637: a5 = a0 + 0x500\n  4641: a1 = u64 [a5 + 0xc0]\n  4645: a2 = u64 [a5 + 0xb8]\n  4649: a3 = u64 [a5 + 0xb0]\n  4653: a4 = u64 [a5 + 0xa8]\n  4657: t0 = 118, jump @1450\n      : @157 [@dyn 59] (gas: 1)\n  4662: jump @159 if a0 != 0\n      : @158 (gas: 1)\n  4665: jump @640\n      : @159 (gas: 8)\n  4668: a0 = 0x30180\n  4673: u64 [s1 + 0x100] = a0\n  4677: i32 a0 = a0 + 0\n  4679: u64 [s1 + 0xe8] = a0\n  4683: ra = 0x78\n  4686: ecalli 4 // 'caller'\n  4688: t0 = 0x7a\n  4691: jump @1422\n      : @160 [@dyn 60] (gas: 1)\n  4694: t0 = 122, jump @1422\n      : @161 [@dyn 61] (gas: 8)\n  4699: u64 [s1 + 1240] = 0\n  4703: a2 = s1 + 0x400\n  4707: u64 [a2 + 0xd0] = a1\n  4711: u64 [a2 + 0xc8] = a0\n  4715: a1 = s1 + 0x4c0\n  4719: u64 [a2 + 0xc0] = a3\n  4723: a0 = 0\n  4725: ra = 124, jump @9\n      : @162 [@dyn 62] (gas: 7)\n  4730: u64 [s1 + 1208] = 0\n  4734: u64 [s1 + 1200] = 0\n  4738: u64 [s1 + 1192] = 0\n  4742: a0 = 0x20\n  4745: a1 = s1 + 0x4a0\n  4749: u64 [s1 + 1184] = 0\n  4753: ra = 126, jump @9\n      : @163 [@dyn 63] (gas: 7)\n  4758: a0 = sp + 0xffffffffffffffe0\n  4761: a0 = a0 & 0xffffffffffffffe0\n  4764: u64 [s1 + 0xf0] = a0\n  4768: sp = a0\n  4770: a2 = 0x20170\n  4775: a0 = i32 [0x20170]\n  4780: jump @165 if a0 >u 63\n      : @164 (gas: 2)\n  4784: u32 [0x20170] = 0x40\n  4790: fallthrough\n      : @165 (gas: 15)\n  4791: u64 [s1 + 0xc0] = a2\n  4795: a0 = sp + 0xffffffffffffffe0\n  4798: a2 = a0 & 0xffffffffffffffe0\n  4801: u64 [s1 + 0xe0] = a2\n  4805: sp = a2\n  4807: a0 = 0x20180\n  4812: i32 a0 = a0 + 0\n  4814: i32 a2 = a2 + 0\n  4816: a1 = 0x40\n  4819: u64 [s1 + 0xc8] = a0\n  4823: ra = 0x80\n  4827: ecalli 8 // 'hash_keccak_256'\n  4829: a3 = u64 [s1 + 0xe0]\n  4833: t0 = 0x82\n  4837: jump @1425\n      : @166 [@dyn 64] (gas: 2)\n  4840: a3 = u64 [s1 + 0xe0]\n  4844: t0 = 130, jump @1425\n      : @167 [@dyn 65] (gas: 2)\n  4850: a0 = s1 + 0x480\n  4854: ra = 132, jump @11\n      : @168 [@dyn 66] (gas: 24)\n  4860: t1 = u64 [s1 + 0x498]\n  4864: t2 = u64 [s1 + 0x490]\n  4868: t0 = u64 [s1 + 0x488]\n  4872: a3 = u64 [s1 + 0x480]\n  4876: a0 = u64 [s1 + 0x118]\n  4880: a4 = t1 ^ a0\n  4883: a5 = t1 <u a0\n  4886: a1 = u64 [s1 + 0xf8]\n  4890: a0 = t2 <u a1\n  4893: u64 [s1 + 0xd8] = a0\n  4897: a5 = a0 if a4 == 0\n  4900: a0 = u64 [s1 + 0x110]\n  4904: ra = t0 ^ a0\n  4907: a0 = t0 <u a0\n  4910: a2 = u64 [s1 + 0x108]\n  4914: u64 [s1 + 0xe0] = a3\n  4918: a2 = a3 <u a2\n  4921: u64 [s1 + 0xd0] = a2\n  4925: a0 = a2 if ra == 0\n  4928: ra = a1\n  4930: a1 = t2 ^ a1\n  4933: a1 = a1 | a4\n  4936: a5 = a0 if a1 == 0\n  4939: jump @170 if a5 == 0\n      : @169 (gas: 1)\n  4942: jump @644\n      : @170 (gas: 11)\n  4945: a1 = t2 - ra\n  4948: a2 = u64 [s1 + 0x118]\n  4952: a2 = t1 - a2\n  4955: a3 = u64 [s1 + 0xd8]\n  4959: a2 = a2 - a3\n  4962: a3 = a1 <u a0\n  4965: a2 = a2 - a3\n  4968: a1 = a1 - a0\n  4971: a0 = u64 [s1 + 0x110]\n  4975: a0 = t0 - a0\n  4978: t0 = 134, jump @1470\n      : @171 [@dyn 67] (gas: 8)\n  4984: a5 = a4 + 0x500\n  4988: u64 [a5 + 0xc8] = a3\n  4992: u64 [a5 + 0xd0] = a0\n  4996: u64 [a5 + 0xd8] = a1\n  5000: u64 [a5 + 0xe0] = a2\n  5004: a1 = s1 + 0x2680\n  5008: a0 = u64 [s1 + 0xf0]\n  5012: ra = 136, jump @12\n      : @172 [@dyn 68] (gas: 5)\n  5018: a0 = u64 [s1 + 0xe8]\n  5022: ra = 0x8a\n  5026: ecalli 4 // 'caller'\n  5028: t0 = 0x8c\n  5032: jump @1438\n      : @173 [@dyn 69] (gas: 1)\n  5035: t0 = 140, jump @1438\n      : @174 [@dyn 70] (gas: 14)\n  5041: u64 [s1 + 0x458] = a2\n  5045: a2 = u64 [s1 + 0xf8]\n  5049: u64 [s1 + 0x450] = a2\n  5053: a2 = u64 [a4 + 0x10]\n  5056: u64 [s1 + 0x448] = a2\n  5060: a2 = u64 [a4 + 0x8]\n  5063: u64 [s1 + 0x440] = a2\n  5067: u64 [s1 + 1144] = 0\n  5071: u64 [s1 + 0x470] = a1\n  5075: u64 [s1 + 0x468] = a0\n  5079: a0 = s1 + 0x460\n  5083: a1 = s1 + 0x440\n  5087: u64 [s1 + 0x460] = a3\n  5091: ra = 142, jump @1308\n      : @175 [@dyn 71] (gas: 3)\n  5097: a0 = s1 + 0x420\n  5101: a1 = 0x40\n  5104: ra = 144, jump @7\n      : @176 [@dyn 72] (gas: 6)\n  5110: a4 = s1 + 0x400\n  5114: a0 = u64 [a4 + 0x38]\n  5117: a1 = u64 [a4 + 0x30]\n  5120: a2 = u64 [a4 + 0x28]\n  5123: a3 = u64 [a4 + 0x20]\n  5126: t0 = 146, jump @1443\n      : @177 [@dyn 73] (gas: 1)\n  5132: jump @179 if a0 == 0\n      : @178 (gas: 1)\n  5135: jump @622\n      : @179 (gas: 13)\n  5138: a0 = u64 [s1 + 0x108]\n  5142: a2 = s1 + 0x400\n  5146: u64 [a2] = a0\n  5148: a0 = u64 [s1 + 0x110]\n  5152: u64 [a2 + 0x8] = a0\n  5155: a0 = u64 [s1 + 0xf8]\n  5159: u64 [a2 + 0x10] = a0\n  5162: a1 = s1 + 0x400\n  5166: a0 = u64 [s1 + 0x118]\n  5170: u64 [a2 + 0x18] = a0\n  5173: a0 = a3\n  5175: u64 [s1 + 0x118] = a3\n  5179: ra = 148, jump @9\n      : @180 [@dyn 74] (gas: 6)\n  5185: a0 = u64 [s1 + 0xe8]\n  5189: ra = 0x96\n  5193: ecalli 4 // 'caller'\n  5195: a2 = u64 [s1 + 0x100]\n  5199: t0 = 0x98\n  5203: jump @1419\n      : @181 [@dyn 75] (gas: 2)\n  5206: a2 = u64 [s1 + 0x100]\n  5210: t0 = 152, jump @1419\n      : @182 [@dyn 76] (gas: 25)\n  5216: t0 = a1 | a0\n  5219: a3 = a3 >> 0x20\n  5222: a2 = reverse a2\n  5224: a1 = a2 << 0x20\n  5227: a1 = a1 | a3\n  5230: a2 = a2 >> 0x20\n  5233: u64 [s1 + 984] = 0\n  5237: a3 = u64 [0x200f8]\n  5242: a4 = u64 [0x20100]\n  5247: a5 = u64 [0x20108]\n  5252: a0 = u64 [0x20110]\n  5257: u64 [s1 + 0x3f8] = a3\n  5261: a3 = s1 + 0x300\n  5265: u64 [a3 + 0xf0] = a4\n  5269: u64 [a3 + 0xe8] = a5\n  5273: u64 [a3 + 0xe0] = a0\n  5277: u64 [a3 + 0xd0] = a2\n  5281: u64 [a3 + 0xc8] = a1\n  5285: a1 = 0x20\n  5288: a2 = s1 + 0x3e0\n  5292: a3 = s1 + 0x3c0\n  5296: u64 [s1 + 0x3c0] = t0\n  5300: a0 = u64 [s1 + 0x118]\n  5304: ra = 0x142\n  5308: jump @13\n      : @183 (gas: 10)\n  5311: u64 [a2 + 960] = 0\n  5315: u64 [a2 + 952] = 0\n  5319: u64 [a2 + 944] = 0\n  5323: u64 [a2 + 936] = 0\n  5327: a0 = s1 + 0x3000\n  5331: i32 a0 = a0 + 0xfffffffffffffc60\n  5335: ra = 0x9a\n  5339: ecalli 16 // 'value_transferred'\n  5341: t0 = 0x9c\n  5345: jump @1484\n      : @184 [@dyn 77] (gas: 1)\n  5348: t0 = 156, jump @1484\n      : @185 [@dyn 78] (gas: 8)\n  5354: a0 = u64 [a4 + 0xb8]\n  5358: a1 = u64 [a4 + 0xc0]\n  5362: a2 = u64 [a4 + 0xb0]\n  5366: a3 = u64 [a4 + 0xa8]\n  5370: a1 = a1 | a2\n  5373: a0 = a0 | a3\n  5376: a0 = a0 | a1\n  5379: jump @187 if a0 == 0\n      : @186 (gas: 1)\n  5382: jump @645\n      : @187 (gas: 1)\n  5385: t0 = 158, jump @1474\n      : @188 [@dyn 79] (gas: 1)\n  5391: jump @190 if a1 <u a0\n      : @189 (gas: 1)\n  5394: jump @646\n      : @190 (gas: 5)\n  5397: a0 = s1 + 0x3000\n  5401: i32 a0 = a0 + 0xfffffffffffffc80\n  5405: a1 = 0x4\n  5408: ecalli 2 // 'call_data_load'\n  5410: fallthrough\n      : @191 (gas: 14)\n  5411: a0 = s1 + 0x28b8\n  5415: a5 = a0 + 0x300\n  5419: a1 = u64 [a5 + 0xe0]\n  5423: a2 = u64 [a5 + 0xd8]\n  5427: a3 = u64 [a5 + 0xd0]\n  5431: a4 = u64 [a5 + 0xc8]\n  5435: u64 [s1 + 0x70] = a1\n  5438: u64 [s1 + 0x60] = a3\n  5441: a0 = a3 | a1\n  5444: u64 [s1 + 0x68] = a2\n  5447: u64 [s1 + 0x58] = a4\n  5450: a1 = a4 | a2\n  5453: a0 = a0 | a1\n  5456: jump @193 if a0 != 0\n      : @192 (gas: 1)\n  5459: jump @647\n      : @193 (gas: 8)\n  5462: a0 = 0x30180\n  5467: u64 [s1 + 0x88] = a0\n  5471: i32 a0 = a0 + 0\n  5473: u64 [s1 + 0x78] = a0\n  5476: ra = 0xa0\n  5480: ecalli 4 // 'caller'\n  5482: t0 = 0xa2\n  5486: jump @1420\n      : @194 [@dyn 80] (gas: 1)\n  5489: t0 = 162, jump @1420\n      : @195 [@dyn 81] (gas: 8)\n  5495: u64 [a2 + 1088] = 0\n  5499: a4 = a2 + 0x400\n  5503: u64 [a4 + 0x38] = a1\n  5506: u64 [a4 + 0x30] = a0\n  5509: a1 = s1 + 0x24e0\n  5513: u64 [a4 + 0x28] = a3\n  5516: a0 = 0\n  5518: ra = 164, jump @9\n      : @196 [@dyn 82] (gas: 9)\n  5524: a1 = s1 + 0x20b8\n  5528: u64 [a1 + 1056] = 0\n  5532: u64 [a1 + 1048] = 0\n  5536: u64 [a1 + 1032] = 0x2\n  5541: a2 = a1\n  5543: a0 = 0x20\n  5546: a1 = s1 + 0x24c0\n  5550: u64 [a2 + 1040] = 0\n  5554: ra = 166, jump @9\n      : @197 [@dyn 83] (gas: 8)\n  5560: a0 = sp + 0xffffffffffffffe0\n  5563: a0 = a0 & 0xffffffffffffffe0\n  5566: u64 [s1 + 0x118] = a0\n  5570: sp = a0\n  5572: a2 = 0x20170\n  5577: a0 = i32 [0x20170]\n  5582: a1 = 0x3f\n  5585: jump @199 if a1 <u a0\n      : @198 (gas: 2)\n  5588: u32 [0x20170] = 0x40\n  5594: fallthrough\n      : @199 (gas: 4)\n  5595: u64 [s1 + 0x48] = a2\n  5598: a0 = 0xffffffff\n  5608: u64 [s1 + 0x80] = a0\n  5612: t0 = 168, jump @1478\n      : @200 [@dyn 84] (gas: 9)\n  5618: a0 = 0x20180\n  5623: i32 a0 = a0 + 0\n  5625: i32 a2 = a2 + 0\n  5627: a1 = 0x40\n  5630: u64 [s1 + 0x50] = a0\n  5633: ra = 0xaa\n  5637: ecalli 8 // 'hash_keccak_256'\n  5639: t0 = 0xac\n  5643: jump @1441\n      : @201 [@dyn 85] (gas: 1)\n  5646: t0 = 172, jump @1441\n      : @202 [@dyn 86] (gas: 3)\n  5652: i32 a0 = a0 + 0x4a0\n  5656: a0 = a0 + s1\n  5659: ra = 174, jump @11\n      : @203 [@dyn 87] (gas: 4)\n  5665: a0 = s1 + 0x20b8\n  5669: a0 = u32 [a0 + 0x3e8]\n  5673: a1 = u64 [s1 + 0x80]\n  5677: jump @205 if a0 != a1\n      : @204 (gas: 1)\n  5680: jump @652\n      : @205 (gas: 10)\n  5683: a1 = a0 + 0x1\n  5686: u64 [s1 + 0x98] = a1\n  5690: a0 = a1 <u 0x1\n  5693: u64 [s1 + 0x90] = a0\n  5697: a0 = a0 | a1\n  5700: a0 = a0 <u 0x1\n  5703: u64 [s1 + 0xa0] = a0\n  5707: a0 = s1 + 0x2480\n  5711: a1 = u64 [s1 + 0x118]\n  5715: ra = 176, jump @11\n      : @206 [@dyn 88] (gas: 22)\n  5721: a3 = s1 + 0x20b8\n  5725: a0 = u32 [a3 + 0x3cc]\n  5729: a4 = a3 + 0x300\n  5733: a1 = u64 [a4 + 0xd8]\n  5737: a0 = a0 << 0x20\n  5740: a2 = u64 [a4 + 0xd0]\n  5744: a3 = u64 [a4 + 0xe0]\n  5748: a4 = u64 [s1 + 0xa0]\n  5752: a1 = a1 | a4\n  5755: a4 = u64 [s1 + 0x98]\n  5759: a0 = a0 | a4\n  5762: a4 = u64 [s1 + 0x90]\n  5766: a2 = a2 | a4\n  5769: a4 = s1 + 0x28b8\n  5773: u64 [a4 + 0x400] = a3\n  5777: a3 = a4 + 0x300\n  5781: u64 [a3 + 0xf0] = a2\n  5785: u64 [a3 + 0xe8] = a0\n  5789: u64 [a3 + 0xf8] = a1\n  5793: a1 = s1 + 0x2ca0\n  5797: a0 = u64 [s1 + 0x118]\n  5801: ra = 178, jump @12\n      : @207 [@dyn 89] (gas: 4)\n  5807: a0 = s1 + 0x3000\n  5811: i32 a0 = a0 + 0xfffffffffffffcc0\n  5815: ecalli 9 // 'now'\n  5817: fallthrough\n      : @208 (gas: 48)\n  5818: a0 = s1 + 0x28b8\n  5822: t2 = u64 [a0 + 0x420]\n  5826: a3 = u64 [a0 + 0x418]\n  5830: u64 [s1 + 0xd8] = a3\n  5834: t1 = u64 [a0 + 0x410]\n  5838: ra = u64 [a0 + 0x408]\n  5842: a0 = clz t2\n  5844: a1 = clz a3\n  5846: a2 = a1 + 0x40\n  5849: a2 = a0 if t2 != 0\n  5852: a0 = clz t1\n  5854: a1 = clz ra\n  5856: a1 = a1 + 0x40\n  5859: a1 = a0 if t1 != 0\n  5862: a0 = a1 + 0x80\n  5866: a3 = a3 | t2\n  5869: a2 = a0 if a3 == 0\n  5872: a5 = a0 <u a1\n  5875: a5 = 0 if a3 != 0\n  5877: a4 = a5 >u 0\n  5879: a0 = a2 <u 0xf0\n  5883: a3 = a0 ^ 0x1\n  5886: a4 = a3 if a5 == 0\n  5889: a0 = a4 <u 0x1\n  5892: a0 = a0 + 0xffffffffffffffff\n  5895: a1 = -a4\n  5897: a5 = -a5\n  5899: a3 = a5 - a3\n  5902: t0 = 0xef - a2\n  5906: u64 [s1 + 0x118] = a1\n  5910: a5 = a1 >u 0\n  5912: a1 = a0 >u 0\n  5914: a1 = a5 if a0 == 0\n  5917: a5 = t0 <u 0x100\n  5921: a5 = a5 ^ 0x1\n  5924: a2 = a3 >u 0\n  5926: a5 = a2 if a3 != 0\n  5929: a5 = a1 if a4 != 0\n  5932: u64 [s1 + 0xc0] = t2\n  5936: a1 = t1 | t2\n  5939: a4 = u64 [s1 + 0xd8]\n  5943: a2 = ra | a4\n  5946: a1 = a1 | a2\n  5949: a1 = a1 <u 0x1\n  5952: a1 = a1 | a5\n  5955: t2 = ra\n  5957: ra = 0 if a1 != 0\n  5959: jump @210 if a1 == 0\n      : @209 (gas: 1)\n  5962: jump @456\n      : @210 (gas: 6)\n  5965: a1 = t0 ^ 0xff\n  5969: a5 = u64 [s1 + 0x118]\n  5973: a1 = a1 | a5\n  5976: a2 = a3 | a0\n  5979: a1 = a1 | a2\n  5982: jump @212 if a1 != 0\n      : @211 (gas: 1)\n  5985: jump @456\n      : @212 (gas: 20)\n  5988: a2 = t0 + 0x1\n  5991: u64 [s1 + 0x110] = a2\n  5995: a1 = a2 <u 0x1\n  5998: a1 = a1 + a3\n  6001: u64 [s1 + 0x100] = a1\n  6005: a1 = a1 | a2\n  6008: a1 = a1 <u 0x1\n  6011: a1 = a1 + a5\n  6014: u64 [s1 + 0xf0] = a1\n  6018: a1 = a1 <u a5\n  6021: a0 = a0 + a1\n  6024: u64 [s1 + 0xf8] = a0\n  6028: a1 = 0xff - t0\n  6032: u64 [s1 + 0xe8] = a1\n  6036: a2 = 0x80 - a1\n  6040: a0 = t2\n  6042: u64 [s1 + 0xd0] = t2\n  6046: a1 = t1\n  6048: u64 [s1 + 0xc8] = t1\n  6052: ra = 180, jump @1493\n      : @213 [@dyn 90] (gas: 6)\n  6058: u64 [s1 + 0xe0] = a0\n  6062: u64 [s1 + 0x118] = a1\n  6066: a0 = u64 [s1 + 0xd8]\n  6070: a1 = u64 [s1 + 0xc0]\n  6074: a2 = u64 [s1 + 0xe8]\n  6078: ra = 182, jump @1498\n      : @214 [@dyn 91] (gas: 7)\n  6084: u64 [s1 + 0xb0] = a0\n  6088: u64 [s1 + 0xa8] = a1\n  6092: a0 = u64 [s1 + 0xe8]\n  6096: a2 = a0 + 0xffffffffffffff80\n  6099: a0 = u64 [s1 + 0xd0]\n  6103: a1 = u64 [s1 + 0xc8]\n  6107: ra = 184, jump @1498\n      : @215 [@dyn 92] (gas: 8)\n  6113: u64 [s1 + 0x40] = a0\n  6116: u64 [s1 + 0x38] = a1\n  6119: a2 = u64 [s1 + 0xe8]\n  6123: a0 = a2 <u 0x80\n  6127: u64 [s1 + 0xb8] = a0\n  6131: a0 = u64 [s1 + 0xd0]\n  6135: a1 = u64 [s1 + 0xc8]\n  6139: ra = 186, jump @1498\n      : @216 [@dyn 93] (gas: 11)\n  6145: a4 = u64 [s1 + 0xb8]\n  6149: t0 = u64 [s1 + 0xf0]\n  6153: a5 = u64 [s1 + 0xf8]\n  6157: a2 = u64 [s1 + 0x100]\n  6161: a5 = a5 | a2\n  6164: a3 = u64 [s1 + 0x110]\n  6168: a3 = a3 | t0\n  6171: a3 = a3 | a5\n  6174: a0 = 0 if a4 == 0\n  6176: u64 [s1 + 0x108] = a0\n  6180: jump @218 if a3 == 0\n      : @217 (gas: 1)\n  6183: jump @447\n      : @218 (gas: 2)\n  6186: a5 = 0\n  6188: jump @455\n      : @219 (gas: 3)\n  6191: a0 = u64 [s1 + 0x118]\n  6195: a0 = i32 [a0]\n  6197: jump @221 if a0 >u 3\n      : @220 (gas: 1)\n  6201: jump @656\n      : @221 (gas: 10)\n  6204: u64 [a2 + 864] = 0\n  6208: u64 [a2 + 856] = 0\n  6212: u64 [a2 + 848] = 0\n  6216: u64 [a2 + 840] = 0\n  6220: a0 = s1 + 0x3000\n  6224: i32 a0 = a0 + 0xfffffffffffffc00\n  6228: ra = 0xbc\n  6232: ecalli 16 // 'value_transferred'\n  6234: t0 = 0xbe\n  6238: jump @1484\n      : @222 [@dyn 94] (gas: 1)\n  6241: t0 = 190, jump @1484\n      : @223 [@dyn 95] (gas: 1)\n  6247: t0 = 192, jump @1492\n      : @224 [@dyn 96] (gas: 1)\n  6253: jump @226 if a0 != 0\n      : @225 (gas: 1)\n  6256: jump @657\n      : @226 (gas: 9)\n  6259: a0 = 0x30180\n  6264: u64 [s1 + 0x100] = a0\n  6268: i32 a0 = a0 + 0\n  6270: u64 [s1 + 0xd8] = a0\n  6274: ra = 0xc2\n  6278: ecalli 4 // 'caller'\n  6280: a2 = u64 [s1 + 0x100]\n  6284: t0 = 0xc4\n  6288: jump @1413\n      : @227 [@dyn 97] (gas: 2)\n  6291: a2 = u64 [s1 + 0x100]\n  6295: t0 = 196, jump @1413\n      : @228 [@dyn 98] (gas: 8)\n  6301: u64 [a2 + 1856] = 0\n  6305: a4 = a2 + 0x700\n  6309: u64 [a4 + 0x38] = a1\n  6312: u64 [a4 + 0x30] = a0\n  6315: a1 = s1 + 0x1fe0\n  6319: u64 [a4 + 0x28] = a3\n  6322: a0 = 0\n  6324: ra = 198, jump @9\n      : @229 [@dyn 99] (gas: 9)\n  6330: a0 = s1 + 0x18b8\n  6334: u64 [a0 + 1824] = 0\n  6338: u64 [a0 + 1816] = 0\n  6342: u64 [a0 + 1808] = 0\n  6346: a2 = a0\n  6348: a0 = 0x20\n  6351: a1 = s1 + 0x1fc0\n  6355: u64 [a2 + 1800] = 0\n  6359: ra = 200, jump @9\n      : @230 [@dyn 100] (gas: 8)\n  6365: a0 = sp + 0xffffffffffffffe0\n  6368: a0 = a0 & 0xffffffffffffffe0\n  6371: u64 [s1 + 0x118] = a0\n  6375: sp = a0\n  6377: a2 = 0x20170\n  6382: a0 = i32 [0x20170]\n  6387: a1 = 0x3f\n  6390: jump @232 if a1 <u a0\n      : @231 (gas: 4)\n  6393: u32 [0x20170] = 0x40\n  6399: u64 [s1 + 0xd0] = a2\n  6403: t0 = 0xca\n  6407: jump @1478\n      : @232 (gas: 2)\n  6410: u64 [s1 + 0xd0] = a2\n  6414: t0 = 202, jump @1478\n      : @233 [@dyn 101] (gas: 9)\n  6420: a0 = 0x20180\n  6425: i32 a0 = a0 + 0\n  6427: i32 a2 = a2 + 0\n  6429: a1 = 0x40\n  6432: u64 [s1 + 0xe0] = a0\n  6436: ra = 0xcc\n  6440: ecalli 8 // 'hash_keccak_256'\n  6442: t0 = 0xce\n  6446: jump @1441\n      : @234 [@dyn 102] (gas: 1)\n  6449: t0 = 206, jump @1441\n      : @235 [@dyn 103] (gas: 3)\n  6455: i32 a0 = a0 + 0xffffffffffffffa0\n  6458: a0 = a0 + s1\n  6461: ra = 208, jump @11\n      : @236 [@dyn 104] (gas: 23)\n  6467: a0 = s1 + 0x18b8\n  6471: a1 = u64 [a0 + 0x700]\n  6475: u64 [s1 + 0xf0] = a1\n  6479: a2 = a0 + 0x600\n  6483: a1 = u64 [a2 + 0xf8]\n  6487: u64 [s1 + 0x110] = a1\n  6491: a1 = u64 [a2 + 0xe8]\n  6495: u64 [s1 + 0xe8] = a1\n  6499: a0 = u64 [a2 + 0xf0]\n  6503: u64 [s1 + 0x108] = a0\n  6507: a0 = sp + 0xffffffffffffffe0\n  6510: a0 = a0 & 0xffffffffffffffe0\n  6513: u64 [s1 + 0xf8] = a0\n  6517: sp = a0\n  6519: a0 = s1 + 0x28b8\n  6523: u64 [a0 + 896] = 0\n  6527: u64 [a0 + 888] = 0\n  6531: u64 [a0 + 880] = 0\n  6535: u64 [a0 + 872] = 0\n  6539: a0 = s1 + 0x3000\n  6543: i32 a0 = a0 + 0xfffffffffffffc20\n  6547: ecalli 16 // 'value_transferred'\n  6549: fallthrough\n      : @237 (gas: 43)\n  6550: a0 = s1 + 0x28b8\n  6554: a3 = a0 + 0x300\n  6558: a2 = u64 [a3 + 0x70]\n  6561: a1 = u64 [a3 + 0x68]\n  6564: t0 = u64 [a0 + 0x380]\n  6568: a4 = u64 [a3 + 0x78]\n  6571: a5 = u64 [s1 + 0x108]\n  6575: a5 = a5 + a2\n  6578: a0 = u64 [s1 + 0xe8]\n  6582: t1 = a1 + a0\n  6585: a1 = t1 <u a1\n  6588: a5 = a5 + a1\n  6591: a3 = a5 ^ a2\n  6594: a2 = a5 <u a2\n  6597: a2 = a1 if a3 == 0\n  6600: a1 = u64 [s1 + 0x110]\n  6604: a1 = a1 + a4\n  6607: ra = u64 [s1 + 0xf0]\n  6611: t0 = t0 + ra\n  6614: a3 = a1 <u a4\n  6617: a3 = a3 + t0\n  6620: a2 = a2 + a1\n  6623: a1 = a2 <u a1\n  6626: t2 = a3 + a1\n  6629: a3 = u64 [s1 + 0x108]\n  6633: a1 = a3 ^ a5\n  6636: a4 = a5 <u a3\n  6639: a0 = t1 <u a0\n  6642: a0 = a4 if a1 != 0\n  6645: a3 = u64 [s1 + 0x110]\n  6649: t0 = a2 <u a3\n  6652: a4 = ra ^ t2\n  6655: a1 = t2 <u ra\n  6658: a1 = t0 if a4 == 0\n  6661: a3 = a3 ^ a2\n  6664: a3 = a3 | a4\n  6667: a0 = a1 if a3 != 0\n  6670: a1 = u64 [s1 + 0xf8]\n  6674: u64 [a1] = t1\n  6676: u64 [a1 + 0x8] = a5\n  6679: u64 [a1 + 0x10] = a2\n  6682: u64 [a1 + 0x18] = t2\n  6685: jump @239 if a0 == 0\n      : @238 (gas: 1)\n  6688: jump @662\n      : @239 (gas: 2)\n  6691: a0 = u64 [s1 + 0x118]\n  6695: ra = 210, jump @12\n      : @240 [@dyn 105] (gas: 3)\n  6701: a0 = s1 + 0x1f80\n  6705: a1 = 0x40\n  6708: ra = 212, jump @7\n      : @241 [@dyn 106] (gas: 20)\n  6714: a0 = s1 + 0x18b8\n  6718: a2 = a0 + 0x600\n  6722: a1 = u64 [a2 + 0xe0]\n  6726: u64 [s1 + 0x110] = a1\n  6730: a1 = u64 [a2 + 0xd8]\n  6734: u64 [s1 + 0x108] = a1\n  6738: a1 = u64 [a2 + 0xd0]\n  6742: u64 [s1 + 0xf8] = a1\n  6746: a0 = u64 [a2 + 0xc8]\n  6750: u64 [s1 + 0x118] = a0\n  6754: a0 = s1 + 0x28b8\n  6758: u64 [a0 + 928] = 0\n  6762: u64 [a0 + 920] = 0\n  6766: u64 [a0 + 912] = 0\n  6770: u64 [a0 + 904] = 0\n  6774: a0 = s1 + 0x3000\n  6778: i32 a0 = a0 + 0xfffffffffffffc40\n  6782: ra = 0xd6\n  6786: ecalli 16 // 'value_transferred'\n  6788: fallthrough\n      : @242 [@dyn 107] (gas: 14)\n  6789: a3 = s1 + 0x100\n  6793: a0 = u64 [a3 + 0x10]\n  6796: a1 = u64 [s1 + 0xf8]\n  6800: a0 = a0 | a1\n  6803: a1 = u64 [a3 + 0x18]\n  6806: a5 = a1\n  6808: a2 = u64 [a3 + 0x8]\n  6811: a1 = a1 | a2\n  6814: a1 = a1 | a0\n  6817: a1 = a1 >> 0x20\n  6820: a0 = a0 | a2\n  6823: a0 = a0 << 0x20\n  6826: a0 = a0 | a1\n  6829: jump @244 if a0 == 0\n      : @243 (gas: 1)\n  6832: jump @622\n      : @244 (gas: 1)\n  6835: t0 = 216, jump @1484\n      : @245 [@dyn 108] (gas: 13)\n  6841: a0 = u64 [a4 + 0x88]\n  6845: a1 = u64 [a4 + 0x90]\n  6849: a2 = u64 [a4 + 0x98]\n  6853: a3 = u64 [a4 + 0xa0]\n  6857: a4 = s1 + 0x18b8\n  6861: u64 [a4 + 0x6c0] = a3\n  6865: a3 = a4 + 0x600\n  6869: u64 [a3 + 0xb8] = a2\n  6873: u64 [a3 + 0xb0] = a1\n  6877: a1 = s1 + 0x1f60\n  6881: u64 [a3 + 0xa8] = a0\n  6885: a0 = a5\n  6887: ra = 218, jump @9\n      : @246 [@dyn 109] (gas: 6)\n  6893: a0 = u64 [s1 + 0xd8]\n  6897: ra = 0xdc\n  6901: ecalli 4 // 'caller'\n  6903: a2 = u64 [s1 + 0x100]\n  6907: t0 = 0xde\n  6911: jump @1419\n      : @247 [@dyn 110] (gas: 2)\n  6914: a2 = u64 [s1 + 0x100]\n  6918: t0 = 222, jump @1419\n      : @248 [@dyn 111] (gas: 25)\n  6924: t0 = a1 | a0\n  6927: a3 = a3 >> 0x20\n  6930: a2 = reverse a2\n  6932: a1 = a2 << 0x20\n  6935: a1 = a1 | a3\n  6938: a2 = a2 >> 0x20\n  6941: a3 = u64 [0x20020]\n  6946: a0 = s1 + 0x18b8\n  6950: u64 [a0 + 0x6a0] = a3\n  6954: a3 = u64 [0x20028]\n  6959: a4 = u64 [0x20030]\n  6964: a5 = u64 [0x20038]\n  6969: u64 [a0 + 0x698] = a3\n  6973: a3 = a0 + 0x600\n  6977: u64 [a3 + 0x90] = a4\n  6981: u64 [a0 + 1664] = 0\n  6985: u64 [a3 + 0x88] = a5\n  6989: u64 [a3 + 0x78] = a2\n  6992: u64 [a3 + 0x70] = a1\n  6995: a1 = 0x20\n  6998: a2 = s1 + 0x1f40\n  7002: a3 = s1 + 0x1f20\n  7006: u64 [a0 + 0x668] = t0\n  7010: a0 = u64 [s1 + 0x118]\n  7014: ra = 224, jump @13\n      : @249 [@dyn 112] (gas: 5)\n  7020: a0 = 0\n  7022: a1 = u64 [s1 + 0xe0]\n  7026: a2 = 0\n  7028: ecalli 13 // 'seal_return'\n  7030: jump @988\n      : @250 (gas: 11)\n  7033: a0 = s1 + 0x28b8\n  7037: u64 [a0 + 288] = 0\n  7041: u64 [a0 + 280] = 0\n  7045: u64 [a0 + 272] = 0\n  7049: u64 [a0 + 264] = 0\n  7053: a0 = s1 + 0x3000\n  7057: i32 a0 = a0 + 0xfffffffffffff9c0\n  7061: ra = 0xe2\n  7065: ecalli 16 // 'value_transferred'\n  7067: t0 = 0xe4\n  7071: jump @1483\n      : @251 [@dyn 113] (gas: 1)\n  7074: t0 = 228, jump @1483\n      : @252 [@dyn 114] (gas: 8)\n  7080: a0 = u64 [a4 + 0x18]\n  7083: a1 = u64 [a4 + 0x20]\n  7086: a2 = u64 [a4 + 0x10]\n  7089: a3 = u64 [a4 + 0x8]\n  7092: a1 = a1 | a2\n  7095: a0 = a0 | a3\n  7098: a0 = a0 | a1\n  7101: jump @254 if a0 == 0\n      : @253 (gas: 1)\n  7104: jump @669\n      : @254 (gas: 3)\n  7107: a0 = u64 [s1 + 0x118]\n  7111: a0 = i32 [a0]\n  7113: jump @256 if a0 >u 99\n      : @255 (gas: 1)\n  7117: jump @670\n      : @256 (gas: 4)\n  7120: a0 = s1 + 0x14a0\n  7124: ra = 0xe6\n  7128: t0 = 0x5ac\n  7132: jump @1476\n      : @257 [@dyn 115] (gas: 11)\n  7135: a1 = s1 + 0x10b8\n  7139: a0 = u64 [a1 + 0x3e8]\n  7143: u64 [s1 + 0x118] = a0\n  7147: a0 = u64 [a1 + 0x3f0]\n  7151: u64 [s1 + 0x110] = a0\n  7155: a0 = u32 [a1 + 0x3f8]\n  7159: u64 [s1 + 0xf8] = a0\n  7163: a0 = s1 + 0x1480\n  7167: ra = 0xe8\n  7171: t0 = 0x5b0\n  7175: jump @1488\n      : @258 [@dyn 116] (gas: 7)\n  7178: a0 = s1 + 0x10b8\n  7182: a0 = u64 [a0 + 0x3c8]\n  7186: u64 [s1 + 0x100] = a0\n  7190: a0 = s1 + 0x1460\n  7194: ra = 0xea\n  7198: t0 = 0x5b6\n  7202: jump @1488\n      : @259 [@dyn 117] (gas: 3)\n  7205: t0 = 0xec\n  7209: a2 = s1 + 0x10b8\n  7213: fallthrough\n      : @260 [@dyn 118] (gas: 14)\n  7214: a3 = a2 + 0x300\n  7218: a0 = u64 [a3 + 0xa8]\n  7222: a4 = s1 + 0x100\n  7226: u64 [a4 + 0x8] = a0\n  7229: u64 [a2 + 928] = 0\n  7233: a0 = u64 [s1 + 0xf8]\n  7237: u64 [a3 + 0x98] = a0\n  7241: a0 = u64 [a4 + 0x10]\n  7244: u64 [a3 + 0x90] = a0\n  7248: a1 = s1 + 0x1440\n  7252: a0 = u64 [a4 + 0x18]\n  7255: u64 [a3 + 0x88] = a0\n  7259: a0 = 0\n  7261: ra = 238, jump @9\n      : @261 [@dyn 119] (gas: 3)\n  7267: t0 = 0xf0\n  7271: a1 = s1 + 0x10b8\n  7275: fallthrough\n      : @262 [@dyn 120] (gas: 8)\n  7276: u64 [a1 + 896] = 0\n  7280: u64 [a1 + 888] = 0\n  7284: u64 [a1 + 872] = 0x3\n  7289: a2 = a1\n  7291: a0 = 0x20\n  7294: a1 = s1 + 0x1420\n  7298: u64 [a2 + 880] = 0\n  7302: ra = 242, jump @9\n      : @263 [@dyn 121] (gas: 3)\n  7308: a1 = 0x20170\n  7313: a0 = i32 [0x20170]\n  7318: jump @265 if a0 >u 63\n      : @264 (gas: 2)\n  7322: u32 [0x20170] = 0x40\n  7328: fallthrough\n      : @265 (gas: 14)\n  7329: a0 = sp + 0xffffffffffffffe0\n  7332: a2 = a0 & 0xffffffffffffffe0\n  7335: u64 [s1 + 0xf8] = a2\n  7339: sp = a2\n  7341: a0 = 0x20180\n  7346: i32 a0 = a0 + 0\n  7348: i32 a2 = a2 + 0\n  7350: u64 [s1 + 0x118] = a1\n  7354: a1 = 0x40\n  7357: u64 [s1 + 0x110] = a0\n  7361: ra = 0xf4\n  7365: ecalli 8 // 'hash_keccak_256'\n  7367: t0 = 0xf6\n  7371: jump @1490\n      : @266 [@dyn 122] (gas: 1)\n  7374: t0 = 246, jump @1490\n      : @267 [@dyn 123] (gas: 8)\n  7380: u64 [s1 + 0xf0] = a0\n  7384: a0 = reverse a2\n  7386: u64 [s1 + 0xe8] = a0\n  7390: a0 = reverse a3\n  7392: u64 [s1 + 0xe0] = a0\n  7396: t0 = 0xf8\n  7400: a2 = s1 + 0x10b8\n  7404: fallthrough\n      : @268 [@dyn 124] (gas: 8)\n  7405: u64 [a2 + 864] = 0\n  7409: u64 [a2 + 856] = 0\n  7413: u64 [a2 + 848] = 0\n  7417: a1 = s1 + 0x1400\n  7421: a0 = u64 [s1 + 0x100]\n  7425: u64 [a2 + 0x348] = a0\n  7429: a0 = 0\n  7431: ra = 250, jump @9\n      : @269 [@dyn 125] (gas: 14)\n  7437: a0 = u64 [s1 + 0xe0]\n  7441: a1 = s1 + 0x10b8\n  7445: a2 = a1 + 0x300\n  7449: u64 [a2 + 0x40] = a0\n  7452: a0 = u64 [s1 + 0xe8]\n  7456: u64 [a2 + 0x38] = a0\n  7459: a0 = u64 [s1 + 0xf0]\n  7463: u64 [a2 + 0x30] = a0\n  7466: a3 = a1\n  7468: a0 = 0x20\n  7471: a1 = s1 + 0x13e0\n  7475: a2 = u64 [s1 + 0xf8]\n  7479: u64 [a3 + 0x328] = a2\n  7483: ra = 252, jump @9\n      : @270 [@dyn 126] (gas: 3)\n  7489: a1 = u64 [s1 + 0x118]\n  7493: a0 = i32 [a1]\n  7495: jump @272 if a0 >u 63\n      : @271 (gas: 2)\n  7499: u32 [a1 + 0] = 0x40\n  7502: fallthrough\n      : @272 (gas: 4)\n  7503: a0 = sp + 0xffffffffffffffe0\n  7506: a0 = a0 & 0xffffffffffffffe0\n  7509: u64 [s1 + 0x100] = a0\n  7513: t0 = 254, jump @1418\n      : @273 [@dyn 127] (gas: 5)\n  7519: ra = 0x100\n  7523: ecalli 8 // 'hash_keccak_256'\n  7525: a3 = u64 [s1 + 0x100]\n  7529: t0 = 0x102\n  7533: jump @1444\n      : @274 [@dyn 128] (gas: 2)\n  7536: a3 = u64 [s1 + 0x100]\n  7540: t0 = 258, jump @1444\n      : @275 [@dyn 129] (gas: 7)\n  7546: u64 [s1 + 0x100] = a0\n  7550: sp = a0\n  7552: a0 = u64 [s1 + 0x108]\n  7556: a0 = a0 << 0x20\n  7559: a0 = a0 >> 0x20\n  7562: a1 = 0x1000\n  7566: t0 = 260, jump @1491\n      : @276 [@dyn 130] (gas: 4)\n  7572: a1 = s1 + 0x13c0\n  7576: u64 [a2 + 0x308] = a0\n  7580: a0 = 0\n  7582: ra = 262, jump @9\n      : @277 [@dyn 131] (gas: 13)\n  7588: a0 = u64 [s1 + 0xe0]\n  7592: a1 = s1 + 0x10b8\n  7596: u64 [a1 + 0x300] = a0\n  7600: a0 = u64 [s1 + 0xe8]\n  7604: u64 [a1 + 0x2f8] = a0\n  7608: a0 = u64 [s1 + 0xf0]\n  7612: u64 [a1 + 0x2f0] = a0\n  7616: a3 = a1\n  7618: a0 = 0x20\n  7621: a1 = s1 + 0x13a0\n  7625: a2 = u64 [s1 + 0xf8]\n  7629: u64 [a3 + 0x2e8] = a2\n  7633: ra = 264, jump @9\n      : @278 [@dyn 132] (gas: 3)\n  7639: a1 = u64 [s1 + 0x118]\n  7643: a0 = i32 [a1]\n  7645: jump @280 if a0 >=u 64\n      : @279 (gas: 2)\n  7649: u32 [a1 + 0] = 0x40\n  7652: fallthrough\n      : @280 (gas: 4)\n  7653: a0 = sp + 0xffffffffffffffe0\n  7656: a0 = a0 & 0xffffffffffffffe0\n  7659: u64 [s1 + 0x118] = a0\n  7663: t0 = 266, jump @1418\n      : @281 [@dyn 133] (gas: 5)\n  7669: ra = 0x10c\n  7673: ecalli 8 // 'hash_keccak_256'\n  7675: a3 = u64 [s1 + 0x118]\n  7679: t0 = 0x10e\n  7683: jump @1446\n      : @282 [@dyn 134] (gas: 2)\n  7686: a3 = u64 [s1 + 0x118]\n  7690: t0 = 270, jump @1446\n      : @283 [@dyn 135] (gas: 2)\n  7696: a0 = s1 + 0x1380\n  7700: ra = 272, jump @11\n      : @284 [@dyn 136] (gas: 6)\n  7706: a0 = s1 + 0x10b8\n  7710: a0 = u64 [a0 + 0x2c8]\n  7714: u64 [s1 + 0x118] = a0\n  7718: a0 = s1 + 0x1360\n  7722: a1 = 0x40\n  7725: ra = 274, jump @7\n      : @285 [@dyn 137] (gas: 14)\n  7731: a3 = s1 + 0x10b8\n  7735: a5 = a3 + 0x200\n  7739: a4 = u64 [a5 + 0xc0]\n  7743: a1 = u64 [a5 + 0xb8]\n  7747: a2 = u64 [a5 + 0xb0]\n  7751: a0 = u64 [a5 + 0xa8]\n  7755: a4 = a4 | a2\n  7758: a2 = a0 | a1\n  7761: a2 = a2 | a4\n  7764: a2 = a2 >> 0x20\n  7767: a1 = a1 | a4\n  7770: a1 = a1 << 0x20\n  7773: a1 = a1 | a2\n  7776: jump @287 if a1 == 0\n      : @286 (gas: 1)\n  7779: jump @622\n      : @287 (gas: 8)\n  7782: a1 = u8 [s1 + 0x118]\n  7786: u64 [a3 + 672] = 0\n  7790: u64 [a3 + 664] = 0\n  7794: u64 [a3 + 0x288] = a1\n  7798: a1 = s1 + 0x1340\n  7802: u64 [a3 + 656] = 0\n  7806: u64 [s1 + 0x118] = a0\n  7810: ra = 276, jump @9\n      : @288 [@dyn 138] (gas: 4)\n  7816: a1 = 0x20\n  7819: a0 = u64 [s1 + 0x118]\n  7823: ra = 0x2ea\n  7827: jump @21\n      : @289 (gas: 10)\n  7830: u64 [a3 + 1536] = 0\n  7834: u64 [a3 + 1528] = 0\n  7838: u64 [a3 + 1520] = 0\n  7842: u64 [a3 + 1512] = 0\n  7846: a0 = s1 + 0x2000\n  7850: i32 a0 = a0 + 0x6a0\n  7854: ra = 0x116\n  7858: ecalli 16 // 'value_transferred'\n  7860: t0 = 0x118\n  7864: jump @1481\n      : @290 [@dyn 139] (gas: 1)\n  7867: t0 = 280, jump @1481\n      : @291 [@dyn 140] (gas: 8)\n  7873: a0 = u64 [a4 + 0xf8]\n  7877: a1 = u64 [a3 + 0x600]\n  7881: a2 = u64 [a4 + 0xf0]\n  7885: a3 = u64 [a4 + 0xe8]\n  7889: a1 = a1 | a2\n  7892: a0 = a0 | a3\n  7895: a0 = a0 | a1\n  7898: jump @293 if a0 == 0\n      : @292 (gas: 1)\n  7901: jump @671\n      : @293 (gas: 1)\n  7904: t0 = 282, jump @1474\n      : @294 [@dyn 141] (gas: 1)\n  7910: jump @296 if a1 <u a0\n      : @295 (gas: 1)\n  7913: jump @672\n      : @296 (gas: 6)\n  7916: a0 = s1 + 0x2000\n  7920: i32 a0 = a0 + 0x6c0\n  7924: a1 = 0x4\n  7927: ra = 0x11c\n  7931: ecalli 2 // 'call_data_load'\n  7933: fallthrough\n      : @297 [@dyn 142] (gas: 7)\n  7934: a0 = s1 + 0x20b8\n  7938: a5 = a0 + 0x600\n  7942: a1 = u64 [a5 + 0x20]\n  7945: a2 = u64 [a5 + 0x18]\n  7948: a3 = u64 [a5 + 0x10]\n  7951: a4 = u64 [a5 + 0x8]\n  7954: t0 = 286, jump @1450\n      : @298 [@dyn 143] (gas: 1)\n  7960: jump @300 if a0 != 0\n      : @299 (gas: 1)\n  7963: jump @673\n      : @300 (gas: 8)\n  7966: a0 = 0x30180\n  7971: u64 [s1 + 0x100] = a0\n  7975: i32 a0 = a0 + 0\n  7977: u64 [s1 + 0xe8] = a0\n  7981: ra = 0x120\n  7985: ecalli 4 // 'caller'\n  7987: t0 = 0x122\n  7991: jump @1422\n      : @301 [@dyn 144] (gas: 1)\n  7994: t0 = 290, jump @1422\n      : @302 [@dyn 145] (gas: 8)\n  8000: u64 [s1 + 1592] = 0\n  8004: a2 = s1 + 0x600\n  8008: u64 [a2 + 0x30] = a1\n  8011: u64 [a2 + 0x28] = a0\n  8014: a1 = s1 + 0x620\n  8018: u64 [a2 + 0x20] = a3\n  8021: a0 = 0\n  8023: ra = 292, jump @9\n      : @303 [@dyn 146] (gas: 7)\n  8029: u64 [s1 + 1560] = 0\n  8033: u64 [s1 + 1552] = 0\n  8037: u64 [s1 + 1544] = 0\n  8041: a0 = 0x20\n  8044: a1 = s1 + 0x600\n  8048: u64 [s1 + 1536] = 0\n  8052: ra = 294, jump @9\n      : @304 [@dyn 147] (gas: 7)\n  8058: a0 = sp + 0xffffffffffffffe0\n  8061: a0 = a0 & 0xffffffffffffffe0\n  8064: u64 [s1 + 0xf0] = a0\n  8068: sp = a0\n  8070: a2 = 0x20170\n  8075: a0 = i32 [0x20170]\n  8080: jump @306 if a0 >u 63\n      : @305 (gas: 2)\n  8084: u32 [0x20170] = 0x40\n  8090: fallthrough\n      : @306 (gas: 13)\n  8091: u64 [s1 + 0xc0] = a2\n  8095: a0 = sp + 0xffffffffffffffe0\n  8098: a2 = a0 & 0xffffffffffffffe0\n  8101: u64 [s1 + 0xe0] = a2\n  8105: sp = a2\n  8107: a0 = 0x20180\n  8112: i32 a0 = a0 + 0\n  8114: i32 a2 = a2 + 0\n  8116: a1 = 0x40\n  8119: u64 [s1 + 0xc8] = a0\n  8123: ra = 0x128\n  8127: ecalli 8 // 'hash_keccak_256'\n  8129: fallthrough\n      : @307 [@dyn 148] (gas: 11)\n  8130: a3 = u64 [s1 + 0xe0]\n  8134: a0 = u64 [a3]\n  8136: a1 = u64 [a3 + 0x8]\n  8139: a2 = u64 [a3 + 0x10]\n  8142: a3 = u64 [a3 + 0x18]\n  8145: a0 = reverse a0\n  8147: a1 = reverse a1\n  8149: a2 = reverse a2\n  8151: a3 = reverse a3\n  8153: a4 = a3 + 0x2\n  8156: t0 = 298, jump @1432\n      : @308 [@dyn 149] (gas: 7)\n  8162: a1 = u64 [s1 + 0xf0]\n  8166: u64 [a1] = a4\n  8168: u64 [a1 + 0x8] = a5\n  8171: u64 [a1 + 0x10] = a2\n  8174: u64 [a1 + 0x18] = a0\n  8177: a0 = s1 + 0x5e0\n  8181: ra = 300, jump @11\n      : @309 [@dyn 150] (gas: 24)\n  8187: t1 = u64 [s1 + 0x5f8]\n  8191: t2 = u64 [s1 + 0x5f0]\n  8195: t0 = u64 [s1 + 0x5e8]\n  8199: a3 = u64 [s1 + 0x5e0]\n  8203: a0 = u64 [s1 + 0x118]\n  8207: a4 = t1 ^ a0\n  8210: a5 = t1 <u a0\n  8213: a1 = u64 [s1 + 0xf8]\n  8217: a0 = t2 <u a1\n  8220: u64 [s1 + 0xd8] = a0\n  8224: a5 = a0 if a4 == 0\n  8227: a0 = u64 [s1 + 0x110]\n  8231: ra = t0 ^ a0\n  8234: a0 = t0 <u a0\n  8237: a2 = u64 [s1 + 0x108]\n  8241: u64 [s1 + 0xe0] = a3\n  8245: a2 = a3 <u a2\n  8248: u64 [s1 + 0xd0] = a2\n  8252: a0 = a2 if ra == 0\n  8255: ra = a1\n  8257: a1 = t2 ^ a1\n  8260: a1 = a1 | a4\n  8263: a5 = a0 if a1 == 0\n  8266: jump @311 if a5 == 0\n      : @310 (gas: 1)\n  8269: jump @677\n      : @311 (gas: 11)\n  8272: a1 = t2 - ra\n  8275: a2 = u64 [s1 + 0x118]\n  8279: a2 = t1 - a2\n  8282: a3 = u64 [s1 + 0xd8]\n  8286: a2 = a2 - a3\n  8289: a3 = a1 <u a0\n  8292: a2 = a2 - a3\n  8295: a1 = a1 - a0\n  8298: a0 = u64 [s1 + 0x110]\n  8302: a0 = t0 - a0\n  8305: t0 = 302, jump @1470\n      : @312 [@dyn 151] (gas: 8)\n  8311: a5 = a4 + 0x600\n  8315: u64 [a5 + 0x28] = a3\n  8318: u64 [a5 + 0x30] = a0\n  8321: u64 [a5 + 0x38] = a1\n  8324: u64 [a5 + 0x40] = a2\n  8327: a1 = s1 + 0x26e0\n  8331: a0 = u64 [s1 + 0xf0]\n  8335: ra = 304, jump @12\n      : @313 [@dyn 152] (gas: 5)\n  8341: a0 = u64 [s1 + 0xe8]\n  8345: ra = 0x132\n  8349: ecalli 4 // 'caller'\n  8351: t0 = 0x134\n  8355: jump @1438\n      : @314 [@dyn 153] (gas: 1)\n  8358: t0 = 308, jump @1438\n      : @315 [@dyn 154] (gas: 14)\n  8364: u64 [s1 + 0x5b8] = a2\n  8368: a2 = u64 [s1 + 0xf8]\n  8372: u64 [s1 + 0x5b0] = a2\n  8376: a2 = u64 [a4 + 0x10]\n  8379: u64 [s1 + 0x5a8] = a2\n  8383: a2 = u64 [a4 + 0x8]\n  8386: u64 [s1 + 0x5a0] = a2\n  8390: u64 [s1 + 1496] = 0\n  8394: u64 [s1 + 0x5d0] = a1\n  8398: u64 [s1 + 0x5c8] = a0\n  8402: a0 = s1 + 0x5c0\n  8406: a1 = s1 + 0x5a0\n  8410: u64 [s1 + 0x5c0] = a3\n  8414: ra = 310, jump @1308\n      : @316 [@dyn 155] (gas: 3)\n  8420: a0 = s1 + 0x580\n  8424: a1 = 0x40\n  8427: ra = 312, jump @7\n      : @317 [@dyn 156] (gas: 6)\n  8433: a4 = s1 + 0x500\n  8437: a0 = u64 [a4 + 0x98]\n  8441: a1 = u64 [a4 + 0x90]\n  8445: a2 = u64 [a4 + 0x88]\n  8449: a3 = u64 [a4 + 0x80]\n  8453: t0 = 314, jump @1443\n      : @318 [@dyn 157] (gas: 1)\n  8459: jump @320 if a0 == 0\n      : @319 (gas: 1)\n  8462: jump @622\n      : @320 (gas: 12)\n  8465: a0 = u64 [s1 + 0x108]\n  8469: u64 [s1 + 0x560] = a0\n  8473: a0 = u64 [s1 + 0x110]\n  8477: u64 [s1 + 0x568] = a0\n  8481: a0 = u64 [s1 + 0xf8]\n  8485: u64 [s1 + 0x570] = a0\n  8489: a1 = s1 + 0x560\n  8493: a0 = u64 [s1 + 0x118]\n  8497: u64 [s1 + 0x578] = a0\n  8501: a0 = a3\n  8503: u64 [s1 + 0x118] = a3\n  8507: ra = 316, jump @9\n      : @321 [@dyn 158] (gas: 6)\n  8513: a0 = u64 [s1 + 0xe8]\n  8517: ra = 0x13e\n  8521: ecalli 4 // 'caller'\n  8523: a2 = u64 [s1 + 0x100]\n  8527: t0 = 0x140\n  8531: jump @1419\n      : @322 [@dyn 159] (gas: 2)\n  8534: a2 = u64 [s1 + 0x100]\n  8538: t0 = 320, jump @1419\n      : @323 [@dyn 160] (gas: 24)\n  8544: t0 = a1 | a0\n  8547: a3 = a3 >> 0x20\n  8550: a2 = reverse a2\n  8552: a1 = a2 << 0x20\n  8555: a1 = a1 | a3\n  8558: a2 = a2 >> 0x20\n  8561: u64 [s1 + 1336] = 0\n  8565: a3 = u64 [0x200d8]\n  8570: a4 = u64 [0x200e0]\n  8575: a5 = u64 [0x200e8]\n  8580: a0 = u64 [0x200f0]\n  8585: u64 [s1 + 0x558] = a3\n  8589: a3 = s1 + 0x500\n  8593: u64 [a3 + 0x50] = a4\n  8596: u64 [a3 + 0x48] = a5\n  8599: u64 [a3 + 0x40] = a0\n  8602: u64 [a3 + 0x30] = a2\n  8605: u64 [a3 + 0x28] = a1\n  8608: a1 = 0x20\n  8611: a2 = s1 + 0x540\n  8615: a3 = s1 + 0x520\n  8619: u64 [s1 + 0x520] = t0\n  8623: a0 = u64 [s1 + 0x118]\n  8627: ra = 322, jump @13\n      : @324 [@dyn 161] (gas: 5)\n  8633: a0 = 0\n  8635: a1 = u64 [s1 + 0xc8]\n  8639: a2 = 0\n  8641: ecalli 13 // 'seal_return'\n  8643: jump @988\n      : @325 (gas: 9)\n  8646: u64 [a3 + 1760] = 0\n  8650: u64 [a3 + 1752] = 0\n  8654: u64 [a3 + 1744] = 0\n  8658: u64 [a3 + 1736] = 0\n  8662: a0 = s1 + 0x2000\n  8666: i32 a0 = a0 + 0x780\n  8670: ra = 0x144\n  8674: ecalli 16 // 'value_transferred'\n  8676: fallthrough\n      : @326 [@dyn 162] (gas: 3)\n  8677: a3 = s1 + 0x20b8\n  8681: a4 = a3 + 0x600\n  8685: t0 = 326, jump @1485\n      : @327 [@dyn 163] (gas: 1)\n  8691: jump @329 if a0 == 0\n      : @328 (gas: 1)\n  8694: jump @681\n      : @329 (gas: 1)\n  8697: t0 = 328, jump @1474\n      : @330 [@dyn 164] (gas: 1)\n  8703: jump @332 if a1 <u a0\n      : @331 (gas: 1)\n  8706: jump @682\n      : @332 (gas: 6)\n  8709: a0 = s1 + 0x2000\n  8713: i32 a0 = a0 + 0x7a0\n  8717: a1 = 0x4\n  8720: ecalli 2 // 'call_data_load'\n  8722: a3 = s1 + 0x20b8\n  8726: fallthrough\n      : @333 (gas: 7)\n  8727: a0 = u64 [a3 + 0x700]\n  8731: a1 = u64 [a3 + 0x6f8]\n  8735: a2 = u64 [a3 + 0x6f0]\n  8739: a0 = a0 | a1\n  8742: a1 = a2 <u 0x1\n  8745: a1 = 0 if a0 != 0\n  8747: jump @335 if a1 != 0\n      : @334 (gas: 1)\n  8750: jump @683\n      : @335 (gas: 6)\n  8753: a0 = u64 [a3 + 0x6e8]\n  8757: u64 [s1 + 0xa0] = a0\n  8761: a0 = s1 + 0x2000\n  8765: i32 a0 = a0 + 0x7c0\n  8769: ecalli 9 // 'now'\n  8771: fallthrough\n      : @336 (gas: 49)\n  8772: a0 = s1 + 0x20b8\n  8776: t2 = u64 [a0 + 0x720]\n  8780: a3 = u64 [a0 + 0x718]\n  8784: u64 [s1 + 0xd0] = a3\n  8788: t0 = u64 [a0 + 0x710]\n  8792: ra = u64 [a0 + 0x708]\n  8796: a0 = clz t2\n  8798: a1 = clz a3\n  8800: a2 = a1 + 0x40\n  8803: a2 = a0 if t2 != 0\n  8806: a0 = clz t0\n  8808: a1 = clz ra\n  8810: a1 = a1 + 0x40\n  8813: a1 = a0 if t0 != 0\n  8816: a0 = a1 + 0x80\n  8820: a3 = a3 | t2\n  8823: a2 = a0 if a3 == 0\n  8826: a5 = a0 <u a1\n  8829: a5 = 0 if a3 != 0\n  8831: a4 = a5 >u 0\n  8833: a0 = a2 <u 0xf0\n  8837: a3 = a0 ^ 0x1\n  8840: a4 = a3 if a5 == 0\n  8843: a0 = a4 <u 0x1\n  8846: a0 = a0 + 0xffffffffffffffff\n  8849: a1 = -a4\n  8851: a5 = -a5\n  8853: a3 = a5 - a3\n  8856: t1 = 0xef - a2\n  8860: u64 [s1 + 0x118] = a1\n  8864: a5 = a1 >u 0\n  8866: a1 = a0 >u 0\n  8868: a1 = a5 if a0 == 0\n  8871: a5 = t1 <u 0x100\n  8875: a5 = a5 ^ 0x1\n  8878: a2 = a3 >u 0\n  8880: a5 = a2 if a3 != 0\n  8883: a5 = a1 if a4 != 0\n  8886: u64 [s1 + 0xc0] = t2\n  8890: u64 [s1 + 0xd8] = t0\n  8894: a1 = t0 | t2\n  8897: t2 = u64 [s1 + 0xd0]\n  8901: a2 = ra | t2\n  8904: a1 = a1 | a2\n  8907: a1 = a1 <u 0x1\n  8910: a1 = a1 | a5\n  8913: a4 = ra\n  8915: a4 = 0 if a1 != 0\n  8917: jump @338 if a1 == 0\n      : @337 (gas: 1)\n  8920: jump @539\n      : @338 (gas: 6)\n  8923: a1 = t1 ^ 0xff\n  8927: a5 = u64 [s1 + 0x118]\n  8931: a1 = a1 | a5\n  8934: a2 = a3 | a0\n  8937: a1 = a1 | a2\n  8940: jump @340 if a1 != 0\n      : @339 (gas: 1)\n  8943: jump @539\n      : @340 (gas: 20)\n  8946: t0 = ra\n  8948: a2 = t1 + 0x1\n  8951: u64 [s1 + 0x110] = a2\n  8955: a1 = a2 <u 0x1\n  8958: a1 = a1 + a3\n  8961: u64 [s1 + 0x100] = a1\n  8965: a1 = a1 | a2\n  8968: a1 = a1 <u 0x1\n  8971: a1 = a1 + a5\n  8974: u64 [s1 + 0xf0] = a1\n  8978: a1 = a1 <u a5\n  8981: a0 = a0 + a1\n  8984: u64 [s1 + 0xf8] = a0\n  8988: a1 = 0xff - t1\n  8992: u64 [s1 + 0xe8] = a1\n  8996: a2 = 0x80 - a1\n  9000: a0 = ra\n  9002: u64 [s1 + 0xc8] = t0\n  9006: a1 = u64 [s1 + 0xd8]\n  9010: ra = 330, jump @1493\n      : @341 [@dyn 165] (gas: 6)\n  9016: u64 [s1 + 0xe0] = a0\n  9020: u64 [s1 + 0x118] = a1\n  9024: a0 = u64 [s1 + 0xd0]\n  9028: a1 = u64 [s1 + 0xc0]\n  9032: a2 = u64 [s1 + 0xe8]\n  9036: ra = 332, jump @1498\n      : @342 [@dyn 166] (gas: 7)\n  9042: u64 [s1 + 0xb0] = a0\n  9046: u64 [s1 + 0xa8] = a1\n  9050: a0 = u64 [s1 + 0xe8]\n  9054: a2 = a0 + 0xffffffffffffff80\n  9057: a0 = u64 [s1 + 0xc8]\n  9061: a1 = u64 [s1 + 0xd8]\n  9065: ra = 334, jump @1498\n      : @343 [@dyn 167] (gas: 8)\n  9071: u64 [s1 + 0x98] = a0\n  9075: u64 [s1 + 0x90] = a1\n  9079: a2 = u64 [s1 + 0xe8]\n  9083: a0 = a2 <u 0x80\n  9087: u64 [s1 + 0xb8] = a0\n  9091: a0 = u64 [s1 + 0xc8]\n  9095: a1 = u64 [s1 + 0xd8]\n  9099: ra = 336, jump @1498\n      : @344 [@dyn 168] (gas: 11)\n  9105: a4 = u64 [s1 + 0xb8]\n  9109: t0 = u64 [s1 + 0xf0]\n  9113: a5 = u64 [s1 + 0xf8]\n  9117: a2 = u64 [s1 + 0x100]\n  9121: a5 = a5 | a2\n  9124: a3 = u64 [s1 + 0x110]\n  9128: a3 = a3 | t0\n  9131: a3 = a3 | a5\n  9134: a0 = 0 if a4 == 0\n  9136: u64 [s1 + 0x108] = a0\n  9140: jump @346 if a3 == 0\n      : @345 (gas: 1)\n  9143: jump @530\n      : @346 (gas: 2)\n  9146: a4 = 0\n  9148: jump @538\n      : @347 (gas: 9)\n  9151: u64 [a3 + 1248] = 0\n  9155: u64 [a3 + 1240] = 0\n  9159: u64 [a3 + 1232] = 0\n  9163: u64 [a3 + 1224] = 0\n  9167: a0 = s1 + 0x2000\n  9171: i32 a0 = a0 + 0x580\n  9175: ra = 0x152\n  9179: ecalli 16 // 'value_transferred'\n  9181: fallthrough\n      : @348 [@dyn 169] (gas: 3)\n  9182: a3 = s1 + 0x20b8\n  9186: a4 = a3 + 0x400\n  9190: t0 = 340, jump @1485\n      : @349 [@dyn 170] (gas: 1)\n  9196: jump @351 if a0 == 0\n      : @350 (gas: 1)\n  9199: jump @684\n      : @351 (gas: 1)\n  9202: t0 = 342, jump @1474\n      : @352 [@dyn 171] (gas: 1)\n  9208: jump @354 if a1 <u a0\n      : @353 (gas: 1)\n  9211: jump @685\n      : @354 (gas: 4)\n  9214: a0 = s1 + 0x320\n  9218: ra = 0x158\n  9222: t0 = 0x5ac\n  9226: jump @1476\n      : @355 [@dyn 172] (gas: 11)\n  9229: a3 = s1 + 0x300\n  9233: a0 = u64 [a3 + 0x20]\n  9236: a1 = u64 [a3 + 0x28]\n  9239: a2 = u32 [s1 + 0x330]\n  9243: u64 [s1 + 792] = 0\n  9247: u64 [a3 + 0x10] = a2\n  9250: u64 [a3 + 0x8] = a1\n  9253: a1 = s1 + 0x300\n  9257: u64 [a3] = a0\n  9259: a0 = 0\n  9261: ra = 346, jump @9\n      : @356 [@dyn 173] (gas: 7)\n  9267: u64 [s1 + 760] = 0\n  9271: u64 [s1 + 752] = 0\n  9275: u64 [s1 + 744] = 0\n  9279: a0 = 0x20\n  9282: a1 = s1 + 0x2e0\n  9286: u64 [s1 + 736] = 0\n  9290: ra = 348, jump @9\n      : @357 [@dyn 174] (gas: 6)\n  9296: a0 = sp + 0xffffffffffffffe0\n  9299: a0 = a0 & 0xffffffffffffffe0\n  9302: u64 [s1 + 0xf8] = a0\n  9306: sp = a0\n  9308: a1 = i32 [0x20170]\n  9313: jump @359 if a1 >u 63\n      : @358 (gas: 4)\n  9317: a1 = 0x40\n  9320: u32 [0x20170] = a1\n  9325: t0 = 0x15e\n  9329: jump @1465\n      : @359 (gas: 1)\n  9332: t0 = 350, jump @1465\n      : @360 [@dyn 175] (gas: 8)\n  9338: a0 = 0x20180\n  9343: i32 a0 = a0 + 0\n  9345: i32 a2 = a2 + 0\n  9347: a1 = 0x40\n  9350: ra = 0x160\n  9354: ecalli 8 // 'hash_keccak_256'\n  9356: t0 = 0x162\n  9360: jump @1439\n      : @361 [@dyn 176] (gas: 1)\n  9363: t0 = 354, jump @1439\n      : @362 [@dyn 177] (gas: 7)\n  9369: a1 = u64 [s1 + 0xf8]\n  9373: u64 [a1 + 0x18] = a0\n  9376: u64 [a1 + 0x10] = a2\n  9379: u64 [a1 + 0x8] = a4\n  9382: u64 [a1] = a5\n  9384: a0 = s1 + 0x2c0\n  9388: ra = 356, jump @11\n      : @363 [@dyn 178] (gas: 16)\n  9394: a0 = u64 [s1 + 0x2d8]\n  9398: u64 [s1 + 0xf8] = a0\n  9402: a0 = u64 [s1 + 0x2d0]\n  9406: u64 [s1 + 0xf0] = a0\n  9410: a0 = u64 [s1 + 0x2c8]\n  9414: u64 [s1 + 0xe8] = a0\n  9418: a0 = u64 [s1 + 0x2c0]\n  9422: u64 [s1 + 0xe0] = a0\n  9426: a0 = u64 [s1 + 0x108]\n  9430: a0 = a0 + 0x1\n  9433: a1 = a0 <u 0x1\n  9436: a2 = u64 [s1 + 0x110]\n  9440: a1 = a1 + a2\n  9443: a2 = s1 + 0x20b8\n  9447: a3 = a2 + 0x400\n  9451: t0 = 358, jump @1462\n      : @364 [@dyn 179] (gas: 4)\n  9457: u64 [a2 + 0x500] = a0\n  9461: a0 = s1 + 0x2a0\n  9465: a1 = s1 + 0x25a0\n  9469: ra = 360, jump @11\n      : @365 [@dyn 180] (gas: 9)\n  9475: a0 = u64 [s1 + 0x2b8]\n  9479: u64 [s1 + 0xd8] = a0\n  9483: a0 = u64 [s1 + 0x2b0]\n  9487: u64 [s1 + 0xd0] = a0\n  9491: a0 = u64 [s1 + 0x2a8]\n  9495: u64 [s1 + 0xc8] = a0\n  9499: a0 = u64 [s1 + 0x2a0]\n  9503: u64 [s1 + 0xc0] = a0\n  9507: t0 = 362, jump @1463\n      : @366 [@dyn 181] (gas: 14)\n  9513: a1 = u64 [s1 + 0x100]\n  9517: a3 = a3 + a1\n  9520: a1 = a3 <u a1\n  9523: a4 = u64 [s1 + 0x118]\n  9527: a1 = a1 + a4\n  9530: a4 = s1 + 0x20b8\n  9534: a5 = a4 + 0x500\n  9538: u64 [a5 + 0x20] = a1\n  9541: u64 [a5 + 0x18] = a3\n  9544: u64 [a5 + 0x10] = a2\n  9547: u64 [a5 + 0x8] = a0\n  9550: a0 = s1 + 0x280\n  9554: a1 = s1 + 0x25c0\n  9558: ra = 364, jump @11\n      : @367 [@dyn 182] (gas: 30)\n  9564: a0 = u64 [s1 + 0x298]\n  9568: u64 [s1 + 0xb8] = a0\n  9572: a0 = u64 [s1 + 0x290]\n  9576: u64 [s1 + 0xb0] = a0\n  9580: a5 = s1 + 0x100\n  9584: a1 = u64 [a5 + 0x8]\n  9587: a0 = a1 + 0x3\n  9590: a1 = a0 <u a1\n  9593: a3 = u64 [a5 + 0x10]\n  9596: a2 = a3 + a1\n  9599: a3 = a2 <u a3\n  9602: a3 = a1 if a1 == 0\n  9605: a1 = u64 [s1 + 0x288]\n  9609: u64 [a5 + 0x8] = a1\n  9612: a1 = u64 [a5]\n  9614: a3 = a3 + a1\n  9617: a1 = a3 <u a1\n  9620: a4 = u64 [a5 + 0x18]\n  9623: a1 = a1 + a4\n  9626: a4 = u64 [s1 + 0x280]\n  9630: u64 [a5] = a4\n  9632: a4 = s1 + 0x20b8\n  9636: a5 = a4 + 0x500\n  9640: u64 [a5 + 0x40] = a1\n  9643: u64 [a5 + 0x38] = a3\n  9646: u64 [a5 + 0x30] = a2\n  9649: u64 [a5 + 0x28] = a0\n  9652: a0 = s1 + 0x260\n  9656: a1 = s1 + 0x25e0\n  9660: ra = 366, jump @11\n      : @368 [@dyn 183] (gas: 5)\n  9666: a0 = u64 [s1 + 0x260]\n  9670: u64 [s1 + 0xa8] = a0\n  9674: a0 = s1 + 0x240\n  9678: a1 = 0x40\n  9681: ra = 368, jump @7\n      : @369 [@dyn 184] (gas: 13)\n  9687: a0 = s1 + 0x200\n  9691: a4 = u64 [a0 + 0x58]\n  9694: a5 = u64 [a0 + 0x50]\n  9697: a3 = u64 [a0 + 0x48]\n  9700: a2 = u64 [a0 + 0x40]\n  9703: a0 = a3 | a4\n  9706: a1 = a2 | a5\n  9709: a1 = a1 | a0\n  9712: a1 = a1 >> 0x20\n  9715: a0 = a0 | a5\n  9718: a0 = a0 << 0x20\n  9721: a0 = a0 | a1\n  9724: jump @371 if a0 == 0\n      : @370 (gas: 1)\n  9727: jump @622\n      : @371 (gas: 15)\n  9730: a0 = u64 [s1 + 0xe0]\n  9734: u64 [s1 + 0x220] = a0\n  9738: a0 = u64 [s1 + 0xe8]\n  9742: u64 [s1 + 0x228] = a0\n  9746: a0 = u64 [s1 + 0xf0]\n  9750: u64 [s1 + 0x230] = a0\n  9754: a1 = s1 + 0x220\n  9758: a0 = u64 [s1 + 0xf8]\n  9762: u64 [s1 + 0x238] = a0\n  9766: a0 = a2\n  9768: u64 [s1 + 0x118] = a2\n  9772: u64 [s1 + 0x110] = a3\n  9776: u64 [s1 + 0xf8] = a4\n  9780: u64 [s1 + 0xf0] = a5\n  9784: ra = 370, jump @9\n      : @372 [@dyn 185] (gas: 11)\n  9790: a1 = u64 [s1 + 0x118]\n  9794: a0 = u64 [s1 + 0xf8]\n  9798: a3 = u64 [s1 + 0xf0]\n  9802: a3 = a3 | a0\n  9805: a4 = 0x100000000\n  9815: a0 = 0xffffffe0\n  9825: a0 = a1 <u a0\n  9828: a2 = u64 [s1 + 0x110]\n  9832: a0 = 0 if a2 != 0\n  9834: a0 = 0 if a3 != 0\n  9836: jump @374 if a0 != 0\n      : @373 (gas: 1)\n  9839: jump @622\n      : @374 (gas: 14)\n  9842: i32 a0 = a1 + 0x20\n  9845: a1 = u64 [s1 + 0xc0]\n  9849: a5 = s1 + 0x200\n  9853: u64 [a5] = a1\n  9855: a1 = u64 [s1 + 0xc8]\n  9859: u64 [a5 + 0x8] = a1\n  9862: a1 = u64 [s1 + 0xd0]\n  9866: u64 [a5 + 0x10] = a1\n  9869: a1 = s1 + 0x200\n  9873: a2 = u64 [s1 + 0xd8]\n  9877: u64 [a5 + 0x18] = a2\n  9880: u64 [s1 + 0xf8] = a3\n  9884: u64 [s1 + 0xf0] = a4\n  9888: ra = 372, jump @9\n      : @375 [@dyn 186] (gas: 9)\n  9894: a4 = u64 [s1 + 0xf8]\n  9898: a3 = u64 [s1 + 0x110]\n  9902: a1 = u64 [s1 + 0x118]\n  9906: a0 = u64 [s1 + 0xf0]\n  9910: a0 = a0 + 0xffffffffffffffc0\n  9913: a0 = a1 <u a0\n  9916: a0 = 0 if a3 != 0\n  9918: a0 = 0 if a4 != 0\n  9920: jump @377 if a0 != 0\n      : @376 (gas: 1)\n  9923: jump @622\n      : @377 (gas: 11)\n  9926: i32 a0 = a1 + 0x40\n  9929: a1 = u64 [s1 + 0x100]\n  9933: u64 [s1 + 0x1e0] = a1\n  9937: a1 = u64 [s1 + 0x108]\n  9941: u64 [s1 + 0x1e8] = a1\n  9945: a1 = u64 [s1 + 0xb0]\n  9949: u64 [s1 + 0x1f0] = a1\n  9953: a1 = s1 + 0x1e0\n  9957: a2 = u64 [s1 + 0xb8]\n  9961: u64 [s1 + 0x1f8] = a2\n  9965: ra = 374, jump @9\n      : @378 [@dyn 187] (gas: 8)\n  9971: a2 = u64 [s1 + 0x118]\n  9975: a0 = 0xffffffa0\n  9985: a0 = a2 <u a0\n  9988: a1 = u64 [s1 + 0x110]\n  9992: a0 = 0 if a1 != 0\n  9994: a1 = u64 [s1 + 0xf8]\n  9998: a0 = 0 if a1 != 0\n 10000: jump @380 if a0 != 0\n      : @379 (gas: 1)\n 10003: jump @622\n      : @380 (gas: 10)\n 10006: a0 = u64 [s1 + 0xa8]\n 10010: a0 = a0 << 0x20\n 10013: a1 = a0 >> 0x20\n 10016: i32 a0 = a2 + 0x60\n 10019: u64 [s1 + 472] = 0\n 10023: u64 [s1 + 464] = 0\n 10027: u64 [s1 + 0x1c0] = a1\n 10031: a1 = s1 + 0x1c0\n 10035: u64 [s1 + 456] = 0\n 10039: ra = 376, jump @9\n      : @381 [@dyn 188] (gas: 3)\n 10045: a1 = 0x80\n 10049: a0 = u64 [s1 + 0x118]\n 10053: ra = 378, jump @21\n      : @382 [@dyn 189] (gas: 5)\n 10059: i32 a1 = a0 + 0\n 10061: a2 = 0x80\n 10065: a0 = 0\n 10067: ecalli 13 // 'seal_return'\n 10069: jump @723\n      : @383 (gas: 10)\n 10072: u64 [a2 + 448] = 0\n 10076: u64 [a2 + 440] = 0\n 10080: u64 [a2 + 432] = 0\n 10084: u64 [a2 + 424] = 0\n 10088: a0 = s1 + 0x3000\n 10092: i32 a0 = a0 + 0xfffffffffffffa60\n 10096: ra = 0x17c\n 10100: ecalli 16 // 'value_transferred'\n 10102: t0 = 0x17e\n 10106: jump @1483\n      : @384 [@dyn 190] (gas: 1)\n 10109: t0 = 382, jump @1483\n      : @385 [@dyn 191] (gas: 8)\n 10115: a0 = u64 [a4 + 0xb8]\n 10119: a1 = u64 [a4 + 0xc0]\n 10123: a2 = u64 [a4 + 0xb0]\n 10127: a3 = u64 [a4 + 0xa8]\n 10131: a1 = a1 | a2\n 10134: a0 = a0 | a3\n 10137: a0 = a0 | a1\n 10140: jump @387 if a0 == 0\n      : @386 (gas: 1)\n 10143: jump @686\n      : @387 (gas: 3)\n 10146: a0 = u64 [s1 + 0x118]\n 10150: a0 = i32 [a0]\n 10152: jump @389 if a0 >u 67\n      : @388 (gas: 1)\n 10156: jump @687\n      : @389 (gas: 4)\n 10159: a0 = s1 + 0x17a0\n 10163: ra = 0x180\n 10167: t0 = 0x5ac\n 10171: jump @1476\n      : @390 [@dyn 192] (gas: 13)\n 10174: a0 = s1 + 0x10b8\n 10178: a2 = a0 + 0x600\n 10182: a1 = u64 [a2 + 0xf8]\n 10186: u64 [s1 + 0xe8] = a1\n 10190: a1 = u64 [a2 + 0xf0]\n 10194: u64 [s1 + 0xf8] = a1\n 10198: a0 = u64 [a2 + 0xe8]\n 10202: u64 [s1 + 0xf0] = a0\n 10206: a0 = s1 + 0x3000\n 10210: i32 a0 = a0 + 0xfffffffffffffa80\n 10214: a1 = 0x24\n 10217: ecalli 2 // 'call_data_load'\n 10219: fallthrough\n      : @391 (gas: 19)\n 10220: a0 = s1 + 0x28b8\n 10224: a5 = a0 + 0x100\n 10228: a4 = u64 [a5 + 0xe0]\n 10232: a3 = u64 [a5 + 0xd8]\n 10236: a2 = u64 [a5 + 0xd0]\n 10240: a1 = u64 [a5 + 0xc8]\n 10244: a5 = s1 + 0x100\n 10248: u64 [a5 + 0x10] = a2\n 10251: u64 [a5] = a4\n 10253: a0 = a2 | a4\n 10256: u64 [a5 + 0x18] = a1\n 10259: a1 = a1 | a3\n 10262: a1 = a1 | a0\n 10265: a1 = a1 >> 0x20\n 10268: u64 [a5 + 0x8] = a3\n 10271: a0 = a0 | a3\n 10274: a0 = a0 << 0x20\n 10277: a0 = a0 | a1\n 10280: jump @393 if a0 == 0\n      : @392 (gas: 1)\n 10283: jump @688\n      : @393 (gas: 14)\n 10286: a0 = u64 [s1 + 0xe8]\n 10290: a0 = a0 << 0x20\n 10293: a0 = a0 >> 0x20\n 10296: a2 = s1 + 0x10b8\n 10300: u64 [a2 + 1760] = 0\n 10304: a1 = u64 [s1 + 0xf0]\n 10308: a3 = a2 + 0x600\n 10312: u64 [a3 + 0xc8] = a1\n 10316: a1 = u64 [s1 + 0xf8]\n 10320: u64 [a3 + 0xd0] = a1\n 10324: a1 = s1 + 0x1780\n 10328: u64 [a3 + 0xd8] = a0\n 10332: a0 = 0\n 10334: ra = 386, jump @9\n      : @394 [@dyn 193] (gas: 3)\n 10340: t0 = 0x184\n 10344: a1 = s1 + 0x10b8\n 10348: fallthrough\n      : @395 [@dyn 194] (gas: 8)\n 10349: u64 [a1 + 1728] = 0\n 10353: u64 [a1 + 1720] = 0\n 10357: u64 [a1 + 1704] = 0x1\n 10362: a2 = a1\n 10364: a0 = 0x20\n 10367: a1 = s1 + 0x1760\n 10371: u64 [a2 + 1712] = 0\n 10375: ra = 390, jump @9\n      : @396 [@dyn 195] (gas: 3)\n 10381: a1 = 0x20170\n 10386: a0 = i32 [0x20170]\n 10391: jump @398 if a0 >u 63\n      : @397 (gas: 2)\n 10395: u32 [0x20170] = 0x40\n 10401: fallthrough\n      : @398 (gas: 15)\n 10402: a0 = sp + 0xffffffffffffffe0\n 10405: a2 = a0 & 0xffffffffffffffe0\n 10408: u64 [s1 + 0xe8] = a2\n 10412: sp = a2\n 10414: a0 = 0x20180\n 10419: i32 a0 = a0 + 0\n 10421: i32 a2 = a2 + 0\n 10423: u64 [s1 + 0xf8] = a1\n 10427: a1 = 0x40\n 10430: u64 [s1 + 0xf0] = a0\n 10434: ra = 0x188\n 10438: ecalli 8 // 'hash_keccak_256'\n 10440: a3 = u64 [s1 + 0xe8]\n 10444: t0 = 0x18a\n 10448: jump @1458\n      : @399 [@dyn 196] (gas: 2)\n 10451: a3 = u64 [s1 + 0xe8]\n 10455: t0 = 394, jump @1458\n      : @400 [@dyn 197] (gas: 14)\n 10461: u64 [s1 + 0xe0] = a0\n 10465: a0 = reverse a1\n 10467: u64 [s1 + 0xd8] = a0\n 10471: a0 = reverse a2\n 10473: u64 [s1 + 0xd0] = a0\n 10477: a0 = reverse a3\n 10479: u64 [s1 + 0xc8] = a0\n 10483: a0 = sp + 0xffffffffffffffe0\n 10486: a0 = a0 & 0xffffffffffffffe0\n 10489: u64 [s1 + 0xe8] = a0\n 10493: sp = a0\n 10495: t0 = 0x18c\n 10499: a2 = s1 + 0x10b8\n 10503: fallthrough\n      : @401 [@dyn 198] (gas: 13)\n 10504: a3 = s1 + 0x100\n 10508: a0 = u64 [a3]\n 10510: a4 = a2 + 0x600\n 10514: u64 [a4 + 0xa0] = a0\n 10518: a0 = u64 [a3 + 0x8]\n 10521: u64 [a4 + 0x98] = a0\n 10525: a0 = u64 [a3 + 0x10]\n 10528: u64 [a4 + 0x90] = a0\n 10532: a1 = s1 + 0x1740\n 10536: a0 = u64 [a3 + 0x18]\n 10539: u64 [a4 + 0x88] = a0\n 10543: a0 = 0\n 10545: ra = 398, jump @9\n      : @402 [@dyn 199] (gas: 3)\n 10551: t0 = 0x190\n 10555: a1 = s1 + 0x10b8\n 10559: fallthrough\n      : @403 [@dyn 200] (gas: 13)\n 10560: a0 = u64 [s1 + 0xc8]\n 10564: a2 = a1 + 0x600\n 10568: u64 [a2 + 0x80] = a0\n 10572: a0 = u64 [s1 + 0xd0]\n 10576: u64 [a2 + 0x78] = a0\n 10579: a0 = u64 [s1 + 0xd8]\n 10583: u64 [a2 + 0x70] = a0\n 10586: a3 = a1\n 10588: a0 = 0x20\n 10591: a1 = s1 + 0x1720\n 10595: a2 = u64 [s1 + 0xe0]\n 10599: u64 [a3 + 0x668] = a2\n 10603: ra = 402, jump @9\n      : @404 [@dyn 201] (gas: 3)\n 10609: a1 = u64 [s1 + 0xf8]\n 10613: a0 = i32 [a1]\n 10615: jump @406 if a0 >u 63\n      : @405 (gas: 3)\n 10619: u32 [a1 + 0] = 0x40\n 10622: t0 = 0x194\n 10626: jump @1477\n      : @406 (gas: 1)\n 10629: t0 = 404, jump @1477\n      : @407 [@dyn 202] (gas: 5)\n 10635: a0 = u64 [s1 + 0xf0]\n 10639: ra = 0x196\n 10643: ecalli 8 // 'hash_keccak_256'\n 10645: t0 = 0x198\n 10649: jump @1439\n      : @408 [@dyn 203] (gas: 1)\n 10652: t0 = 408, jump @1439\n      : @409 [@dyn 204] (gas: 7)\n 10658: a1 = u64 [s1 + 0xe8]\n 10662: u64 [a1 + 0x18] = a0\n 10665: u64 [a1 + 0x10] = a2\n 10668: u64 [a1 + 0x8] = a4\n 10671: u64 [a1] = a5\n 10673: a0 = s1 + 0x1700\n 10677: ra = 410, jump @11\n      : @410 [@dyn 205] (gas: 16)\n 10683: a1 = s1 + 0x10b8\n 10687: a2 = a1 + 0x600\n 10691: a0 = u64 [a2 + 0x58]\n 10694: u64 [s1 + 0xf0] = a0\n 10698: a0 = u64 [a2 + 0x50]\n 10701: u64 [s1 + 0xe8] = a0\n 10705: a0 = u64 [a2 + 0x48]\n 10708: u64 [s1 + 0xf8] = a0\n 10712: a0 = u64 [s1 + 0x108]\n 10716: a0 = a0 + 0x1\n 10719: a1 = a0 <u 0x1\n 10722: a2 = u64 [s1 + 0x110]\n 10726: a1 = a1 + a2\n 10729: a2 = s1 + 0x28b8\n 10733: a3 = a2 + 0x100\n 10737: t0 = 412, jump @1462\n      : @411 [@dyn 206] (gas: 4)\n 10743: u64 [a2 + 0x200] = a0\n 10747: a0 = s1 + 0x16e0\n 10751: a1 = s1 + 0x2aa0\n 10755: ra = 414, jump @11\n      : @412 [@dyn 207] (gas: 6)\n 10761: a5 = s1 + 0x10b8\n 10765: a0 = u64 [a5 + 0x640]\n 10769: u64 [s1 + 0xe0] = a0\n 10773: a0 = u64 [a5 + 0x638]\n 10777: u64 [s1 + 0xd8] = a0\n 10781: t0 = 416, jump @1463\n      : @413 [@dyn 208] (gas: 18)\n 10787: a1 = u64 [a5 + 0x630]\n 10791: u64 [s1 + 0x108] = a1\n 10795: a1 = u64 [s1 + 0x100]\n 10799: a3 = a3 + a1\n 10802: a1 = a3 <u a1\n 10805: a4 = u64 [s1 + 0x118]\n 10809: a1 = a1 + a4\n 10812: a4 = u64 [a5 + 0x628]\n 10816: u64 [s1 + 0x100] = a4\n 10820: a4 = s1 + 0x28b8\n 10824: a5 = a4 + 0x200\n 10828: u64 [a5 + 0x20] = a1\n 10831: u64 [a5 + 0x18] = a3\n 10834: u64 [a5 + 0x10] = a2\n 10837: u64 [a5 + 0x8] = a0\n 10840: a0 = s1 + 0x16c0\n 10844: a1 = s1 + 0x2ac0\n 10848: ra = 418, jump @11\n      : @414 [@dyn 209] (gas: 3)\n 10854: t0 = 0x1a4\n 10858: a1 = s1 + 0x10b8\n 10862: fallthrough\n      : @415 [@dyn 210] (gas: 7)\n 10863: a0 = u64 [a1 + 0x610]\n 10867: u64 [s1 + 0xc8] = a0\n 10871: a0 = u64 [a1 + 0x608]\n 10875: u64 [s1 + 0xd0] = a0\n 10879: a0 = s1 + 0x16a0\n 10883: a1 = 0x40\n 10886: ra = 422, jump @7\n      : @416 [@dyn 211] (gas: 2)\n 10892: a2 = s1 + 0x10b8\n 10896: fallthrough\n      : @417 (gas: 13)\n 10897: t0 = u64 [a2 + 0x600]\n 10901: a1 = a2 + 0x500\n 10905: a5 = u64 [a1 + 0xf8]\n 10909: a4 = u64 [a1 + 0xf0]\n 10913: a0 = u64 [a1 + 0xe8]\n 10917: a3 = a4 | t0\n 10920: a1 = a0 | a5\n 10923: a1 = a1 | a3\n 10926: a1 = a1 >> 0x20\n 10929: a3 = a3 | a5\n 10932: a3 = a3 << 0x20\n 10935: a1 = a1 | a3\n 10938: jump @419 if a1 == 0\n      : @418 (gas: 1)\n 10941: jump @622\n      : @419 (gas: 13)\n 10944: a1 = u64 [s1 + 0xf8]\n 10948: a1 = a1 << 0x20\n 10951: a3 = a1 >> 0x20\n 10954: u64 [a2 + 1504] = 0\n 10958: u64 [a2 + 1496] = 0\n 10962: u64 [a2 + 1488] = 0\n 10966: a1 = s1 + 0x1680\n 10970: u64 [a2 + 0x5c8] = a3\n 10974: u64 [s1 + 0x118] = a0\n 10978: u64 [s1 + 0x110] = a4\n 10982: u64 [s1 + 0xb8] = t0\n 10986: u64 [s1 + 0xc0] = a5\n 10990: ra = 424, jump @9\n      : @420 [@dyn 212] (gas: 11)\n 10996: a5 = u64 [s1 + 0x118]\n 11000: a0 = u64 [s1 + 0xc0]\n 11004: a3 = u64 [s1 + 0xb8]\n 11008: a3 = a3 | a0\n 11011: a2 = 0x100000000\n 11021: a0 = 0xffffffe0\n 11031: a0 = a5 <u a0\n 11034: a1 = u64 [s1 + 0x110]\n 11038: a0 = 0 if a1 != 0\n 11040: a0 = 0 if a3 != 0\n 11042: jump @422 if a0 != 0\n      : @421 (gas: 1)\n 11045: jump @622\n      : @422 (gas: 26)\n 11048: t0 = 0xffffffffffffffff\n 11051: a1 = 0xffffffff\n 11061: u64 [s1 + 0xb8] = a2\n 11065: a2 = u64 [s1 + 0xf8]\n 11069: a2 = a2 >> 0x20\n 11072: a0 = u64 [s1 + 0xe8]\n 11076: u64 [s1 + 0xc0] = a3\n 11080: a3 = a0 << 0x20\n 11083: a2 = a2 | a3\n 11086: a3 = a0 >> 0x20\n 11089: a0 = u64 [s1 + 0xf0]\n 11093: a4 = a0 << 0x20\n 11096: a3 = a3 | a4\n 11099: a4 = a0 >> 0x20\n 11102: a3 = a3 & t0\n 11105: a2 = a2 & t0\n 11108: a1 = a1 & a4\n 11111: i32 a0 = a5 + 0x20\n 11114: a4 = s1 + 0x10b8\n 11118: u64 [a4 + 1472] = 0\n 11122: a5 = a4 + 0x500\n 11126: u64 [a5 + 0xb8] = a1\n 11130: u64 [a5 + 0xa8] = a2\n 11134: a1 = s1 + 0x1660\n 11138: u64 [a5 + 0xb0] = a3\n 11142: ra = 426, jump @9\n      : @423 [@dyn 213] (gas: 9)\n 11148: a1 = u64 [s1 + 0x118]\n 11152: a0 = u64 [s1 + 0xb8]\n 11156: a0 = a0 + 0xffffffffffffffc0\n 11159: a0 = a1 <u a0\n 11162: a2 = u64 [s1 + 0x110]\n 11166: a0 = 0 if a2 != 0\n 11168: a2 = u64 [s1 + 0xc0]\n 11172: a0 = 0 if a2 != 0\n 11174: jump @425 if a0 != 0\n      : @424 (gas: 1)\n 11177: jump @622\n      : @425 (gas: 13)\n 11180: i32 a0 = a1 + 0x40\n 11183: a3 = s1 + 0x10b8\n 11187: a1 = u64 [s1 + 0x100]\n 11191: a4 = a3 + 0x500\n 11195: u64 [a4 + 0x88] = a1\n 11199: a1 = u64 [s1 + 0x108]\n 11203: u64 [a4 + 0x90] = a1\n 11207: a1 = u64 [s1 + 0xd8]\n 11211: u64 [a4 + 0x98] = a1\n 11215: a1 = s1 + 0x1640\n 11219: a2 = u64 [s1 + 0xe0]\n 11223: u64 [a4 + 0xa0] = a2\n 11227: ra = 428, jump @9\n      : @426 [@dyn 214] (gas: 9)\n 11233: a3 = u64 [s1 + 0xc0]\n 11237: a2 = u64 [s1 + 0x110]\n 11241: a1 = u64 [s1 + 0x118]\n 11245: a4 = 0x100000000\n 11255: a0 = 0xffffffa0\n 11265: a0 = a1 <u a0\n 11268: a0 = 0 if a2 != 0\n 11270: a0 = 0 if a3 != 0\n 11272: jump @428 if a0 != 0\n      : @427 (gas: 1)\n 11275: jump @622\n      : @428 (gas: 10)\n 11278: i32 a0 = a1 + 0x60\n 11281: a3 = s1 + 0x10b8\n 11285: u64 [a3 + 1408] = 0\n 11289: u64 [a3 + 1400] = 0\n 11293: a1 = u64 [s1 + 0xd0]\n 11297: u64 [a3 + 0x568] = a1\n 11301: a1 = s1 + 0x1620\n 11305: u64 [a3 + 1392] = 0\n 11309: u64 [s1 + 0x108] = a4\n 11313: ra = 430, jump @9\n      : @429 [@dyn 215] (gas: 10)\n 11319: a3 = s1 + 0x100\n 11323: a2 = u64 [a3 + 0x18]\n 11326: a0 = u64 [a3 + 0x8]\n 11329: a0 = a0 + 0xffffffffffffff80\n 11332: a0 = a2 <u a0\n 11335: a1 = u64 [a3 + 0x10]\n 11338: a0 = 0 if a1 != 0\n 11340: a1 = u64 [s1 + 0xc0]\n 11344: a0 = 0 if a1 != 0\n 11346: jump @431 if a0 != 0\n      : @430 (gas: 1)\n 11349: jump @622\n      : @431 (gas: 10)\n 11352: a0 = u8 [s1 + 0xc8]\n 11356: a1 = a0 >u 0\n 11358: i32 a0 = a2 + 0x80\n 11362: a3 = s1 + 0x10b8\n 11366: u64 [a3 + 1376] = 0\n 11370: u64 [a3 + 1368] = 0\n 11374: u64 [a3 + 0x548] = a1\n 11378: a1 = s1 + 0x1600\n 11382: u64 [a3 + 1360] = 0\n 11386: ra = 432, jump @9\n      : @432 [@dyn 216] (gas: 3)\n 11392: a1 = 0xa0\n 11396: a0 = u64 [s1 + 0x118]\n 11400: ra = 434, jump @21\n      : @433 [@dyn 217] (gas: 5)\n 11406: i32 a1 = a0 + 0\n 11408: a2 = 0xa0\n 11412: a0 = 0\n 11414: ecalli 13 // 'seal_return'\n 11416: jump @723\n      : @434 (gas: 1)\n 11419: jump @436 if a0 == 1641031603\n      : @435 (gas: 1)\n 11426: jump @701\n      : @436 (gas: 8)\n 11429: u64 [a2 + 256] = 0\n 11433: u64 [a2 + 248] = 0\n 11437: u64 [a2 + 240] = 0\n 11441: u64 [a2 + 232] = 0\n 11445: a0 = s1 + 0x3000\n 11449: i32 a0 = a0 + 0xfffffffffffff9a0\n 11453: ecalli 16 // 'value_transferred'\n 11455: fallthrough\n      : @437 (gas: 9)\n 11456: a3 = s1 + 0x28b8\n 11460: a0 = u64 [a3 + 0xf8]\n 11464: a1 = u64 [a3 + 0x100]\n 11468: a2 = u64 [a3 + 0xf0]\n 11472: a3 = u64 [a3 + 0xe8]\n 11476: a1 = a1 | a2\n 11479: a0 = a0 | a3\n 11482: a0 = a0 | a1\n 11485: jump @439 if a0 == 0\n      : @438 (gas: 1)\n 11488: jump @706\n      : @439 (gas: 3)\n 11491: a0 = u64 [s1 + 0x118]\n 11495: a0 = i32 [a0]\n 11497: jump @441 if a0 >u 3\n      : @440 (gas: 1)\n 11501: jump @707\n      : @441 (gas: 3)\n 11504: a0 = s1 + 0x1320\n 11508: a1 = 0x40\n 11511: ra = 436, jump @7\n      : @442 [@dyn 218] (gas: 11)\n 11517: a0 = s1 + 0x10b8\n 11521: a2 = a0 + 0x200\n 11525: a1 = u64 [a2 + 0x80]\n 11529: u64 [s1 + 0x118] = a1\n 11533: a1 = u64 [a2 + 0x78]\n 11536: u64 [s1 + 0x110] = a1\n 11540: a1 = u64 [a2 + 0x70]\n 11543: u64 [s1 + 0x100] = a1\n 11547: a0 = u64 [a2 + 0x68]\n 11550: u64 [s1 + 0x108] = a0\n 11554: ra = 438, jump @0\n      : @443 [@dyn 219] (gas: 14)\n 11560: a4 = s1 + 0x100\n 11564: a0 = u64 [a4 + 0x18]\n 11567: a1 = u64 [a4]\n 11569: a0 = a0 | a1\n 11572: a1 = u64 [a4 + 0x8]\n 11575: a3 = a1\n 11577: a2 = u64 [a4 + 0x10]\n 11580: a1 = a1 | a2\n 11583: a1 = a1 | a0\n 11586: a1 = a1 >> 0x20\n 11589: a0 = a0 | a2\n 11592: a0 = a0 << 0x20\n 11595: a0 = a0 | a1\n 11598: jump @445 if a0 == 0\n      : @444 (gas: 1)\n 11601: jump @622\n      : @445 (gas: 12)\n 11604: a2 = u64 [0x301a0]\n 11609: a1 = u64 [0x301a8]\n 11614: a0 = u32 [0x301b0]\n 11619: a4 = s1 + 0x10b8\n 11623: u64 [a4 + 608] = 0\n 11627: a5 = a4 + 0x200\n 11631: u64 [a5 + 0x58] = a0\n 11634: u64 [a5 + 0x50] = a1\n 11637: a1 = s1 + 0x1300\n 11641: u64 [a5 + 0x48] = a2\n 11644: a0 = a3\n 11646: ra = 440, jump @9\n      : @446 [@dyn 220] (gas: 4)\n 11652: a1 = 0x20\n 11655: a0 = u64 [s1 + 0x108]\n 11659: ra = 0x2ea\n 11663: jump @21\n      : @447 (gas: 19)\n 11666: a0 = u64 [s1 + 0x118]\n 11670: a2 = u64 [s1 + 0xa8]\n 11674: a0 = a0 | a2\n 11677: a2 = u64 [s1 + 0x38]\n 11680: a0 = a2 if a4 == 0\n 11683: t1 = u64 [s1 + 0xc0]\n 11687: a3 = t1\n 11689: t0 = u64 [s1 + 0xe8]\n 11693: a3 = a0 if t0 != 0\n 11696: u64 [s1 + 0x118] = a3\n 11700: a0 = u64 [s1 + 0xe0]\n 11704: a2 = u64 [s1 + 0xb0]\n 11708: a0 = a0 | a2\n 11711: a2 = u64 [s1 + 0x40]\n 11714: a0 = a2 if a4 == 0\n 11717: a5 = u64 [s1 + 0xd8]\n 11721: a3 = a5\n 11723: a3 = a0 if t0 != 0\n 11726: t0 = 442, jump @1457\n      : @448 [@dyn 221] (gas: 1)\n 11732: ra = 444, jump @1493\n      : @449 [@dyn 222] (gas: 6)\n 11738: u64 [s1 + 0xb0] = a0\n 11742: u64 [s1 + 0x40] = a1\n 11745: a0 = u64 [s1 + 0xd0]\n 11749: a1 = u64 [s1 + 0xc8]\n 11753: a2 = u64 [s1 + 0x110]\n 11757: ra = 446, jump @1493\n      : @450 [@dyn 223] (gas: 7)\n 11763: u64 [s1 + 0x38] = a0\n 11766: u64 [s1 + 0xa8] = a1\n 11770: a1 = u64 [s1 + 0x110]\n 11774: a2 = 0x80 - a1\n 11778: a0 = u64 [s1 + 0xd8]\n 11782: a1 = u64 [s1 + 0xc0]\n 11786: ra = 448, jump @1498\n      : @451 [@dyn 224] (gas: 21)\n 11792: a2 = u64 [s1 + 0xa8]\n 11796: a1 = a1 | a2\n 11799: a3 = u64 [s1 + 0x110]\n 11803: a4 = a3 <u 0x80\n 11807: u64 [s1 + 0xa8] = a4\n 11811: a2 = u64 [s1 + 0x40]\n 11814: a1 = a2 if a4 == 0\n 11817: a2 = u64 [s1 + 0xc8]\n 11821: a2 = a1 if a3 != 0\n 11824: u64 [s1 + 0xc8] = a2\n 11828: a1 = u64 [s1 + 0x38]\n 11831: a0 = a0 | a1\n 11834: a1 = u64 [s1 + 0xb0]\n 11838: a0 = a1 if a4 == 0\n 11841: a1 = u64 [s1 + 0xd0]\n 11845: a1 = a0 if a3 != 0\n 11848: a2 = a3\n 11850: u64 [s1 + 0xd0] = a1\n 11854: a0 = u64 [s1 + 0xd8]\n 11858: a1 = u64 [s1 + 0xc0]\n 11862: ra = 450, jump @1493\n      : @452 [@dyn 225] (gas: 3)\n 11868: a5 = 0\n 11870: ra = 0\n 11872: t0 = 452, jump @1467\n      : @453 [@dyn 226] (gas: 3)\n 11878: t1 = u64 [s1 + 0xc8]\n 11882: t2 = u64 [s1 + 0xd0]\n 11886: fallthrough\n      : @454 (gas: 88)\n 11887: u64 [s1 + 0xd8] = a5\n 11891: a2 = t2 >> 0x3f\n 11894: a3 = t1 << 0x1\n 11897: a5 = a3 | a2\n 11900: a3 = t2 << 0x1\n 11903: a4 = u64 [s1 + 0x118]\n 11907: a4 = a4 >> 0x3f\n 11910: a3 = a3 | a4\n 11913: u64 [s1 + 0xc8] = a3\n 11917: a2 = u64 [s1 + 0xa8]\n 11921: u64 [s1 + 0xd0] = a5\n 11925: t2 = t1\n 11927: t1 = a2 ^ a5\n 11930: t0 = a2 <u a5\n 11933: a4 = u64 [s1 + 0xb0]\n 11937: a5 = a4 <u a3\n 11940: a5 = t0 if t1 != 0\n 11943: a1 = a1 << 0x1\n 11946: a3 = a0 >> 0x3f\n 11949: a1 = a1 | a3\n 11952: u64 [s1 + 0xc0] = a1\n 11956: a3 = t2 >> 0x3f\n 11959: a0 = a0 << 0x1\n 11962: a3 = a3 | a0\n 11965: a0 = u64 [s1 + 0x118]\n 11969: a0 = a0 << 0x1\n 11972: a4 = u64 [s1 + 0xe0]\n 11976: a1 = a4 >> 0x3f\n 11979: t0 = a0 | a1\n 11982: a1 = a4 << 0x1\n 11985: a4 = u64 [s1 + 0xe8]\n 11989: t1 = a4 >> 0x3f\n 11992: t1 = a1 | t1\n 11995: a1 = a4 << 0x1\n 11998: a4 = u64 [s1 + 0x108]\n 12002: t2 = a4 >> 0x3f\n 12005: a1 = a1 | t2\n 12008: a4 = a4 << 0x1\n 12011: a0 = u64 [s1 + 0xd8]\n 12015: a4 = a4 | a0\n 12018: u64 [s1 + 0x108] = a4\n 12022: a1 = ra | a1\n 12025: u64 [s1 + 0xe8] = a1\n 12029: a1 = ra | t1\n 12032: u64 [s1 + 0xe0] = a1\n 12036: a0 = ra | t0\n 12039: u64 [s1 + 0x118] = a0\n 12043: a0 = a2 - a3\n 12046: a0 = a0 <u a5\n 12049: a1 = a2 <u a3\n 12052: t0 = u64 [s1 + 0xc0]\n 12056: a4 = a2 - t0\n 12059: a4 = a4 - a1\n 12062: a4 = a4 - a0\n 12065: a5 = a4 >>a 0x3f\n 12068: a0 = u64 [s1 + 0xb8]\n 12072: a0 = a0 & a5\n 12075: a1 = u64 [s1 + 0xc8]\n 12079: t2 = a1 - a0\n 12082: a1 = a1 <u a0\n 12085: a0 = u64 [s1 + 0xd0]\n 12089: t1 = a0 - a1\n 12092: a1 = 0 if a0 != 0\n 12094: a0 = a3 - a1\n 12097: a1 = a3 <u a1\n 12100: a1 = t0 - a1\n 12103: a3 = u64 [s1 + 0x110]\n 12107: ra = u64 [s1 + 0x100]\n 12111: a2 = a3 | ra\n 12114: a2 = a2 <u 0x1\n 12117: a4 = u64 [s1 + 0xf0]\n 12121: t0 = a4 <u a2\n 12124: a2 = a4 - a2\n 12127: a4 = a3 <u 0x1\n 12130: ra = ra - a4\n 12133: a4 = u64 [s1 + 0xf8]\n 12137: a4 = a4 - t0\n 12140: a3 = a3 + 0xffffffffffffffff\n 12143: u64 [s1 + 0x100] = ra\n 12147: u64 [s1 + 0xf8] = a4\n 12151: t0 = ra | a4\n 12154: u64 [s1 + 0x110] = a3\n 12158: a4 = a3 | a2\n 12161: a3 = a4 | t0\n 12164: a5 = a5 & 0x1\n 12167: u64 [s1 + 0xf0] = a2\n 12171: ra = 0\n 12173: jump @454 if a3 != 0\n      : @455 (gas: 4)\n 12177: a0 = u64 [s1 + 0x108]\n 12181: a0 = a0 << 0x1\n 12184: ra = a5 | a0\n 12187: fallthrough\n      : @456 (gas: 4)\n 12188: u64 [s1 + 0xf0] = ra\n 12192: a0 = s1 + 0x2460\n 12196: a1 = 0x40\n 12199: ra = 454, jump @7\n      : @457 [@dyn 227] (gas: 18)\n 12205: t0 = s1 + 0x20b8\n 12209: t1 = u64 [t0 + 0x3c0]\n 12213: a0 = t0 + 0x300\n 12217: a5 = u64 [a0 + 0xb8]\n 12221: a3 = u64 [a0 + 0xb0]\n 12225: a4 = u64 [a0 + 0xa8]\n 12229: a0 = t1 >u 0\n 12231: a1 = a5 >u 0\n 12233: a1 = a0 if t1 != 0\n 12236: a0 = a3 >u 0\n 12238: a2 = a4 <u 0xffffffffffffff60\n 12242: a2 = a2 ^ 0x1\n 12245: u64 [s1 + 0x118] = a3\n 12249: a2 = a0 if a3 != 0\n 12252: a0 = a5 | t1\n 12255: u64 [s1 + 0xf8] = a0\n 12259: a2 = a1 if a0 != 0\n 12262: jump @459 if a2 == 0\n      : @458 (gas: 1)\n 12265: jump @689\n      : @459 (gas: 20)\n 12268: t2 = a4 + 0xa0\n 12272: a1 = t2 <u a4\n 12275: a2 = u64 [s1 + 0x118]\n 12279: a0 = a2 + a1\n 12282: a3 = a0 <u a2\n 12285: a3 = a1 if a1 == 0\n 12288: a3 = a3 + a5\n 12291: a1 = a3 <u a5\n 12294: u64 [s1 + 0x110] = a4\n 12298: a4 = t1 + a1\n 12301: u64 [t0 + 0x388] = t2\n 12305: a2 = t0 + 0x300\n 12309: u64 [a2 + 0x90] = a0\n 12313: u64 [a2 + 0x98] = a3\n 12317: a0 = 0x40\n 12320: a1 = s1 + 0x2440\n 12324: u64 [a2 + 0xa0] = a4\n 12328: u64 [s1 + 0x100] = a5\n 12332: u64 [s1 + 0x108] = t1\n 12336: ra = 456, jump @9\n      : @460 [@dyn 228] (gas: 13)\n 12342: a5 = s1 + 0x100\n 12346: a2 = u64 [a5 + 0x10]\n 12349: a3 = u64 [a5]\n 12351: a0 = a2 | a3\n 12354: a1 = u64 [a5 + 0x18]\n 12357: a4 = u64 [a5 + 0x8]\n 12360: a1 = a1 | a4\n 12363: a0 = a0 | a1\n 12366: a0 = a0 >> 0x20\n 12369: a1 = a1 | a3\n 12372: a1 = a1 << 0x20\n 12375: a0 = a0 | a1\n 12378: jump @462 if a0 == 0\n      : @461 (gas: 1)\n 12381: jump @622\n      : @462 (gas: 3)\n 12384: t0 = 0x1ca\n 12388: a3 = s1 + 0x20b8\n 12392: fallthrough\n      : @463 [@dyn 229] (gas: 11)\n 12393: u64 [a3 + 896] = 0\n 12397: a0 = u64 [s1 + 0x98]\n 12401: a4 = a3 + 0x300\n 12405: u64 [a4 + 0x68] = a0\n 12408: a0 = u64 [s1 + 0x90]\n 12412: u64 [a4 + 0x70] = a0\n 12415: a1 = s1 + 0x2420\n 12419: a0 = u64 [s1 + 0xa0]\n 12423: u64 [a4 + 0x78] = a0\n 12426: a0 = a2\n 12428: ra = 460, jump @9\n      : @464 [@dyn 230] (gas: 3)\n 12434: a0 = u64 [s1 + 0x78]\n 12437: ecalli 4 // 'caller'\n 12439: fallthrough\n      : @465 (gas: 9)\n 12440: a4 = u64 [s1 + 0x110]\n 12444: a2 = 0x100000000\n 12454: a0 = 0xffffffe0\n 12464: a0 = a4 <u a0\n 12467: a1 = u64 [s1 + 0x118]\n 12471: a0 = 0 if a1 != 0\n 12473: a1 = u64 [s1 + 0xf8]\n 12477: a0 = 0 if a1 != 0\n 12479: jump @467 if a0 != 0\n      : @466 (gas: 1)\n 12482: jump @622\n      : @467 (gas: 25)\n 12485: u64 [s1 + 0x108] = a2\n 12489: a2 = u64 [s1 + 0x88]\n 12493: a0 = u64 [a2 + 0x8]\n 12496: a1 = i32 [a2 + 0x10]\n 12499: a2 = u64 [a2]\n 12501: a0 = reverse a0\n 12503: a3 = a0 << 0x20\n 12506: a1 = reverse a1\n 12508: a1 = a1 >> 0x20\n 12511: a3 = a3 | a1\n 12514: a0 = a0 >> 0x20\n 12517: a1 = reverse a2\n 12519: a2 = a1 << 0x20\n 12522: a2 = a2 | a0\n 12525: a1 = a1 >> 0x20\n 12528: i32 a0 = a4 + 0x20\n 12531: a4 = s1 + 0x20b8\n 12535: u64 [a4 + 864] = 0\n 12539: a5 = a4 + 0x300\n 12543: u64 [a5 + 0x58] = a1\n 12546: u64 [a5 + 0x50] = a2\n 12549: a1 = s1 + 0x2400\n 12553: u64 [a5 + 0x48] = a3\n 12556: u64 [s1 + 0x100] = a0\n 12560: ra = 462, jump @9\n      : @468 [@dyn 231] (gas: 10)\n 12566: a3 = s1 + 0x100\n 12570: a1 = u64 [a3 + 0x10]\n 12573: a0 = u64 [a3 + 0x8]\n 12576: a0 = a0 + 0xffffffffffffffc0\n 12579: a0 = a1 <u a0\n 12582: a2 = u64 [a3 + 0x18]\n 12585: a0 = 0 if a2 != 0\n 12587: a2 = u64 [s1 + 0xf8]\n 12591: a0 = 0 if a2 != 0\n 12593: jump @470 if a0 != 0\n      : @469 (gas: 1)\n 12596: jump @622\n      : @470 (gas: 15)\n 12599: i32 a2 = a1 + 0x40\n 12602: a0 = u64 [s1 + 0x58]\n 12605: a3 = s1 + 0x20b8\n 12609: a4 = a3 + 0x300\n 12613: u64 [a4 + 0x28] = a0\n 12616: a0 = u64 [s1 + 0x60]\n 12619: u64 [a4 + 0x30] = a0\n 12622: a0 = u64 [s1 + 0x68]\n 12625: u64 [a4 + 0x38] = a0\n 12628: a1 = s1 + 0x23e0\n 12632: a0 = u64 [s1 + 0x70]\n 12635: u64 [a4 + 0x40] = a0\n 12638: u64 [s1 + 0x108] = a2\n 12642: a0 = a2\n 12644: ra = 464, jump @9\n      : @471 [@dyn 232] (gas: 9)\n 12650: a1 = u64 [s1 + 0x110]\n 12654: a3 = 0x100000000\n 12664: a0 = 0xffffffa0\n 12674: a0 = a1 <u a0\n 12677: a2 = u64 [s1 + 0x118]\n 12681: a0 = 0 if a2 != 0\n 12683: a2 = u64 [s1 + 0xf8]\n 12687: a0 = 0 if a2 != 0\n 12689: jump @473 if a0 != 0\n      : @472 (gas: 1)\n 12692: jump @622\n      : @473 (gas: 3)\n 12695: i32 a0 = a1 + 0x60\n 12698: a1 = 0x2000\n 12702: t0 = 466, jump @1491\n      : @474 [@dyn 233] (gas: 6)\n 12708: a1 = s1 + 0x23c0\n 12712: u64 [s1 + 0xe8] = a3\n 12716: a3 = u64 [s1 + 0xf0]\n 12720: u64 [a2 + 0x308] = a3\n 12724: u64 [s1 + 0xf0] = a0\n 12728: ra = 468, jump @9\n      : @475 [@dyn 234] (gas: 9)\n 12734: a1 = u64 [s1 + 0x110]\n 12738: a0 = u64 [s1 + 0xe8]\n 12742: a0 = a0 + 0xffffffffffffff80\n 12745: a0 = a1 <u a0\n 12748: a2 = u64 [s1 + 0x118]\n 12752: a0 = 0 if a2 != 0\n 12754: a2 = u64 [s1 + 0xf8]\n 12758: a0 = 0 if a2 != 0\n 12760: jump @477 if a0 != 0\n      : @476 (gas: 1)\n 12763: jump @622\n      : @477 (gas: 9)\n 12766: i32 a0 = a1 + 0x80\n 12770: a2 = s1 + 0x20b8\n 12774: u64 [a2 + 768] = 0\n 12778: u64 [a2 + 760] = 0\n 12782: u64 [a2 + 752] = 0\n 12786: a1 = s1 + 0x23a0\n 12790: u64 [a2 + 744] = 0\n 12794: u64 [s1 + 0xc8] = a0\n 12798: ra = 470, jump @9\n      : @478 [@dyn 235] (gas: 5)\n 12804: a0 = u64 [s1 + 0x78]\n 12807: ra = 0x1d8\n 12811: ecalli 4 // 'caller'\n 12813: t0 = 0x1da\n 12817: jump @1420\n      : @479 [@dyn 236] (gas: 1)\n 12820: t0 = 474, jump @1420\n      : @480 [@dyn 237] (gas: 8)\n 12826: u64 [a2 + 736] = 0\n 12830: a4 = a2 + 0x200\n 12834: u64 [a4 + 0xd8] = a1\n 12838: u64 [a4 + 0xd0] = a0\n 12842: a1 = s1 + 0x2380\n 12846: u64 [a4 + 0xc8] = a3\n 12850: a0 = 0\n 12852: ra = 476, jump @9\n      : @481 [@dyn 238] (gas: 9)\n 12858: a1 = s1 + 0x20b8\n 12862: u64 [a1 + 704] = 0\n 12866: u64 [a1 + 696] = 0\n 12870: u64 [a1 + 680] = 0x1\n 12875: a2 = a1\n 12877: a0 = 0x20\n 12880: a1 = s1 + 0x2360\n 12884: u64 [a2 + 688] = 0\n 12888: ra = 478, jump @9\n      : @482 [@dyn 239] (gas: 3)\n 12894: a1 = u64 [s1 + 0x48]\n 12897: a0 = i32 [a1]\n 12899: jump @484 if a0 >u 63\n      : @483 (gas: 2)\n 12903: u32 [a1 + 0] = 0x40\n 12906: fallthrough\n      : @484 (gas: 3)\n 12907: a0 = 0xffffffff00000000\n 12917: u64 [s1 + 0xf8] = a0\n 12921: t0 = 480, jump @1477\n      : @485 [@dyn 240] (gas: 6)\n 12927: a0 = u64 [s1 + 0x50]\n 12930: ra = 0x1e2\n 12934: ecalli 8 // 'hash_keccak_256'\n 12936: a3 = u64 [s1 + 0x118]\n 12940: t0 = 0x1e4\n 12944: jump @1445\n      : @486 [@dyn 241] (gas: 2)\n 12947: a3 = u64 [s1 + 0x118]\n 12951: t0 = 484, jump @1445\n      : @487 [@dyn 242] (gas: 14)\n 12957: u64 [s1 + 0x118] = a0\n 12961: sp = a0\n 12963: a2 = s1 + 0x20b8\n 12967: u64 [a2 + 672] = 0\n 12971: a0 = u64 [s1 + 0xa0]\n 12975: a3 = a2 + 0x200\n 12979: u64 [a3 + 0x98] = a0\n 12983: a0 = u64 [s1 + 0x90]\n 12987: u64 [a3 + 0x90] = a0\n 12991: a1 = s1 + 0x2340\n 12995: a0 = u64 [s1 + 0x98]\n 12999: u64 [a3 + 0x88] = a0\n 13003: a0 = 0\n 13005: ra = 486, jump @9\n      : @488 [@dyn 243] (gas: 14)\n 13011: a0 = u64 [s1 + 0xd0]\n 13015: a1 = s1 + 0x20b8\n 13019: a2 = a1 + 0x200\n 13023: u64 [a2 + 0x80] = a0\n 13027: a0 = u64 [s1 + 0xd8]\n 13031: u64 [a2 + 0x78] = a0\n 13034: a0 = u64 [s1 + 0xe0]\n 13038: u64 [a2 + 0x70] = a0\n 13041: a3 = a1\n 13043: a0 = 0x20\n 13046: a1 = s1 + 0x2320\n 13050: a2 = u64 [s1 + 0xe8]\n 13054: u64 [a3 + 0x268] = a2\n 13058: ra = 488, jump @9\n      : @489 [@dyn 244] (gas: 3)\n 13064: a1 = u64 [s1 + 0x48]\n 13067: a0 = i32 [a1]\n 13069: jump @491 if a0 >u 63\n      : @490 (gas: 2)\n 13073: u32 [a1 + 0] = 0x40\n 13076: fallthrough\n      : @491 (gas: 29)\n 13077: a0 = sp + 0xffffffffffffffe0\n 13080: a0 = a0 & 0xffffffffffffffe0\n 13083: u64 [s1 + 0xe8] = a0\n 13087: sp = a0\n 13089: i32 a2 = a0 + 0\n 13091: a1 = 0x40\n 13094: a0 = u64 [s1 + 0x50]\n 13097: ecalli 8 // 'hash_keccak_256'\n 13099: a3 = u64 [s1 + 0xe8]\n 13103: a0 = u64 [a3 + 0x18]\n 13106: a1 = u64 [a3 + 0x10]\n 13109: a2 = u64 [a3 + 0x8]\n 13112: a3 = u64 [a3]\n 13114: a4 = reverse a0\n 13116: u64 [s1 + 0xd8] = a4\n 13120: a1 = reverse a1\n 13122: u64 [s1 + 0xe0] = a1\n 13126: a2 = reverse a2\n 13128: u64 [s1 + 0xd0] = a2\n 13132: a0 = reverse a3\n 13134: u64 [s1 + 0xe8] = a0\n 13138: a3 = u64 [s1 + 0x118]\n 13142: u64 [a3 + 0x18] = a0\n 13145: u64 [a3 + 0x10] = a2\n 13148: u64 [a3 + 0x8] = a1\n 13151: u64 [a3] = a4\n 13153: a0 = s1 + 0x2300\n 13157: a1 = u64 [s1 + 0x110]\n 13161: ra = 490, jump @7\n      : @492 [@dyn 245] (gas: 8)\n 13167: a0 = s1 + 0x20b8\n 13171: a0 = u64 [a0 + 0x248]\n 13175: a1 = u64 [s1 + 0x80]\n 13179: a0 = a0 & a1\n 13182: u64 [s1 + 0x110] = a0\n 13186: a0 = s1 + 0x22e0\n 13190: a1 = u64 [s1 + 0x118]\n 13194: ra = 492, jump @11\n      : @493 [@dyn 246] (gas: 7)\n 13200: a3 = s1 + 0x20b8\n 13204: a4 = a3 + 0x200\n 13208: a0 = u64 [a4 + 0x30]\n 13211: a1 = u64 [a4 + 0x38]\n 13214: a2 = u64 [a4 + 0x40]\n 13217: a3 = u64 [a4 + 0x28]\n 13220: t0 = 494, jump @1468\n      : @494 [@dyn 247] (gas: 8)\n 13226: a5 = a4 + 0x400\n 13230: u64 [a5 + 0x40] = a2\n 13233: u64 [a5 + 0x38] = a1\n 13236: u64 [a5 + 0x30] = a0\n 13239: u64 [a5 + 0x28] = a3\n 13242: a1 = s1 + 0x2ce0\n 13246: a0 = u64 [s1 + 0x118]\n 13250: ra = 496, jump @12\n      : @495 [@dyn 248] (gas: 3)\n 13256: a0 = s1 + 0x22c0\n 13260: a1 = u64 [s1 + 0x100]\n 13264: ra = 498, jump @7\n      : @496 [@dyn 249] (gas: 11)\n 13270: a0 = s1 + 0x20b8\n 13274: a2 = a0 + 0x200\n 13278: a1 = u64 [a2 + 0x18]\n 13281: u64 [s1 + 0x110] = a1\n 13285: a1 = u64 [a2 + 0x10]\n 13288: u64 [s1 + 0x100] = a1\n 13292: a1 = u64 [a2 + 0x8]\n 13295: u64 [s1 + 0xc0] = a1\n 13299: a0 = s1 + 0x22a0\n 13303: a1 = u64 [s1 + 0x118]\n 13307: ra = 500, jump @11\n      : @497 [@dyn 250] (gas: 23)\n 13313: a1 = s1 + 0x20b8\n 13317: a0 = u64 [a1 + 0x200]\n 13321: a1 = u32 [a1 + 0x1e8]\n 13325: a5 = u64 [s1 + 0xc0]\n 13329: a2 = a5 >> 0x20\n 13332: a4 = u64 [s1 + 0x100]\n 13336: a3 = a4 << 0x20\n 13339: a2 = a2 | a3\n 13342: a3 = a4 >> 0x20\n 13345: a4 = u64 [s1 + 0x110]\n 13349: a4 = a4 << 0x20\n 13352: a3 = a3 | a4\n 13355: a4 = a5 << 0x20\n 13358: a1 = a1 | a4\n 13361: a4 = s1 + 0x28b8\n 13365: a5 = a4 + 0x400\n 13369: u64 [a5 + 0x58] = a3\n 13372: u64 [a5 + 0x50] = a2\n 13375: u64 [a5 + 0x60] = a0\n 13378: u64 [a5 + 0x48] = a1\n 13381: a1 = s1 + 0x2d00\n 13385: a0 = u64 [s1 + 0x118]\n 13389: ra = 502, jump @12\n      : @498 [@dyn 251] (gas: 3)\n 13395: a0 = s1 + 0x2280\n 13399: a1 = u64 [s1 + 0x108]\n 13403: ra = 504, jump @7\n      : @499 [@dyn 252] (gas: 30)\n 13409: a0 = s1 + 0x20b8\n 13413: t0 = u64 [a0 + 0x1c8]\n 13417: t1 = u64 [a0 + 0x1d0]\n 13421: t2 = u64 [a0 + 0x1d8]\n 13425: a3 = u64 [a0 + 0x1e0]\n 13429: a0 = u64 [s1 + 0xd8]\n 13433: a0 = a0 + 0x1\n 13436: a5 = a0 <u 0x1\n 13439: a1 = u64 [s1 + 0xe0]\n 13443: a5 = a5 + a1\n 13446: a4 = a0 | a5\n 13449: a4 = a4 <u 0x1\n 13452: a1 = u64 [s1 + 0xd0]\n 13456: a4 = a4 + a1\n 13459: a1 = a4 <u a1\n 13462: a2 = u64 [s1 + 0xe8]\n 13466: a1 = a1 + a2\n 13469: a2 = s1 + 0x28b8\n 13473: u64 [a2 + 0x480] = a1\n 13477: a1 = a2 + 0x400\n 13481: u64 [a1 + 0x78] = a4\n 13484: u64 [a1 + 0x70] = a5\n 13487: u64 [a1 + 0x68] = a0\n 13490: u64 [a1 + 0xa0] = a3\n 13494: u64 [a2 + 0x498] = t2\n 13498: u64 [a2 + 0x490] = t1\n 13502: u64 [a2 + 0x488] = t0\n 13506: a0 = s1 + 0x2d20\n 13510: a1 = s1 + 0x2d40\n 13514: ra = 506, jump @12\n      : @500 [@dyn 253] (gas: 23)\n 13520: a0 = sp + 0xffffffffffffffe0\n 13523: a5 = a0 & 0xffffffffffffffe0\n 13526: sp = a5\n 13528: a1 = u64 [s1 + 0xd8]\n 13532: a0 = a1 + 0x2\n 13535: a1 = a0 <u a1\n 13538: a3 = u64 [s1 + 0xe0]\n 13542: a2 = a3 + a1\n 13545: a3 = a2 <u a3\n 13548: a3 = a1 if a1 == 0\n 13551: a1 = u64 [s1 + 0xd0]\n 13555: a3 = a3 + a1\n 13558: a1 = a3 <u a1\n 13561: a4 = u64 [s1 + 0xe8]\n 13565: a1 = a1 + a4\n 13568: u64 [s1 + 0x118] = a5\n 13572: u64 [a5 + 0x18] = a1\n 13575: u64 [a5 + 0x10] = a3\n 13578: u64 [a5 + 0x8] = a2\n 13581: u64 [a5] = a0\n 13583: a0 = s1 + 0x2260\n 13587: a1 = u64 [s1 + 0xf0]\n 13591: ra = 508, jump @7\n      : @501 [@dyn 254] (gas: 7)\n 13597: a0 = s1 + 0x20b8\n 13601: a0 = u64 [a0 + 0x1a8]\n 13605: a0 = a0 & 0xffffffffffffffff\n 13608: u64 [s1 + 0x110] = a0\n 13612: a0 = s1 + 0x2240\n 13616: a1 = u64 [s1 + 0x118]\n 13620: ra = 510, jump @11\n      : @502 [@dyn 255] (gas: 15)\n 13626: a2 = s1 + 0x20b8\n 13630: a3 = a2 + 0x100\n 13634: a0 = u64 [a3 + 0xa0]\n 13638: a1 = u64 [a3 + 0x98]\n 13642: a2 = u64 [a3 + 0x90]\n 13646: a3 = s1 + 0x28b8\n 13650: a4 = u64 [s1 + 0x110]\n 13654: a5 = a3 + 0x400\n 13658: u64 [a5 + 0xa8] = a4\n 13662: u64 [a5 + 0xc0] = a0\n 13666: u64 [a5 + 0xb8] = a1\n 13670: u64 [a5 + 0xb0] = a2\n 13674: a1 = s1 + 0x2d60\n 13678: a0 = u64 [s1 + 0x118]\n 13682: ra = 512, jump @12\n      : @503 [@dyn 256] (gas: 3)\n 13688: a0 = s1 + 0x2220\n 13692: a1 = u64 [s1 + 0xc8]\n 13696: ra = 514, jump @7\n      : @504 [@dyn 257] (gas: 14)\n 13702: a3 = s1 + 0x20b8\n 13706: a4 = a3 + 0x100\n 13710: a0 = u64 [a4 + 0x80]\n 13714: a1 = u64 [a4 + 0x70]\n 13717: a2 = u64 [a4 + 0x78]\n 13720: a3 = u64 [a4 + 0x68]\n 13723: a0 = a0 | a1\n 13726: a2 = a2 | a3\n 13729: a0 = a0 | a2\n 13732: a0 = a0 >u 0\n 13734: u64 [s1 + 0x110] = a0\n 13738: a0 = s1 + 0x2200\n 13742: a1 = u64 [s1 + 0x118]\n 13746: ra = 516, jump @11\n      : @505 [@dyn 258] (gas: 18)\n 13752: a3 = s1 + 0x20b8\n 13756: a4 = a3 + 0x100\n 13760: a0 = u64 [a4 + 0x50]\n 13763: a1 = u64 [a4 + 0x48]\n 13766: a2 = u64 [a4 + 0x60]\n 13769: a3 = u64 [a4 + 0x58]\n 13772: a0 = a0 & 0xffffffffffffff00\n 13776: a4 = u64 [s1 + 0x110]\n 13780: a0 = a0 | a4\n 13783: a4 = s1 + 0x28b8\n 13787: a5 = a4 + 0x400\n 13791: u64 [a5 + 0xe0] = a2\n 13795: u64 [a5 + 0xd8] = a3\n 13799: u64 [a5 + 0xc8] = a1\n 13803: u64 [a5 + 0xd0] = a0\n 13807: a1 = s1 + 0x2d80\n 13811: a0 = u64 [s1 + 0x118]\n 13815: ra = 518, jump @12\n      : @506 [@dyn 259] (gas: 5)\n 13821: a0 = u64 [s1 + 0x78]\n 13824: ra = 0x208\n 13828: ecalli 4 // 'caller'\n 13830: t0 = 0x20a\n 13834: jump @1420\n      : @507 [@dyn 260] (gas: 1)\n 13837: t0 = 522, jump @1420\n      : @508 [@dyn 261] (gas: 8)\n 13843: u64 [a2 + 320] = 0\n 13847: a4 = a2 + 0x100\n 13851: u64 [a4 + 0x38] = a1\n 13854: u64 [a4 + 0x30] = a0\n 13857: a1 = s1 + 0x21e0\n 13861: u64 [a4 + 0x28] = a3\n 13864: a0 = 0\n 13866: ra = 524, jump @9\n      : @509 [@dyn 262] (gas: 9)\n 13872: a0 = s1 + 0x20b8\n 13876: u64 [a0 + 288] = 0\n 13880: u64 [a0 + 280] = 0\n 13884: u64 [a0 + 272] = 0\n 13888: a2 = a0\n 13890: a0 = 0x20\n 13893: a1 = s1 + 0x21c0\n 13897: u64 [a2 + 264] = 0\n 13901: ra = 526, jump @9\n      : @510 [@dyn 263] (gas: 7)\n 13907: a1 = u64 [s1 + 0x48]\n 13910: a0 = sp + 0xffffffffffffffe0\n 13913: a0 = a0 & 0xffffffffffffffe0\n 13916: u64 [s1 + 0x118] = a0\n 13920: sp = a0\n 13922: a0 = i32 [a1]\n 13924: jump @512 if a0 >=u 64\n      : @511 (gas: 2)\n 13928: u32 [a1 + 0] = 0x40\n 13931: fallthrough\n      : @512 (gas: 11)\n 13932: a0 = sp + 0xffffffffffffffe0\n 13935: a0 = a0 & 0xffffffffffffffe0\n 13938: u64 [s1 + 0x110] = a0\n 13942: sp = a0\n 13944: i32 a2 = a0 + 0\n 13946: a1 = 0x40\n 13949: a0 = u64 [s1 + 0x50]\n 13952: ra = 0x210\n 13956: ecalli 8 // 'hash_keccak_256'\n 13958: t0 = 0x212\n 13962: jump @1459\n      : @513 [@dyn 264] (gas: 1)\n 13965: t0 = 530, jump @1459\n      : @514 [@dyn 265] (gas: 2)\n 13971: a4 = a3 + 0x3\n 13974: t0 = 532, jump @1432\n      : @515 [@dyn 266] (gas: 7)\n 13980: a1 = u64 [s1 + 0x118]\n 13984: u64 [a1] = a4\n 13986: u64 [a1 + 0x8] = a5\n 13989: u64 [a1 + 0x10] = a2\n 13992: u64 [a1 + 0x18] = a0\n 13995: a0 = s1 + 0x21a0\n 13999: ra = 534, jump @11\n      : @516 [@dyn 267] (gas: 9)\n 14005: a0 = s1 + 0x20b8\n 14009: a0 = u64 [a0 + 0xe8]\n 14013: a0 = a0 + 0x1\n 14016: a1 = u64 [s1 + 0x80]\n 14020: a0 = a0 & a1\n 14023: u64 [s1 + 0x110] = a0\n 14027: a0 = s1 + 0x2180\n 14031: a1 = u64 [s1 + 0x118]\n 14035: ra = 536, jump @11\n      : @517 [@dyn 268] (gas: 6)\n 14041: a3 = s1 + 0x20b8\n 14045: a0 = u64 [a3 + 0xd0]\n 14049: a1 = u64 [a3 + 0xd8]\n 14053: a2 = u64 [a3 + 0xe0]\n 14057: a3 = u64 [a3 + 0xc8]\n 14061: t0 = 538, jump @1468\n      : @518 [@dyn 269] (gas: 8)\n 14067: u64 [a4 + 0x500] = a2\n 14071: a2 = a4 + 0x400\n 14075: u64 [a2 + 0xf8] = a1\n 14079: u64 [a2 + 0xf0] = a0\n 14083: u64 [a2 + 0xe8] = a3\n 14087: a1 = s1 + 0x2da0\n 14091: a0 = u64 [s1 + 0x118]\n 14095: ra = 540, jump @12\n      : @519 [@dyn 270] (gas: 3)\n 14101: a0 = s1 + 0x2160\n 14105: a1 = 0x40\n 14108: ra = 542, jump @7\n      : @520 [@dyn 271] (gas: 3)\n 14114: t0 = 0x220\n 14118: a3 = s1 + 0x20b8\n 14122: fallthrough\n      : @521 [@dyn 272] (gas: 12)\n 14123: a0 = u64 [a3 + 0xc0]\n 14127: a1 = u64 [a3 + 0xb8]\n 14131: a2 = u64 [a3 + 0xb0]\n 14135: a4 = u64 [a3 + 0xa8]\n 14139: a0 = a0 | a2\n 14142: a2 = a4 | a1\n 14145: a2 = a2 | a0\n 14148: a2 = a2 >> 0x20\n 14151: a0 = a0 | a1\n 14154: a0 = a0 << 0x20\n 14157: a0 = a0 | a2\n 14160: jump @622 if a0 != 0\n      : @522 (gas: 12)\n 14164: a0 = u64 [s1 + 0x58]\n 14167: u64 [a3 + 0x88] = a0\n 14171: a0 = u64 [s1 + 0x60]\n 14174: u64 [a3 + 0x90] = a0\n 14178: a0 = u64 [s1 + 0x68]\n 14181: u64 [a3 + 0x98] = a0\n 14185: a1 = s1 + 0x2140\n 14189: a0 = u64 [s1 + 0x70]\n 14192: u64 [a3 + 0xa0] = a0\n 14196: a0 = a4\n 14198: u64 [s1 + 0x118] = a4\n 14202: ra = 546, jump @9\n      : @523 [@dyn 273] (gas: 6)\n 14208: a0 = u64 [s1 + 0x78]\n 14211: ra = 0x224\n 14215: ecalli 4 // 'caller'\n 14217: a2 = u64 [s1 + 0x88]\n 14221: t0 = 0x226\n 14225: jump @1419\n      : @524 [@dyn 274] (gas: 2)\n 14228: a2 = u64 [s1 + 0x88]\n 14232: t0 = 550, jump @1419\n      : @525 [@dyn 275] (gas: 43)\n 14238: t0 = a1 | a0\n 14241: a3 = a3 >> 0x20\n 14244: a2 = reverse a2\n 14246: a1 = a2 << 0x20\n 14249: a1 = a1 | a3\n 14252: a2 = a2 >> 0x20\n 14255: a3 = u64 [0x20000]\n 14260: a4 = u64 [0x20008]\n 14265: a5 = u64 [0x20010]\n 14270: a0 = s1 + 0x20b8\n 14274: u64 [a0 + 0x80] = a3\n 14278: a0 = s1 + 0x20b8\n 14282: u64 [a0 + 0x78] = a4\n 14285: a3 = s1 + 0x20b8\n 14289: u64 [a3 + 64] = 0\n 14292: a0 = s1 + 0x20b8\n 14296: u64 [a0 + 0x70] = a5\n 14299: a3 = u64 [0x20018]\n 14304: a4 = s1 + 0x20b8\n 14308: a0 = u64 [s1 + 0xa0]\n 14312: u64 [a4 + 0x38] = a0\n 14315: a4 = s1 + 0x20b8\n 14319: a0 = u64 [s1 + 0x90]\n 14323: u64 [a4 + 0x30] = a0\n 14326: a4 = s1 + 0x20b8\n 14330: a0 = u64 [s1 + 0x98]\n 14334: u64 [a4 + 0x28] = a0\n 14337: a0 = s1 + 0x20b8\n 14341: u64 [a0 + 0x68] = a3\n 14344: a3 = s1 + 0x20b8\n 14348: u64 [a3 + 0x58] = a2\n 14351: a2 = s1 + 0x20b8\n 14355: u64 [a2 + 0x50] = a1\n 14358: a1 = s1 + 0x20b8\n 14362: u64 [a1 + 0x48] = t0\n 14365: a1 = 0x20\n 14368: a2 = s1 + 0x2120\n 14372: a3 = s1 + 0x2100\n 14376: a4 = s1 + 0x20e0\n 14380: a0 = s1 + 0x20b8\n 14384: u64 [a0 + 96] = 0\n 14387: a0 = u64 [s1 + 0x118]\n 14391: ra = 552, jump @15\n      : @526 [@dyn 276] (gas: 3)\n 14397: a0 = s1 + 0x20c0\n 14401: a1 = 0x40\n 14404: ra = 554, jump @7\n      : @527 [@dyn 277] (gas: 3)\n 14410: t0 = 0x22c\n 14414: a3 = s1 + 0x20b8\n 14418: fallthrough\n      : @528 [@dyn 278] (gas: 12)\n 14419: a0 = u64 [a3 + 0x20]\n 14422: a1 = u64 [a3 + 0x18]\n 14425: a2 = u64 [a3 + 0x10]\n 14428: a4 = u64 [a3 + 0x8]\n 14431: a0 = a0 | a2\n 14434: a2 = a4 | a1\n 14437: a2 = a2 | a0\n 14440: a2 = a2 >> 0x20\n 14443: a0 = a0 | a1\n 14446: a0 = a0 << 0x20\n 14449: a0 = a0 | a2\n 14452: jump @622 if a0 != 0\n      : @529 (gas: 13)\n 14456: u64 [a3 + 0] = 0\n 14458: a0 = u64 [s1 + 0x98]\n 14462: a2 = a3 + 0xffffffffffffff00\n 14466: u64 [a2 + 0xe8] = a0\n 14470: a0 = u64 [s1 + 0x90]\n 14474: u64 [a2 + 0xf0] = a0\n 14478: a1 = s1 + 0x20a0\n 14482: a0 = u64 [s1 + 0xa0]\n 14486: u64 [a2 + 0xf8] = a0\n 14490: a0 = a4\n 14492: u64 [s1 + 0x118] = a4\n 14496: ra = 0x114\n 14500: jump @9\n      : @530 (gas: 19)\n 14503: a0 = u64 [s1 + 0x118]\n 14507: a2 = u64 [s1 + 0xa8]\n 14511: a0 = a0 | a2\n 14514: a2 = u64 [s1 + 0x90]\n 14518: a0 = a2 if a4 == 0\n 14521: t1 = u64 [s1 + 0xc0]\n 14525: a3 = t1\n 14527: t0 = u64 [s1 + 0xe8]\n 14531: a3 = a0 if t0 != 0\n 14534: u64 [s1 + 0x118] = a3\n 14538: a0 = u64 [s1 + 0xe0]\n 14542: a2 = u64 [s1 + 0xb0]\n 14546: a0 = a0 | a2\n 14549: a2 = u64 [s1 + 0x98]\n 14553: a0 = a2 if a4 == 0\n 14556: a5 = u64 [s1 + 0xd0]\n 14560: a3 = a5\n 14562: a3 = a0 if t0 != 0\n 14565: t0 = 558, jump @1457\n      : @531 [@dyn 279] (gas: 1)\n 14571: ra = 560, jump @1493\n      : @532 [@dyn 280] (gas: 6)\n 14577: u64 [s1 + 0xb0] = a0\n 14581: u64 [s1 + 0x98] = a1\n 14585: a0 = u64 [s1 + 0xc8]\n 14589: a1 = u64 [s1 + 0xd8]\n 14593: a2 = u64 [s1 + 0x110]\n 14597: ra = 562, jump @1493\n      : @533 [@dyn 281] (gas: 7)\n 14603: u64 [s1 + 0x90] = a0\n 14607: u64 [s1 + 0xa8] = a1\n 14611: a1 = u64 [s1 + 0x110]\n 14615: a2 = 0x80 - a1\n 14619: a0 = u64 [s1 + 0xd0]\n 14623: a1 = u64 [s1 + 0xc0]\n 14627: ra = 564, jump @1498\n      : @534 [@dyn 282] (gas: 21)\n 14633: a2 = u64 [s1 + 0xa8]\n 14637: a1 = a1 | a2\n 14640: a3 = u64 [s1 + 0x110]\n 14644: a4 = a3 <u 0x80\n 14648: u64 [s1 + 0xa8] = a4\n 14652: a2 = u64 [s1 + 0x98]\n 14656: a1 = a2 if a4 == 0\n 14659: a2 = u64 [s1 + 0xd8]\n 14663: a2 = a1 if a3 != 0\n 14666: u64 [s1 + 0xd8] = a2\n 14670: a1 = u64 [s1 + 0x90]\n 14674: a0 = a0 | a1\n 14677: a1 = u64 [s1 + 0xb0]\n 14681: a0 = a1 if a4 == 0\n 14684: a1 = u64 [s1 + 0xc8]\n 14688: a1 = a0 if a3 != 0\n 14691: a2 = a3\n 14693: u64 [s1 + 0xc8] = a1\n 14697: a0 = u64 [s1 + 0xd0]\n 14701: a1 = u64 [s1 + 0xc0]\n 14705: ra = 566, jump @1493\n      : @535 [@dyn 283] (gas: 3)\n 14711: a4 = 0\n 14713: a5 = 0\n 14715: t0 = 568, jump @1467\n      : @536 [@dyn 284] (gas: 3)\n 14721: t1 = u64 [s1 + 0xd8]\n 14725: t2 = u64 [s1 + 0xc8]\n 14729: fallthrough\n      : @537 (gas: 89)\n 14730: u64 [s1 + 0xd8] = a4\n 14734: a2 = t2 >> 0x3f\n 14737: a3 = t1 << 0x1\n 14740: t0 = a3 | a2\n 14743: a3 = t2 << 0x1\n 14746: a4 = u64 [s1 + 0x118]\n 14750: a4 = a4 >> 0x3f\n 14753: a3 = a3 | a4\n 14756: u64 [s1 + 0xc8] = a3\n 14760: a2 = u64 [s1 + 0xa8]\n 14764: t2 = a1\n 14766: u64 [s1 + 0xd0] = t0\n 14770: a1 = a2 ^ t0\n 14773: ra = t1\n 14775: t1 = a2 <u t0\n 14778: a4 = u64 [s1 + 0xb0]\n 14782: t0 = a4 <u a3\n 14785: t0 = t1 if a1 != 0\n 14788: a1 = t2 << 0x1\n 14791: a3 = a0 >> 0x3f\n 14794: a1 = a1 | a3\n 14797: u64 [s1 + 0xc0] = a1\n 14801: a3 = ra >> 0x3f\n 14804: a0 = a0 << 0x1\n 14807: a3 = a3 | a0\n 14810: a0 = u64 [s1 + 0x118]\n 14814: a0 = a0 << 0x1\n 14817: a4 = u64 [s1 + 0xe0]\n 14821: a1 = a4 >> 0x3f\n 14824: ra = a0 | a1\n 14827: a1 = a4 << 0x1\n 14830: a4 = u64 [s1 + 0xe8]\n 14834: t1 = a4 >> 0x3f\n 14837: t1 = a1 | t1\n 14840: a1 = a4 << 0x1\n 14843: a4 = u64 [s1 + 0x108]\n 14847: t2 = a4 >> 0x3f\n 14850: a1 = a1 | t2\n 14853: a4 = a4 << 0x1\n 14856: a0 = u64 [s1 + 0xd8]\n 14860: a4 = a4 | a0\n 14863: u64 [s1 + 0x108] = a4\n 14867: a1 = a1 | a5\n 14870: u64 [s1 + 0xe8] = a1\n 14874: a1 = a5 | t1\n 14877: u64 [s1 + 0xe0] = a1\n 14881: a0 = a5 | ra\n 14884: u64 [s1 + 0x118] = a0\n 14888: a0 = a2 - a3\n 14891: a0 = a0 <u t0\n 14894: a1 = a2 <u a3\n 14897: t0 = u64 [s1 + 0xc0]\n 14901: a4 = a2 - t0\n 14904: a4 = a4 - a1\n 14907: a4 = a4 - a0\n 14910: a5 = a4 >>a 0x3f\n 14913: a0 = u64 [s1 + 0xb8]\n 14917: a0 = a0 & a5\n 14920: a1 = u64 [s1 + 0xc8]\n 14924: t2 = a1 - a0\n 14927: a1 = a1 <u a0\n 14930: a0 = u64 [s1 + 0xd0]\n 14934: t1 = a0 - a1\n 14937: a1 = 0 if a0 != 0\n 14939: a0 = a3 - a1\n 14942: a1 = a3 <u a1\n 14945: a1 = t0 - a1\n 14948: a3 = u64 [s1 + 0x110]\n 14952: ra = u64 [s1 + 0x100]\n 14956: a2 = a3 | ra\n 14959: a2 = a2 <u 0x1\n 14962: a4 = u64 [s1 + 0xf0]\n 14966: t0 = a4 <u a2\n 14969: a2 = a4 - a2\n 14972: a4 = a3 <u 0x1\n 14975: ra = ra - a4\n 14978: a4 = u64 [s1 + 0xf8]\n 14982: a4 = a4 - t0\n 14985: a3 = a3 + 0xffffffffffffffff\n 14988: u64 [s1 + 0x100] = ra\n 14992: u64 [s1 + 0xf8] = a4\n 14996: t0 = ra | a4\n 14999: u64 [s1 + 0x110] = a3\n 15003: a4 = a3 | a2\n 15006: a3 = a4 | t0\n 15009: a4 = a5 & 0x1\n 15012: u64 [s1 + 0xf0] = a2\n 15016: a5 = 0\n 15018: jump @537 if a3 != 0\n      : @538 (gas: 4)\n 15022: a0 = u64 [s1 + 0x108]\n 15026: a0 = a0 << 0x1\n 15029: a4 = a4 | a0\n 15032: fallthrough\n      : @539 (gas: 3)\n 15033: a0 = a4 & 0xffffffffffffffff\n 15036: a1 = u64 [s1 + 0xa0]\n 15040: jump @696 if a1 != a0\n      : @540 (gas: 8)\n 15044: a0 = 0x30180\n 15049: u64 [s1 + 0xd0] = a0\n 15053: i32 a0 = a0 + 0\n 15055: u64 [s1 + 0xc8] = a0\n 15059: ra = 0x23a\n 15063: ecalli 4 // 'caller'\n 15065: t0 = 0x23c\n 15069: jump @1416\n      : @541 [@dyn 285] (gas: 1)\n 15072: t0 = 572, jump @1416\n      : @542 [@dyn 286] (gas: 9)\n 15078: u64 [a2 + 1056] = 0\n 15082: a4 = a2 + 0x400\n 15086: u64 [a4 + 0x18] = a1\n 15089: u64 [a4 + 0x10] = a0\n 15092: a1 = s1 + 0x7ff\n 15096: a1 = a1 + 0x4a1\n 15100: u64 [a4 + 0x8] = a3\n 15103: a0 = 0\n 15105: ra = 574, jump @9\n      : @543 [@dyn 287] (gas: 11)\n 15111: a0 = s1 + 0x7ff\n 15115: a0 = a0 + 0x99\n 15119: u64 [a0 + 1024] = 0\n 15123: u64 [a0 + 1016] = 0\n 15127: u64 [a0 + 1008] = 0\n 15131: a2 = a0\n 15133: a0 = 0x20\n 15136: a1 = s1 + 0x7ff\n 15140: a1 = a1 + 0x481\n 15144: u64 [a2 + 1000] = 0\n 15148: ra = 576, jump @9\n      : @544 [@dyn 288] (gas: 7)\n 15154: a0 = sp + 0xffffffffffffffe0\n 15157: a0 = a0 & 0xffffffffffffffe0\n 15160: u64 [s1 + 0xa8] = a0\n 15164: sp = a0\n 15166: a1 = 0x20170\n 15171: a0 = i32 [0x20170]\n 15176: jump @546 if a0 >u 63\n      : @545 (gas: 3)\n 15180: u32 [0x20170] = 0x40\n 15186: t0 = 0x242\n 15190: jump @1465\n      : @546 (gas: 1)\n 15193: t0 = 578, jump @1465\n      : @547 [@dyn 289] (gas: 30)\n 15199: a0 = 0x20180\n 15204: i32 a0 = a0 + 0\n 15206: i32 a2 = a2 + 0\n 15208: u64 [s1 + 0x108] = a1\n 15212: a1 = 0x40\n 15215: u64 [s1 + 0x110] = a0\n 15219: ecalli 8 // 'hash_keccak_256'\n 15221: a3 = u64 [s1 + 0x118]\n 15225: a0 = u64 [a3 + 0x18]\n 15228: a1 = u64 [a3 + 0x10]\n 15231: a2 = u64 [a3 + 0x8]\n 15234: a3 = u64 [a3]\n 15236: a5 = reverse a0\n 15238: a4 = reverse a1\n 15240: a1 = reverse a2\n 15242: a2 = reverse a3\n 15244: a0 = u64 [s1 + 0xa8]\n 15248: u64 [s1 + 0x100] = a2\n 15252: u64 [a0 + 0x18] = a2\n 15255: u64 [s1 + 0x118] = a1\n 15259: u64 [a0 + 0x10] = a1\n 15262: u64 [s1 + 0xf8] = a4\n 15266: u64 [a0 + 0x8] = a4\n 15269: u64 [s1 + 0xf0] = a5\n 15273: u64 [a0] = a5\n 15275: a0 = u64 [s1 + 0xc8]\n 15279: ra = 0x244\n 15283: ecalli 4 // 'caller'\n 15285: t0 = 0x246\n 15289: jump @1416\n      : @548 [@dyn 290] (gas: 1)\n 15292: t0 = 582, jump @1416\n      : @549 [@dyn 291] (gas: 9)\n 15298: u64 [a2 + 992] = 0\n 15302: a4 = a2 + 0x300\n 15306: u64 [a4 + 0xd8] = a1\n 15310: u64 [a4 + 0xd0] = a0\n 15314: a1 = s1 + 0x7ff\n 15318: a1 = a1 + 0x461\n 15322: u64 [a4 + 0xc8] = a3\n 15326: a0 = 0\n 15328: ra = 584, jump @9\n      : @550 [@dyn 292] (gas: 11)\n 15334: a1 = s1 + 0x7ff\n 15338: a1 = a1 + 0x99\n 15342: u64 [a1 + 960] = 0\n 15346: u64 [a1 + 952] = 0\n 15350: u64 [a1 + 936] = 0x2\n 15355: a2 = a1\n 15357: a0 = 0x20\n 15360: a1 = s1 + 0x7ff\n 15364: a1 = a1 + 0x441\n 15368: u64 [a2 + 944] = 0\n 15372: ra = 586, jump @9\n      : @551 [@dyn 293] (gas: 3)\n 15378: a1 = u64 [s1 + 0x108]\n 15382: a0 = i32 [a1]\n 15384: jump @553 if a0 >u 63\n      : @552 (gas: 2)\n 15388: u32 [a1 + 0] = 0x40\n 15391: fallthrough\n      : @553 (gas: 8)\n 15392: a1 = 0xffffffff00000000\n 15402: u64 [s1 + 0xb0] = a1\n 15406: a0 = 0xffffffff\n 15416: u64 [s1 + 0xc0] = a0\n 15420: a0 = sp + 0xffffffffffffffe0\n 15423: a0 = a0 & 0xffffffffffffffe0\n 15426: u64 [s1 + 0xe8] = a0\n 15430: t0 = 588, jump @1418\n      : @554 [@dyn 294] (gas: 5)\n 15436: ra = 0x24e\n 15440: ecalli 8 // 'hash_keccak_256'\n 15442: a3 = u64 [s1 + 0xe8]\n 15446: t0 = 0x250\n 15450: jump @1429\n      : @555 [@dyn 295] (gas: 2)\n 15453: a3 = u64 [s1 + 0xe8]\n 15457: t0 = 592, jump @1429\n      : @556 [@dyn 296] (gas: 9)\n 15463: a5 = a4 + 0x700\n 15467: u64 [a5 + 0x40] = a3\n 15470: u64 [a5 + 0x38] = a2\n 15473: u64 [a5 + 0x30] = a1\n 15476: u64 [a5 + 0x28] = a0\n 15479: a0 = s1 + 0x7ff\n 15483: a0 = a0 + 0x421\n 15487: a1 = s1 + 0x27e0\n 15491: ra = 594, jump @11\n      : @557 [@dyn 297] (gas: 25)\n 15497: u64 [s1 + 144] = 0\n 15501: u64 [s1 + 152] = 0\n 15505: a4 = 0\n 15507: a0 = s1 + 0x7ff\n 15511: a0 = a0 + 0x99\n 15515: a0 = u32 [a0 + 0x388]\n 15519: u64 [s1 + 0xb8] = a0\n 15523: a1 = u64 [s1 + 0xf0]\n 15527: a1 = a1 + 0x1\n 15530: a0 = a1 <u 0x1\n 15533: a2 = u64 [s1 + 0xf8]\n 15537: a0 = a0 + a2\n 15540: u64 [s1 + 0x88] = a1\n 15544: u64 [s1 + 0x80] = a0\n 15548: a0 = a0 | a1\n 15551: a0 = a0 <u 0x1\n 15554: a1 = u64 [s1 + 0x118]\n 15558: a0 = a0 + a1\n 15561: u64 [s1 + 0x78] = a0\n 15564: a0 = a0 <u a1\n 15567: a1 = u64 [s1 + 0x100]\n 15571: a0 = a0 + a1\n 15574: u64 [s1 + 0x70] = a0\n 15577: a3 = 0x1\n 15580: fallthrough\n      : @558 (gas: 9)\n 15581: a1 = 0\n 15583: a1 = 0 if a4 == 0\n 15585: a0 = u64 [s1 + 0xb8]\n 15589: a0 = a0 <u a3\n 15592: a2 = 0\n 15594: a2 = a0 if a4 == 0\n 15597: a0 = 0\n 15599: a2 = a1 if a0 != 0\n 15602: jump @618 if a2 != 0\n      : @559 (gas: 7)\n 15606: u64 [s1 + 248] = 0\n 15610: u64 [s1 + 0x118] = a3\n 15614: a0 = u64 [s1 + 0xc8]\n 15618: ra = 0x254\n 15622: ecalli 4 // 'caller'\n 15624: t0 = 0x256\n 15628: jump @1416\n      : @560 [@dyn 298] (gas: 1)\n 15631: t0 = 598, jump @1416\n      : @561 [@dyn 299] (gas: 9)\n 15637: u64 [a2 + 896] = 0\n 15641: a4 = a2 + 0x300\n 15645: u64 [a4 + 0x78] = a1\n 15648: u64 [a4 + 0x70] = a0\n 15651: a1 = s1 + 0x7ff\n 15655: a1 = a1 + 0x401\n 15659: u64 [a4 + 0x68] = a3\n 15662: a0 = 0\n 15664: ra = 600, jump @9\n      : @562 [@dyn 300] (gas: 11)\n 15670: a0 = s1 + 0x7ff\n 15674: a0 = a0 + 0x99\n 15678: u64 [a0 + 864] = 0\n 15682: u64 [a0 + 856] = 0\n 15686: u64 [a0 + 848] = 0\n 15690: a3 = a0\n 15692: a0 = 0x20\n 15695: a1 = s1 + 0x7ff\n 15699: a1 = a1 + 0x3e1\n 15703: u64 [a3 + 840] = 0x1\n 15708: ra = 602, jump @9\n      : @563 [@dyn 301] (gas: 3)\n 15714: a1 = u64 [s1 + 0x108]\n 15718: a0 = i32 [a1]\n 15720: jump @565 if a0 >u 63\n      : @564 (gas: 2)\n 15724: u32 [a1 + 0] = 0x40\n 15727: fallthrough\n      : @565 (gas: 4)\n 15728: a0 = sp + 0xffffffffffffffe0\n 15731: a0 = a0 & 0xffffffffffffffe0\n 15734: u64 [s1 + 0x100] = a0\n 15738: t0 = 604, jump @1418\n      : @566 [@dyn 302] (gas: 4)\n 15744: ra = 0x25e\n 15748: ecalli 8 // 'hash_keccak_256'\n 15750: t0 = 0x260\n 15754: jump @1428\n      : @567 [@dyn 303] (gas: 1)\n 15757: t0 = 608, jump @1428\n      : @568 [@dyn 304] (gas: 10)\n 15763: a3 = a2 + 0x300\n 15767: u64 [a3 + 0x40] = a0\n 15770: u64 [a3 + 0x38] = a0\n 15773: u64 [a3 + 0x30] = a0\n 15776: a1 = s1 + 0x7ff\n 15780: a1 = a1 + 0x3c1\n 15784: a0 = u64 [s1 + 0x118]\n 15788: u64 [a3 + 0x28] = a0\n 15791: a0 = 0\n 15793: ra = 610, jump @9\n      : @569 [@dyn 305] (gas: 5)\n 15799: a0 = u64 [s1 + 0xd8]\n 15803: a1 = s1 + 0x7ff\n 15807: a1 = a1 + 0x99\n 15811: a2 = a1 + 0x300\n 15815: t0 = 612, jump @1453\n      : @570 [@dyn 306] (gas: 4)\n 15821: a1 = a1 + 0x3a1\n 15825: a2 = u64 [s1 + 0xf0]\n 15829: u64 [a3 + 0x308] = a2\n 15833: ra = 614, jump @9\n      : @571 [@dyn 307] (gas: 3)\n 15839: a1 = u64 [s1 + 0x108]\n 15843: a0 = i32 [a1]\n 15845: jump @573 if a0 >u 63\n      : @572 (gas: 2)\n 15849: u32 [a1 + 0] = 0x40\n 15852: fallthrough\n      : @573 (gas: 4)\n 15853: a0 = sp + 0xffffffffffffffe0\n 15856: a0 = a0 & 0xffffffffffffffe0\n 15859: u64 [s1 + 0xf0] = a0\n 15863: t0 = 616, jump @1418\n      : @574 [@dyn 308] (gas: 5)\n 15869: ra = 0x26a\n 15873: ecalli 8 // 'hash_keccak_256'\n 15875: a3 = u64 [s1 + 0xf0]\n 15879: t0 = 0x26c\n 15883: jump @1442\n      : @575 [@dyn 309] (gas: 2)\n 15886: a3 = u64 [s1 + 0xf0]\n 15890: t0 = 620, jump @1442\n      : @576 [@dyn 310] (gas: 23)\n 15896: a4 = u64 [s1 + 0x100]\n 15900: u64 [a4 + 0x18] = a3\n 15903: u64 [a4 + 0x10] = a2\n 15906: u64 [a4 + 0x8] = a1\n 15909: u64 [a4] = a0\n 15911: a4 = a0 + 0x2\n 15914: a0 = a4 <u a0\n 15917: a5 = a1 + a0\n 15920: a1 = a5 <u a1\n 15923: a1 = a0 if a0 == 0\n 15926: a1 = a1 + a2\n 15929: a0 = a1 <u a2\n 15932: a0 = a0 + a3\n 15935: a2 = s1 + 0x20b8\n 15939: a3 = a2 + 0x700\n 15943: u64 [a3 + 0x48] = a4\n 15946: u64 [a3 + 0x50] = a5\n 15949: u64 [a3 + 0x58] = a1\n 15952: u64 [a3 + 0x60] = a0\n 15955: a0 = s1 + 0x7ff\n 15959: a0 = a0 + 0x381\n 15963: a1 = s1 + 0x2800\n 15967: ra = 622, jump @11\n      : @577 [@dyn 311] (gas: 5)\n 15973: a0 = s1 + 0x7ff\n 15977: a0 = a0 + 0x99\n 15981: a0 = u64 [a0 + 0x2f0]\n 15985: a0 = a0 & 0xff\n 15989: jump @580 if a0 == 0\n      : @578 (gas: 2)\n 15992: a1 = u64 [s1 + 0xc0]\n 15996: fallthrough\n      : @579 (gas: 5)\n 15997: a4 = 0\n 15999: a0 = u64 [s1 + 0x118]\n 16003: a0 = a0 + 0x1\n 16006: a3 = a0 & a1\n 16009: jump @558\n      : @580 (gas: 4)\n 16012: a0 = s1 + 0x7ff\n 16016: a0 = a0 + 0x361\n 16020: a1 = u64 [s1 + 0x100]\n 16024: ra = 624, jump @11\n      : @581 [@dyn 312] (gas: 13)\n 16030: a2 = s1 + 0x7ff\n 16034: a2 = a2 + 0x99\n 16038: a3 = a2 + 0x200\n 16042: a0 = u64 [a3 + 0xd0]\n 16046: a1 = u64 [a3 + 0xd8]\n 16050: a2 = u64 [a3 + 0xc8]\n 16054: a0 = a0 & 0xffffffffffffffff\n 16057: a1 = a1 & 0xffffffffffffffff\n 16060: a4 = u64 [s1 + 0xb0]\n 16064: a2 = a2 & a4\n 16067: a1 = a1 | a2\n 16070: a0 = a0 | a1\n 16073: jump @578 if a0 == 0\n      : @582 (gas: 5)\n 16076: a0 = u64 [s1 + 0xc8]\n 16080: ra = 0x272\n 16084: ecalli 4 // 'caller'\n 16086: t0 = 0x274\n 16090: jump @1416\n      : @583 [@dyn 313] (gas: 1)\n 16093: t0 = 628, jump @1416\n      : @584 [@dyn 314] (gas: 9)\n 16099: u64 [a2 + 704] = 0\n 16103: a4 = a2 + 0x200\n 16107: u64 [a4 + 0xb8] = a1\n 16111: u64 [a4 + 0xb0] = a0\n 16115: a1 = s1 + 0x7ff\n 16119: a1 = a1 + 0x341\n 16123: u64 [a4 + 0xa8] = a3\n 16127: a0 = 0\n 16129: ra = 630, jump @9\n      : @585 [@dyn 315] (gas: 11)\n 16135: a0 = s1 + 0x7ff\n 16139: a0 = a0 + 0x99\n 16143: u64 [a0 + 672] = 0\n 16147: u64 [a0 + 664] = 0\n 16151: u64 [a0 + 656] = 0\n 16155: a3 = a0\n 16157: a0 = 0x20\n 16160: a1 = s1 + 0x7ff\n 16164: a1 = a1 + 0x321\n 16168: u64 [a3 + 648] = 0x3\n 16173: ra = 632, jump @9\n      : @586 [@dyn 316] (gas: 3)\n 16179: a1 = u64 [s1 + 0x108]\n 16183: a0 = i32 [a1]\n 16185: jump @588 if a0 >u 63\n      : @587 (gas: 2)\n 16189: u32 [a1 + 0] = 0x40\n 16192: fallthrough\n      : @588 (gas: 4)\n 16193: a0 = sp + 0xffffffffffffffe0\n 16196: a0 = a0 & 0xffffffffffffffe0\n 16199: u64 [s1 + 0x100] = a0\n 16203: t0 = 634, jump @1418\n      : @589 [@dyn 317] (gas: 5)\n 16209: ra = 0x27c\n 16213: ecalli 8 // 'hash_keccak_256'\n 16215: a3 = u64 [s1 + 0x100]\n 16219: t0 = 0x27e\n 16223: jump @1458\n      : @590 [@dyn 318] (gas: 2)\n 16226: a3 = u64 [s1 + 0x100]\n 16230: t0 = 638, jump @1458\n      : @591 [@dyn 319] (gas: 18)\n 16236: u64 [s1 + 0x100] = a0\n 16240: a0 = reverse a1\n 16242: u64 [s1 + 0xf0] = a0\n 16246: a0 = reverse a2\n 16248: u64 [s1 + 0xe8] = a0\n 16252: a0 = reverse a3\n 16254: u64 [s1 + 0xe0] = a0\n 16258: a2 = s1 + 0x7ff\n 16262: a2 = a2 + 0x99\n 16266: u64 [a2 + 640] = 0\n 16270: u64 [a2 + 632] = 0\n 16274: u64 [a2 + 624] = 0\n 16278: a1 = s1 + 0x7ff\n 16282: a1 = a1 + 0x301\n 16286: a0 = u64 [s1 + 0xa0]\n 16290: u64 [a2 + 0x268] = a0\n 16294: a0 = 0\n 16296: ra = 640, jump @9\n      : @592 [@dyn 320] (gas: 16)\n 16302: a0 = u64 [s1 + 0xe0]\n 16306: a1 = s1 + 0x7ff\n 16310: a1 = a1 + 0x99\n 16314: a2 = a1 + 0x200\n 16318: u64 [a2 + 0x60] = a0\n 16321: a0 = u64 [s1 + 0xe8]\n 16325: u64 [a2 + 0x58] = a0\n 16328: a0 = u64 [s1 + 0xf0]\n 16332: u64 [a2 + 0x50] = a0\n 16335: a3 = a1\n 16337: a0 = 0x20\n 16340: a1 = s1 + 0x7ff\n 16344: a1 = a1 + 0x2e1\n 16348: a2 = u64 [s1 + 0x100]\n 16352: u64 [a3 + 0x248] = a2\n 16356: ra = 642, jump @9\n      : @593 [@dyn 321] (gas: 3)\n 16362: a1 = u64 [s1 + 0x108]\n 16366: a0 = i32 [a1]\n 16368: jump @595 if a0 >u 63\n      : @594 (gas: 2)\n 16372: u32 [a1 + 0] = 0x40\n 16375: fallthrough\n      : @595 (gas: 4)\n 16376: a0 = sp + 0xffffffffffffffe0\n 16379: a0 = a0 & 0xffffffffffffffe0\n 16382: u64 [s1 + 0x100] = a0\n 16386: t0 = 644, jump @1418\n      : @596 [@dyn 322] (gas: 4)\n 16392: ra = 0x286\n 16396: ecalli 8 // 'hash_keccak_256'\n 16398: t0 = 0x288\n 16402: jump @1428\n      : @597 [@dyn 323] (gas: 1)\n 16405: t0 = 648, jump @1428\n      : @598 [@dyn 324] (gas: 10)\n 16411: a3 = a2 + 0x200\n 16415: u64 [a3 + 0x40] = a0\n 16418: u64 [a3 + 0x38] = a0\n 16421: u64 [a3 + 0x30] = a0\n 16424: a1 = s1 + 0x7ff\n 16428: a1 = a1 + 0x2c1\n 16432: a0 = u64 [s1 + 0x118]\n 16436: u64 [a3 + 0x28] = a0\n 16439: a0 = 0\n 16441: ra = 650, jump @9\n      : @599 [@dyn 325] (gas: 5)\n 16447: a0 = u64 [s1 + 0xd8]\n 16451: a1 = s1 + 0x7ff\n 16455: a1 = a1 + 0x99\n 16459: a2 = a1 + 0x200\n 16463: t0 = 652, jump @1453\n      : @600 [@dyn 326] (gas: 4)\n 16469: a1 = a1 + 0x2a1\n 16473: a2 = u64 [s1 + 0xf0]\n 16477: u64 [a3 + 0x208] = a2\n 16481: ra = 654, jump @9\n      : @601 [@dyn 327] (gas: 3)\n 16487: a1 = u64 [s1 + 0x108]\n 16491: a0 = i32 [a1]\n 16493: jump @603 if a0 >u 63\n      : @602 (gas: 2)\n 16497: u32 [a1 + 0] = 0x40\n 16500: fallthrough\n      : @603 (gas: 4)\n 16501: a0 = sp + 0xffffffffffffffe0\n 16504: a0 = a0 & 0xffffffffffffffe0\n 16507: u64 [s1 + 0xf8] = a0\n 16511: t0 = 656, jump @1418\n      : @604 [@dyn 328] (gas: 5)\n 16517: ra = 0x292\n 16521: ecalli 8 // 'hash_keccak_256'\n 16523: a3 = u64 [s1 + 0xf8]\n 16527: t0 = 0x294\n 16531: jump @1446\n      : @605 [@dyn 329] (gas: 2)\n 16534: a3 = u64 [s1 + 0xf8]\n 16538: t0 = 660, jump @1446\n      : @606 [@dyn 330] (gas: 3)\n 16544: a0 = s1 + 0x7ff\n 16548: a0 = a0 + 0x281\n 16552: ra = 662, jump @11\n      : @607 [@dyn 331] (gas: 5)\n 16558: a0 = s1 + 0x7ff\n 16562: a0 = a0 + 0x99\n 16566: a0 = u64 [a0 + 0x1e8]\n 16570: a0 = a0 & 0x1\n 16573: jump @578 if a0 != 0\n      : @608 (gas: 4)\n 16577: a0 = s1 + 0x7ff\n 16581: a0 = a0 + 0x261\n 16585: a1 = u64 [s1 + 0xa8]\n 16589: ra = 664, jump @11\n      : @609 [@dyn 332] (gas: 17)\n 16595: a3 = s1 + 0x7ff\n 16599: a3 = a3 + 0x99\n 16603: a4 = a3 + 0x100\n 16607: a0 = u64 [a4 + 0xe0]\n 16611: a1 = u64 [a4 + 0xd8]\n 16615: a2 = u64 [a4 + 0xd0]\n 16619: t0 = u64 [a3 + 0x1c8]\n 16623: a4 = u64 [0x200a8]\n 16628: a5 = a0 >u 0\n 16630: a3 = a1 >u 0\n 16632: a3 = a5 if a0 != 0\n 16635: a4 = a4 <u t0\n 16638: a5 = a2 >u 0\n 16640: a5 = a4 if a2 == 0\n 16643: a4 = a1 | a0\n 16646: a5 = a3 if a4 != 0\n 16649: jump @611 if a5 != 0\n      : @610 (gas: 6)\n 16652: a0 = u64 [s1 + 0x90]\n 16656: a0 = a0 + 0x1\n 16659: a1 = u64 [s1 + 0xc0]\n 16663: a0 = a0 & a1\n 16666: u64 [s1 + 0x90] = a0\n 16670: jump @579\n      : @611 (gas: 23)\n 16673: a3 = u64 [0x200b0]\n 16678: a3 = a3 + t0\n 16681: a4 = a3 <u t0\n 16684: a5 = a2 + a4\n 16687: a5 = a5 + 0xffffffffffffffff\n 16690: t0 = a5 ^ a2\n 16693: a2 = a5 <u a2\n 16696: a2 = a4 if t0 == 0\n 16699: a4 = a1 + 0xffffffffffffffff\n 16702: a2 = a2 + a4\n 16705: a4 = a2 <u a4\n 16708: a1 = a1 <u 0x1\n 16711: a0 = a0 - a1\n 16714: a0 = a0 + a4\n 16717: a1 = s1 + 0x20b8\n 16721: a4 = a1 + 0x700\n 16725: u64 [a4 + 0x68] = a3\n 16728: u64 [a4 + 0x70] = a5\n 16731: u64 [a4 + 0x78] = a2\n 16734: u64 [a4 + 0x80] = a0\n 16738: a1 = s1 + 0x2820\n 16742: a0 = u64 [s1 + 0xa8]\n 16746: ra = 666, jump @12\n      : @612 [@dyn 333] (gas: 15)\n 16752: a0 = sp + 0xffffffffffffffe0\n 16755: a1 = a0 & 0xffffffffffffffe0\n 16758: u64 [s1 + 0xf8] = a1\n 16762: sp = a1\n 16764: a0 = u64 [s1 + 0x70]\n 16767: u64 [a1 + 0x18] = a0\n 16770: a0 = u64 [s1 + 0x78]\n 16773: u64 [a1 + 0x10] = a0\n 16776: a0 = u64 [s1 + 0x80]\n 16780: u64 [a1 + 0x8] = a0\n 16783: a0 = u64 [s1 + 0x88]\n 16787: u64 [a1] = a0\n 16789: a0 = s1 + 0x7ff\n 16793: a0 = a0 + 0x241\n 16797: ra = 668, jump @11\n      : @613 [@dyn 334] (gas: 30)\n 16803: a0 = s1 + 0x7ff\n 16807: a0 = a0 + 0x99\n 16811: a0 = u64 [a0 + 0x1a8]\n 16815: a1 = u64 [0x200a0]\n 16820: a2 = s1 + 0x7ff\n 16824: a2 = a2 + 0x99\n 16828: a2 = u64 [a2 + 0x1c0]\n 16832: a3 = s1 + 0x7ff\n 16836: a3 = a3 + 0x99\n 16840: a3 = u64 [a3 + 0x1b0]\n 16844: a4 = s1 + 0x7ff\n 16848: a4 = a4 + 0x99\n 16852: a4 = u64 [a4 + 0x1b8]\n 16856: a1 = a1 + a0\n 16859: a0 = a1 <u a0\n 16862: a5 = a3 + a0\n 16865: a3 = a5 <u a3\n 16868: a3 = a0 if a0 == 0\n 16871: a3 = a3 + a4\n 16874: a0 = a3 <u a4\n 16877: a0 = a0 + a2\n 16880: a2 = s1 + 0x20b8\n 16884: a4 = a2 + 0x700\n 16888: u64 [a4 + 0x88] = a1\n 16892: u64 [a4 + 0x90] = a5\n 16896: u64 [a4 + 0x98] = a3\n 16900: u64 [a4 + 0xa0] = a0\n 16904: a1 = s1 + 0x2840\n 16908: a0 = u64 [s1 + 0xf8]\n 16912: ra = 670, jump @12\n      : @614 [@dyn 335] (gas: 9)\n 16918: a0 = u64 [s1 + 0x98]\n 16922: a0 = a0 + 0x1\n 16925: a1 = u64 [s1 + 0xc0]\n 16929: a0 = a0 & a1\n 16932: u64 [s1 + 0x98] = a0\n 16936: a0 = s1 + 0x7ff\n 16940: a0 = a0 + 0x221\n 16944: a1 = u64 [s1 + 0x100]\n 16948: ra = 672, jump @11\n      : @615 [@dyn 336] (gas: 9)\n 16954: a0 = s1 + 0x7ff\n 16958: a0 = a0 + 0x99\n 16962: a0 = u64 [a0 + 0x188]\n 16966: a0 = a0 & 0xfe\n 16970: u64 [s1 + 0xf8] = a0\n 16974: a0 = s1 + 0x7ff\n 16978: a0 = a0 + 0x201\n 16982: a1 = u64 [s1 + 0x100]\n 16986: ra = 674, jump @11\n      : @616 [@dyn 337] (gas: 25)\n 16992: a0 = s1 + 0x7ff\n 16996: a0 = a0 + 0x99\n 17000: a0 = u64 [a0 + 0x168]\n 17004: a1 = s1 + 0x7ff\n 17008: a1 = a1 + 0x99\n 17012: a1 = u64 [a1 + 0x170]\n 17016: a2 = s1 + 0x7ff\n 17020: a2 = a2 + 0x99\n 17024: a2 = u64 [a2 + 0x178]\n 17028: a3 = s1 + 0x7ff\n 17032: a3 = a3 + 0x99\n 17036: a3 = u64 [a3 + 0x180]\n 17040: a0 = a0 & 0xffffffffffffff00\n 17044: a4 = u64 [s1 + 0xf8]\n 17048: a0 = a0 | a4\n 17051: a0 = a0 + 0x1\n 17054: a4 = s1 + 0x20b8\n 17058: a5 = a4 + 0x700\n 17062: u64 [a5 + 0xc0] = a3\n 17066: u64 [a5 + 0xb8] = a2\n 17070: u64 [a5 + 0xb0] = a1\n 17074: u64 [a5 + 0xa8] = a0\n 17078: a1 = s1 + 0x2860\n 17082: a0 = u64 [s1 + 0x100]\n 17086: ra = 676, jump @12\n      : @617 [@dyn 338] (gas: 1)\n 17092: jump @578\n      : @618 (gas: 4)\n 17095: a0 = s1 + 0x7ff\n 17099: a0 = a0 + 0x1e1\n 17103: a1 = 0x40\n 17106: ra = 678, jump @7\n      : @619 [@dyn 339] (gas: 15)\n 17112: a2 = s1 + 0x7ff\n 17116: a2 = a2 + 0x99\n 17120: t0 = u64 [a2 + 0x160]\n 17124: a0 = a2 + 0x100\n 17128: a5 = u64 [a0 + 0x58]\n 17131: a4 = u64 [a0 + 0x50]\n 17134: a3 = u64 [a0 + 0x48]\n 17137: a0 = a4 | t0\n 17140: a1 = a3 | a5\n 17143: a1 = a1 | a0\n 17146: a1 = a1 >> 0x20\n 17149: a0 = a0 | a5\n 17152: a0 = a0 << 0x20\n 17155: a0 = a0 | a1\n 17158: jump @622 if a0 != 0\n      : @620 (gas: 15)\n 17161: a0 = u64 [s1 + 0x98]\n 17165: a1 = u64 [s1 + 0xc0]\n 17169: a0 = a0 & a1\n 17172: u64 [a2 + 320] = 0\n 17176: u64 [a2 + 312] = 0\n 17180: u64 [a2 + 304] = 0\n 17184: a1 = s1 + 0x7ff\n 17188: a1 = a1 + 0x1c1\n 17192: u64 [a2 + 0x128] = a0\n 17196: a0 = a3\n 17198: u64 [s1 + 0x118] = a3\n 17202: u64 [s1 + 0x108] = a4\n 17206: u64 [s1 + 0xf8] = t0\n 17210: u64 [s1 + 0x100] = a5\n 17214: ra = 680, jump @9\n      : @621 [@dyn 340] (gas: 11)\n 17220: a4 = s1 + 0x100\n 17224: a2 = u64 [a4 + 0x18]\n 17227: a0 = u64 [a4]\n 17229: a1 = u64 [s1 + 0xf8]\n 17233: a0 = a0 | a1\n 17236: a1 = 0xffffffe0\n 17246: a1 = a2 <u a1\n 17249: a3 = u64 [a4 + 0x8]\n 17252: a1 = 0 if a3 != 0\n 17254: a1 = 0 if a0 != 0\n 17256: jump @708 if a1 != 0\n      : @622 (gas: 1)\n 17260: trap\n      : @623 (gas: 6)\n 17261: a1 = 0x20180\n 17266: i32 a1 = a1 + 0\n 17268: a0 = 0x1\n 17271: a2 = 0\n 17273: ecalli 13 // 'seal_return'\n 17275: jump @988\n      : @624 (gas: 6)\n 17278: a1 = 0x20180\n 17283: i32 a1 = a1 + 0\n 17285: a0 = 0x1\n 17288: a2 = 0\n 17290: ecalli 13 // 'seal_return'\n 17292: jump @988\n      : @625 (gas: 6)\n 17295: a1 = 0x20180\n 17300: i32 a1 = a1 + 0\n 17302: a0 = 0x1\n 17305: a2 = 0\n 17307: ecalli 13 // 'seal_return'\n 17309: jump @988\n      : @626 (gas: 6)\n 17312: a1 = 0x20180\n 17317: i32 a1 = a1 + 0\n 17319: a0 = 0x1\n 17322: a2 = 0\n 17324: ecalli 13 // 'seal_return'\n 17326: jump @988\n      : @627 (gas: 3)\n 17329: t0 = 0x2aa\n 17333: a2 = s1 + 0x10b8\n 17337: fallthrough\n      : @628 [@dyn 341] (gas: 8)\n 17338: u64 [a2 + 1048] = 0\n 17342: u64 [a2 + 1040] = 0\n 17346: a0 = 0x2c5211c600000000\n 17356: u64 [a2 + 0x420] = a0\n 17360: a1 = s1 + 0x14c0\n 17364: u64 [a2 + 1032] = 0\n 17368: a0 = 0\n 17370: ra = 684, jump @9\n      : @629 [@dyn 342] (gas: 2)\n 17376: a1 = i32 [0x20170]\n 17381: jump @631 if a1 >u 31\n      : @630 (gas: 3)\n 17385: u32 [0x20170] = 0x20\n 17391: a1 = 0x20180\n 17396: jump @700\n      : @631 (gas: 2)\n 17399: a1 = 0x20180\n 17404: jump @700\n      : @632 (gas: 3)\n 17407: t0 = 0x2ae\n 17411: a2 = s1 + 0x10b8\n 17415: fallthrough\n      : @633 [@dyn 343] (gas: 8)\n 17416: u64 [a2 + 1080] = 0\n 17420: u64 [a2 + 1072] = 0\n 17424: a0 = 0xf4d678b800000000\n 17434: u64 [a2 + 0x440] = a0\n 17438: a1 = s1 + 0x14e0\n 17442: u64 [a2 + 1064] = 0\n 17446: a0 = 0\n 17448: ra = 688, jump @9\n      : @634 [@dyn 344] (gas: 3)\n 17454: a0 = u64 [s1 + 0xb8]\n 17458: a0 = i32 [a0]\n 17460: jump @680 if a0 >u 31\n      : @635 (gas: 3)\n 17465: a1 = u64 [s1 + 0xb8]\n 17469: u32 [a1 + 0] = 0x20\n 17472: jump @680\n      : @636 (gas: 6)\n 17475: a1 = 0x20180\n 17480: i32 a1 = a1 + 0\n 17482: a0 = 0x1\n 17485: a2 = 0\n 17487: ecalli 13 // 'seal_return'\n 17489: jump @988\n      : @637 (gas: 6)\n 17492: a1 = 0x20180\n 17497: i32 a1 = a1 + 0\n 17499: a0 = 0x1\n 17502: a2 = 0\n 17504: ecalli 13 // 'seal_return'\n 17506: jump @988\n      : @638 (gas: 6)\n 17509: a1 = 0x20180\n 17514: i32 a1 = a1 + 0\n 17516: a0 = 0x1\n 17519: a2 = 0\n 17521: ecalli 13 // 'seal_return'\n 17523: jump @988\n      : @639 (gas: 6)\n 17526: a1 = 0x20180\n 17531: i32 a1 = a1 + 0\n 17533: a0 = 0x1\n 17536: a2 = 0\n 17538: ecalli 13 // 'seal_return'\n 17540: jump @988\n      : @640 (gas: 8)\n 17543: u64 [s1 + 912] = 0\n 17547: u64 [s1 + 904] = 0\n 17551: u64 [s1 + 896] = 0\n 17555: a0 = 0x2c5211c600000000\n 17565: a1 = s1 + 0x380\n 17569: u64 [s1 + 0x398] = a0\n 17573: a0 = 0\n 17575: ra = 690, jump @9\n      : @641 [@dyn 345] (gas: 2)\n 17581: a1 = i32 [0x20170]\n 17586: jump @643 if a1 >u 31\n      : @642 (gas: 3)\n 17590: u32 [0x20170] = 0x20\n 17596: a1 = 0x20180\n 17601: jump @700\n      : @643 (gas: 2)\n 17604: a1 = 0x20180\n 17609: jump @700\n      : @644 (gas: 9)\n 17612: u64 [s1 + 944] = 0\n 17616: u64 [s1 + 936] = 0\n 17620: u64 [s1 + 928] = 0\n 17624: a0 = 0xf4d678b800000000\n 17634: a1 = s1 + 0x3a0\n 17638: u64 [s1 + 0x3b8] = a0\n 17642: a0 = 0\n 17644: ra = 0x2cc\n 17648: jump @9\n      : @645 (gas: 6)\n 17651: a1 = 0x20180\n 17656: i32 a1 = a1 + 0\n 17658: a0 = 0x1\n 17661: a2 = 0\n 17663: ecalli 13 // 'seal_return'\n 17665: jump @988\n      : @646 (gas: 6)\n 17668: a1 = 0x20180\n 17673: i32 a1 = a1 + 0\n 17675: a0 = 0x1\n 17678: a2 = 0\n 17680: ecalli 13 // 'seal_return'\n 17682: jump @988\n      : @647 (gas: 3)\n 17685: t0 = 0x2b4\n 17689: a2 = s1 + 0x18b8\n 17693: fallthrough\n      : @648 [@dyn 346] (gas: 8)\n 17694: u64 [a2 + 1880] = 0\n 17698: u64 [a2 + 1872] = 0\n 17702: a0 = 0xcc67c13b00000000\n 17712: u64 [a2 + 0x760] = a0\n 17716: a1 = s1 + 0x2000\n 17720: u64 [a2 + 1864] = 0\n 17724: a0 = 0\n 17726: ra = 694, jump @9\n      : @649 [@dyn 347] (gas: 2)\n 17732: a1 = i32 [0x20170]\n 17737: jump @651 if a1 >u 31\n      : @650 (gas: 3)\n 17741: u32 [0x20170] = 0x20\n 17747: a1 = 0x20180\n 17752: jump @700\n      : @651 (gas: 2)\n 17755: a1 = 0x20180\n 17760: jump @700\n      : @652 (gas: 5)\n 17763: a0 = s1 + 0x18b8\n 17767: u64 [a0 + 1944] = 0\n 17771: u64 [a0 + 1936] = 0\n 17775: u64 [a0 + 1928] = 0\n 17779: t0 = 696, jump @1487\n      : @653 [@dyn 348] (gas: 5)\n 17785: i32 a1 = a1 + 0x40\n 17788: a1 = a1 + s1\n 17791: u64 [a2 + 0x7a0] = a0\n 17795: a0 = 0\n 17797: ra = 698, jump @9\n      : @654 [@dyn 349] (gas: 3)\n 17803: t0 = 0x2bc\n 17807: a1 = s1 + 0x18b8\n 17811: fallthrough\n      : @655 [@dyn 350] (gas: 9)\n 17812: u64 [a1 + 1920] = 0\n 17816: u64 [a1 + 1912] = 0\n 17820: u64 [a1 + 1896] = 0x11\n 17825: a2 = a1\n 17827: a0 = 0x4\n 17830: a1 = s1 + 0x2020\n 17834: u64 [a2 + 1904] = 0\n 17838: ra = 0x2d4\n 17842: jump @9\n      : @656 (gas: 6)\n 17845: a1 = 0x20180\n 17850: i32 a1 = a1 + 0\n 17852: a0 = 0x1\n 17855: a2 = 0\n 17857: ecalli 13 // 'seal_return'\n 17859: jump @988\n      : @657 (gas: 3)\n 17862: t0 = 0x2be\n 17866: a2 = s1 + 0x18b8\n 17870: fallthrough\n      : @658 [@dyn 351] (gas: 8)\n 17871: u64 [a2 + 1560] = 0\n 17875: u64 [a2 + 1552] = 0\n 17879: a0 = 0x2c5211c600000000\n 17889: u64 [a2 + 0x620] = a0\n 17893: a1 = s1 + 0x1ec0\n 17897: u64 [a2 + 1544] = 0\n 17901: a0 = 0\n 17903: ra = 704, jump @9\n      : @659 [@dyn 352] (gas: 2)\n 17909: a1 = i32 [0x20170]\n 17914: jump @661 if a1 >u 31\n      : @660 (gas: 3)\n 17918: u32 [0x20170] = 0x20\n 17924: a1 = 0x20180\n 17929: jump @700\n      : @661 (gas: 2)\n 17932: a1 = 0x20180\n 17937: jump @700\n      : @662 (gas: 5)\n 17940: a0 = s1 + 0x18b8\n 17944: u64 [a0 + 1624] = 0\n 17948: u64 [a0 + 1616] = 0\n 17952: u64 [a0 + 1608] = 0\n 17956: t0 = 706, jump @1487\n      : @663 [@dyn 353] (gas: 5)\n 17962: i32 a1 = a1 + 0xffffffffffffff00\n 17966: a1 = a1 + s1\n 17969: u64 [a2 + 0x660] = a0\n 17973: a0 = 0\n 17975: ra = 708, jump @9\n      : @664 [@dyn 354] (gas: 3)\n 17981: t0 = 0x2c6\n 17985: a1 = s1 + 0x18b8\n 17989: fallthrough\n      : @665 [@dyn 355] (gas: 8)\n 17990: u64 [a1 + 1600] = 0\n 17994: u64 [a1 + 1592] = 0\n 17998: u64 [a1 + 1576] = 0x11\n 18003: a2 = a1\n 18005: a0 = 0x4\n 18008: a1 = s1 + 0x1ee0\n 18012: u64 [a2 + 1584] = 0\n 18016: ra = 712, jump @9\n      : @666 [@dyn 356] (gas: 3)\n 18022: a0 = u64 [s1 + 0xd0]\n 18026: a0 = i32 [a0]\n 18028: jump @668 if a0 >u 63\n      : @667 (gas: 3)\n 18032: a1 = u64 [s1 + 0xd0]\n 18036: u32 [a1 + 0] = 0x40\n 18039: fallthrough\n      : @668 (gas: 5)\n 18040: a0 = 0x1\n 18043: a2 = 0x24\n 18046: a1 = u64 [s1 + 0xe0]\n 18050: ecalli 13 // 'seal_return'\n 18052: fallthrough\n      : @669 (gas: 6)\n 18053: a1 = 0x20180\n 18058: i32 a1 = a1 + 0\n 18060: a0 = 0x1\n 18063: a2 = 0\n 18065: ecalli 13 // 'seal_return'\n 18067: jump @988\n      : @670 (gas: 6)\n 18070: a1 = 0x20180\n 18075: i32 a1 = a1 + 0\n 18077: a0 = 0x1\n 18080: a2 = 0\n 18082: ecalli 13 // 'seal_return'\n 18084: jump @988\n      : @671 (gas: 6)\n 18087: a1 = 0x20180\n 18092: i32 a1 = a1 + 0\n 18094: a0 = 0x1\n 18097: a2 = 0\n 18099: ecalli 13 // 'seal_return'\n 18101: jump @988\n      : @672 (gas: 6)\n 18104: a1 = 0x20180\n 18109: i32 a1 = a1 + 0\n 18111: a0 = 0x1\n 18114: a2 = 0\n 18116: ecalli 13 // 'seal_return'\n 18118: jump @988\n      : @673 (gas: 8)\n 18121: u64 [s1 + 1264] = 0\n 18125: u64 [s1 + 1256] = 0\n 18129: u64 [s1 + 1248] = 0\n 18133: a0 = 0x2c5211c600000000\n 18143: a1 = s1 + 0x4e0\n 18147: u64 [s1 + 0x4f8] = a0\n 18151: a0 = 0\n 18153: ra = 714, jump @9\n      : @674 [@dyn 357] (gas: 2)\n 18159: a1 = i32 [0x20170]\n 18164: jump @676 if a1 >u 31\n      : @675 (gas: 3)\n 18168: u32 [0x20170] = 0x20\n 18174: a1 = 0x20180\n 18179: jump @700\n      : @676 (gas: 2)\n 18182: a1 = 0x20180\n 18187: jump @700\n      : @677 (gas: 8)\n 18190: u64 [s1 + 1296] = 0\n 18194: u64 [s1 + 1288] = 0\n 18198: u64 [s1 + 1280] = 0\n 18202: a0 = 0xf4d678b800000000\n 18212: a1 = s1 + 0x500\n 18216: u64 [s1 + 0x518] = a0\n 18220: a0 = 0\n 18222: ra = 716, jump @9\n      : @678 [@dyn 358] (gas: 3)\n 18228: a0 = u64 [s1 + 0xc0]\n 18232: a0 = i32 [a0]\n 18234: jump @680 if a0 >u 31\n      : @679 (gas: 3)\n 18238: a1 = u64 [s1 + 0xc0]\n 18242: u32 [a1 + 0] = 0x20\n 18245: fallthrough\n      : @680 (gas: 5)\n 18246: a0 = 0x1\n 18249: a2 = 0x4\n 18252: a1 = u64 [s1 + 0xc8]\n 18256: ecalli 13 // 'seal_return'\n 18258: fallthrough\n      : @681 (gas: 6)\n 18259: a1 = 0x20180\n 18264: i32 a1 = a1 + 0\n 18266: a0 = 0x1\n 18269: a2 = 0\n 18271: ecalli 13 // 'seal_return'\n 18273: jump @988\n      : @682 (gas: 6)\n 18276: a1 = 0x20180\n 18281: i32 a1 = a1 + 0\n 18283: a0 = 0x1\n 18286: a2 = 0\n 18288: ecalli 13 // 'seal_return'\n 18290: jump @988\n      : @683 (gas: 6)\n 18293: a1 = 0x20180\n 18298: i32 a1 = a1 + 0\n 18300: a0 = 0x1\n 18303: a2 = 0\n 18305: ecalli 13 // 'seal_return'\n 18307: jump @988\n      : @684 (gas: 6)\n 18310: a1 = 0x20180\n 18315: i32 a1 = a1 + 0\n 18317: a0 = 0x1\n 18320: a2 = 0\n 18322: ecalli 13 // 'seal_return'\n 18324: jump @988\n      : @685 (gas: 6)\n 18327: a1 = 0x20180\n 18332: i32 a1 = a1 + 0\n 18334: a0 = 0x1\n 18337: a2 = 0\n 18339: ecalli 13 // 'seal_return'\n 18341: jump @988\n      : @686 (gas: 6)\n 18344: a1 = 0x20180\n 18349: i32 a1 = a1 + 0\n 18351: a0 = 0x1\n 18354: a2 = 0\n 18356: ecalli 13 // 'seal_return'\n 18358: jump @988\n      : @687 (gas: 6)\n 18361: a1 = 0x20180\n 18366: i32 a1 = a1 + 0\n 18368: a0 = 0x1\n 18371: a2 = 0\n 18373: ecalli 13 // 'seal_return'\n 18375: jump @988\n      : @688 (gas: 6)\n 18378: a1 = 0x20180\n 18383: i32 a1 = a1 + 0\n 18385: a0 = 0x1\n 18388: a2 = 0\n 18390: ecalli 13 // 'seal_return'\n 18392: jump @988\n      : @689 (gas: 5)\n 18395: a0 = s1 + 0x18b8\n 18399: u64 [a0 + 2008] = 0\n 18403: u64 [a0 + 2000] = 0\n 18407: u64 [a0 + 1992] = 0\n 18411: t0 = 718, jump @1487\n      : @690 [@dyn 359] (gas: 5)\n 18417: i32 a1 = a1 + 0x80\n 18421: a1 = a1 + s1\n 18424: u64 [a2 + 0x7e0] = a0\n 18428: a0 = 0\n 18430: ra = 720, jump @9\n      : @691 [@dyn 360] (gas: 3)\n 18436: t0 = 0x2d2\n 18440: a1 = s1 + 0x18b8\n 18444: fallthrough\n      : @692 [@dyn 361] (gas: 8)\n 18445: u64 [a1 + 1984] = 0\n 18449: u64 [a1 + 1976] = 0\n 18453: u64 [a1 + 1960] = 0x41\n 18458: a2 = a1\n 18460: a0 = 0x4\n 18463: a1 = s1 + 0x2060\n 18467: u64 [a2 + 1968] = 0\n 18471: ra = 724, jump @9\n      : @693 [@dyn 362] (gas: 3)\n 18477: a0 = u64 [s1 + 0x48]\n 18480: a0 = i32 [a0]\n 18482: jump @695 if a0 >u 63\n      : @694 (gas: 3)\n 18486: a1 = u64 [s1 + 0x48]\n 18489: u32 [a1 + 0] = 0x40\n 18492: fallthrough\n      : @695 (gas: 5)\n 18493: a0 = 0x1\n 18496: a2 = 0x24\n 18499: a1 = u64 [s1 + 0x50]\n 18502: ecalli 13 // 'seal_return'\n 18504: fallthrough\n      : @696 (gas: 11)\n 18505: a2 = s1 + 0x7ff\n 18509: a2 = a2 + 0x99\n 18513: u64 [a2 + 1080] = 0\n 18517: u64 [a2 + 1072] = 0\n 18521: a0 = 0xd5b25b6300000000\n 18531: u64 [a2 + 0x440] = a0\n 18535: a1 = s1 + 0x7ff\n 18539: a1 = a1 + 0x4c1\n 18543: u64 [a2 + 1064] = 0\n 18547: a0 = 0\n 18549: ra = 726, jump @9\n      : @697 [@dyn 363] (gas: 2)\n 18555: a1 = i32 [0x20170]\n 18560: jump @699 if a1 >u 31\n      : @698 (gas: 3)\n 18564: u32 [0x20170] = 0x20\n 18570: a1 = 0x20180\n 18575: jump @700\n      : @699 (gas: 2)\n 18577: a1 = 0x20180\n 18582: fallthrough\n      : @700 (gas: 6)\n 18583: i32 a1 = a1 + 0\n 18585: a0 = 0x1\n 18588: a2 = 0x4\n 18591: ra = 0x2d8\n 18595: ecalli 13 // 'seal_return'\n 18597: fallthrough\n      : @701 [@dyn 364] (gas: 1)\n 18598: jump @712 if a0 != 2618616686\n      : @702 (gas: 11)\n 18606: a0 = s1 + 0x28b8\n 18610: u64 [a0 + 576] = 0\n 18614: u64 [a0 + 568] = 0\n 18618: u64 [a0 + 560] = 0\n 18622: u64 [a0 + 552] = 0\n 18626: a0 = s1 + 0x3000\n 18630: i32 a0 = a0 + 0xfffffffffffffae0\n 18634: ra = 0x2da\n 18638: ecalli 16 // 'value_transferred'\n 18640: t0 = 0x2dc\n 18644: jump @1482\n      : @703 [@dyn 365] (gas: 1)\n 18647: t0 = 732, jump @1482\n      : @704 [@dyn 366] (gas: 8)\n 18653: a0 = u64 [a4 + 0x38]\n 18656: a1 = u64 [a4 + 0x40]\n 18659: a2 = u64 [a4 + 0x30]\n 18662: a3 = u64 [a4 + 0x28]\n 18665: a1 = a1 | a2\n 18668: a0 = a0 | a3\n 18671: a0 = a0 | a1\n 18674: jump @723 if a0 == 0\n      : @705 (gas: 6)\n 18678: a1 = 0x20180\n 18683: i32 a1 = a1 + 0\n 18685: a0 = 0x1\n 18688: a2 = 0\n 18690: ecalli 13 // 'seal_return'\n 18692: jump @988\n      : @706 (gas: 6)\n 18695: a1 = 0x20180\n 18700: i32 a1 = a1 + 0\n 18702: a0 = 0x1\n 18705: a2 = 0\n 18707: ecalli 13 // 'seal_return'\n 18709: jump @988\n      : @707 (gas: 6)\n 18712: a1 = 0x20180\n 18717: i32 a1 = a1 + 0\n 18719: a0 = 0x1\n 18722: a2 = 0\n 18724: ecalli 13 // 'seal_return'\n 18726: jump @988\n      : @708 (gas: 13)\n 18729: a0 = u64 [s1 + 0x90]\n 18733: a1 = u64 [s1 + 0xc0]\n 18737: a1 = a1 & a0\n 18740: i32 a0 = a2 + 0x20\n 18743: a3 = s1 + 0x7ff\n 18747: a3 = a3 + 0x99\n 18751: u64 [a3 + 288] = 0\n 18755: u64 [a3 + 280] = 0\n 18759: u64 [a3 + 0x108] = a1\n 18763: a1 = s1 + 0x7ff\n 18767: a1 = a1 + 0x1a1\n 18771: u64 [a3 + 272] = 0\n 18775: ra = 734, jump @9\n      : @709 [@dyn 367] (gas: 6)\n 18781: a0 = u64 [s1 + 0xc8]\n 18785: ra = 0x2e0\n 18789: ecalli 4 // 'caller'\n 18791: a2 = u64 [s1 + 0xd0]\n 18795: t0 = 0x2e2\n 18799: jump @1419\n      : @710 [@dyn 368] (gas: 2)\n 18802: a2 = u64 [s1 + 0xd0]\n 18806: t0 = 738, jump @1419\n      : @711 [@dyn 369] (gas: 36)\n 18812: t0 = a1 | a0\n 18815: a3 = a3 >> 0x20\n 18818: a2 = reverse a2\n 18820: a1 = a2 << 0x20\n 18823: t1 = a1 | a3\n 18826: a2 = a2 >> 0x20\n 18829: a3 = u64 [0x200b8]\n 18834: a4 = u64 [0x200c0]\n 18839: a5 = u64 [0x200c8]\n 18844: a0 = u64 [s1 + 0xa0]\n 18848: a1 = s1 + 0x7ff\n 18852: a1 = a1 + 0x99\n 18856: u64 [a1 + 0xa8] = a0\n 18860: u64 [a1 + 0x100] = a3\n 18864: u64 [a1 + 0xf8] = a4\n 18868: u64 [a1 + 0xf0] = a5\n 18872: a3 = u64 [0x200d0]\n 18877: u64 [a1 + 192] = 0\n 18881: u64 [a1 + 184] = 0\n 18885: u64 [a1 + 176] = 0\n 18889: u64 [a1 + 0xe8] = a3\n 18893: u64 [a1 + 0xd8] = a2\n 18897: u64 [a1 + 0xd0] = t1\n 18901: u64 [a1 + 0xc8] = t0\n 18905: a0 = a1\n 18907: a1 = 0x40\n 18910: a2 = s1 + 0x7ff\n 18914: a2 = a2 + 0x181\n 18918: a3 = s1 + 0x7ff\n 18922: a3 = a3 + 0x161\n 18926: a4 = s1 + 0x7ff\n 18930: a4 = a4 + 0x141\n 18934: u64 [a0 + 224] = 0\n 18938: a0 = u64 [s1 + 0x118]\n 18942: ra = 0x422\n 18946: jump @15\n      : @712 (gas: 1)\n 18949: jump @725 if a0 != 2685688103\n      : @713 (gas: 11)\n 18957: a0 = s1 + 0x28b8\n 18961: u64 [a0 + 640] = 0\n 18965: u64 [a0 + 632] = 0\n 18969: u64 [a0 + 624] = 0\n 18973: u64 [a0 + 616] = 0\n 18977: a0 = s1 + 0x3000\n 18981: i32 a0 = a0 + 0xfffffffffffffb20\n 18985: ra = 0x2e4\n 18989: ecalli 16 // 'value_transferred'\n 18991: t0 = 0x2e6\n 18995: jump @1482\n      : @714 [@dyn 370] (gas: 1)\n 18998: t0 = 742, jump @1482\n      : @715 [@dyn 371] (gas: 8)\n 19004: a0 = u64 [a4 + 0x78]\n 19007: a1 = u64 [a4 + 0x80]\n 19011: a2 = u64 [a4 + 0x70]\n 19014: a3 = u64 [a4 + 0x68]\n 19017: a1 = a1 | a2\n 19020: a0 = a0 | a3\n 19023: a0 = a0 | a1\n 19026: jump @730 if a0 == 0\n      : @716 (gas: 6)\n 19030: a1 = 0x20180\n 19035: i32 a1 = a1 + 0\n 19037: a0 = 0x1\n 19040: a2 = 0\n 19042: ecalli 13 // 'seal_return'\n 19044: jump @988\n      : @717 (gas: 2)\n 19047: u64 [s1 + 216] = 0\n 19051: fallthrough\n      : @718 (gas: 5)\n 19052: a0 = u64 [s1 + 0xe8]\n 19056: a0 = a0 << 0x1\n 19059: a4 = u64 [s1 + 0xd8]\n 19063: a4 = a4 | a0\n 19066: fallthrough\n      : @719 (gas: 7)\n 19067: u64 [s1 + 856] = 0\n 19071: u64 [s1 + 848] = 0\n 19075: u64 [s1 + 840] = 0\n 19079: a1 = s1 + 0x340\n 19083: u64 [s1 + 0x340] = a4\n 19087: a0 = u64 [s1 + 0x98]\n 19091: ra = 744, jump @9\n      : @720 [@dyn 372] (gas: 3)\n 19097: a1 = 0x20\n 19100: a0 = u64 [s1 + 0x98]\n 19104: ra = 746, jump @21\n      : @721 [@dyn 373] (gas: 5)\n 19110: i32 a1 = a0 + 0\n 19112: a2 = 0x20\n 19115: a0 = 0\n 19117: ecalli 13 // 'seal_return'\n 19119: jump @723\n      : @722 (gas: 4)\n 19121: a2 = 0x20\n 19124: a0 = 0\n 19126: ecalli 13 // 'seal_return'\n 19128: fallthrough\n      : @723 (gas: 3)\n 19129: a0 = u64 [s1 + 0x118]\n 19133: a0 = i32 [a0]\n 19135: jump @732 if a0 >u 99\n      : @724 (gas: 6)\n 19140: a1 = 0x20180\n 19145: i32 a1 = a1 + 0\n 19147: a0 = 0x1\n 19150: a2 = 0\n 19152: ecalli 13 // 'seal_return'\n 19154: jump @988\n      : @725 (gas: 1)\n 19157: jump @764 if a0 != 3058722618\n      : @726 (gas: 11)\n 19165: a0 = s1 + 0x28b8\n 19169: u64 [a0 + 768] = 0\n 19173: u64 [a0 + 760] = 0\n 19177: u64 [a0 + 752] = 0\n 19181: u64 [a0 + 744] = 0\n 19185: a0 = s1 + 0x3000\n 19189: i32 a0 = a0 + 0xfffffffffffffba0\n 19193: ra = 0x2ec\n 19197: ecalli 16 // 'value_transferred'\n 19199: t0 = 0x2ee\n 19203: jump @1482\n      : @727 [@dyn 374] (gas: 1)\n 19206: t0 = 750, jump @1482\n      : @728 [@dyn 375] (gas: 8)\n 19212: a0 = u64 [a4 + 0xf8]\n 19216: a1 = u64 [a3 + 0x300]\n 19220: a2 = u64 [a4 + 0xf0]\n 19224: a3 = u64 [a4 + 0xe8]\n 19228: a1 = a1 | a2\n 19231: a0 = a0 | a3\n 19234: a0 = a0 | a1\n 19237: jump @768 if a0 == 0\n      : @729 (gas: 6)\n 19241: a1 = 0x20180\n 19246: i32 a1 = a1 + 0\n 19248: a0 = 0x1\n 19251: a2 = 0\n 19253: ecalli 13 // 'seal_return'\n 19255: jump @988\n      : @730 (gas: 3)\n 19258: a0 = u64 [s1 + 0x118]\n 19262: a0 = i32 [a0]\n 19264: jump @771 if a0 >u 67\n      : @731 (gas: 6)\n 19269: a1 = 0x20180\n 19274: i32 a1 = a1 + 0\n 19276: a0 = 0x1\n 19279: a2 = 0\n 19281: ecalli 13 // 'seal_return'\n 19283: jump @988\n      : @732 (gas: 4)\n 19286: a0 = s1 + 0x1880\n 19290: ra = 0x2f0\n 19294: t0 = 0x5ac\n 19298: jump @1476\n      : @733 [@dyn 376] (gas: 1)\n 19301: t0 = 754, jump @1479\n      : @734 [@dyn 377] (gas: 12)\n 19307: a0 = u64 [a2 + 0xe0]\n 19311: u64 [s1 + 0x90] = a0\n 19315: a0 = u64 [a2 + 0xd8]\n 19319: u64 [s1 + 0x88] = a0\n 19323: a0 = u64 [a2 + 0xd0]\n 19327: u64 [s1 + 0x80] = a0\n 19331: a0 = u64 [a2 + 0xc8]\n 19335: u64 [s1 + 0x70] = a0\n 19338: a0 = s1 + 0x1860\n 19342: ra = 0x2f4\n 19346: t0 = 0x5b0\n 19350: jump @1488\n      : @735 [@dyn 378] (gas: 1)\n 19353: t0 = 758, jump @1479\n      : @736 [@dyn 379] (gas: 12)\n 19359: a0 = u64 [a2 + 0xc0]\n 19363: u64 [s1 + 0x78] = a0\n 19366: a0 = u64 [a2 + 0xb8]\n 19370: u64 [s1 + 0x68] = a0\n 19373: a0 = u64 [a2 + 0xb0]\n 19377: u64 [s1 + 0x60] = a0\n 19380: a0 = u64 [a2 + 0xa8]\n 19384: u64 [s1 + 0x98] = a0\n 19388: a0 = s1 + 0x1840\n 19392: ra = 0x2f8\n 19396: t0 = 0x5b6\n 19400: jump @1488\n      : @737 [@dyn 380] (gas: 1)\n 19403: t0 = 762, jump @1479\n      : @738 [@dyn 381] (gas: 12)\n 19409: a0 = u64 [a2 + 0xa0]\n 19413: u64 [s1 + 0x58] = a0\n 19416: a0 = u64 [a2 + 0x98]\n 19420: u64 [s1 + 0x50] = a0\n 19423: a0 = u64 [a2 + 0x90]\n 19427: u64 [s1 + 0x48] = a0\n 19430: a0 = u64 [a2 + 0x88]\n 19434: u64 [s1 + 0x40] = a0\n 19437: a0 = s1 + 0x3000\n 19441: i32 a0 = a0 + 0xfffffffffffffb00\n 19445: ecalli 9 // 'now'\n 19447: fallthrough\n      : @739 (gas: 49)\n 19448: a0 = s1 + 0x28b8\n 19452: t0 = u64 [a0 + 0x260]\n 19456: a4 = u64 [a0 + 0x258]\n 19460: u64 [s1 + 0xd8] = a4\n 19464: t2 = u64 [a0 + 0x250]\n 19468: a3 = u64 [a0 + 0x248]\n 19472: u64 [s1 + 0xc0] = a3\n 19476: a0 = clz t0\n 19478: a1 = clz a4\n 19480: a2 = a1 + 0x40\n 19483: a2 = a0 if t0 != 0\n 19486: a0 = clz t2\n 19488: a1 = clz a3\n 19490: a1 = a1 + 0x40\n 19493: a1 = a0 if t2 != 0\n 19496: a0 = a1 + 0x80\n 19500: a3 = a4 | t0\n 19503: a2 = a0 if a3 == 0\n 19506: a5 = a0 <u a1\n 19509: a5 = 0 if a3 != 0\n 19511: a4 = a5 >u 0\n 19513: a0 = a2 <u 0xf0\n 19517: a3 = a0 ^ 0x1\n 19520: a4 = a3 if a5 == 0\n 19523: a0 = a4 <u 0x1\n 19526: ra = a0 + 0xffffffffffffffff\n 19529: t1 = -a4\n 19531: a5 = -a5\n 19533: a3 = a5 - a3\n 19536: a2 = 0xef - a2\n 19540: a5 = t1 >u 0\n 19542: a0 = ra >u 0\n 19544: a0 = a5 if ra == 0\n 19547: a5 = a2 <u 0x100\n 19551: a5 = a5 ^ 0x1\n 19554: a1 = a3 >u 0\n 19556: a5 = a1 if a3 != 0\n 19559: a5 = a0 if a4 != 0\n 19562: u64 [s1 + 0xb8] = t2\n 19566: u64 [s1 + 0xd0] = t0\n 19570: a0 = t2 | t0\n 19573: a4 = u64 [s1 + 0xc0]\n 19577: a1 = u64 [s1 + 0xd8]\n 19581: a1 = a1 | a4\n 19584: a0 = a0 | a1\n 19587: a0 = a0 <u 0x1\n 19590: a0 = a0 | a5\n 19593: a4 = 0 if a0 != 0\n 19595: jump @823 if a0 != 0\n      : @740 (gas: 1)\n 19599: t0 = 764, jump @1466\n      : @741 [@dyn 382] (gas: 1)\n 19605: jump @823 if a0 == 0\n      : @742 (gas: 1)\n 19609: t0 = 766, jump @1417\n      : @743 [@dyn 383] (gas: 1)\n 19615: ra = 768, jump @1493\n      : @744 [@dyn 384] (gas: 6)\n 19621: u64 [s1 + 0xc8] = a0\n 19625: u64 [s1 + 0xe8] = a1\n 19629: a0 = u64 [s1 + 0xd8]\n 19633: a1 = u64 [s1 + 0xd0]\n 19637: a2 = u64 [s1 + 0xe0]\n 19641: ra = 770, jump @1498\n      : @745 [@dyn 385] (gas: 1)\n 19647: t0 = 772, jump @1489\n      : @746 [@dyn 386] (gas: 1)\n 19653: ra = 774, jump @1498\n      : @747 [@dyn 387] (gas: 8)\n 19659: u64 [s1 + 0xa0] = a0\n 19663: u64 [s1 + 0x38] = a1\n 19666: a2 = u64 [s1 + 0xe0]\n 19670: a0 = a2 <u 0x80\n 19674: u64 [s1 + 0x30] = a0\n 19677: a0 = u64 [s1 + 0xc0]\n 19681: a1 = u64 [s1 + 0xb8]\n 19685: ra = 776, jump @1498\n      : @748 [@dyn 388] (gas: 1)\n 19691: t0 = 778, jump @1454\n      : @749 [@dyn 389] (gas: 4)\n 19697: a3 = u64 [s1 + 0x30]\n 19700: a0 = 0 if a3 == 0\n 19702: u64 [s1 + 0xf8] = a0\n 19706: jump @821 if a1 == 0\n      : @750 (gas: 7)\n 19710: a2 = a3\n 19712: a0 = u64 [s1 + 0xe8]\n 19716: a1 = u64 [s1 + 0xa8]\n 19720: a0 = a0 | a1\n 19723: a5 = a3\n 19725: a1 = u64 [s1 + 0x38]\n 19728: t0 = 780, jump @1415\n      : @751 [@dyn 390] (gas: 1)\n 19734: ra = 782, jump @1493\n      : @752 [@dyn 391] (gas: 6)\n 19740: u64 [s1 + 0xc8] = a0\n 19744: u64 [s1 + 0xa0] = a1\n 19748: a0 = u64 [s1 + 0xc0]\n 19752: a1 = u64 [s1 + 0xb8]\n 19756: a2 = u64 [s1 + 0x118]\n 19760: ra = 784, jump @1493\n      : @753 [@dyn 392] (gas: 2)\n 19766: u64 [s1 + 0x38] = a0\n 19769: t0 = 786, jump @1464\n      : @754 [@dyn 393] (gas: 1)\n 19775: ra = 788, jump @1498\n      : @755 [@dyn 394] (gas: 1)\n 19781: t0 = 790, jump @1434\n      : @756 [@dyn 395] (gas: 2)\n 19787: a1 = u64 [s1 + 0x38]\n 19790: t0 = 792, jump @1455\n      : @757 [@dyn 396] (gas: 1)\n 19796: ra = 794, jump @1493\n      : @758 [@dyn 397] (gas: 1)\n 19802: t0 = 796, jump @1421\n      : @759 [@dyn 398] (gas: 1)\n 19808: t0 = 798, jump @1424\n      : @760 [@dyn 399] (gas: 5)\n 19814: t0 = ra <u a2\n 19817: a4 = u64 [s1 + 0xa8]\n 19821: a5 = a4 <u a3\n 19824: a5 = t0 if t1 != 0\n 19827: t0 = 800, jump @1431\n      : @761 [@dyn 400] (gas: 20)\n 19833: t0 = a0 | a1\n 19836: a1 = a4 << 0x1\n 19839: a4 = u64 [s1 + 0xf0]\n 19843: t1 = a4 >> 0x3f\n 19846: t1 = a1 | t1\n 19849: a1 = a4 << 0x1\n 19852: a4 = u64 [s1 + 0xf8]\n 19856: t2 = a4 >> 0x3f\n 19859: a1 = a1 | t2\n 19862: a4 = a4 << 0x1\n 19865: a0 = u64 [s1 + 0xd8]\n 19869: a4 = a4 | a0\n 19872: u64 [s1 + 0xf8] = a4\n 19876: a0 = u64 [s1 + 0xd0]\n 19880: a1 = a1 | a0\n 19883: u64 [s1 + 0xf0] = a1\n 19887: a1 = a0 | t1\n 19890: u64 [s1 + 0xe0] = a1\n 19894: a0 = a0 | t0\n 19897: t0 = 802, jump @1414\n      : @762 [@dyn 401] (gas: 18)\n 19903: t0 = a4 <u a2\n 19906: a2 = a4 - a2\n 19909: a4 = a3 <u 0x1\n 19912: a5 = a5 - a4\n 19915: a4 = u64 [a0 + 0x8]\n 19918: a4 = a4 - t0\n 19921: a3 = a3 + 0xffffffffffffffff\n 19924: u64 [a0 + 0x10] = a5\n 19927: u64 [a0 + 0x8] = a4\n 19930: t0 = a5 | a4\n 19933: u64 [a0 + 0x18] = a3\n 19936: a4 = a3 | a2\n 19939: a3 = a4 | t0\n 19942: a4 = ra & 0x1\n 19945: u64 [s1 + 0xd8] = a4\n 19949: u64 [a0] = a2\n 19951: u64 [s1 + 208] = 0\n 19955: jump @759 if a3 != 0\n      : @763 (gas: 1)\n 19959: jump @822\n      : @764 (gas: 1)\n 19962: jump @826 if a0 != 235423050\n      : @765 (gas: 10)\n 19970: a0 = s1 + 0x20b8\n 19974: u64 [a0 + 1184] = 0\n 19978: u64 [a0 + 1176] = 0\n 19982: u64 [a0 + 1168] = 0\n 19986: u64 [a0 + 1160] = 0\n 19990: a0 = s1 + 0x2000\n 19994: i32 a0 = a0 + 0x540\n 19998: ra = 0x324\n 20002: ecalli 16 // 'value_transferred'\n 20004: fallthrough\n      : @766 [@dyn 402] (gas: 10)\n 20005: a3 = s1 + 0x20b8\n 20009: a4 = a3 + 0x400\n 20013: a0 = u64 [a4 + 0x98]\n 20017: a1 = u64 [a4 + 0xa0]\n 20021: a2 = u64 [a4 + 0x90]\n 20025: a3 = u64 [a4 + 0x88]\n 20029: a1 = a1 | a2\n 20032: a0 = a0 | a3\n 20035: a0 = a0 | a1\n 20038: jump @831 if a0 == 0\n      : @767 (gas: 6)\n 20042: a1 = 0x20180\n 20047: i32 a1 = a1 + 0\n 20049: a0 = 0x1\n 20052: a2 = 0\n 20054: ecalli 13 // 'seal_return'\n 20056: jump @988\n      : @768 (gas: 1)\n 20059: t0 = 806, jump @1474\n      : @769 [@dyn 403] (gas: 1)\n 20065: jump @834 if a1 <u a0\n      : @770 (gas: 6)\n 20069: a1 = 0x20180\n 20074: i32 a1 = a1 + 0\n 20076: a0 = 0x1\n 20079: a2 = 0\n 20081: ecalli 13 // 'seal_return'\n 20083: jump @988\n      : @771 (gas: 4)\n 20086: a0 = s1 + 0x1c20\n 20090: ra = 0x328\n 20094: t0 = 0x5c0\n 20098: jump @1476\n      : @772 [@dyn 404] (gas: 7)\n 20101: a0 = s1 + 0x18b8\n 20105: a0 = u64 [a0 + 0x368]\n 20109: u64 [s1 + 0x110] = a0\n 20113: a0 = s1 + 0x1c00\n 20117: ra = 0x32a\n 20121: t0 = 0x5b0\n 20125: jump @1488\n      : @773 [@dyn 405] (gas: 12)\n 20128: a0 = s1 + 0x18b8\n 20132: a0 = u64 [a0 + 0x348]\n 20136: u64 [s1 + 0x70] = a0\n 20139: a0 = 0x30180\n 20144: u64 [s1 + 0x88] = a0\n 20148: i32 a0 = a0 + 0\n 20150: u64 [s1 + 0x80] = a0\n 20154: ra = 0x32c\n 20158: ecalli 4 // 'caller'\n 20160: a2 = u64 [s1 + 0x88]\n 20164: t0 = 0x32e\n 20168: jump @1413\n      : @774 [@dyn 406] (gas: 2)\n 20171: a2 = u64 [s1 + 0x88]\n 20175: t0 = 814, jump @1413\n      : @775 [@dyn 407] (gas: 8)\n 20181: u64 [a2 + 832] = 0\n 20185: a4 = a2 + 0x300\n 20189: u64 [a4 + 0x38] = a1\n 20192: u64 [a4 + 0x30] = a0\n 20195: a1 = s1 + 0x1be0\n 20199: u64 [a4 + 0x28] = a3\n 20202: a0 = 0\n 20204: ra = 816, jump @9\n      : @776 [@dyn 408] (gas: 3)\n 20210: t0 = 0x332\n 20214: a1 = s1 + 0x18b8\n 20218: fallthrough\n      : @777 [@dyn 409] (gas: 8)\n 20219: u64 [a1 + 800] = 0\n 20223: u64 [a1 + 792] = 0\n 20227: u64 [a1 + 776] = 0x1\n 20232: a2 = a1\n 20234: a0 = 0x20\n 20237: a1 = s1 + 0x1bc0\n 20241: u64 [a2 + 784] = 0\n 20245: ra = 820, jump @9\n      : @778 [@dyn 410] (gas: 5)\n 20251: a0 = 0x20170\n 20256: u64 [s1 + 0x98] = a0\n 20260: a0 = i32 [0x20170]\n 20265: a1 = 0x3f\n 20268: jump @780 if a1 <u a0\n      : @779 (gas: 4)\n 20271: a1 = u64 [s1 + 0x98]\n 20275: u32 [a1 + 0] = 0x40\n 20278: t0 = 0x336\n 20282: jump @1465\n      : @780 (gas: 1)\n 20285: t0 = 822, jump @1465\n      : @781 [@dyn 411] (gas: 10)\n 20291: a0 = 0x20180\n 20296: i32 a0 = a0 + 0\n 20298: i32 a2 = a2 + 0\n 20300: a1 = 0x40\n 20303: u64 [s1 + 0x90] = a0\n 20307: ra = 0x338\n 20311: ecalli 8 // 'hash_keccak_256'\n 20313: a3 = u64 [s1 + 0x118]\n 20317: t0 = 0x33a\n 20321: jump @1440\n      : @782 [@dyn 412] (gas: 2)\n 20324: a3 = u64 [s1 + 0x118]\n 20328: t0 = 826, jump @1440\n      : @783 [@dyn 413] (gas: 14)\n 20334: u64 [s1 + 0x118] = a0\n 20338: sp = a0\n 20340: a0 = u64 [s1 + 0x110]\n 20344: a0 = a0 << 0x20\n 20347: a2 = a0 >> 0x20\n 20350: a0 = s1 + 0x18b8\n 20354: u64 [a0 + 768] = 0\n 20358: u64 [a0 + 760] = 0\n 20362: u64 [a0 + 752] = 0\n 20366: a1 = s1 + 0x1ba0\n 20370: u64 [s1 + 0x78] = a2\n 20373: u64 [a0 + 0x2e8] = a2\n 20377: a0 = 0\n 20379: ra = 828, jump @9\n      : @784 [@dyn 414] (gas: 14)\n 20385: a0 = u64 [s1 + 0xf0]\n 20389: a1 = s1 + 0x18b8\n 20393: a2 = a1 + 0x200\n 20397: u64 [a2 + 0xe0] = a0\n 20401: a0 = u64 [s1 + 0xf8]\n 20405: u64 [a2 + 0xd8] = a0\n 20409: a0 = u64 [s1 + 0x100]\n 20413: u64 [a2 + 0xd0] = a0\n 20417: a3 = a1\n 20419: a0 = 0x20\n 20422: a1 = s1 + 0x1b80\n 20426: a2 = u64 [s1 + 0x108]\n 20430: u64 [a3 + 0x2c8] = a2\n 20434: ra = 830, jump @9\n      : @785 [@dyn 415] (gas: 3)\n 20440: a0 = u64 [s1 + 0x98]\n 20444: a0 = i32 [a0]\n 20446: jump @787 if a0 >u 63\n      : @786 (gas: 4)\n 20450: a0 = u64 [s1 + 0x98]\n 20454: u32 [a0 + 0] = 0x40\n 20457: t0 = 0x340\n 20461: jump @1423\n      : @787 (gas: 1)\n 20464: t0 = 832, jump @1423\n      : @788 [@dyn 416] (gas: 5)\n 20470: ra = 0x342\n 20474: ecalli 8 // 'hash_keccak_256'\n 20476: a3 = u64 [s1 + 0x110]\n 20480: t0 = 0x344\n 20484: jump @1442\n      : @789 [@dyn 417] (gas: 2)\n 20487: a3 = u64 [s1 + 0x110]\n 20491: t0 = 836, jump @1442\n      : @790 [@dyn 418] (gas: 11)\n 20497: a4 = u64 [s1 + 0x118]\n 20501: u64 [a4 + 0x18] = a3\n 20504: u64 [a4 + 0x10] = a2\n 20507: u64 [a4 + 0x8] = a1\n 20510: u64 [a4] = a0\n 20512: a0 = u64 [s1 + 0x80]\n 20516: ra = 0x346\n 20520: ecalli 4 // 'caller'\n 20522: a2 = u64 [s1 + 0x88]\n 20526: t0 = 0x348\n 20530: jump @1473\n      : @791 [@dyn 419] (gas: 2)\n 20533: a2 = u64 [s1 + 0x88]\n 20537: t0 = 840, jump @1473\n      : @792 [@dyn 420] (gas: 10)\n 20543: u64 [s1 + 0x110] = a1\n 20547: a0 = a0 >> 0x20\n 20550: a1 = reverse a2\n 20552: u64 [s1 + 0x108] = a1\n 20556: a1 = a1 << 0x20\n 20559: a0 = a0 | a1\n 20562: u64 [s1 + 0x100] = a0\n 20566: a0 = s1 + 0x1b60\n 20570: a1 = u64 [s1 + 0x118]\n 20574: ra = 842, jump @11\n      : @793 [@dyn 421] (gas: 2)\n 20580: a2 = s1 + 0x18b8\n 20584: fallthrough\n      : @794 (gas: 19)\n 20585: a0 = u64 [a2 + 0x2b0]\n 20589: a1 = u32 [a2 + 0x2ac]\n 20593: a2 = u64 [a2 + 0x2b8]\n 20597: a3 = a0 << 0x20\n 20600: a1 = a1 | a3\n 20603: a3 = a2 << 0x20\n 20606: a0 = a0 >> 0x20\n 20609: a0 = a0 | a3\n 20612: a4 = s1 + 0x100\n 20616: a3 = u64 [a4]\n 20618: a0 = a0 ^ a3\n 20621: a3 = u64 [a4 + 0x10]\n 20624: a1 = a1 ^ a3\n 20627: a3 = u64 [a4 + 0x8]\n 20630: a2 = a2 ^ a3\n 20633: a2 = a2 >> 0x20\n 20636: a1 = a1 | a2\n 20639: a0 = a0 | a1\n 20642: jump @879 if a0 != 0\n      : @795 (gas: 4)\n 20646: a0 = s1 + 0x3000\n 20650: i32 a0 = a0 + 0xfffffffffffffb40\n 20654: ecalli 9 // 'now'\n 20656: fallthrough\n      : @796 (gas: 51)\n 20657: a0 = s1 + 0x28b8\n 20661: t0 = u64 [a0 + 0x2a0]\n 20665: a4 = u64 [a0 + 0x298]\n 20669: u64 [s1 + 0xd8] = a4\n 20673: t2 = u64 [a0 + 0x290]\n 20677: a3 = u64 [a0 + 0x288]\n 20681: u64 [s1 + 0xc0] = a3\n 20685: a0 = clz t0\n 20687: a1 = clz a4\n 20689: a2 = a1 + 0x40\n 20692: a2 = a0 if t0 != 0\n 20695: a0 = clz t2\n 20697: a1 = clz a3\n 20699: a1 = a1 + 0x40\n 20702: a1 = a0 if t2 != 0\n 20705: a0 = a1 + 0x80\n 20709: a3 = a4 | t0\n 20712: a2 = a0 if a3 == 0\n 20715: a5 = a0 <u a1\n 20718: a5 = 0 if a3 != 0\n 20720: a4 = a5 >u 0\n 20722: a0 = a2 <u 0xf0\n 20726: a3 = a0 ^ 0x1\n 20729: a4 = a3 if a5 == 0\n 20732: a0 = a4 <u 0x1\n 20735: ra = a0 + 0xffffffffffffffff\n 20738: t1 = -a4\n 20740: a5 = -a5\n 20742: a3 = a5 - a3\n 20745: a2 = 0xef - a2\n 20749: a5 = t1 >u 0\n 20751: a0 = ra >u 0\n 20753: a0 = a5 if ra == 0\n 20756: a5 = a2 <u 0x100\n 20760: a5 = a5 ^ 0x1\n 20763: a1 = a3 >u 0\n 20765: a5 = a1 if a3 != 0\n 20768: a5 = a0 if a4 != 0\n 20771: u64 [s1 + 0xb8] = t2\n 20775: u64 [s1 + 0xd0] = t0\n 20779: a0 = t2 | t0\n 20782: a4 = u64 [s1 + 0xc0]\n 20786: a1 = u64 [s1 + 0xd8]\n 20790: a1 = a1 | a4\n 20793: a0 = a0 | a1\n 20796: a0 = a0 <u 0x1\n 20799: a0 = a0 | a5\n 20802: a1 = a4\n 20804: a1 = 0 if a0 != 0\n 20806: u64 [s1 + 0x118] = a1\n 20810: jump @883 if a0 != 0\n      : @797 (gas: 1)\n 20814: t0 = 844, jump @1466\n      : @798 [@dyn 422] (gas: 1)\n 20820: jump @883 if a0 == 0\n      : @799 (gas: 1)\n 20824: t0 = 846, jump @1417\n      : @800 [@dyn 423] (gas: 1)\n 20830: ra = 848, jump @1493\n      : @801 [@dyn 424] (gas: 6)\n 20836: u64 [s1 + 0xc8] = a0\n 20840: u64 [s1 + 0xe8] = a1\n 20844: a0 = u64 [s1 + 0xd8]\n 20848: a1 = u64 [s1 + 0xd0]\n 20852: a2 = u64 [s1 + 0xe0]\n 20856: ra = 850, jump @1498\n      : @802 [@dyn 425] (gas: 1)\n 20862: t0 = 852, jump @1489\n      : @803 [@dyn 426] (gas: 1)\n 20868: ra = 854, jump @1498\n      : @804 [@dyn 427] (gas: 8)\n 20874: u64 [s1 + 0xa0] = a0\n 20878: u64 [s1 + 0x68] = a1\n 20881: a2 = u64 [s1 + 0xe0]\n 20885: a0 = a2 <u 0x80\n 20889: u64 [s1 + 0x60] = a0\n 20892: a0 = u64 [s1 + 0xc0]\n 20896: a1 = u64 [s1 + 0xb8]\n 20900: ra = 856, jump @1498\n      : @805 [@dyn 428] (gas: 1)\n 20906: t0 = 858, jump @1454\n      : @806 [@dyn 429] (gas: 4)\n 20912: a3 = u64 [s1 + 0x60]\n 20915: a0 = 0 if a3 == 0\n 20917: u64 [s1 + 0xf8] = a0\n 20921: jump @881 if a1 == 0\n      : @807 (gas: 7)\n 20925: a2 = a3\n 20927: a0 = u64 [s1 + 0xe8]\n 20931: a1 = u64 [s1 + 0xa8]\n 20935: a0 = a0 | a1\n 20938: a5 = a3\n 20940: a1 = u64 [s1 + 0x68]\n 20943: t0 = 860, jump @1415\n      : @808 [@dyn 430] (gas: 1)\n 20949: ra = 862, jump @1493\n      : @809 [@dyn 431] (gas: 6)\n 20955: u64 [s1 + 0xc8] = a0\n 20959: u64 [s1 + 0xa0] = a1\n 20963: a0 = u64 [s1 + 0xc0]\n 20967: a1 = u64 [s1 + 0xb8]\n 20971: a2 = u64 [s1 + 0x118]\n 20975: ra = 864, jump @1493\n      : @810 [@dyn 432] (gas: 2)\n 20981: u64 [s1 + 0x68] = a0\n 20984: t0 = 866, jump @1464\n      : @811 [@dyn 433] (gas: 1)\n 20990: ra = 868, jump @1498\n      : @812 [@dyn 434] (gas: 1)\n 20996: t0 = 870, jump @1434\n      : @813 [@dyn 435] (gas: 2)\n 21002: a1 = u64 [s1 + 0x68]\n 21005: t0 = 872, jump @1455\n      : @814 [@dyn 436] (gas: 1)\n 21011: ra = 874, jump @1493\n      : @815 [@dyn 437] (gas: 1)\n 21017: t0 = 876, jump @1421\n      : @816 [@dyn 438] (gas: 1)\n 21023: t0 = 878, jump @1424\n      : @817 [@dyn 439] (gas: 5)\n 21029: t0 = ra <u a2\n 21032: a4 = u64 [s1 + 0xa8]\n 21036: a5 = a4 <u a3\n 21039: a5 = t0 if t1 != 0\n 21042: t0 = 880, jump @1431\n      : @818 [@dyn 440] (gas: 20)\n 21048: t0 = a0 | a1\n 21051: a1 = a4 << 0x1\n 21054: a4 = u64 [s1 + 0xf0]\n 21058: t1 = a4 >> 0x3f\n 21061: t1 = a1 | t1\n 21064: a1 = a4 << 0x1\n 21067: a4 = u64 [s1 + 0xf8]\n 21071: t2 = a4 >> 0x3f\n 21074: a1 = a1 | t2\n 21077: a4 = a4 << 0x1\n 21080: a0 = u64 [s1 + 0xd8]\n 21084: a4 = a4 | a0\n 21087: u64 [s1 + 0xf8] = a4\n 21091: a0 = u64 [s1 + 0xd0]\n 21095: a1 = a1 | a0\n 21098: u64 [s1 + 0xf0] = a1\n 21102: a1 = a0 | t1\n 21105: u64 [s1 + 0xe0] = a1\n 21109: a0 = a0 | t0\n 21112: t0 = 882, jump @1414\n      : @819 [@dyn 441] (gas: 18)\n 21118: t0 = a4 <u a2\n 21121: a2 = a4 - a2\n 21124: a4 = a3 <u 0x1\n 21127: a5 = a5 - a4\n 21130: a4 = u64 [a0 + 0x8]\n 21133: a4 = a4 - t0\n 21136: a3 = a3 + 0xffffffffffffffff\n 21139: u64 [a0 + 0x10] = a5\n 21142: u64 [a0 + 0x8] = a4\n 21145: t0 = a5 | a4\n 21148: u64 [a0 + 0x18] = a3\n 21151: a4 = a3 | a2\n 21154: a3 = a4 | t0\n 21157: a4 = ra & 0x1\n 21160: u64 [s1 + 0xd8] = a4\n 21164: u64 [a0] = a2\n 21166: u64 [s1 + 208] = 0\n 21170: jump @816 if a3 != 0\n      : @820 (gas: 1)\n 21174: jump @882\n      : @821 (gas: 2)\n 21177: u64 [s1 + 216] = 0\n 21181: fallthrough\n      : @822 (gas: 5)\n 21182: a0 = u64 [s1 + 0xf8]\n 21186: a0 = a0 << 0x1\n 21189: a4 = u64 [s1 + 0xd8]\n 21193: a4 = a4 | a0\n 21196: fallthrough\n      : @823 (gas: 2)\n 21197: a0 = u64 [s1 + 0x98]\n 21201: jump @906 if a0 >=u a4\n      : @824 (gas: 30)\n 21205: a3 = s1 + 0x10b8\n 21209: a0 = u64 [s1 + 0x40]\n 21212: a5 = a3 + 0x700\n 21216: u64 [a5 + 0x8] = a0\n 21219: a0 = u64 [s1 + 0x98]\n 21223: u64 [a5 + 0x28] = a0\n 21226: a0 = u64 [s1 + 0x70]\n 21229: u64 [a5 + 0x48] = a0\n 21232: a0 = u64 [s1 + 0x48]\n 21235: u64 [a5 + 0x10] = a0\n 21238: a0 = u64 [s1 + 0x60]\n 21241: u64 [a5 + 0x30] = a0\n 21244: a0 = u64 [s1 + 0x80]\n 21248: u64 [a5 + 0x50] = a0\n 21251: a0 = u64 [s1 + 0x50]\n 21254: u64 [a5 + 0x18] = a0\n 21257: a0 = u64 [s1 + 0x68]\n 21260: u64 [a5 + 0x38] = a0\n 21263: a0 = u64 [s1 + 0x88]\n 21267: u64 [a5 + 0x58] = a0\n 21270: a0 = u64 [s1 + 0x58]\n 21273: u64 [a5 + 0x20] = a0\n 21276: a0 = u64 [s1 + 0x78]\n 21279: u64 [a5 + 0x40] = a0\n 21282: a0 = s1 + 0x1800\n 21286: a1 = s1 + 0x17e0\n 21290: a2 = s1 + 0x17c0\n 21294: a4 = u64 [s1 + 0x90]\n 21298: u64 [a5 + 0x60] = a4\n 21301: ra = 884, jump @1328\n      : @825 [@dyn 442] (gas: 6)\n 21307: a1 = 0x20180\n 21312: i32 a1 = a1 + 0\n 21314: a0 = 0\n 21316: a2 = 0\n 21318: ecalli 13 // 'seal_return'\n 21320: jump @988\n      : @826 (gas: 1)\n 21323: jump @911 if a0 != 1158823118\n      : @827 (gas: 10)\n 21331: a0 = s1 + 0x20b8\n 21335: u64 [a0 + 1632] = 0\n 21339: u64 [a0 + 1624] = 0\n 21343: u64 [a0 + 1616] = 0\n 21347: u64 [a0 + 1608] = 0\n 21351: a0 = s1 + 0x2000\n 21355: i32 a0 = a0 + 0x700\n 21359: ra = 0x376\n 21363: ecalli 16 // 'value_transferred'\n 21365: fallthrough\n      : @828 [@dyn 443] (gas: 3)\n 21366: a3 = s1 + 0x20b8\n 21370: a4 = a3 + 0x600\n 21374: t0 = 888, jump @1492\n      : @829 [@dyn 444] (gas: 1)\n 21380: jump @916 if a0 == 0\n      : @830 (gas: 6)\n 21384: a1 = 0x20180\n 21389: i32 a1 = a1 + 0\n 21391: a0 = 0x1\n 21394: a2 = 0\n 21396: ecalli 13 // 'seal_return'\n 21398: jump @988\n      : @831 (gas: 1)\n 21401: t0 = 890, jump @1474\n      : @832 [@dyn 445] (gas: 1)\n 21407: jump @918 if a1 <u a0\n      : @833 (gas: 6)\n 21411: a1 = 0x20180\n 21416: i32 a1 = a1 + 0\n 21418: a0 = 0x1\n 21421: a2 = 0\n 21423: ecalli 13 // 'seal_return'\n 21425: jump @988\n      : @834 (gas: 4)\n 21428: a0 = s1 + 0x1ea0\n 21432: ra = 0x37c\n 21436: t0 = 0x5c0\n 21440: jump @1476\n      : @835 [@dyn 446] (gas: 12)\n 21443: a0 = s1 + 0x18b8\n 21447: a0 = u64 [a0 + 0x5e8]\n 21451: u64 [s1 + 0xf0] = a0\n 21455: a0 = 0x30180\n 21460: u64 [s1 + 0x108] = a0\n 21464: i32 a0 = a0 + 0\n 21466: u64 [s1 + 0x100] = a0\n 21470: ra = 0x37e\n 21474: ecalli 4 // 'caller'\n 21476: a2 = u64 [s1 + 0x108]\n 21480: t0 = 0x380\n 21484: jump @1413\n      : @836 [@dyn 447] (gas: 2)\n 21487: a2 = u64 [s1 + 0x108]\n 21491: t0 = 896, jump @1413\n      : @837 [@dyn 448] (gas: 8)\n 21497: u64 [a2 + 1504] = 0\n 21501: a4 = a2 + 0x500\n 21505: u64 [a4 + 0xd8] = a1\n 21509: u64 [a4 + 0xd0] = a0\n 21513: a1 = s1 + 0x1e80\n 21517: u64 [a4 + 0xc8] = a3\n 21521: a0 = 0\n 21523: ra = 898, jump @9\n      : @838 [@dyn 449] (gas: 3)\n 21529: t0 = 0x384\n 21533: a1 = s1 + 0x18b8\n 21537: fallthrough\n      : @839 [@dyn 450] (gas: 8)\n 21538: u64 [a1 + 1472] = 0\n 21542: u64 [a1 + 1464] = 0\n 21546: u64 [a1 + 1448] = 0x1\n 21551: a2 = a1\n 21553: a0 = 0x20\n 21556: a1 = s1 + 0x1e60\n 21560: u64 [a2 + 1456] = 0\n 21564: ra = 902, jump @9\n      : @840 [@dyn 451] (gas: 4)\n 21570: a0 = 0x20170\n 21575: u64 [s1 + 0x118] = a0\n 21579: a0 = i32 [0x20170]\n 21584: jump @842 if a0 >u 63\n      : @841 (gas: 1)\n 21588: t0 = 904, jump @1475\n      : @842 [@dyn 452] (gas: 14)\n 21594: a0 = sp + 0xffffffffffffffe0\n 21597: a2 = a0 & 0xffffffffffffffe0\n 21600: u64 [s1 + 0xf8] = a2\n 21604: sp = a2\n 21606: a0 = 0x20180\n 21611: i32 a0 = a0 + 0\n 21613: i32 a2 = a2 + 0\n 21615: a1 = 0x40\n 21618: u64 [s1 + 0x110] = a0\n 21622: ra = 0x38a\n 21626: ecalli 8 // 'hash_keccak_256'\n 21628: a3 = u64 [s1 + 0xf8]\n 21632: t0 = 0x38c\n 21636: jump @1445\n      : @843 [@dyn 453] (gas: 2)\n 21639: a3 = u64 [s1 + 0xf8]\n 21643: t0 = 908, jump @1445\n      : @844 [@dyn 454] (gas: 14)\n 21649: u64 [s1 + 0xf8] = a0\n 21653: sp = a0\n 21655: a0 = u64 [s1 + 0xf0]\n 21659: a0 = a0 << 0x20\n 21662: a2 = a0 >> 0x20\n 21665: a0 = s1 + 0x18b8\n 21669: u64 [a0 + 1440] = 0\n 21673: u64 [a0 + 1432] = 0\n 21677: u64 [a0 + 1424] = 0\n 21681: a1 = s1 + 0x1e40\n 21685: u64 [s1 + 0xf0] = a2\n 21689: u64 [a0 + 0x588] = a2\n 21693: a0 = 0\n 21695: ra = 910, jump @9\n      : @845 [@dyn 455] (gas: 14)\n 21701: a0 = u64 [s1 + 0xd0]\n 21705: a1 = s1 + 0x18b8\n 21709: a2 = a1 + 0x500\n 21713: u64 [a2 + 0x80] = a0\n 21717: a0 = u64 [s1 + 0xd8]\n 21721: u64 [a2 + 0x78] = a0\n 21724: a0 = u64 [s1 + 0xe0]\n 21728: u64 [a2 + 0x70] = a0\n 21731: a3 = a1\n 21733: a0 = 0x20\n 21736: a1 = s1 + 0x1e20\n 21740: a2 = u64 [s1 + 0xe8]\n 21744: u64 [a3 + 0x568] = a2\n 21748: ra = 912, jump @9\n      : @846 [@dyn 456] (gas: 1)\n 21754: t0 = 914, jump @1461\n      : @847 [@dyn 457] (gas: 1)\n 21760: jump @849 if a1 <u a0\n      : @848 (gas: 1)\n 21763: t0 = 916, jump @1480\n      : @849 [@dyn 458] (gas: 4)\n 21769: a0 = sp + 0xffffffffffffffe0\n 21772: a0 = a0 & 0xffffffffffffffe0\n 21775: u64 [s1 + 0xe8] = a0\n 21779: t0 = 918, jump @1418\n      : @850 [@dyn 459] (gas: 5)\n 21785: ra = 0x398\n 21789: ecalli 8 // 'hash_keccak_256'\n 21791: a3 = u64 [s1 + 0xe8]\n 21795: t0 = 0x39a\n 21799: jump @1442\n      : @851 [@dyn 460] (gas: 2)\n 21802: a3 = u64 [s1 + 0xe8]\n 21806: t0 = 922, jump @1442\n      : @852 [@dyn 461] (gas: 11)\n 21812: a4 = u64 [s1 + 0xf8]\n 21816: u64 [a4 + 0x18] = a3\n 21819: u64 [a4 + 0x10] = a2\n 21822: u64 [a4 + 0x8] = a1\n 21825: u64 [a4] = a0\n 21827: a0 = u64 [s1 + 0x100]\n 21831: ra = 0x39c\n 21835: ecalli 4 // 'caller'\n 21837: a2 = u64 [s1 + 0x108]\n 21841: t0 = 0x39e\n 21845: jump @1473\n      : @853 [@dyn 462] (gas: 2)\n 21848: a2 = u64 [s1 + 0x108]\n 21852: t0 = 926, jump @1473\n      : @854 [@dyn 463] (gas: 10)\n 21858: u64 [s1 + 0xe8] = a1\n 21862: a0 = a0 >> 0x20\n 21865: a1 = reverse a2\n 21867: u64 [s1 + 0xe0] = a1\n 21871: a1 = a1 << 0x20\n 21874: a0 = a0 | a1\n 21877: u64 [s1 + 0xd8] = a0\n 21881: a0 = s1 + 0x1e00\n 21885: a1 = u64 [s1 + 0xf8]\n 21889: ra = 928, jump @11\n      : @855 [@dyn 464] (gas: 2)\n 21895: a2 = s1 + 0x18b8\n 21899: fallthrough\n      : @856 (gas: 18)\n 21900: a0 = u64 [a2 + 0x550]\n 21904: a1 = u32 [a2 + 0x54c]\n 21908: a2 = u64 [a2 + 0x558]\n 21912: a3 = a0 << 0x20\n 21915: a1 = a1 | a3\n 21918: a3 = a2 << 0x20\n 21921: a0 = a0 >> 0x20\n 21924: a0 = a0 | a3\n 21927: a3 = u64 [s1 + 0xd8]\n 21931: a0 = a0 ^ a3\n 21934: a3 = u64 [s1 + 0xe8]\n 21938: a1 = a1 ^ a3\n 21941: a3 = u64 [s1 + 0xe0]\n 21945: a2 = a2 ^ a3\n 21948: a2 = a2 >> 0x20\n 21951: a1 = a1 | a2\n 21954: a0 = a0 | a1\n 21957: jump @930 if a0 != 0\n      : @857 (gas: 6)\n 21961: a0 = u64 [s1 + 0x100]\n 21965: ra = 0x3a2\n 21969: ecalli 4 // 'caller'\n 21971: a2 = u64 [s1 + 0x108]\n 21975: t0 = 0x3a4\n 21979: jump @1413\n      : @858 [@dyn 465] (gas: 2)\n 21982: a2 = u64 [s1 + 0x108]\n 21986: t0 = 932, jump @1413\n      : @859 [@dyn 466] (gas: 8)\n 21992: u64 [a2 + 1312] = 0\n 21996: a4 = a2 + 0x500\n 22000: u64 [a4 + 0x18] = a1\n 22003: u64 [a4 + 0x10] = a0\n 22006: a1 = s1 + 0x1dc0\n 22010: u64 [a4 + 0x8] = a3\n 22013: a0 = 0\n 22015: ra = 934, jump @9\n      : @860 [@dyn 467] (gas: 3)\n 22021: t0 = 0x3a8\n 22025: a1 = s1 + 0x18b8\n 22029: fallthrough\n      : @861 [@dyn 468] (gas: 8)\n 22030: u64 [a1 + 1280] = 0\n 22034: u64 [a1 + 1272] = 0\n 22038: u64 [a1 + 1256] = 0x1\n 22043: a2 = a1\n 22045: a0 = 0x20\n 22048: a1 = s1 + 0x1da0\n 22052: u64 [a2 + 1264] = 0\n 22056: ra = 938, jump @9\n      : @862 [@dyn 469] (gas: 1)\n 22062: t0 = 940, jump @1461\n      : @863 [@dyn 470] (gas: 1)\n 22068: jump @865 if a1 <u a0\n      : @864 (gas: 1)\n 22071: t0 = 942, jump @1475\n      : @865 [@dyn 471] (gas: 4)\n 22077: a0 = sp + 0xffffffffffffffe0\n 22080: a0 = a0 & 0xffffffffffffffe0\n 22083: u64 [s1 + 0xf8] = a0\n 22087: t0 = 944, jump @1418\n      : @866 [@dyn 472] (gas: 4)\n 22093: ra = 0x3b2\n 22097: ecalli 8 // 'hash_keccak_256'\n 22099: t0 = 0x3b4\n 22103: jump @1490\n      : @867 [@dyn 473] (gas: 1)\n 22106: t0 = 948, jump @1490\n      : @868 [@dyn 474] (gas: 8)\n 22112: u64 [s1 + 0xe8] = a0\n 22116: a0 = reverse a2\n 22118: u64 [s1 + 0xe0] = a0\n 22122: a0 = reverse a3\n 22124: u64 [s1 + 0xd8] = a0\n 22128: t0 = 0x3b6\n 22132: a2 = s1 + 0x18b8\n 22136: fallthrough\n      : @869 [@dyn 475] (gas: 8)\n 22137: u64 [a2 + 1248] = 0\n 22141: u64 [a2 + 1240] = 0\n 22145: u64 [a2 + 1232] = 0\n 22149: a1 = s1 + 0x1d80\n 22153: a0 = u64 [s1 + 0xf0]\n 22157: u64 [a2 + 0x4c8] = a0\n 22161: a0 = 0\n 22163: ra = 952, jump @9\n      : @870 [@dyn 476] (gas: 14)\n 22169: a0 = u64 [s1 + 0xd8]\n 22173: a1 = s1 + 0x18b8\n 22177: a2 = a1 + 0x400\n 22181: u64 [a2 + 0xc0] = a0\n 22185: a0 = u64 [s1 + 0xe0]\n 22189: u64 [a2 + 0xb8] = a0\n 22193: a0 = u64 [s1 + 0xe8]\n 22197: u64 [a2 + 0xb0] = a0\n 22201: a3 = a1\n 22203: a0 = 0x20\n 22206: a1 = s1 + 0x1d60\n 22210: a2 = u64 [s1 + 0xf8]\n 22214: u64 [a3 + 0x4a8] = a2\n 22218: ra = 954, jump @9\n      : @871 [@dyn 477] (gas: 1)\n 22224: t0 = 956, jump @1461\n      : @872 [@dyn 478] (gas: 1)\n 22230: jump @874 if a1 <u a0\n      : @873 (gas: 1)\n 22233: t0 = 958, jump @1480\n      : @874 [@dyn 479] (gas: 4)\n 22239: a0 = sp + 0xffffffffffffffe0\n 22242: a0 = a0 & 0xffffffffffffffe0\n 22245: u64 [s1 + 0xf8] = a0\n 22249: t0 = 960, jump @1418\n      : @875 [@dyn 480] (gas: 28)\n 22255: ecalli 8 // 'hash_keccak_256'\n 22257: a3 = u64 [s1 + 0xf8]\n 22261: a0 = u64 [a3]\n 22263: a1 = u64 [a3 + 0x8]\n 22266: a2 = u64 [a3 + 0x10]\n 22269: a3 = u64 [a3 + 0x18]\n 22272: t0 = reverse a0\n 22274: a0 = reverse a1\n 22276: a2 = reverse a2\n 22278: a3 = reverse a3\n 22280: a4 = sp + 0xffffffffffffffe0\n 22283: a1 = a4 & 0xffffffffffffffe0\n 22286: sp = a1\n 22288: a4 = a3 + 0x2\n 22291: a3 = a4 <u a3\n 22294: a5 = a2 + a3\n 22297: a2 = a5 <u a2\n 22300: a2 = a3 if a3 == 0\n 22303: a2 = a2 + a0\n 22306: a0 = a2 <u a0\n 22309: a0 = a0 + t0\n 22312: u64 [a1 + 0x8] = a5\n 22315: u64 [a1] = a4\n 22317: u64 [a1 + 0x10] = a2\n 22320: u64 [a1 + 0x18] = a0\n 22323: a0 = s1 + 0x1d40\n 22327: u64 [s1 + 0xf8] = a1\n 22331: ra = 962, jump @11\n      : @876 [@dyn 481] (gas: 4)\n 22337: a0 = s1 + 0x18b8\n 22341: a0 = u64 [a0 + 0x490]\n 22345: a1 = a0 & 0xff\n 22349: jump @935 if a1 == 0\n      : @877 (gas: 3)\n 22353: t0 = 0x3c4\n 22357: a2 = s1 + 0x18b8\n 22361: fallthrough\n      : @878 [@dyn 482] (gas: 9)\n 22362: u64 [a2 + 1144] = 0\n 22366: u64 [a2 + 1136] = 0\n 22370: a0 = 0xc1c184c800000000\n 22380: u64 [a2 + 0x480] = a0\n 22384: a1 = s1 + 0x1d20\n 22388: u64 [a2 + 1128] = 0\n 22392: a0 = 0\n 22394: ra = 0x402\n 22398: jump @9\n      : @879 (gas: 3)\n 22401: t0 = 0x3c6\n 22405: a2 = s1 + 0x18b8\n 22409: fallthrough\n      : @880 [@dyn 483] (gas: 9)\n 22410: u64 [a2 + 664] = 0\n 22414: u64 [a2 + 656] = 0\n 22418: a0 = 0x6f1cf7db00000000\n 22428: u64 [a2 + 0x2a0] = a0\n 22432: a1 = s1 + 0x1b40\n 22436: u64 [a2 + 648] = 0\n 22440: a0 = 0\n 22442: ra = 0x50a\n 22446: jump @9\n      : @881 (gas: 2)\n 22449: u64 [s1 + 216] = 0\n 22453: fallthrough\n      : @882 (gas: 6)\n 22454: a0 = u64 [s1 + 0xf8]\n 22458: a0 = a0 << 0x1\n 22461: a1 = u64 [s1 + 0xd8]\n 22465: a0 = a0 | a1\n 22468: u64 [s1 + 0x118] = a0\n 22472: fallthrough\n      : @883 (gas: 3)\n 22473: a0 = u64 [s1 + 0x70]\n 22476: a1 = u64 [s1 + 0x118]\n 22480: jump @953 if a0 != a1\n      : @884 (gas: 6)\n 22484: a0 = u64 [s1 + 0x80]\n 22488: ra = 0x3c8\n 22492: ecalli 4 // 'caller'\n 22494: a2 = u64 [s1 + 0x88]\n 22498: t0 = 0x3ca\n 22502: jump @1413\n      : @885 [@dyn 484] (gas: 2)\n 22505: a2 = u64 [s1 + 0x88]\n 22509: t0 = 970, jump @1413\n      : @886 [@dyn 485] (gas: 8)\n 22515: u64 [a2 + 608] = 0\n 22519: a4 = a2 + 0x200\n 22523: u64 [a4 + 0x58] = a1\n 22526: u64 [a4 + 0x50] = a0\n 22529: a1 = s1 + 0x1b00\n 22533: u64 [a4 + 0x48] = a3\n 22536: a0 = 0\n 22538: ra = 972, jump @9\n      : @887 [@dyn 486] (gas: 3)\n 22544: t0 = 0x3ce\n 22548: a1 = s1 + 0x18b8\n 22552: fallthrough\n      : @888 [@dyn 487] (gas: 8)\n 22553: u64 [a1 + 576] = 0\n 22557: u64 [a1 + 568] = 0\n 22561: u64 [a1 + 552] = 0x1\n 22566: a2 = a1\n 22568: a0 = 0x20\n 22571: a1 = s1 + 0x1ae0\n 22575: u64 [a2 + 560] = 0\n 22579: ra = 976, jump @9\n      : @889 [@dyn 488] (gas: 3)\n 22585: a0 = u64 [s1 + 0x98]\n 22589: a0 = i32 [a0]\n 22591: jump @891 if a0 >u 63\n      : @890 (gas: 4)\n 22595: a1 = u64 [s1 + 0x98]\n 22599: u32 [a1 + 0] = 0x40\n 22602: t0 = 0x3d2\n 22606: jump @1423\n      : @891 (gas: 1)\n 22609: t0 = 978, jump @1423\n      : @892 [@dyn 489] (gas: 4)\n 22615: ra = 0x3d4\n 22619: ecalli 8 // 'hash_keccak_256'\n 22621: t0 = 0x3d6\n 22625: jump @1433\n      : @893 [@dyn 490] (gas: 1)\n 22628: t0 = 982, jump @1433\n      : @894 [@dyn 491] (gas: 8)\n 22634: u64 [a2 + 544] = 0\n 22638: u64 [a2 + 536] = 0\n 22642: u64 [a2 + 528] = 0\n 22646: a1 = s1 + 0x1ac0\n 22650: a0 = u64 [s1 + 0x78]\n 22653: u64 [a2 + 0x208] = a0\n 22657: a0 = 0\n 22659: ra = 984, jump @9\n      : @895 [@dyn 492] (gas: 14)\n 22665: a0 = u64 [s1 + 0xf8]\n 22669: a1 = s1 + 0x18b8\n 22673: u64 [a1 + 0x200] = a0\n 22677: a4 = s1 + 0x100\n 22681: a0 = u64 [a4]\n 22683: u64 [a1 + 0x1f8] = a0\n 22687: a0 = u64 [a4 + 0x8]\n 22690: u64 [a1 + 0x1f0] = a0\n 22694: a3 = a1\n 22696: a0 = 0x20\n 22699: a1 = s1 + 0x1aa0\n 22703: a2 = u64 [a4 + 0x10]\n 22706: u64 [a3 + 0x1e8] = a2\n 22710: ra = 986, jump @9\n      : @896 [@dyn 493] (gas: 3)\n 22716: a0 = u64 [s1 + 0x98]\n 22720: a0 = i32 [a0]\n 22722: jump @898 if a0 >u 63\n      : @897 (gas: 4)\n 22726: a0 = u64 [s1 + 0x98]\n 22730: u32 [a0 + 0] = 0x40\n 22733: t0 = 0x3dc\n 22737: jump @1423\n      : @898 (gas: 1)\n 22740: t0 = 988, jump @1423\n      : @899 [@dyn 494] (gas: 4)\n 22746: ra = 0x3de\n 22750: ecalli 8 // 'hash_keccak_256'\n 22752: t0 = 0x3e0\n 22756: jump @1459\n      : @900 [@dyn 495] (gas: 1)\n 22759: t0 = 992, jump @1459\n      : @901 [@dyn 496] (gas: 2)\n 22765: a4 = a3 + 0x2\n 22768: t0 = 994, jump @1432\n      : @902 [@dyn 497] (gas: 9)\n 22774: a1 = s1 + 0x28b8\n 22778: a3 = a1 + 0x200\n 22782: u64 [a3 + 0xa8] = a4\n 22786: u64 [a3 + 0xb0] = a5\n 22790: u64 [a3 + 0xb8] = a2\n 22794: u64 [a3 + 0xc0] = a0\n 22798: a0 = s1 + 0x1a80\n 22802: a1 = s1 + 0x2b60\n 22806: ra = 996, jump @11\n      : @903 [@dyn 498] (gas: 3)\n 22812: a0 = s1 + 0x18b8\n 22816: a0 = u8 [a0 + 0x1d0]\n 22820: jump @955 if a0 == 0\n      : @904 (gas: 3)\n 22824: t0 = 0x3e6\n 22828: a2 = s1 + 0x18b8\n 22832: fallthrough\n      : @905 [@dyn 499] (gas: 9)\n 22833: u64 [a2 + 440] = 0\n 22837: u64 [a2 + 432] = 0\n 22841: a0 = 0xa7a9536d00000000\n 22851: u64 [a2 + 0x1c0] = a0\n 22855: a1 = s1 + 0x1a60\n 22859: u64 [a2 + 424] = 0\n 22863: a0 = 0\n 22865: ra = 0x50a\n 22869: jump @9\n      : @906 (gas: 3)\n 22872: t0 = 0x3e8\n 22876: a2 = s1 + 0x10b8\n 22880: fallthrough\n      : @907 [@dyn 500] (gas: 8)\n 22881: u64 [a2 + 1912] = 0\n 22885: u64 [a2 + 1904] = 0\n 22889: a0 = 0xcf114bd900000000\n 22899: u64 [a2 + 0x780] = a0\n 22903: a1 = s1 + 0x1820\n 22907: u64 [a2 + 1896] = 0\n 22911: a0 = 0\n 22913: ra = 1002, jump @9\n      : @908 [@dyn 501] (gas: 2)\n 22919: a1 = i32 [0x20170]\n 22924: jump @910 if a1 >u 31\n      : @909 (gas: 3)\n 22928: u32 [0x20170] = 0x20\n 22934: a1 = 0x20180\n 22939: jump @700\n      : @910 (gas: 2)\n 22942: a1 = 0x20180\n 22947: jump @700\n      : @911 (gas: 1)\n 22950: jump @982 if a0 != 1229702701\n      : @912 (gas: 13)\n 22958: a0 = s1 + 0x20b8\n 22962: u64 [a0 + 2016] = 0\n 22966: u64 [a0 + 2008] = 0\n 22970: u64 [a0 + 2000] = 0\n 22974: u64 [a0 + 1992] = 0\n 22978: a0 = s1 + 0x3000\n 22982: i32 a0 = a0 + 0xfffffffffffff880\n 22986: ra = 0x3ec\n 22990: ecalli 16 // 'value_transferred'\n 22992: a3 = s1 + 0x20b8\n 22996: a4 = a3 + 0x700\n 23000: t0 = 0x3ee\n 23004: jump @1485\n      : @913 [@dyn 502] (gas: 3)\n 23007: a3 = s1 + 0x20b8\n 23011: a4 = a3 + 0x700\n 23015: t0 = 1006, jump @1485\n      : @914 [@dyn 503] (gas: 1)\n 23021: jump @988 if a0 == 0\n      : @915 (gas: 6)\n 23025: a1 = 0x20180\n 23030: i32 a1 = a1 + 0\n 23032: a0 = 0x1\n 23035: a2 = 0\n 23037: ecalli 13 // 'seal_return'\n 23039: jump @988\n      : @916 (gas: 3)\n 23042: a0 = u64 [s1 + 0x118]\n 23046: a0 = i32 [a0]\n 23048: jump @990 if a0 >u 99\n      : @917 (gas: 6)\n 23053: a1 = 0x20180\n 23058: i32 a1 = a1 + 0\n 23060: a0 = 0x1\n 23063: a2 = 0\n 23065: ecalli 13 // 'seal_return'\n 23067: jump @988\n      : @918 (gas: 4)\n 23070: a0 = s1 + 0x1a0\n 23074: ra = 0x3f0\n 23078: t0 = 0x5ac\n 23082: jump @1476\n      : @919 [@dyn 504] (gas: 10)\n 23085: a0 = u64 [s1 + 0x1a0]\n 23089: a1 = u64 [s1 + 0x1a8]\n 23093: a2 = u32 [s1 + 0x1b0]\n 23097: u64 [s1 + 408] = 0\n 23101: u64 [s1 + 0x190] = a2\n 23105: u64 [s1 + 0x188] = a1\n 23109: a1 = s1 + 0x180\n 23113: u64 [s1 + 0x180] = a0\n 23117: a0 = 0\n 23119: ra = 1010, jump @9\n      : @920 [@dyn 505] (gas: 7)\n 23125: u64 [s1 + 376] = 0\n 23129: u64 [s1 + 368] = 0\n 23133: u64 [s1 + 352] = 0x2\n 23138: a0 = 0x20\n 23141: a1 = s1 + 0x160\n 23145: u64 [s1 + 360] = 0\n 23149: ra = 1012, jump @9\n      : @921 [@dyn 506] (gas: 4)\n 23155: a0 = 0x20170\n 23160: u64 [s1 + 0x118] = a0\n 23164: a0 = i32 [0x20170]\n 23169: jump @923 if a0 >u 63\n      : @922 (gas: 1)\n 23173: t0 = 1014, jump @1475\n      : @923 [@dyn 507] (gas: 14)\n 23179: a0 = sp + 0xffffffffffffffe0\n 23182: a2 = a0 & 0xffffffffffffffe0\n 23185: u64 [s1 + 0x108] = a2\n 23189: sp = a2\n 23191: a0 = 0x20180\n 23196: u64 [s1 + 0x110] = a0\n 23200: i32 a0 = a0 + 0\n 23202: i32 a2 = a2 + 0\n 23204: a1 = 0x40\n 23207: ra = 0x3f8\n 23211: ecalli 8 // 'hash_keccak_256'\n 23213: a3 = u64 [s1 + 0x108]\n 23217: t0 = 0x3fa\n 23221: jump @1429\n      : @924 [@dyn 508] (gas: 2)\n 23224: a3 = u64 [s1 + 0x108]\n 23228: t0 = 1018, jump @1429\n      : @925 [@dyn 509] (gas: 8)\n 23234: a5 = a4 + 0x400\n 23238: u64 [a5 + 0xc0] = a3\n 23242: u64 [a5 + 0xb8] = a2\n 23246: u64 [a5 + 0xb0] = a1\n 23250: u64 [a5 + 0xa8] = a0\n 23254: a0 = s1 + 0x140\n 23258: a1 = s1 + 0x2560\n 23262: ra = 1020, jump @11\n      : @926 [@dyn 510] (gas: 8)\n 23268: a0 = u32 [s1 + 0x140]\n 23272: u64 [s1 + 312] = 0\n 23276: u64 [s1 + 304] = 0\n 23280: u64 [s1 + 0x120] = a0\n 23284: a0 = 0x80\n 23288: a1 = s1 + 0x120\n 23292: u64 [s1 + 296] = 0\n 23296: ra = 1022, jump @9\n      : @927 [@dyn 511] (gas: 3)\n 23302: a0 = u64 [s1 + 0x118]\n 23306: a0 = i32 [a0]\n 23308: jump @929 if a0 >u 159\n      : @928 (gas: 5)\n 23313: a1 = u64 [s1 + 0x118]\n 23317: u32 [a1 + 0] = 0xa0\n 23321: a0 = u64 [s1 + 0x110]\n 23325: i32 a1 = a0 + 0x80\n 23329: jump @722\n      : @929 (gas: 3)\n 23332: a0 = u64 [s1 + 0x110]\n 23336: i32 a1 = a0 + 0x80\n 23340: jump @722\n      : @930 (gas: 3)\n 23343: t0 = 0x400\n 23347: a2 = s1 + 0x18b8\n 23351: fallthrough\n      : @931 [@dyn 512] (gas: 8)\n 23352: u64 [a2 + 1336] = 0\n 23356: u64 [a2 + 1328] = 0\n 23360: a0 = 0x6f1cf7db00000000\n 23370: u64 [a2 + 0x540] = a0\n 23374: a1 = s1 + 0x1de0\n 23378: u64 [a2 + 1320] = 0\n 23382: a0 = 0\n 23384: ra = 1026, jump @9\n      : @932 [@dyn 513] (gas: 3)\n 23390: a0 = u64 [s1 + 0x118]\n 23394: a0 = i32 [a0]\n 23396: jump @934 if a0 >u 31\n      : @933 (gas: 3)\n 23400: a1 = u64 [s1 + 0x118]\n 23404: u32 [a1 + 0] = 0x20\n 23407: fallthrough\n      : @934 (gas: 5)\n 23408: a0 = 0x1\n 23411: a2 = 0x4\n 23414: a1 = u64 [s1 + 0x110]\n 23418: ecalli 13 // 'seal_return'\n 23420: fallthrough\n      : @935 (gas: 17)\n 23421: a1 = 0xffffffff\n 23431: u64 [s1 + 0xe8] = a1\n 23435: a3 = s1 + 0x18b8\n 23439: a4 = a3 + 0x400\n 23443: a1 = u64 [a4 + 0x88]\n 23447: a2 = u64 [a4 + 0x98]\n 23451: a3 = u64 [a4 + 0xa0]\n 23455: a0 = a0 | 0x1\n 23458: a4 = s1 + 0x28b8\n 23462: a5 = a4 + 0x300\n 23466: u64 [a5 + 0x8] = a1\n 23469: u64 [a5 + 0x18] = a2\n 23472: u64 [a5 + 0x10] = a0\n 23475: u64 [a5 + 0x20] = a3\n 23478: a1 = s1 + 0x2bc0\n 23482: a0 = u64 [s1 + 0xf8]\n 23486: ra = 1028, jump @12\n      : @936 [@dyn 514] (gas: 6)\n 23492: a0 = u64 [s1 + 0x100]\n 23496: ra = 0x406\n 23500: ecalli 4 // 'caller'\n 23502: a2 = u64 [s1 + 0x108]\n 23506: t0 = 0x408\n 23510: jump @1413\n      : @937 [@dyn 515] (gas: 2)\n 23513: a2 = u64 [s1 + 0x108]\n 23517: t0 = 1032, jump @1413\n      : @938 [@dyn 516] (gas: 8)\n 23523: u64 [a2 + 1120] = 0\n 23527: a4 = a2 + 0x400\n 23531: u64 [a4 + 0x58] = a1\n 23534: u64 [a4 + 0x50] = a0\n 23537: a1 = s1 + 0x1d00\n 23541: u64 [a4 + 0x48] = a3\n 23544: a0 = 0\n 23546: ra = 1034, jump @9\n      : @939 [@dyn 517] (gas: 9)\n 23552: a0 = s1 + 0x18b8\n 23556: u64 [a0 + 1088] = 0\n 23560: u64 [a0 + 1080] = 0\n 23564: u64 [a0 + 1072] = 0\n 23568: a2 = a0\n 23570: a0 = 0x20\n 23573: a1 = s1 + 0x1ce0\n 23577: u64 [a2 + 1064] = 0\n 23581: ra = 1036, jump @9\n      : @940 [@dyn 518] (gas: 5)\n 23587: a0 = sp + 0xffffffffffffffe0\n 23590: a0 = a0 & 0xffffffffffffffe0\n 23593: u64 [s1 + 0xf8] = a0\n 23597: sp = a0\n 23599: t0 = 1038, jump @1461\n      : @941 [@dyn 519] (gas: 1)\n 23605: jump @943 if a1 <u a0\n      : @942 (gas: 1)\n 23608: t0 = 1040, jump @1475\n      : @943 [@dyn 520] (gas: 4)\n 23614: a0 = sp + 0xffffffffffffffe0\n 23617: a0 = a0 & 0xffffffffffffffe0\n 23620: u64 [s1 + 0x118] = a0\n 23624: t0 = 1042, jump @1418\n      : @944 [@dyn 521] (gas: 3)\n 23630: ra = 0x414\n 23634: ecalli 8 // 'hash_keccak_256'\n 23636: fallthrough\n      : @945 [@dyn 522] (gas: 11)\n 23637: a3 = u64 [s1 + 0x118]\n 23641: a0 = u64 [a3]\n 23643: a1 = u64 [a3 + 0x8]\n 23646: a2 = u64 [a3 + 0x10]\n 23649: a3 = u64 [a3 + 0x18]\n 23652: a0 = reverse a0\n 23654: a1 = reverse a1\n 23656: a2 = reverse a2\n 23658: a3 = reverse a3\n 23660: a4 = a3 + 0x3\n 23663: t0 = 1046, jump @1432\n      : @946 [@dyn 523] (gas: 7)\n 23669: a1 = u64 [s1 + 0xf8]\n 23673: u64 [a1] = a4\n 23675: u64 [a1 + 0x8] = a5\n 23678: u64 [a1 + 0x10] = a2\n 23681: u64 [a1 + 0x18] = a0\n 23684: a0 = s1 + 0x1cc0\n 23688: ra = 1048, jump @11\n      : @947 [@dyn 524] (gas: 9)\n 23694: a0 = s1 + 0x18b8\n 23698: a0 = u64 [a0 + 0x408]\n 23702: a1 = u64 [s1 + 0xe8]\n 23706: a0 = a0 + a1\n 23709: a0 = a0 & a1\n 23712: u64 [s1 + 0x118] = a0\n 23716: a0 = s1 + 0x1ca0\n 23720: a1 = u64 [s1 + 0xf8]\n 23724: ra = 1050, jump @11\n      : @948 [@dyn 525] (gas: 17)\n 23730: a3 = s1 + 0x18b8\n 23734: a0 = u32 [a3 + 0x3ec]\n 23738: a0 = a0 << 0x20\n 23741: a1 = u64 [a3 + 0x400]\n 23745: a2 = u64 [a3 + 0x3f8]\n 23749: a3 = u64 [a3 + 0x3f0]\n 23753: a4 = u64 [s1 + 0x118]\n 23757: a0 = a0 | a4\n 23760: a4 = s1 + 0x28b8\n 23764: a5 = a4 + 0x300\n 23768: u64 [a5 + 0x40] = a1\n 23771: u64 [a5 + 0x38] = a2\n 23774: u64 [a5 + 0x30] = a3\n 23777: u64 [a5 + 0x28] = a0\n 23780: a1 = s1 + 0x2be0\n 23784: a0 = u64 [s1 + 0xf8]\n 23788: ra = 1052, jump @12\n      : @949 [@dyn 526] (gas: 6)\n 23794: a0 = u64 [s1 + 0x100]\n 23798: ra = 0x41e\n 23802: ecalli 4 // 'caller'\n 23804: a2 = u64 [s1 + 0x108]\n 23808: t0 = 0x420\n 23812: jump @1419\n      : @950 [@dyn 527] (gas: 2)\n 23815: a2 = u64 [s1 + 0x108]\n 23819: t0 = 1056, jump @1419\n      : @951 [@dyn 528] (gas: 31)\n 23825: t0 = a1 | a0\n 23828: a3 = a3 >> 0x20\n 23831: a2 = reverse a2\n 23833: a1 = a2 << 0x20\n 23836: a1 = a1 | a3\n 23839: a2 = a2 >> 0x20\n 23842: a3 = u64 [s1 + 0xf0]\n 23846: a0 = s1 + 0x18b8\n 23850: u64 [a0 + 0x388] = a3\n 23854: a3 = u64 [0x20040]\n 23859: a4 = u64 [0x20048]\n 23864: a5 = u64 [0x20050]\n 23869: u64 [a0 + 0x3e0] = a3\n 23873: u64 [a0 + 0x3d8] = a4\n 23877: u64 [a0 + 928] = 0\n 23881: a4 = a0 + 0x300\n 23885: u64 [a4 + 0xd0] = a5\n 23889: a3 = u64 [0x20058]\n 23894: u64 [a0 + 920] = 0\n 23898: u64 [a0 + 912] = 0\n 23902: u64 [a0 + 960] = 0\n 23906: u64 [a4 + 0xc8] = a3\n 23910: u64 [a4 + 0xb8] = a2\n 23914: u64 [a4 + 0xb0] = a1\n 23918: a2 = s1 + 0x1c80\n 23922: a3 = s1 + 0x1c60\n 23926: a4 = s1 + 0x1c40\n 23930: u64 [a0 + 0x3a8] = t0\n 23934: a0 = 0\n 23936: a1 = 0\n 23938: ra = 1058, jump @15\n      : @952 [@dyn 529] (gas: 5)\n 23944: a0 = 0\n 23946: a1 = u64 [s1 + 0x110]\n 23950: a2 = 0\n 23952: ecalli 13 // 'seal_return'\n 23954: jump @988\n      : @953 (gas: 3)\n 23957: t0 = 0x424\n 23961: a2 = s1 + 0x18b8\n 23965: fallthrough\n      : @954 [@dyn 530] (gas: 9)\n 23966: u64 [a2 + 632] = 0\n 23970: u64 [a2 + 624] = 0\n 23974: a0 = 0xd5b25b6300000000\n 23984: u64 [a2 + 0x280] = a0\n 23988: a1 = s1 + 0x1b20\n 23992: u64 [a2 + 616] = 0\n 23996: a0 = 0\n 23998: ra = 0x50a\n 24002: jump @9\n      : @955 (gas: 6)\n 24005: a0 = u64 [s1 + 0x80]\n 24009: ra = 0x426\n 24013: ecalli 4 // 'caller'\n 24015: a2 = u64 [s1 + 0x88]\n 24019: t0 = 0x428\n 24023: jump @1413\n      : @956 [@dyn 531] (gas: 2)\n 24026: a2 = u64 [s1 + 0x88]\n 24030: t0 = 1064, jump @1413\n      : @957 [@dyn 532] (gas: 8)\n 24036: u64 [a2 + 416] = 0\n 24040: a4 = a2 + 0x100\n 24044: u64 [a4 + 0x98] = a1\n 24048: u64 [a4 + 0x90] = a0\n 24052: a1 = s1 + 0x1a40\n 24056: u64 [a4 + 0x88] = a3\n 24060: a0 = 0\n 24062: ra = 1066, jump @9\n      : @958 [@dyn 533] (gas: 3)\n 24068: t0 = 0x42c\n 24072: a1 = s1 + 0x18b8\n 24076: fallthrough\n      : @959 [@dyn 534] (gas: 8)\n 24077: u64 [a1 + 384] = 0\n 24081: u64 [a1 + 376] = 0\n 24085: u64 [a1 + 360] = 0x3\n 24090: a2 = a1\n 24092: a0 = 0x20\n 24095: a1 = s1 + 0x1a20\n 24099: u64 [a2 + 368] = 0\n 24103: ra = 1070, jump @9\n      : @960 [@dyn 535] (gas: 3)\n 24109: a0 = u64 [s1 + 0x98]\n 24113: a0 = i32 [a0]\n 24115: jump @962 if a0 >u 63\n      : @961 (gas: 4)\n 24119: a1 = u64 [s1 + 0x98]\n 24123: u32 [a1 + 0] = 0x40\n 24126: t0 = 0x430\n 24130: jump @1423\n      : @962 (gas: 1)\n 24133: t0 = 1072, jump @1423\n      : @963 [@dyn 536] (gas: 4)\n 24139: ra = 0x432\n 24143: ecalli 8 // 'hash_keccak_256'\n 24145: t0 = 0x434\n 24149: jump @1433\n      : @964 [@dyn 537] (gas: 1)\n 24152: t0 = 1076, jump @1433\n      : @965 [@dyn 538] (gas: 8)\n 24158: u64 [a2 + 352] = 0\n 24162: u64 [a2 + 344] = 0\n 24166: u64 [a2 + 336] = 0\n 24170: a1 = s1 + 0x1a00\n 24174: a0 = u64 [s1 + 0x118]\n 24178: u64 [a2 + 0x148] = a0\n 24182: a0 = 0\n 24184: ra = 1078, jump @9\n      : @966 [@dyn 539] (gas: 15)\n 24190: a0 = u64 [s1 + 0xf8]\n 24194: a1 = s1 + 0x18b8\n 24198: a2 = a1 + 0x100\n 24202: u64 [a2 + 0x40] = a0\n 24205: a4 = s1 + 0x100\n 24209: a0 = u64 [a4]\n 24211: u64 [a2 + 0x38] = a0\n 24214: a0 = u64 [a4 + 0x8]\n 24217: u64 [a2 + 0x30] = a0\n 24220: a3 = a1\n 24222: a0 = 0x20\n 24225: a1 = s1 + 0x19e0\n 24229: a2 = u64 [a4 + 0x10]\n 24232: u64 [a3 + 0x128] = a2\n 24236: ra = 1080, jump @9\n      : @967 [@dyn 540] (gas: 3)\n 24242: a0 = u64 [s1 + 0x98]\n 24246: a0 = i32 [a0]\n 24248: jump @969 if a0 >u 63\n      : @968 (gas: 4)\n 24252: a0 = u64 [s1 + 0x98]\n 24256: u32 [a0 + 0] = 0x40\n 24259: t0 = 0x43a\n 24263: jump @1423\n      : @969 (gas: 1)\n 24266: t0 = 1082, jump @1423\n      : @970 [@dyn 541] (gas: 5)\n 24272: ra = 0x43c\n 24276: ecalli 8 // 'hash_keccak_256'\n 24278: a3 = u64 [s1 + 0x110]\n 24282: t0 = 0x43e\n 24286: jump @1440\n      : @971 [@dyn 542] (gas: 2)\n 24289: a3 = u64 [s1 + 0x110]\n 24293: t0 = 1086, jump @1440\n      : @972 [@dyn 543] (gas: 5)\n 24299: u64 [s1 + 0x110] = a0\n 24303: sp = a0\n 24305: t0 = 0x440\n 24309: a2 = s1 + 0x18b8\n 24313: fallthrough\n      : @973 [@dyn 544] (gas: 8)\n 24314: u64 [a2 + 288] = 0\n 24318: u64 [a2 + 280] = 0\n 24322: u64 [a2 + 272] = 0\n 24326: a1 = s1 + 0x19c0\n 24330: a0 = u64 [s1 + 0x78]\n 24333: u64 [a2 + 0x108] = a0\n 24337: a0 = 0\n 24339: ra = 1090, jump @9\n      : @974 [@dyn 545] (gas: 13)\n 24345: a0 = u64 [s1 + 0xf0]\n 24349: a1 = s1 + 0x18b8\n 24353: u64 [a1 + 0x100] = a0\n 24357: a0 = u64 [s1 + 0xf8]\n 24361: u64 [a1 + 0xf8] = a0\n 24365: a0 = u64 [s1 + 0x100]\n 24369: u64 [a1 + 0xf0] = a0\n 24373: a3 = a1\n 24375: a0 = 0x20\n 24378: a1 = s1 + 0x19a0\n 24382: a2 = u64 [s1 + 0x108]\n 24386: u64 [a3 + 0xe8] = a2\n 24390: ra = 1092, jump @9\n      : @975 [@dyn 546] (gas: 3)\n 24396: a0 = u64 [s1 + 0x98]\n 24400: a0 = i32 [a0]\n 24402: jump @977 if a0 >=u 64\n      : @976 (gas: 3)\n 24406: a0 = u64 [s1 + 0x98]\n 24410: u32 [a0 + 0] = 0x40\n 24413: fallthrough\n      : @977 (gas: 12)\n 24414: a0 = sp + 0xffffffffffffffe0\n 24417: a0 = a0 & 0xffffffffffffffe0\n 24420: u64 [s1 + 0x108] = a0\n 24424: sp = a0\n 24426: i32 a2 = a0 + 0\n 24428: a1 = 0x40\n 24431: a0 = u64 [s1 + 0x90]\n 24435: ra = 0x446\n 24439: ecalli 8 // 'hash_keccak_256'\n 24441: a3 = u64 [s1 + 0x108]\n 24445: t0 = 0x448\n 24449: jump @1430\n      : @978 [@dyn 547] (gas: 2)\n 24452: a3 = u64 [s1 + 0x108]\n 24456: t0 = 1096, jump @1430\n      : @979 [@dyn 548] (gas: 7)\n 24462: a1 = u64 [s1 + 0x110]\n 24466: u64 [a1 + 0x18] = a3\n 24469: u64 [a1 + 0x10] = a2\n 24472: u64 [a1 + 0x8] = a4\n 24475: u64 [a1] = a0\n 24477: a0 = s1 + 0x1980\n 24481: ra = 1098, jump @11\n      : @980 [@dyn 549] (gas: 4)\n 24487: a0 = s1 + 0x18b8\n 24491: a0 = u64 [a0 + 0xc8]\n 24495: a1 = a0 & 0x1\n 24498: jump @1019 if a1 != 0\n      : @981 (gas: 11)\n 24502: a0 = s1 + 0x10b8\n 24506: u64 [a0 + 2040] = 0\n 24510: u64 [a0 + 2032] = 0\n 24514: u64 [a0 + 2024] = 0\n 24518: a0 = 0xafa4e2b600000000\n 24528: a1 = s1 + 0x18a0\n 24532: a2 = s1 + 0x18b8\n 24536: u64 [a2] = a0\n 24538: a0 = 0\n 24540: ra = 0x50a\n 24544: jump @9\n      : @982 (gas: 1)\n 24547: jump @986 if a0 != 1637274245\n      : @983 (gas: 9)\n 24554: a0 = s1 + 0x28b8\n 24558: u64 [a0 + 160] = 0\n 24562: u64 [a0 + 152] = 0\n 24566: u64 [a0 + 144] = 0\n 24570: u64 [a0 + 136] = 0\n 24574: a0 = s1 + 0x3000\n 24578: i32 a0 = a0 + 0xfffffffffffff940\n 24582: ecalli 16 // 'value_transferred'\n 24584: fallthrough\n      : @984 (gas: 9)\n 24585: a3 = s1 + 0x28b8\n 24589: a0 = u64 [a3 + 0x98]\n 24593: a1 = u64 [a3 + 0xa0]\n 24597: a2 = u64 [a3 + 0x90]\n 24601: a3 = u64 [a3 + 0x88]\n 24605: a1 = a1 | a2\n 24608: a0 = a0 | a3\n 24611: a0 = a0 | a1\n 24614: jump @1026 if a0 == 0\n      : @985 (gas: 6)\n 24618: a1 = 0x20180\n 24623: i32 a1 = a1 + 0\n 24625: a0 = 0x1\n 24628: a2 = 0\n 24630: ecalli 13 // 'seal_return'\n 24632: jump @988\n      : @986 (gas: 6)\n 24634: a1 = 0x20180\n 24639: i32 a1 = a1 + 0\n 24641: a0 = 0x1\n 24644: a2 = 0\n 24646: ecalli 13 // 'seal_return'\n 24648: jump @988\n      : @987 (gas: 5)\n 24650: i32 a1 = a1 + 0\n 24652: a0 = 0x1\n 24655: a2 = 0\n 24657: ecalli 13 // 'seal_return'\n 24659: fallthrough\n      : @988 (gas: 3)\n 24660: a0 = u64 [s1 + 0x118]\n 24664: a0 = i32 [a0]\n 24666: jump @1028 if a0 >u 99\n      : @989 (gas: 2)\n 24671: a1 = 0x20180\n 24676: jump @987\n      : @990 (gas: 5)\n 24678: a0 = s1 + 0x7ff\n 24682: a0 = a0 + 0x121\n 24686: ra = 0x44c\n 24690: t0 = 0x5ac\n 24694: jump @1476\n      : @991 [@dyn 550] (gas: 15)\n 24697: a1 = s1 + 0x7ff\n 24701: a1 = a1 + 0x99\n 24705: a0 = u64 [a1 + 0xa0]\n 24709: u64 [s1 + 0x78] = a0\n 24712: a0 = u64 [a1 + 0x98]\n 24716: u64 [s1 + 0x80] = a0\n 24720: a0 = u64 [a1 + 0x90]\n 24724: u64 [s1 + 0x98] = a0\n 24728: a0 = u64 [a1 + 0x88]\n 24732: u64 [s1 + 0x90] = a0\n 24736: a0 = s1 + 0x7ff\n 24740: a0 = a0 + 0x101\n 24744: ra = 0x44e\n 24748: t0 = 0x5b0\n 24752: jump @1488\n      : @992 [@dyn 551] (gas: 15)\n 24755: a1 = s1 + 0x7ff\n 24759: a1 = a1 + 0x99\n 24763: a0 = u64 [a1 + 0x80]\n 24767: u64 [s1 + 0x70] = a0\n 24770: a0 = u64 [a1 + 0x78]\n 24773: u64 [s1 + 0x68] = a0\n 24776: a0 = u64 [a1 + 0x70]\n 24779: u64 [s1 + 0x60] = a0\n 24782: a0 = u64 [a1 + 0x68]\n 24785: u64 [s1 + 0x88] = a0\n 24789: a0 = s1 + 0x7ff\n 24793: a0 = a0 + 0xe1\n 24797: ra = 0x450\n 24801: t0 = 0x5b6\n 24805: jump @1488\n      : @993 [@dyn 552] (gas: 8)\n 24808: a0 = s1 + 0x7ff\n 24812: a0 = a0 + 0x99\n 24816: a0 = u64 [a0 + 0x48]\n 24819: u64 [s1 + 0x58] = a0\n 24822: a0 = s1 + 0x2000\n 24826: i32 a0 = a0 + 0x720\n 24830: ecalli 9 // 'now'\n 24832: fallthrough\n      : @994 (gas: 49)\n 24833: a0 = s1 + 0x20b8\n 24837: t0 = u64 [a0 + 0x680]\n 24841: a4 = u64 [a0 + 0x678]\n 24845: u64 [s1 + 0xd8] = a4\n 24849: t2 = u64 [a0 + 0x670]\n 24853: a3 = u64 [a0 + 0x668]\n 24857: u64 [s1 + 0xc0] = a3\n 24861: a0 = clz t0\n 24863: a1 = clz a4\n 24865: a2 = a1 + 0x40\n 24868: a2 = a0 if t0 != 0\n 24871: a0 = clz t2\n 24873: a1 = clz a3\n 24875: a1 = a1 + 0x40\n 24878: a1 = a0 if t2 != 0\n 24881: a0 = a1 + 0x80\n 24885: a3 = a4 | t0\n 24888: a2 = a0 if a3 == 0\n 24891: a5 = a0 <u a1\n 24894: a5 = 0 if a3 != 0\n 24896: a4 = a5 >u 0\n 24898: a0 = a2 <u 0xf0\n 24902: a3 = a0 ^ 0x1\n 24905: a4 = a3 if a5 == 0\n 24908: a0 = a4 <u 0x1\n 24911: ra = a0 + 0xffffffffffffffff\n 24914: t1 = -a4\n 24916: a5 = -a5\n 24918: a3 = a5 - a3\n 24921: a2 = 0xef - a2\n 24925: a5 = t1 >u 0\n 24927: a0 = ra >u 0\n 24929: a0 = a5 if ra == 0\n 24932: a5 = a2 <u 0x100\n 24936: a5 = a5 ^ 0x1\n 24939: a1 = a3 >u 0\n 24941: a5 = a1 if a3 != 0\n 24944: a5 = a0 if a4 != 0\n 24947: u64 [s1 + 0xb8] = t2\n 24951: u64 [s1 + 0xd0] = t0\n 24955: a0 = t2 | t0\n 24958: a4 = u64 [s1 + 0xc0]\n 24962: a1 = u64 [s1 + 0xd8]\n 24966: a1 = a1 | a4\n 24969: a0 = a0 | a1\n 24972: a0 = a0 <u 0x1\n 24975: a0 = a0 | a5\n 24978: a4 = 0 if a0 != 0\n 24980: jump @1061 if a0 != 0\n      : @995 (gas: 1)\n 24984: t0 = 1106, jump @1466\n      : @996 [@dyn 553] (gas: 1)\n 24990: jump @1061 if a0 == 0\n      : @997 (gas: 1)\n 24994: t0 = 1108, jump @1417\n      : @998 [@dyn 554] (gas: 1)\n 25000: ra = 1110, jump @1493\n      : @999 [@dyn 555] (gas: 6)\n 25006: u64 [s1 + 0xc8] = a0\n 25010: u64 [s1 + 0xe8] = a1\n 25014: a0 = u64 [s1 + 0xd8]\n 25018: a1 = u64 [s1 + 0xd0]\n 25022: a2 = u64 [s1 + 0xe0]\n 25026: ra = 1112, jump @1498\n      : @1000 [@dyn 556] (gas: 1)\n 25032: t0 = 1114, jump @1489\n      : @1001 [@dyn 557] (gas: 1)\n 25038: ra = 1116, jump @1498\n      : @1002 [@dyn 558] (gas: 8)\n 25044: u64 [s1 + 0xa0] = a0\n 25048: u64 [s1 + 0x50] = a1\n 25051: a2 = u64 [s1 + 0xe0]\n 25055: a0 = a2 <u 0x80\n 25059: u64 [s1 + 0x48] = a0\n 25062: a0 = u64 [s1 + 0xc0]\n 25066: a1 = u64 [s1 + 0xb8]\n 25070: ra = 1118, jump @1498\n      : @1003 [@dyn 559] (gas: 1)\n 25076: t0 = 1120, jump @1454\n      : @1004 [@dyn 560] (gas: 4)\n 25082: a3 = u64 [s1 + 0x48]\n 25085: a0 = 0 if a3 == 0\n 25087: u64 [s1 + 0xf8] = a0\n 25091: jump @1059 if a1 == 0\n      : @1005 (gas: 7)\n 25095: a2 = a3\n 25097: a0 = u64 [s1 + 0xe8]\n 25101: a1 = u64 [s1 + 0xa8]\n 25105: a0 = a0 | a1\n 25108: a5 = a3\n 25110: a1 = u64 [s1 + 0x50]\n 25113: t0 = 1122, jump @1415\n      : @1006 [@dyn 561] (gas: 1)\n 25119: ra = 1124, jump @1493\n      : @1007 [@dyn 562] (gas: 6)\n 25125: u64 [s1 + 0xc8] = a0\n 25129: u64 [s1 + 0xa0] = a1\n 25133: a0 = u64 [s1 + 0xc0]\n 25137: a1 = u64 [s1 + 0xb8]\n 25141: a2 = u64 [s1 + 0x118]\n 25145: ra = 1126, jump @1493\n      : @1008 [@dyn 563] (gas: 2)\n 25151: u64 [s1 + 0x50] = a0\n 25154: t0 = 1128, jump @1464\n      : @1009 [@dyn 564] (gas: 1)\n 25160: ra = 1130, jump @1498\n      : @1010 [@dyn 565] (gas: 1)\n 25166: t0 = 1132, jump @1434\n      : @1011 [@dyn 566] (gas: 2)\n 25172: a1 = u64 [s1 + 0x50]\n 25175: t0 = 1134, jump @1455\n      : @1012 [@dyn 567] (gas: 1)\n 25181: ra = 1136, jump @1493\n      : @1013 [@dyn 568] (gas: 1)\n 25187: t0 = 1138, jump @1421\n      : @1014 [@dyn 569] (gas: 1)\n 25193: t0 = 1140, jump @1424\n      : @1015 [@dyn 570] (gas: 5)\n 25199: t0 = ra <u a2\n 25202: a4 = u64 [s1 + 0xa8]\n 25206: a5 = a4 <u a3\n 25209: a5 = t0 if t1 != 0\n 25212: t0 = 1142, jump @1431\n      : @1016 [@dyn 571] (gas: 20)\n 25218: t0 = a0 | a1\n 25221: a1 = a4 << 0x1\n 25224: a4 = u64 [s1 + 0xf0]\n 25228: t1 = a4 >> 0x3f\n 25231: t1 = a1 | t1\n 25234: a1 = a4 << 0x1\n 25237: a4 = u64 [s1 + 0xf8]\n 25241: t2 = a4 >> 0x3f\n 25244: a1 = a1 | t2\n 25247: a4 = a4 << 0x1\n 25250: a0 = u64 [s1 + 0xd8]\n 25254: a4 = a4 | a0\n 25257: u64 [s1 + 0xf8] = a4\n 25261: a0 = u64 [s1 + 0xd0]\n 25265: a1 = a1 | a0\n 25268: u64 [s1 + 0xf0] = a1\n 25272: a1 = a0 | t1\n 25275: u64 [s1 + 0xe0] = a1\n 25279: a0 = a0 | t0\n 25282: t0 = 1144, jump @1414\n      : @1017 [@dyn 572] (gas: 18)\n 25288: t0 = a4 <u a2\n 25291: a2 = a4 - a2\n 25294: a4 = a3 <u 0x1\n 25297: a5 = a5 - a4\n 25300: a4 = u64 [a0 + 0x8]\n 25303: a4 = a4 - t0\n 25306: a3 = a3 + 0xffffffffffffffff\n 25309: u64 [a0 + 0x10] = a5\n 25312: u64 [a0 + 0x8] = a4\n 25315: t0 = a5 | a4\n 25318: u64 [a0 + 0x18] = a3\n 25321: a4 = a3 | a2\n 25324: a3 = a4 | t0\n 25327: a4 = ra & 0x1\n 25330: u64 [s1 + 0xd8] = a4\n 25334: u64 [a0] = a2\n 25336: u64 [s1 + 208] = 0\n 25340: jump @1014 if a3 != 0\n      : @1018 (gas: 1)\n 25344: jump @1060\n      : @1019 (gas: 2)\n 25347: a1 = a0 & 0x2\n 25350: jump @1128 if a1 != 0\n      : @1020 (gas: 5)\n 25354: a0 = a0 & 0xfd\n 25358: u64 [s1 + 0x108] = a0\n 25362: a0 = s1 + 0x1940\n 25366: a1 = u64 [s1 + 0x110]\n 25370: ra = 1146, jump @11\n      : @1021 [@dyn 573] (gas: 18)\n 25376: a3 = s1 + 0x18b8\n 25380: a0 = u64 [a3 + 0x88]\n 25384: a1 = u64 [a3 + 0x90]\n 25388: a2 = u64 [a3 + 0x98]\n 25392: a3 = u64 [a3 + 0xa0]\n 25396: a0 = a0 & 0xffffffffffffff00\n 25400: a4 = u64 [s1 + 0x108]\n 25404: a0 = a0 | a4\n 25407: a0 = a0 + 0x2\n 25410: a4 = s1 + 0x28b8\n 25414: a5 = a4 + 0x200\n 25418: u64 [a5 + 0xe0] = a3\n 25422: u64 [a5 + 0xd8] = a2\n 25426: u64 [a5 + 0xd0] = a1\n 25430: u64 [a5 + 0xc8] = a0\n 25434: a1 = s1 + 0x2b80\n 25438: a0 = u64 [s1 + 0x110]\n 25442: ra = 1148, jump @12\n      : @1022 [@dyn 574] (gas: 6)\n 25448: a0 = u64 [s1 + 0x80]\n 25452: ra = 0x47e\n 25456: ecalli 4 // 'caller'\n 25458: a2 = u64 [s1 + 0x88]\n 25462: t0 = 0x480\n 25466: jump @1419\n      : @1023 [@dyn 575] (gas: 2)\n 25469: a2 = u64 [s1 + 0x88]\n 25473: t0 = 1152, jump @1419\n      : @1024 [@dyn 576] (gas: 37)\n 25479: a0 = a0 | a1\n 25482: a3 = a3 >> 0x20\n 25485: a2 = reverse a2\n 25487: a1 = a2 << 0x20\n 25490: a1 = a1 | a3\n 25493: a2 = a2 >> 0x20\n 25496: a5 = s1 + 0x18b8\n 25500: u64 [a5 + 32] = 0\n 25503: u64 [a5 + 24] = 0\n 25506: u64 [a5 + 16] = 0\n 25509: a3 = u64 [s1 + 0x118]\n 25513: u64 [a5 + 0x8] = a3\n 25516: a3 = u64 [s1 + 0x78]\n 25519: u64 [a5 + 0x28] = a3\n 25522: a3 = u64 [0x20060]\n 25527: a4 = u64 [0x20068]\n 25532: u64 [a5 + 64] = 0\n 25535: u64 [a5 + 56] = 0\n 25538: u64 [a5 + 0x80] = a3\n 25542: u64 [a5 + 0x78] = a4\n 25545: a3 = u64 [0x20070]\n 25550: a4 = u64 [0x20078]\n 25555: u64 [a5 + 48] = 0\n 25558: u64 [a5 + 96] = 0\n 25561: u64 [a5 + 0x70] = a3\n 25564: u64 [a5 + 0x68] = a4\n 25567: u64 [a5 + 0x58] = a2\n 25570: u64 [a5 + 0x50] = a1\n 25573: a1 = a5\n 25575: a2 = s1 + 0x1920\n 25579: a3 = s1 + 0x1900\n 25583: a4 = s1 + 0x18e0\n 25587: a5 = s1 + 0x18c0\n 25591: u64 [a1 + 0x48] = a0\n 25594: a0 = 0\n 25596: a1 = 0\n 25598: ra = 1154, jump @18\n      : @1025 [@dyn 577] (gas: 5)\n 25604: a0 = 0\n 25606: a1 = u64 [s1 + 0x90]\n 25610: a2 = 0\n 25612: ecalli 13 // 'seal_return'\n 25614: jump @988\n      : @1026 (gas: 3)\n 25617: a0 = u64 [s1 + 0x118]\n 25621: a0 = i32 [a0]\n 25623: jump @1133 if a0 >u 99\n      : @1027 (gas: 2)\n 25628: a1 = 0x20180\n 25633: jump @987\n      : @1028 (gas: 5)\n 25636: a0 = s1 + 0x7ff\n 25640: a0 = a0 + 0x7c1\n 25644: ra = 0x484\n 25648: t0 = 0x5ac\n 25652: jump @1476\n      : @1029 [@dyn 578] (gas: 16)\n 25655: a1 = s1 + 0x7ff\n 25659: a1 = a1 + 0x99\n 25663: a2 = a1 + 0x700\n 25667: a0 = u64 [a2 + 0x40]\n 25670: u64 [s1 + 0x70] = a0\n 25673: a0 = u64 [a2 + 0x38]\n 25676: u64 [s1 + 0x78] = a0\n 25679: a0 = u64 [a2 + 0x30]\n 25682: u64 [s1 + 0xb8] = a0\n 25686: a0 = u64 [a2 + 0x28]\n 25689: u64 [s1 + 0xb0] = a0\n 25693: a0 = s1 + 0x7ff\n 25697: a0 = a0 + 0x7a1\n 25701: ra = 0x486\n 25705: t0 = 0x5b0\n 25709: jump @1488\n      : @1030 [@dyn 579] (gas: 16)\n 25712: a1 = s1 + 0x7ff\n 25716: a1 = a1 + 0x99\n 25720: a2 = a1 + 0x700\n 25724: a0 = u64 [a2 + 0x20]\n 25727: u64 [s1 + 0x48] = a0\n 25730: a0 = u64 [a2 + 0x18]\n 25733: u64 [s1 + 0x40] = a0\n 25736: a0 = u64 [a2 + 0x10]\n 25739: u64 [s1 + 0x38] = a0\n 25742: a0 = u64 [a2 + 0x8]\n 25745: u64 [s1 + 0x30] = a0\n 25748: a0 = s1 + 0x7ff\n 25752: a0 = a0 + 0x781\n 25756: ra = 0x488\n 25760: t0 = 0x5b6\n 25764: jump @1488\n      : @1031 [@dyn 580] (gas: 4)\n 25767: a0 = s1 + 0x7ff\n 25771: a0 = a0 + 0x99\n 25775: a2 = u32 [a0 + 0x6e8]\n 25779: t0 = 1162, jump @1486\n      : @1032 [@dyn 581] (gas: 3)\n 25785: u64 [s1 + 0x90] = a2\n 25789: a1 = a0 if a2 == 0\n 25792: jump @1034 if a1 == 0\n      : @1033 (gas: 1)\n 25795: jump @1199\n      : @1034 (gas: 17)\n 25798: a0 = u64 [s1 + 0x78]\n 25801: a0 = a0 << 0x20\n 25804: a2 = a0 >> 0x20\n 25807: a3 = s1 + 0x7ff\n 25811: a3 = a3 + 0x99\n 25815: u64 [a3 + 1728] = 0\n 25819: a0 = u64 [s1 + 0xb0]\n 25823: a4 = a3 + 0x600\n 25827: u64 [a4 + 0xa8] = a0\n 25831: a0 = u64 [s1 + 0xb8]\n 25835: u64 [a4 + 0xb0] = a0\n 25839: a1 = s1 + 0x7ff\n 25843: a1 = a1 + 0x741\n 25847: u64 [s1 + 0x88] = a2\n 25851: u64 [a4 + 0xb8] = a2\n 25855: a0 = 0\n 25857: ra = 1164, jump @9\n      : @1035 [@dyn 582] (gas: 11)\n 25863: a1 = s1 + 0x7ff\n 25867: a1 = a1 + 0x99\n 25871: u64 [a1 + 1696] = 0\n 25875: u64 [a1 + 1688] = 0\n 25879: u64 [a1 + 1672] = 0x2\n 25884: a2 = a1\n 25886: a0 = 0x20\n 25889: a1 = s1 + 0x7ff\n 25893: a1 = a1 + 0x721\n 25897: u64 [a2 + 1680] = 0\n 25901: ra = 1166, jump @9\n      : @1036 [@dyn 583] (gas: 4)\n 25907: a0 = 0x20170\n 25912: u64 [s1 + 0x118] = a0\n 25916: a0 = i32 [0x20170]\n 25921: jump @1038 if a0 >u 63\n      : @1037 (gas: 1)\n 25925: t0 = 1168, jump @1475\n      : @1038 [@dyn 584] (gas: 16)\n 25931: a0 = 0xffffffff\n 25941: u64 [s1 + 0xc8] = a0\n 25945: a0 = sp + 0xffffffffffffffe0\n 25948: a2 = a0 & 0xffffffffffffffe0\n 25951: u64 [s1 + 0x108] = a2\n 25955: sp = a2\n 25957: a0 = 0x20180\n 25962: i32 a0 = a0 + 0\n 25964: i32 a2 = a2 + 0\n 25966: a1 = 0x40\n 25969: u64 [s1 + 0x110] = a0\n 25973: ra = 0x492\n 25977: ecalli 8 // 'hash_keccak_256'\n 25979: a3 = u64 [s1 + 0x108]\n 25983: t0 = 0x494\n 25987: jump @1452\n      : @1039 [@dyn 585] (gas: 2)\n 25990: a3 = u64 [s1 + 0x108]\n 25994: t0 = 1172, jump @1452\n      : @1040 [@dyn 586] (gas: 9)\n 26000: u64 [a4] = a3\n 26002: a3 = a4 + 0xffffffffffffff00\n 26006: u64 [a3 + 0xf8] = a2\n 26010: u64 [a3 + 0xf0] = a1\n 26014: u64 [a3 + 0xe8] = a0\n 26018: a0 = s1 + 0x7ff\n 26022: a0 = a0 + 0x701\n 26026: a1 = s1 + 0x28a0\n 26030: ra = 1174, jump @11\n      : @1041 [@dyn 587] (gas: 8)\n 26036: a0 = s1 + 0x7ff\n 26040: a0 = a0 + 0x99\n 26044: a0 = u64 [a0 + 0x668]\n 26048: u64 [s1 + 0x28] = a0\n 26051: a0 = s1 + 0x3000\n 26055: i32 a0 = a0 + 0xfffffffffffff8c0\n 26059: ecalli 9 // 'now'\n 26061: fallthrough\n      : @1042 (gas: 51)\n 26062: a0 = s1 + 0x28b8\n 26066: t0 = u64 [a0 + 0x20]\n 26069: a4 = u64 [a0 + 0x18]\n 26072: u64 [s1 + 0xd0] = a4\n 26076: t2 = u64 [a0 + 0x10]\n 26079: a3 = u64 [a0 + 0x8]\n 26082: u64 [s1 + 0x108] = a3\n 26086: a0 = clz t0\n 26088: a1 = clz a4\n 26090: a2 = a1 + 0x40\n 26093: a2 = a0 if t0 != 0\n 26096: a0 = clz t2\n 26098: a1 = clz a3\n 26100: a1 = a1 + 0x40\n 26103: a1 = a0 if t2 != 0\n 26106: a0 = a1 + 0x80\n 26110: a3 = a4 | t0\n 26113: a2 = a0 if a3 == 0\n 26116: a5 = a0 <u a1\n 26119: a5 = 0 if a3 != 0\n 26121: a4 = a5 >u 0\n 26123: a0 = a2 <u 0xf0\n 26127: a3 = a0 ^ 0x1\n 26130: a4 = a3 if a5 == 0\n 26133: a0 = a4 <u 0x1\n 26136: ra = a0 + 0xffffffffffffffff\n 26139: t1 = -a4\n 26141: a5 = -a5\n 26143: a3 = a5 - a3\n 26146: a2 = 0xef - a2\n 26150: a5 = t1 >u 0\n 26152: a0 = ra >u 0\n 26154: a0 = a5 if ra == 0\n 26157: a5 = a2 <u 0x100\n 26161: a5 = a5 ^ 0x1\n 26164: a1 = a3 >u 0\n 26166: a5 = a1 if a3 != 0\n 26169: a5 = a0 if a4 != 0\n 26172: u64 [s1 + 0x100] = t2\n 26176: u64 [s1 + 0x98] = t0\n 26180: a0 = t2 | t0\n 26183: a4 = u64 [s1 + 0x108]\n 26187: a1 = u64 [s1 + 0xd0]\n 26191: a1 = a1 | a4\n 26194: a0 = a0 | a1\n 26197: a0 = a0 <u 0x1\n 26200: a0 = a0 | a5\n 26203: a1 = a4\n 26205: a1 = 0 if a0 != 0\n 26207: u64 [s1 + 0x80] = a1\n 26211: jump @1044 if a0 == 0\n      : @1043 (gas: 1)\n 26214: jump @1205\n      : @1044 (gas: 1)\n 26217: t0 = 1176, jump @1466\n      : @1045 [@dyn 588] (gas: 1)\n 26223: jump @1047 if a0 != 0\n      : @1046 (gas: 1)\n 26226: jump @1205\n      : @1047 (gas: 18)\n 26229: a1 = a2 + 0x1\n 26232: u64 [s1 + 0xf8] = a1\n 26236: a0 = a1 <u 0x1\n 26239: a0 = a0 + a3\n 26242: u64 [s1 + 0xe8] = a0\n 26246: a0 = a0 | a1\n 26249: a0 = a0 <u 0x1\n 26252: a0 = a0 + t1\n 26255: u64 [s1 + 0xd8] = a0\n 26259: a0 = a0 <u t1\n 26262: a0 = a0 + ra\n 26265: u64 [s1 + 0xe0] = a0\n 26269: a1 = 0xff - a2\n 26273: u64 [s1 + 0xa0] = a1\n 26277: a2 = 0x80 - a1\n 26281: a0 = u64 [s1 + 0x108]\n 26285: a1 = u64 [s1 + 0x100]\n 26289: ra = 1178, jump @1493\n      : @1048 [@dyn 589] (gas: 6)\n 26295: u64 [s1 + 0x80] = a0\n 26299: u64 [s1 + 0xa8] = a1\n 26303: a0 = u64 [s1 + 0xd0]\n 26307: a1 = u64 [s1 + 0x98]\n 26311: a2 = u64 [s1 + 0xa0]\n 26315: ra = 1180, jump @1498\n      : @1049 [@dyn 590] (gas: 7)\n 26321: u64 [s1 + 0x68] = a0\n 26324: u64 [s1 + 0x60] = a1\n 26327: a0 = u64 [s1 + 0xa0]\n 26331: a2 = a0 + 0xffffffffffffff80\n 26334: a0 = u64 [s1 + 0x108]\n 26338: a1 = u64 [s1 + 0x100]\n 26342: ra = 1182, jump @1498\n      : @1050 [@dyn 591] (gas: 8)\n 26348: u64 [s1 + 0x58] = a0\n 26351: u64 [s1 + 0x50] = a1\n 26354: a2 = u64 [s1 + 0xa0]\n 26358: a0 = a2 <u 0x80\n 26362: u64 [s1 + 0x20] = a0\n 26365: a0 = u64 [s1 + 0x108]\n 26369: a1 = u64 [s1 + 0x100]\n 26373: ra = 1184, jump @1498\n      : @1051 [@dyn 592] (gas: 12)\n 26379: u64 [s1 + 0xf0] = a1\n 26383: a1 = u64 [s1 + 0xe8]\n 26387: a2 = u64 [s1 + 0xe0]\n 26391: a2 = a2 | a1\n 26394: a1 = u64 [s1 + 0xf8]\n 26398: a3 = u64 [s1 + 0xd8]\n 26402: a1 = a1 | a3\n 26405: a1 = a1 | a2\n 26408: a3 = u64 [s1 + 0x20]\n 26411: a0 = 0 if a3 == 0\n 26413: u64 [s1 + 0xc0] = a0\n 26417: jump @1203 if a1 == 0\n      : @1052 (gas: 30)\n 26421: a2 = a3\n 26423: a0 = u64 [s1 + 0xa8]\n 26427: a1 = u64 [s1 + 0x60]\n 26430: a0 = a0 | a1\n 26433: a5 = a3\n 26435: a1 = u64 [s1 + 0x50]\n 26438: a0 = a1 if a2 == 0\n 26441: a2 = u64 [s1 + 0x98]\n 26445: a3 = a2\n 26447: a1 = a2\n 26449: a2 = u64 [s1 + 0xa0]\n 26453: a3 = a0 if a2 != 0\n 26456: u64 [s1 + 0xa8] = a3\n 26460: a0 = u64 [s1 + 0x80]\n 26464: a3 = u64 [s1 + 0x68]\n 26467: a0 = a0 | a3\n 26470: a3 = u64 [s1 + 0x58]\n 26473: a0 = a3 if a5 == 0\n 26476: a4 = u64 [s1 + 0xd0]\n 26480: a3 = a4\n 26482: a3 = a0 if a2 != 0\n 26485: u64 [s1 + 0xa0] = a3\n 26489: a0 = u64 [s1 + 0xf0]\n 26493: a0 = 0 if a5 == 0\n 26495: u64 [s1 + 0xf0] = a0\n 26499: u64 [s1 + 96] = 0x15180\n 26505: a0 = u64 [s1 + 0xf8]\n 26509: a2 = a0 + 0xffffffffffffff80\n 26512: a0 = a4\n 26514: ra = 1186, jump @1493\n      : @1053 [@dyn 593] (gas: 6)\n 26520: u64 [s1 + 0x80] = a0\n 26524: u64 [s1 + 0x68] = a1\n 26527: a0 = u64 [s1 + 0x108]\n 26531: a1 = u64 [s1 + 0x100]\n 26535: a2 = u64 [s1 + 0xf8]\n 26539: ra = 1188, jump @1493\n      : @1054 [@dyn 594] (gas: 7)\n 26545: u64 [s1 + 0x50] = a0\n 26548: u64 [s1 + 0x58] = a1\n 26551: a1 = u64 [s1 + 0xf8]\n 26555: a2 = 0x80 - a1\n 26559: a0 = u64 [s1 + 0xd0]\n 26563: a1 = u64 [s1 + 0x98]\n 26567: ra = 1190, jump @1498\n      : @1055 [@dyn 595] (gas: 21)\n 26573: a2 = u64 [s1 + 0x58]\n 26576: a1 = a1 | a2\n 26579: a2 = u64 [s1 + 0xf8]\n 26583: a3 = a2 <u 0x80\n 26587: u64 [s1 + 0x58] = a3\n 26590: a4 = u64 [s1 + 0x68]\n 26593: a1 = a4 if a3 == 0\n 26596: a5 = s1 + 0x100\n 26600: a4 = u64 [a5]\n 26602: a4 = a1 if a2 != 0\n 26605: u64 [a5] = a4\n 26607: a1 = u64 [s1 + 0x50]\n 26610: a0 = a0 | a1\n 26613: a1 = u64 [s1 + 0x80]\n 26617: a0 = a1 if a3 == 0\n 26620: a1 = u64 [a5 + 0x8]\n 26623: a1 = a0 if a2 != 0\n 26626: u64 [a5 + 0x8] = a1\n 26629: a0 = u64 [s1 + 0xd0]\n 26633: a1 = u64 [s1 + 0x98]\n 26637: ra = 1192, jump @1493\n      : @1056 [@dyn 596] (gas: 13)\n 26643: u64 [s1 + 208] = 0\n 26647: u64 [s1 + 152] = 0\n 26651: a2 = u64 [s1 + 0x58]\n 26654: a1 = 0 if a2 == 0\n 26656: u64 [s1 + 0x80] = a1\n 26660: a0 = 0 if a2 == 0\n 26662: a3 = u64 [s1 + 0x60]\n 26665: a2 = a3 + 0xffffffffffffffff\n 26668: u64 [s1 + 0x58] = a2\n 26671: a2 = a3 >u 0\n 26673: a2 = a2 + 0xffffffffffffffff\n 26676: u64 [s1 + 0x50] = a2\n 26679: fallthrough\n      : @1057 (gas: 91)\n 26680: a4 = u64 [s1 + 0x108]\n 26684: a2 = a4 >> 0x3f\n 26687: t1 = u64 [s1 + 0x100]\n 26691: a3 = t1 << 0x1\n 26694: ra = a3 | a2\n 26697: a3 = a4 << 0x1\n 26700: t2 = u64 [s1 + 0xa8]\n 26704: a4 = t2 >> 0x3f\n 26707: a3 = a3 | a4\n 26710: u64 [s1 + 0x68] = a3\n 26713: a2 = u64 [s1 + 0x50]\n 26716: a1 = a2 ^ ra\n 26719: t0 = a2 <u ra\n 26722: a4 = u64 [s1 + 0x58]\n 26725: a5 = a4 <u a3\n 26728: a5 = t0 if a1 != 0\n 26731: a1 = u64 [s1 + 0x80]\n 26735: a1 = a1 << 0x1\n 26738: a3 = a0 >> 0x3f\n 26741: a1 = a1 | a3\n 26744: u64 [s1 + 0x80] = a1\n 26748: a3 = t1 >> 0x3f\n 26751: a0 = a0 << 0x1\n 26754: a3 = a3 | a0\n 26757: a0 = t2 << 0x1\n 26760: a4 = u64 [s1 + 0xa0]\n 26764: a1 = a4 >> 0x3f\n 26767: t0 = a0 | a1\n 26770: a1 = a4 << 0x1\n 26773: a4 = u64 [s1 + 0xf0]\n 26777: t1 = a4 >> 0x3f\n 26780: t1 = a1 | t1\n 26783: a1 = a4 << 0x1\n 26786: a4 = u64 [s1 + 0xc0]\n 26790: t2 = a4 >> 0x3f\n 26793: a1 = a1 | t2\n 26796: a4 = a4 << 0x1\n 26799: a0 = u64 [s1 + 0xd0]\n 26803: a4 = a4 | a0\n 26806: u64 [s1 + 0xc0] = a4\n 26810: a0 = u64 [s1 + 0x98]\n 26814: a1 = a1 | a0\n 26817: u64 [s1 + 0xf0] = a1\n 26821: a1 = a0 | t1\n 26824: u64 [s1 + 0xa0] = a1\n 26828: a0 = a0 | t0\n 26831: u64 [s1 + 0xa8] = a0\n 26835: a0 = a2 - a3\n 26838: a0 = a0 <u a5\n 26841: a1 = a2 <u a3\n 26844: a5 = u64 [s1 + 0x80]\n 26848: a4 = a2 - a5\n 26851: a4 = a4 - a1\n 26854: a4 = a4 - a0\n 26857: t1 = a4 >>a 0x3f\n 26860: a0 = u64 [s1 + 0x60]\n 26863: a0 = t1 & a0\n 26866: a2 = u64 [s1 + 0x68]\n 26869: a1 = a2 - a0\n 26872: u64 [s1 + 0x108] = a1\n 26876: a1 = a2 <u a0\n 26879: a0 = ra - a1\n 26882: u64 [s1 + 0x100] = a0\n 26886: a1 = 0 if ra != 0\n 26888: a0 = a3 - a1\n 26891: a1 = a3 <u a1\n 26894: a1 = a5 - a1\n 26897: u64 [s1 + 0x80] = a1\n 26901: a5 = u64 [s1 + 0xf8]\n 26905: a3 = u64 [s1 + 0xe8]\n 26909: a2 = a5 | a3\n 26912: a2 = a2 <u 0x1\n 26915: a4 = u64 [s1 + 0xd8]\n 26919: t0 = a4 <u a2\n 26922: a2 = a4 - a2\n 26925: a4 = a5 <u 0x1\n 26928: a3 = a3 - a4\n 26931: a4 = u64 [s1 + 0xe0]\n 26935: a4 = a4 - t0\n 26938: a5 = a5 + 0xffffffffffffffff\n 26941: u64 [s1 + 0xe8] = a3\n 26945: u64 [s1 + 0xe0] = a4\n 26949: a3 = a3 | a4\n 26952: u64 [s1 + 0xf8] = a5\n 26956: a4 = a5 | a2\n 26959: a3 = a3 | a4\n 26962: a4 = t1 & 0x1\n 26965: u64 [s1 + 0xd0] = a4\n 26969: u64 [s1 + 0xd8] = a2\n 26973: u64 [s1 + 152] = 0\n 26977: jump @1057 if a3 != 0\n      : @1058 (gas: 1)\n 26981: jump @1204\n      : @1059 (gas: 2)\n 26984: u64 [s1 + 216] = 0\n 26988: fallthrough\n      : @1060 (gas: 5)\n 26989: a0 = u64 [s1 + 0xf8]\n 26993: a0 = a0 << 0x1\n 26996: a4 = u64 [s1 + 0xd8]\n 27000: a4 = a4 | a0\n 27003: fallthrough\n      : @1061 (gas: 2)\n 27004: a0 = u64 [s1 + 0x88]\n 27008: jump @1063 if a0 <u a4\n      : @1062 (gas: 1)\n 27011: jump @1259\n      : @1063 (gas: 9)\n 27014: a0 = u64 [s1 + 0x58]\n 27017: a0 = a0 << 0x20\n 27020: a1 = a0 >> 0x20\n 27023: a0 = a1 + 0xffffffffffffffff\n 27026: a0 = a0 <u 0x32\n 27029: a0 = 0 if a1 == 0\n 27031: u64 [s1 + 0xb8] = a1\n 27035: a0 = 0 if a1 == 0\n 27037: jump @1065 if a0 != 0\n      : @1064 (gas: 1)\n 27040: jump @1263\n      : @1065 (gas: 20)\n 27043: a0 = 0xffffffff\n 27053: u64 [s1 + 0xf8] = a0\n 27057: a0 = u64 [s1 + 0x80]\n 27061: a0 = a0 << 0x20\n 27064: a2 = a0 >> 0x20\n 27067: a0 = s1 + 0x7ff\n 27071: a0 = a0 + 0x99\n 27075: u64 [a0 + 0] = 0\n 27077: a1 = u64 [s1 + 0x90]\n 27081: a3 = s1 + 0x1000\n 27085: u64 [a3 + 0xfffffffffffff880] = a1\n 27089: a1 = u64 [s1 + 0x98]\n 27093: a3 = s1 + 0x1000\n 27097: u64 [a3 + 0xfffffffffffff888] = a1\n 27101: a1 = s1 + 0x7ff\n 27105: a1 = a1 + 0x81\n 27109: u64 [s1 + 0xc0] = a2\n 27113: u64 [a0 + 0xfffffffffffffff8] = a2\n 27116: a0 = 0\n 27118: ra = 1194, jump @9\n      : @1066 [@dyn 597] (gas: 12)\n 27124: a0 = s1 + 0x1000\n 27128: u64 [a0 + 4294965368] = 0\n 27132: a0 = s1 + 0x1000\n 27136: u64 [a0 + 4294965360] = 0\n 27140: a1 = s1 + 0x1000\n 27144: u64 [a1 + 4294965344] = 0x2\n 27149: a0 = 0x20\n 27152: a1 = s1 + 0x7ff\n 27156: a1 = a1 + 0x61\n 27159: a2 = s1 + 0x1000\n 27163: u64 [a2 + 4294965352] = 0\n 27167: ra = 1196, jump @9\n      : @1067 [@dyn 598] (gas: 5)\n 27173: a0 = 0x20170\n 27178: u64 [s1 + 0x118] = a0\n 27182: a0 = i32 [0x20170]\n 27187: a1 = 0x3f\n 27190: jump @1069 if a1 <u a0\n      : @1068 (gas: 1)\n 27193: t0 = 1198, jump @1475\n      : @1069 [@dyn 599] (gas: 3)\n 27199: a0 = 0xffffffff00000000\n 27209: u64 [s1 + 0xb0] = a0\n 27213: t0 = 1200, jump @1478\n      : @1070 [@dyn 600] (gas: 10)\n 27219: a0 = 0x20180\n 27224: i32 a0 = a0 + 0\n 27226: i32 a2 = a2 + 0\n 27228: a1 = 0x40\n 27231: u64 [s1 + 0x108] = a0\n 27235: ra = 0x4b2\n 27239: ecalli 8 // 'hash_keccak_256'\n 27241: a3 = u64 [s1 + 0x110]\n 27245: t0 = 0x4b4\n 27249: jump @1429\n      : @1071 [@dyn 601] (gas: 2)\n 27252: a3 = u64 [s1 + 0x110]\n 27256: t0 = 1204, jump @1429\n      : @1072 [@dyn 602] (gas: 9)\n 27262: a5 = a4 + 0x600\n 27266: u64 [a5 + 0xa0] = a3\n 27270: u64 [a5 + 0x98] = a2\n 27274: u64 [a5 + 0x90] = a1\n 27278: u64 [a5 + 0x88] = a0\n 27282: a0 = s1 + 0x7ff\n 27286: a0 = a0 + 0x41\n 27289: a1 = s1 + 0x2740\n 27293: ra = 1206, jump @11\n      : @1073 [@dyn 603] (gas: 9)\n 27299: a0 = s1 + 0x1000\n 27303: a0 = u64 [a0 + 0xfffffffffffff840]\n 27307: u64 [s1 + 200] = 0\n 27311: a3 = 0\n 27313: a1 = u64 [s1 + 0xf8]\n 27317: a0 = a0 & a1\n 27320: u64 [s1 + 0xa8] = a0\n 27324: a2 = 0x1\n 27327: fallthrough\n      : @1074 (gas: 11)\n 27328: a1 = 0\n 27330: a1 = 0 if a3 == 0\n 27332: a0 = u64 [s1 + 0xa8]\n 27336: u64 [s1 + 0x110] = a2\n 27340: a0 = a0 <u a2\n 27343: a2 = 0\n 27345: a2 = a0 if a3 == 0\n 27348: u64 [s1 + 256] = 0\n 27352: a0 = 0\n 27354: a2 = a1 if a0 != 0\n 27357: jump @1076 if a2 == 0\n      : @1075 (gas: 1)\n 27360: jump @1267\n      : @1076 (gas: 5)\n 27363: a0 = u64 [s1 + 0xf8]\n 27367: a1 = u64 [s1 + 0xc8]\n 27371: a0 = a0 & a1\n 27374: a1 = u64 [s1 + 0xb8]\n 27378: jump @1078 if a0 <u a1\n      : @1077 (gas: 1)\n 27381: jump @1267\n      : @1078 (gas: 15)\n 27384: a0 = s1 + 0x1000\n 27388: u64 [a0 + 4294965304] = 0\n 27392: a0 = u64 [s1 + 0x90]\n 27396: a1 = s1 + 0x1000\n 27400: u64 [a1 + 0xfffffffffffff820] = a0\n 27404: a0 = u64 [s1 + 0x98]\n 27408: a1 = s1 + 0x1000\n 27412: u64 [a1 + 0xfffffffffffff828] = a0\n 27416: a1 = s1 + 0x7ff\n 27420: a1 = a1 + 0x21\n 27423: a0 = u64 [s1 + 0xc0]\n 27427: a2 = s1 + 0x1000\n 27431: u64 [a2 + 0xfffffffffffff830] = a0\n 27435: a0 = 0\n 27437: ra = 1208, jump @9\n      : @1079 [@dyn 604] (gas: 12)\n 27443: a0 = s1 + 0x1000\n 27447: u64 [a0 + 4294965272] = 0\n 27451: a0 = s1 + 0x1000\n 27455: u64 [a0 + 4294965264] = 0\n 27459: a0 = s1 + 0x1000\n 27463: u64 [a0 + 4294965256] = 0\n 27467: a0 = 0x20\n 27470: a1 = s1 + 0x7ff\n 27474: a1 = a1 + 0x1\n 27477: a3 = s1 + 0x1000\n 27481: u64 [a3 + 4294965248] = 0x1\n 27486: ra = 1210, jump @9\n      : @1080 [@dyn 605] (gas: 1)\n 27492: t0 = 1212, jump @1461\n      : @1081 [@dyn 606] (gas: 1)\n 27498: jump @1083 if a1 <u a0\n      : @1082 (gas: 1)\n 27501: t0 = 1214, jump @1475\n      : @1083 [@dyn 607] (gas: 1)\n 27507: t0 = 1216, jump @1447\n      : @1084 [@dyn 608] (gas: 4)\n 27513: ra = 0x4c2\n 27517: ecalli 8 // 'hash_keccak_256'\n 27519: t0 = 0x4c4\n 27523: jump @1435\n      : @1085 [@dyn 609] (gas: 1)\n 27526: t0 = 1220, jump @1435\n      : @1086 [@dyn 610] (gas: 8)\n 27532: u64 [s1 + 0x7f8] = a0\n 27536: u64 [s1 + 0x7f0] = a0\n 27540: u64 [s1 + 0x7e8] = a0\n 27544: a1 = s1 + 0x7e0\n 27548: a0 = u64 [s1 + 0x110]\n 27552: u64 [s1 + 0x7e0] = a0\n 27556: a0 = 0\n 27558: ra = 1222, jump @9\n      : @1087 [@dyn 611] (gas: 12)\n 27564: a0 = u64 [s1 + 0xd0]\n 27568: a3 = s1 + 0x700\n 27572: u64 [a3 + 0xd8] = a0\n 27576: a0 = u64 [s1 + 0xd8]\n 27580: u64 [a3 + 0xd0] = a0\n 27584: a0 = u64 [s1 + 0xe0]\n 27588: u64 [a3 + 0xc8] = a0\n 27592: a0 = 0x20\n 27595: a1 = s1 + 0x7c0\n 27599: a2 = u64 [s1 + 0xe8]\n 27603: u64 [a3 + 0xc0] = a2\n 27607: ra = 1224, jump @9\n      : @1088 [@dyn 612] (gas: 1)\n 27613: t0 = 1226, jump @1461\n      : @1089 [@dyn 613] (gas: 1)\n 27619: jump @1091 if a1 <u a0\n      : @1090 (gas: 1)\n 27622: t0 = 1228, jump @1480\n      : @1091 [@dyn 614] (gas: 1)\n 27628: t0 = 1230, jump @1471\n      : @1092 [@dyn 615] (gas: 4)\n 27634: ra = 0x4d0\n 27638: ecalli 8 // 'hash_keccak_256'\n 27640: t0 = 0x4d2\n 27644: jump @1436\n      : @1093 [@dyn 616] (gas: 1)\n 27647: t0 = 1234, jump @1436\n      : @1094 [@dyn 617] (gas: 2)\n 27653: a0 = s1 + 0x7a0\n 27657: ra = 1236, jump @11\n      : @1095 [@dyn 618] (gas: 11)\n 27663: a3 = s1 + 0x700\n 27667: a0 = u64 [a3 + 0xa8]\n 27671: a1 = u64 [a3 + 0xb0]\n 27675: a2 = u64 [a3 + 0xa0]\n 27679: a0 = a0 & 0xffffffffffffffff\n 27682: a1 = a1 & 0xffffffffffffffff\n 27685: a3 = u64 [s1 + 0xb0]\n 27689: a2 = a2 & a3\n 27692: a1 = a1 | a2\n 27695: a0 = a0 | a1\n 27698: jump @1127 if a0 == 0\n      : @1096 (gas: 1)\n 27702: t0 = 1238, jump @1449\n      : @1097 [@dyn 619] (gas: 9)\n 27708: a4 = s1 + 0x20b8\n 27712: a5 = a4 + 0x600\n 27716: u64 [a5 + 0xa8] = a0\n 27720: u64 [a5 + 0xb0] = a2\n 27724: u64 [a5 + 0xb8] = a3\n 27728: u64 [a5 + 0xc0] = a1\n 27732: a0 = s1 + 0x780\n 27736: a1 = s1 + 0x2760\n 27740: ra = 1240, jump @11\n      : @1098 [@dyn 620] (gas: 3)\n 27746: a0 = u64 [s1 + 0x788]\n 27750: a0 = a0 & 0xff\n 27754: jump @1127 if a0 != 0\n      : @1099 (gas: 10)\n 27758: u64 [s1 + 1912] = 0\n 27762: a0 = u64 [s1 + 0x90]\n 27766: u64 [s1 + 0x760] = a0\n 27770: a0 = u64 [s1 + 0x98]\n 27774: u64 [s1 + 0x768] = a0\n 27778: a1 = s1 + 0x760\n 27782: a0 = u64 [s1 + 0xc0]\n 27786: u64 [s1 + 0x770] = a0\n 27790: a0 = 0\n 27792: ra = 1242, jump @9\n      : @1100 [@dyn 621] (gas: 7)\n 27798: u64 [s1 + 1880] = 0\n 27802: u64 [s1 + 1872] = 0\n 27806: u64 [s1 + 1864] = 0\n 27810: a0 = 0x20\n 27813: a1 = s1 + 0x740\n 27817: u64 [s1 + 1856] = 0x3\n 27822: ra = 1244, jump @9\n      : @1101 [@dyn 622] (gas: 1)\n 27828: t0 = 1246, jump @1461\n      : @1102 [@dyn 623] (gas: 1)\n 27834: jump @1104 if a1 <u a0\n      : @1103 (gas: 1)\n 27837: t0 = 1248, jump @1480\n      : @1104 [@dyn 624] (gas: 1)\n 27843: t0 = 1250, jump @1447\n      : @1105 [@dyn 625] (gas: 4)\n 27849: ra = 0x4e4\n 27853: ecalli 8 // 'hash_keccak_256'\n 27855: t0 = 0x4e6\n 27859: jump @1426\n      : @1106 [@dyn 626] (gas: 1)\n 27862: t0 = 1254, jump @1426\n      : @1107 [@dyn 627] (gas: 8)\n 27868: u64 [s1 + 1848] = 0\n 27872: u64 [s1 + 1840] = 0\n 27876: u64 [s1 + 1832] = 0\n 27880: a1 = s1 + 0x720\n 27884: a0 = u64 [s1 + 0x88]\n 27888: u64 [s1 + 0x720] = a0\n 27892: a0 = 0\n 27894: ra = 1256, jump @9\n      : @1108 [@dyn 628] (gas: 12)\n 27900: a0 = u64 [s1 + 0xd8]\n 27904: a3 = s1 + 0x700\n 27908: u64 [a3 + 0x18] = a0\n 27911: a0 = u64 [s1 + 0xe0]\n 27915: u64 [a3 + 0x10] = a0\n 27918: a0 = u64 [s1 + 0xe8]\n 27922: u64 [a3 + 0x8] = a0\n 27925: a0 = 0x20\n 27928: a1 = s1 + 0x700\n 27932: a2 = u64 [s1 + 0xf0]\n 27936: u64 [a3] = a2\n 27938: ra = 1258, jump @9\n      : @1109 [@dyn 629] (gas: 1)\n 27944: t0 = 1260, jump @1461\n      : @1110 [@dyn 630] (gas: 1)\n 27950: jump @1112 if a1 <u a0\n      : @1111 (gas: 1)\n 27953: t0 = 1262, jump @1480\n      : @1112 [@dyn 631] (gas: 1)\n 27959: t0 = 1264, jump @1447\n      : @1113 [@dyn 632] (gas: 4)\n 27965: ra = 0x4f2\n 27969: ecalli 8 // 'hash_keccak_256'\n 27971: t0 = 0x4f4\n 27975: jump @1435\n      : @1114 [@dyn 633] (gas: 1)\n 27978: t0 = 1268, jump @1435\n      : @1115 [@dyn 634] (gas: 8)\n 27984: u64 [s1 + 0x6f8] = a0\n 27988: u64 [s1 + 0x6f0] = a0\n 27992: u64 [s1 + 0x6e8] = a0\n 27996: a1 = s1 + 0x6e0\n 28000: a0 = u64 [s1 + 0x110]\n 28004: u64 [s1 + 0x6e0] = a0\n 28008: a0 = 0\n 28010: ra = 1270, jump @9\n      : @1116 [@dyn 635] (gas: 12)\n 28016: a0 = u64 [s1 + 0xd0]\n 28020: a3 = s1 + 0x600\n 28024: u64 [a3 + 0xd8] = a0\n 28028: a0 = u64 [s1 + 0xd8]\n 28032: u64 [a3 + 0xd0] = a0\n 28036: a0 = u64 [s1 + 0xe0]\n 28040: u64 [a3 + 0xc8] = a0\n 28044: a0 = 0x20\n 28047: a1 = s1 + 0x6c0\n 28051: a2 = u64 [s1 + 0xe8]\n 28055: u64 [a3 + 0xc0] = a2\n 28059: ra = 1272, jump @9\n      : @1117 [@dyn 636] (gas: 1)\n 28065: t0 = 1274, jump @1461\n      : @1118 [@dyn 637] (gas: 1)\n 28071: jump @1120 if a1 <u a0\n      : @1119 (gas: 1)\n 28074: t0 = 1276, jump @1480\n      : @1120 [@dyn 638] (gas: 1)\n 28080: t0 = 1278, jump @1471\n      : @1121 [@dyn 639] (gas: 5)\n 28086: ra = 0x500\n 28090: ecalli 8 // 'hash_keccak_256'\n 28092: a3 = u64 [s1 + 0xe8]\n 28096: t0 = 0x502\n 28100: jump @1425\n      : @1122 [@dyn 640] (gas: 2)\n 28103: a3 = u64 [s1 + 0xe8]\n 28107: t0 = 1282, jump @1425\n      : @1123 [@dyn 641] (gas: 2)\n 28113: a0 = s1 + 0x6a0\n 28117: ra = 1284, jump @11\n      : @1124 [@dyn 642] (gas: 3)\n 28123: a0 = u64 [s1 + 0x6a0]\n 28127: a0 = a0 & 0x5\n 28130: jump @1127 if a0 != 1\n      : @1125 (gas: 27)\n 28134: a0 = u64 [s1 + 0x110]\n 28138: a4 = s1 + 0x600\n 28142: u64 [a4 + 0x40] = a0\n 28145: a0 = u64 [s1 + 0x88]\n 28149: u64 [a4 + 0x60] = a0\n 28152: a0 = u64 [s1 + 0x90]\n 28156: u64 [a4 + 0x80] = a0\n 28160: a1 = u64 [s1 + 0x100]\n 28164: u64 [a4 + 0x48] = a1\n 28167: a0 = u64 [s1 + 0x60]\n 28170: u64 [a4 + 0x68] = a0\n 28173: a0 = u64 [s1 + 0x98]\n 28177: u64 [a4 + 0x88] = a0\n 28181: u64 [a4 + 0x50] = a1\n 28184: a0 = u64 [s1 + 0x68]\n 28187: u64 [a4 + 0x70] = a0\n 28190: a0 = u64 [s1 + 0x80]\n 28194: u64 [a4 + 0x90] = a0\n 28198: u64 [a4 + 0x58] = a1\n 28201: a0 = u64 [s1 + 0x70]\n 28204: u64 [a4 + 0x78] = a0\n 28207: a0 = s1 + 0x680\n 28211: a1 = s1 + 0x660\n 28215: a2 = s1 + 0x640\n 28219: a3 = u64 [s1 + 0x78]\n 28222: u64 [a4 + 0x98] = a3\n 28226: ra = 1286, jump @1328\n      : @1126 [@dyn 643] (gas: 6)\n 28232: a0 = u64 [s1 + 0xc8]\n 28236: a0 = a0 + 0x1\n 28239: a1 = u64 [s1 + 0xf8]\n 28243: a0 = a0 & a1\n 28246: u64 [s1 + 0xc8] = a0\n 28250: fallthrough\n      : @1127 (gas: 6)\n 28251: a3 = 0\n 28253: a0 = u64 [s1 + 0x110]\n 28257: a0 = a0 + 0x1\n 28260: a1 = u64 [s1 + 0xf8]\n 28264: a2 = a0 & a1\n 28267: jump @1074\n      : @1128 (gas: 3)\n 28270: t0 = 0x508\n 28274: a2 = s1 + 0x18b8\n 28278: fallthrough\n      : @1129 [@dyn 644] (gas: 8)\n 28279: u64 [a2 + 184] = 0\n 28283: u64 [a2 + 176] = 0\n 28287: a0 = 0xc98289f000000000\n 28297: u64 [a2 + 0xc0] = a0\n 28301: a1 = s1 + 0x1960\n 28305: u64 [a2 + 168] = 0\n 28309: a0 = 0\n 28311: ra = 1290, jump @9\n      : @1130 [@dyn 645] (gas: 3)\n 28317: a0 = u64 [s1 + 0x98]\n 28321: a0 = i32 [a0]\n 28323: jump @1132 if a0 >u 31\n      : @1131 (gas: 3)\n 28327: a1 = u64 [s1 + 0x98]\n 28331: u32 [a1 + 0] = 0x20\n 28334: fallthrough\n      : @1132 (gas: 5)\n 28335: a0 = 0x1\n 28338: a2 = 0x4\n 28341: a1 = u64 [s1 + 0x90]\n 28345: ecalli 13 // 'seal_return'\n 28347: fallthrough\n      : @1133 (gas: 4)\n 28348: a0 = s1 + 0x12e0\n 28352: ra = 0x50c\n 28356: t0 = 0x5ac\n 28360: jump @1476\n      : @1134 [@dyn 646] (gas: 14)\n 28363: a1 = s1 + 0x10b8\n 28367: a2 = a1 + 0x200\n 28371: a0 = u64 [a2 + 0x40]\n 28374: u64 [s1 + 0x80] = a0\n 28378: a0 = u64 [a2 + 0x38]\n 28381: u64 [s1 + 0x88] = a0\n 28385: a0 = u64 [a2 + 0x30]\n 28388: u64 [s1 + 0xc8] = a0\n 28392: a0 = u64 [a2 + 0x28]\n 28395: u64 [s1 + 0xc0] = a0\n 28399: a0 = s1 + 0x12c0\n 28403: ra = 0x50e\n 28407: t0 = 0x5b0\n 28411: jump @1488\n      : @1135 [@dyn 647] (gas: 14)\n 28414: a1 = s1 + 0x10b8\n 28418: a2 = a1 + 0x200\n 28422: a0 = u64 [a2 + 0x20]\n 28425: u64 [s1 + 0x78] = a0\n 28428: a0 = u64 [a2 + 0x18]\n 28431: u64 [s1 + 0x70] = a0\n 28434: a0 = u64 [a2 + 0x10]\n 28437: u64 [s1 + 0x68] = a0\n 28440: a0 = u64 [a2 + 0x8]\n 28443: u64 [s1 + 0x90] = a0\n 28447: a0 = s1 + 0x12a0\n 28451: ra = 0x510\n 28455: t0 = 0x5b6\n 28459: jump @1488\n      : @1136 [@dyn 648] (gas: 3)\n 28462: a0 = s1 + 0x10b8\n 28466: a2 = u32 [a0 + 0x1e8]\n 28470: t0 = 1298, jump @1486\n      : @1137 [@dyn 649] (gas: 3)\n 28476: u64 [s1 + 0xa8] = a2\n 28480: a1 = a0 if a2 == 0\n 28483: jump @1268 if a1 != 0\n      : @1138 (gas: 17)\n 28487: a0 = 0xffffffff\n 28497: u64 [s1 + 0xf8] = a0\n 28501: a0 = u64 [s1 + 0x88]\n 28505: a0 = a0 << 0x20\n 28508: a2 = a0 >> 0x20\n 28511: a3 = s1 + 0x10b8\n 28515: u64 [a3 + 448] = 0\n 28519: a0 = u64 [s1 + 0xc0]\n 28523: a4 = a3 + 0x100\n 28527: u64 [a4 + 0xa8] = a0\n 28531: a0 = u64 [s1 + 0xc8]\n 28535: u64 [a4 + 0xb0] = a0\n 28539: a1 = s1 + 0x1260\n 28543: u64 [s1 + 0xb8] = a2\n 28547: u64 [a4 + 0xb8] = a2\n 28551: a0 = 0\n 28553: ra = 1300, jump @9\n      : @1139 [@dyn 650] (gas: 3)\n 28559: t0 = 0x516\n 28563: a1 = s1 + 0x10b8\n 28567: fallthrough\n      : @1140 [@dyn 651] (gas: 8)\n 28568: u64 [a1 + 416] = 0\n 28572: u64 [a1 + 408] = 0\n 28576: u64 [a1 + 392] = 0x2\n 28581: a2 = a1\n 28583: a0 = 0x20\n 28586: a1 = s1 + 0x1240\n 28590: u64 [a2 + 400] = 0\n 28594: ra = 1304, jump @9\n      : @1141 [@dyn 652] (gas: 5)\n 28600: a0 = 0x20170\n 28605: u64 [s1 + 0x110] = a0\n 28609: a0 = i32 [0x20170]\n 28614: a1 = 0x3f\n 28617: jump @1143 if a1 <u a0\n      : @1142 (gas: 3)\n 28620: a1 = u64 [s1 + 0x110]\n 28624: u32 [a1 + 0] = 0x40\n 28627: fallthrough\n      : @1143 (gas: 3)\n 28628: a0 = 0xffffffff00000000\n 28638: u64 [s1 + 0xa0] = a0\n 28642: t0 = 1306, jump @1465\n      : @1144 [@dyn 653] (gas: 10)\n 28648: a0 = 0x20180\n 28653: i32 a0 = a0 + 0\n 28655: i32 a2 = a2 + 0\n 28657: a1 = 0x40\n 28660: u64 [s1 + 0x100] = a0\n 28664: ra = 0x51c\n 28668: ecalli 8 // 'hash_keccak_256'\n 28670: a3 = u64 [s1 + 0x118]\n 28674: t0 = 0x51e\n 28678: jump @1452\n      : @1145 [@dyn 654] (gas: 2)\n 28681: a3 = u64 [s1 + 0x118]\n 28685: t0 = 1310, jump @1452\n      : @1146 [@dyn 655] (gas: 7)\n 28691: u64 [a4 + 0xc0] = a3\n 28695: u64 [a4 + 0xb8] = a2\n 28699: u64 [a4 + 0xb0] = a1\n 28703: u64 [a4 + 0xa8] = a0\n 28707: a0 = s1 + 0x1220\n 28711: a1 = s1 + 0x2960\n 28715: ra = 1312, jump @11\n      : @1147 [@dyn 656] (gas: 9)\n 28721: a0 = s1 + 0x10b8\n 28725: a0 = u64 [a0 + 0x168]\n 28729: u64 [s1 + 176] = 0\n 28733: u64 [s1 + 264] = 0\n 28737: a1 = u64 [s1 + 0xf8]\n 28741: a0 = a0 & a1\n 28744: u64 [s1 + 0x98] = a0\n 28748: a0 = 0x1\n 28751: fallthrough\n      : @1148 (gas: 14)\n 28752: a4 = s1 + 0x100\n 28756: u64 [a4 + 0x18] = a0\n 28759: a3 = u64 [a4 + 0x8]\n 28762: a0 = a3 >u 0\n 28764: a1 = a3 >u 0\n 28766: a1 = a0 if a3 == 0\n 28769: a0 = u64 [s1 + 0x98]\n 28773: a2 = u64 [a4 + 0x18]\n 28776: a0 = a0 <u a2\n 28779: a2 = a3 >u 0\n 28781: a2 = a0 if a3 == 0\n 28784: a0 = a3 | a3\n 28787: a2 = a1 if a0 != 0\n 28790: jump @1273 if a2 != 0\n      : @1149 (gas: 5)\n 28794: a0 = u64 [s1 + 0xf8]\n 28798: a1 = u64 [s1 + 0xb0]\n 28802: a0 = a0 & a1\n 28805: a1 = u64 [s1 + 0xa8]\n 28809: jump @1273 if a0 >=u a1\n      : @1150 (gas: 3)\n 28813: t0 = 0x522\n 28817: a2 = s1 + 0x10b8\n 28821: fallthrough\n      : @1151 [@dyn 657] (gas: 11)\n 28822: u64 [a2 + 352] = 0\n 28826: a0 = u64 [s1 + 0xc0]\n 28830: a3 = a2 + 0x100\n 28834: u64 [a3 + 0x48] = a0\n 28837: a0 = u64 [s1 + 0xc8]\n 28841: u64 [a3 + 0x50] = a0\n 28844: a1 = s1 + 0x1200\n 28848: a0 = u64 [s1 + 0xb8]\n 28852: u64 [a3 + 0x58] = a0\n 28855: a0 = 0\n 28857: ra = 1316, jump @9\n      : @1152 [@dyn 658] (gas: 9)\n 28863: a0 = s1 + 0x10b8\n 28867: u64 [a0 + 320] = 0\n 28871: u64 [a0 + 312] = 0\n 28875: u64 [a0 + 304] = 0\n 28879: a3 = a0\n 28881: a0 = 0x20\n 28884: a1 = s1 + 0x11e0\n 28888: u64 [a3 + 296] = 0x1\n 28893: ra = 1318, jump @9\n      : @1153 [@dyn 659] (gas: 3)\n 28899: a0 = u64 [s1 + 0x110]\n 28903: a0 = i32 [a0]\n 28905: jump @1155 if a0 >u 63\n      : @1154 (gas: 4)\n 28909: a0 = u64 [s1 + 0x110]\n 28913: u32 [a0 + 0] = 0x40\n 28916: t0 = 0x528\n 28920: jump @1448\n      : @1155 (gas: 1)\n 28923: t0 = 1320, jump @1448\n      : @1156 [@dyn 660] (gas: 4)\n 28929: ra = 0x52a\n 28933: ecalli 8 // 'hash_keccak_256'\n 28935: t0 = 0x52c\n 28939: jump @1427\n      : @1157 [@dyn 661] (gas: 1)\n 28942: t0 = 1324, jump @1427\n      : @1158 [@dyn 662] (gas: 9)\n 28948: a3 = a2 + 0x100\n 28952: u64 [a3 + 0x20] = a0\n 28955: u64 [a3 + 0x18] = a0\n 28958: u64 [a3 + 0x10] = a0\n 28961: a1 = s1 + 0x11c0\n 28965: a0 = u64 [s1 + 0x118]\n 28969: u64 [a3 + 0x8] = a0\n 28972: a0 = 0\n 28974: ra = 1326, jump @9\n      : @1159 [@dyn 663] (gas: 13)\n 28980: a0 = u64 [s1 + 0xd0]\n 28984: a1 = s1 + 0x10b8\n 28988: u64 [a1 + 0x100] = a0\n 28992: a0 = u64 [s1 + 0xd8]\n 28996: u64 [a1 + 0xf8] = a0\n 29000: a0 = u64 [s1 + 0xe0]\n 29004: u64 [a1 + 0xf0] = a0\n 29008: a3 = a1\n 29010: a0 = 0x20\n 29013: a1 = s1 + 0x11a0\n 29017: a2 = u64 [s1 + 0xe8]\n 29021: u64 [a3 + 0xe8] = a2\n 29025: ra = 1328, jump @9\n      : @1160 [@dyn 664] (gas: 3)\n 29031: a0 = u64 [s1 + 0x110]\n 29035: a0 = i32 [a0]\n 29037: jump @1162 if a0 >u 63\n      : @1161 (gas: 4)\n 29041: a0 = u64 [s1 + 0x110]\n 29045: u32 [a0 + 0] = 0x40\n 29048: t0 = 0x532\n 29052: jump @1472\n      : @1162 (gas: 1)\n 29055: t0 = 1330, jump @1472\n      : @1163 [@dyn 665] (gas: 4)\n 29061: ra = 0x534\n 29065: ecalli 8 // 'hash_keccak_256'\n 29067: t0 = 0x536\n 29071: jump @1436\n      : @1164 [@dyn 666] (gas: 1)\n 29074: t0 = 1334, jump @1436\n      : @1165 [@dyn 667] (gas: 2)\n 29080: a0 = s1 + 0x1180\n 29084: ra = 1336, jump @11\n      : @1166 [@dyn 668] (gas: 2)\n 29090: a2 = s1 + 0x10b8\n 29094: fallthrough\n      : @1167 (gas: 10)\n 29095: a0 = u64 [a2 + 0xd0]\n 29099: a1 = u64 [a2 + 0xd8]\n 29103: a2 = u64 [a2 + 0xc8]\n 29107: a0 = a0 & 0xffffffffffffffff\n 29110: a1 = a1 & 0xffffffffffffffff\n 29113: a3 = u64 [s1 + 0xa0]\n 29117: a2 = a2 & a3\n 29120: a1 = a1 | a2\n 29123: a0 = a0 | a1\n 29126: jump @1198 if a0 == 0\n      : @1168 (gas: 1)\n 29130: t0 = 1338, jump @1449\n      : @1169 [@dyn 669] (gas: 8)\n 29136: a4 = s1 + 0x28b8\n 29140: u64 [a4 + 0xc8] = a0\n 29144: u64 [a4 + 0xd0] = a2\n 29148: u64 [a4 + 0xd8] = a3\n 29152: u64 [a4 + 0xe0] = a1\n 29156: a0 = s1 + 0x1160\n 29160: a1 = s1 + 0x2980\n 29164: ra = 1340, jump @11\n      : @1170 [@dyn 670] (gas: 4)\n 29170: a0 = s1 + 0x10b8\n 29174: a0 = u64 [a0 + 0xb0]\n 29178: a0 = a0 & 0xff\n 29182: jump @1198 if a0 != 0\n      : @1171 (gas: 3)\n 29186: t0 = 0x53e\n 29190: a2 = s1 + 0x10b8\n 29194: fallthrough\n      : @1172 [@dyn 671] (gas: 10)\n 29195: u64 [a2 + 160] = 0\n 29199: a0 = u64 [s1 + 0xc0]\n 29203: u64 [a2 + 0x88] = a0\n 29207: a0 = u64 [s1 + 0xc8]\n 29211: u64 [a2 + 0x90] = a0\n 29215: a1 = s1 + 0x1140\n 29219: a0 = u64 [s1 + 0xb8]\n 29223: u64 [a2 + 0x98] = a0\n 29227: a0 = 0\n 29229: ra = 1344, jump @9\n      : @1173 [@dyn 672] (gas: 9)\n 29235: a0 = s1 + 0x10b8\n 29239: u64 [a0 + 128] = 0\n 29243: u64 [a0 + 120] = 0\n 29246: u64 [a0 + 112] = 0\n 29249: a3 = a0\n 29251: a0 = 0x20\n 29254: a1 = s1 + 0x1120\n 29258: u64 [a3 + 104] = 0x3\n 29262: ra = 1346, jump @9\n      : @1174 [@dyn 673] (gas: 3)\n 29268: a0 = u64 [s1 + 0x110]\n 29272: a0 = i32 [a0]\n 29274: jump @1176 if a0 >u 63\n      : @1175 (gas: 4)\n 29278: a0 = u64 [s1 + 0x110]\n 29282: u32 [a0 + 0] = 0x40\n 29285: t0 = 0x544\n 29289: jump @1448\n      : @1176 (gas: 1)\n 29292: t0 = 1348, jump @1448\n      : @1177 [@dyn 674] (gas: 4)\n 29298: ra = 0x546\n 29302: ecalli 8 // 'hash_keccak_256'\n 29304: t0 = 0x548\n 29308: jump @1426\n      : @1178 [@dyn 675] (gas: 1)\n 29311: t0 = 1352, jump @1426\n      : @1179 [@dyn 676] (gas: 3)\n 29317: t0 = 0x54a\n 29321: a2 = s1 + 0x10b8\n 29325: fallthrough\n      : @1180 [@dyn 677] (gas: 8)\n 29326: u64 [a2 + 96] = 0\n 29329: u64 [a2 + 88] = 0\n 29332: u64 [a2 + 80] = 0\n 29335: a1 = s1 + 0x1100\n 29339: a0 = u64 [s1 + 0x90]\n 29343: u64 [a2 + 0x48] = a0\n 29346: a0 = 0\n 29348: ra = 1356, jump @9\n      : @1181 [@dyn 678] (gas: 13)\n 29354: a0 = u64 [s1 + 0xd8]\n 29358: a1 = s1 + 0x10b8\n 29362: u64 [a1 + 0x40] = a0\n 29365: a0 = u64 [s1 + 0xe0]\n 29369: u64 [a1 + 0x38] = a0\n 29372: a0 = u64 [s1 + 0xe8]\n 29376: u64 [a1 + 0x30] = a0\n 29379: a3 = a1\n 29381: a0 = 0x20\n 29384: a1 = s1 + 0x10e0\n 29388: a2 = u64 [s1 + 0xf0]\n 29392: u64 [a3 + 0x28] = a2\n 29395: ra = 1358, jump @9\n      : @1182 [@dyn 679] (gas: 3)\n 29401: a0 = u64 [s1 + 0x110]\n 29405: a0 = i32 [a0]\n 29407: jump @1184 if a0 >u 63\n      : @1183 (gas: 4)\n 29411: a0 = u64 [s1 + 0x110]\n 29415: u32 [a0 + 0] = 0x40\n 29418: t0 = 0x550\n 29422: jump @1448\n      : @1184 (gas: 1)\n 29425: t0 = 1360, jump @1448\n      : @1185 [@dyn 680] (gas: 4)\n 29431: ra = 0x552\n 29435: ecalli 8 // 'hash_keccak_256'\n 29437: t0 = 0x554\n 29441: jump @1427\n      : @1186 [@dyn 681] (gas: 1)\n 29444: t0 = 1364, jump @1427\n      : @1187 [@dyn 682] (gas: 8)\n 29450: u64 [a2 + 0x20] = a0\n 29453: u64 [a2 + 0x18] = a0\n 29456: u64 [a2 + 0x10] = a0\n 29459: a1 = s1 + 0x10c0\n 29463: a0 = u64 [s1 + 0x118]\n 29467: u64 [a2 + 0x8] = a0\n 29470: a0 = 0\n 29472: ra = 1366, jump @9\n      : @1188 [@dyn 683] (gas: 13)\n 29478: a0 = u64 [s1 + 0xd0]\n 29482: a1 = s1 + 0x10b8\n 29486: u64 [a1] = a0\n 29488: a0 = u64 [s1 + 0xd8]\n 29492: u64 [a1 + 0xfffffffffffffff8] = a0\n 29495: a0 = u64 [s1 + 0xe0]\n 29499: u64 [a1 + 0xfffffffffffffff0] = a0\n 29502: a3 = a1\n 29504: a0 = 0x20\n 29507: a1 = s1 + 0x10a0\n 29511: a2 = u64 [s1 + 0xe8]\n 29515: u64 [a3 + 0xffffffffffffffe8] = a2\n 29518: ra = 1368, jump @9\n      : @1189 [@dyn 684] (gas: 3)\n 29524: a0 = u64 [s1 + 0x110]\n 29528: a0 = i32 [a0]\n 29530: jump @1191 if a0 >u 63\n      : @1190 (gas: 4)\n 29534: a0 = u64 [s1 + 0x110]\n 29538: u32 [a0 + 0] = 0x40\n 29541: t0 = 0x55a\n 29545: jump @1472\n      : @1191 (gas: 1)\n 29548: t0 = 1370, jump @1472\n      : @1192 [@dyn 685] (gas: 5)\n 29554: ra = 0x55c\n 29558: ecalli 8 // 'hash_keccak_256'\n 29560: a3 = u64 [s1 + 0xe8]\n 29564: t0 = 0x55e\n 29568: jump @1425\n      : @1193 [@dyn 686] (gas: 2)\n 29571: a3 = u64 [s1 + 0xe8]\n 29575: t0 = 1374, jump @1425\n      : @1194 [@dyn 687] (gas: 2)\n 29581: a0 = s1 + 0x1080\n 29585: ra = 1376, jump @11\n      : @1195 [@dyn 688] (gas: 5)\n 29591: a0 = s1 + 0x7ff\n 29595: a0 = a0 + 0x99\n 29599: a0 = u64 [a0 + 0x7e8]\n 29603: a0 = a0 & 0x5\n 29606: jump @1198 if a0 != 1\n      : @1196 (gas: 29)\n 29611: a3 = s1 + 0x7ff\n 29615: a3 = a3 + 0x99\n 29619: a0 = u64 [s1 + 0x118]\n 29623: a5 = a3 + 0x700\n 29627: u64 [a5 + 0x88] = a0\n 29631: a0 = u64 [s1 + 0x90]\n 29635: u64 [a5 + 0xa8] = a0\n 29639: a0 = u64 [s1 + 0xc0]\n 29643: u64 [a5 + 0xc8] = a0\n 29647: a1 = u64 [s1 + 0x108]\n 29651: u64 [a5 + 0x90] = a1\n 29655: a0 = u64 [s1 + 0x68]\n 29658: u64 [a5 + 0xb0] = a0\n 29662: a0 = u64 [s1 + 0xc8]\n 29666: u64 [a5 + 0xd0] = a0\n 29670: u64 [a5 + 0x98] = a1\n 29674: a0 = u64 [s1 + 0x70]\n 29677: u64 [a5 + 0xb8] = a0\n 29681: a0 = u64 [s1 + 0x88]\n 29685: u64 [a5 + 0xd8] = a0\n 29689: u64 [a5 + 0xa0] = a1\n 29693: a0 = u64 [s1 + 0x78]\n 29696: u64 [a5 + 0xc0] = a0\n 29700: a0 = s1 + 0x1060\n 29704: a1 = s1 + 0x1040\n 29708: a2 = s1 + 0x1020\n 29712: a4 = u64 [s1 + 0x80]\n 29716: u64 [a5 + 0xe0] = a4\n 29720: ra = 1378, jump @1328\n      : @1197 [@dyn 689] (gas: 6)\n 29726: a0 = u64 [s1 + 0xb0]\n 29730: a0 = a0 + 0x1\n 29733: a1 = u64 [s1 + 0xf8]\n 29737: a0 = a0 & a1\n 29740: u64 [s1 + 0xb0] = a0\n 29744: fallthrough\n      : @1198 (gas: 6)\n 29745: u64 [s1 + 264] = 0\n 29749: a0 = u64 [s1 + 0x118]\n 29753: a0 = a0 + 0x1\n 29756: a1 = u64 [s1 + 0xf8]\n 29760: a0 = a0 & a1\n 29763: jump @1148\n      : @1199 (gas: 11)\n 29766: a2 = s1 + 0x7ff\n 29770: a2 = a2 + 0x99\n 29774: u64 [a2 + 1752] = 0\n 29778: u64 [a2 + 1744] = 0\n 29782: a0 = 0x7862e95900000000\n 29792: u64 [a2 + 0x6e0] = a0\n 29796: a1 = s1 + 0x7ff\n 29800: a1 = a1 + 0x761\n 29804: u64 [a2 + 1736] = 0\n 29808: a0 = 0\n 29810: ra = 1380, jump @9\n      : @1200 [@dyn 690] (gas: 2)\n 29816: a1 = i32 [0x20170]\n 29821: jump @1202 if a1 >u 31\n      : @1201 (gas: 3)\n 29825: u32 [0x20170] = 0x20\n 29831: a1 = 0x20180\n 29836: jump @700\n      : @1202 (gas: 2)\n 29839: a1 = 0x20180\n 29844: jump @700\n      : @1203 (gas: 2)\n 29847: u64 [s1 + 208] = 0\n 29851: fallthrough\n      : @1204 (gas: 6)\n 29852: a0 = u64 [s1 + 0xc0]\n 29856: a0 = a0 << 0x1\n 29859: a1 = u64 [s1 + 0xd0]\n 29863: a0 = a0 | a1\n 29866: u64 [s1 + 0x80] = a0\n 29870: fallthrough\n      : @1205 (gas: 10)\n 29871: u64 [s1 + 256] = 0\n 29875: a3 = 0\n 29877: a0 = u64 [s1 + 0xc8]\n 29881: a1 = u64 [s1 + 0x28]\n 29884: a0 = a0 & a1\n 29887: u64 [s1 + 0x68] = a0\n 29890: a0 = 0xffffffff00000000\n 29900: u64 [s1 + 0x60] = a0\n 29903: a2 = 0x1\n 29906: fallthrough\n      : @1206 (gas: 11)\n 29907: a1 = 0\n 29909: a1 = 0 if a3 == 0\n 29911: a0 = u64 [s1 + 0x68]\n 29914: u64 [s1 + 0xd0] = a2\n 29918: a0 = a0 <u a2\n 29921: a2 = 0\n 29923: a2 = a0 if a3 == 0\n 29926: u64 [s1 + 192] = 0\n 29930: a0 = 0\n 29932: a2 = a1 if a0 != 0\n 29935: jump @1208 if a2 == 0\n      : @1207 (gas: 1)\n 29938: jump @952\n      : @1208 (gas: 5)\n 29941: a0 = u64 [s1 + 0xc8]\n 29945: a1 = u64 [s1 + 0x100]\n 29949: a0 = a0 & a1\n 29952: a1 = u64 [s1 + 0x90]\n 29956: jump @1210 if a0 <u a1\n      : @1209 (gas: 1)\n 29959: jump @952\n      : @1210 (gas: 14)\n 29962: a2 = s1 + 0x7ff\n 29966: a2 = a2 + 0x99\n 29970: u64 [a2 + 1632] = 0\n 29974: a0 = u64 [s1 + 0xb0]\n 29978: a3 = a2 + 0x600\n 29982: u64 [a3 + 0x48] = a0\n 29985: a0 = u64 [s1 + 0xb8]\n 29989: u64 [a3 + 0x50] = a0\n 29992: a1 = s1 + 0x7ff\n 29996: a1 = a1 + 0x6e1\n 30000: a0 = u64 [s1 + 0x88]\n 30004: u64 [a3 + 0x58] = a0\n 30007: a0 = 0\n 30009: ra = 1382, jump @9\n      : @1211 [@dyn 691] (gas: 11)\n 30015: a0 = s1 + 0x7ff\n 30019: a0 = a0 + 0x99\n 30023: u64 [a0 + 1600] = 0\n 30027: u64 [a0 + 1592] = 0\n 30031: u64 [a0 + 1584] = 0\n 30035: a3 = a0\n 30037: a0 = 0x20\n 30040: a1 = s1 + 0x7ff\n 30044: a1 = a1 + 0x6c1\n 30048: u64 [a3 + 1576] = 0x1\n 30053: ra = 1384, jump @9\n      : @1212 [@dyn 692] (gas: 1)\n 30059: t0 = 1386, jump @1461\n      : @1213 [@dyn 693] (gas: 1)\n 30065: jump @1215 if a1 <u a0\n      : @1214 (gas: 1)\n 30068: t0 = 1388, jump @1475\n      : @1215 [@dyn 694] (gas: 4)\n 30074: a0 = sp + 0xffffffffffffffe0\n 30077: a0 = a0 & 0xffffffffffffffe0\n 30080: u64 [s1 + 0x108] = a0\n 30084: t0 = 1390, jump @1418\n      : @1216 [@dyn 695] (gas: 5)\n 30090: ra = 0x570\n 30094: ecalli 8 // 'hash_keccak_256'\n 30096: a3 = u64 [s1 + 0x108]\n 30100: t0 = 0x572\n 30104: jump @1444\n      : @1217 [@dyn 696] (gas: 2)\n 30107: a3 = u64 [s1 + 0x108]\n 30111: t0 = 1394, jump @1444\n      : @1218 [@dyn 697] (gas: 15)\n 30117: u64 [s1 + 0x108] = a0\n 30121: sp = a0\n 30123: a2 = s1 + 0x7ff\n 30127: a2 = a2 + 0x99\n 30131: a0 = u64 [s1 + 0xc0]\n 30135: a3 = a2 + 0x600\n 30139: u64 [a3 + 0x20] = a0\n 30142: u64 [a3 + 0x18] = a0\n 30145: u64 [a3 + 0x10] = a0\n 30148: a1 = s1 + 0x7ff\n 30152: a1 = a1 + 0x6a1\n 30156: a0 = u64 [s1 + 0xd0]\n 30160: u64 [a3 + 0x8] = a0\n 30163: a0 = 0\n 30165: ra = 1396, jump @9\n      : @1219 [@dyn 698] (gas: 15)\n 30171: a0 = u64 [s1 + 0xe0]\n 30175: a1 = s1 + 0x7ff\n 30179: a1 = a1 + 0x99\n 30183: u64 [a1 + 0x600] = a0\n 30187: a0 = u64 [s1 + 0xe8]\n 30191: u64 [a1 + 0x5f8] = a0\n 30195: a0 = u64 [s1 + 0xf0]\n 30199: u64 [a1 + 0x5f0] = a0\n 30203: a3 = a1\n 30205: a0 = 0x20\n 30208: a1 = s1 + 0x7ff\n 30212: a1 = a1 + 0x681\n 30216: a2 = u64 [s1 + 0xf8]\n 30220: u64 [a3 + 0x5e8] = a2\n 30224: ra = 1398, jump @9\n      : @1220 [@dyn 699] (gas: 1)\n 30230: t0 = 1400, jump @1461\n      : @1221 [@dyn 700] (gas: 1)\n 30236: jump @1223 if a1 <u a0\n      : @1222 (gas: 1)\n 30239: t0 = 1402, jump @1480\n      : @1223 [@dyn 701] (gas: 4)\n 30245: a0 = sp + 0xffffffffffffffe0\n 30248: a0 = a0 & 0xffffffffffffffe0\n 30251: u64 [s1 + 0xf8] = a0\n 30255: t0 = 1404, jump @1418\n      : @1224 [@dyn 702] (gas: 22)\n 30261: ecalli 8 // 'hash_keccak_256'\n 30263: a3 = u64 [s1 + 0xf8]\n 30267: a0 = u64 [a3 + 0x18]\n 30270: a1 = u64 [a3 + 0x10]\n 30273: a2 = u64 [a3 + 0x8]\n 30276: a3 = u64 [a3]\n 30278: a5 = reverse a0\n 30280: a4 = reverse a1\n 30282: a0 = reverse a2\n 30284: a2 = reverse a3\n 30286: a1 = u64 [s1 + 0x108]\n 30290: u64 [s1 + 0xf0] = a2\n 30294: u64 [a1 + 0x18] = a2\n 30297: u64 [s1 + 0xf8] = a0\n 30301: u64 [a1 + 0x10] = a0\n 30304: u64 [s1 + 0xe8] = a4\n 30308: u64 [a1 + 0x8] = a4\n 30311: u64 [s1 + 0xe0] = a5\n 30315: u64 [a1] = a5\n 30317: a0 = s1 + 0x7ff\n 30321: a0 = a0 + 0x661\n 30325: ra = 1406, jump @11\n      : @1225 [@dyn 703] (gas: 13)\n 30331: a2 = s1 + 0x7ff\n 30335: a2 = a2 + 0x99\n 30339: a3 = a2 + 0x500\n 30343: a0 = u64 [a3 + 0xd0]\n 30347: a1 = u64 [a3 + 0xd8]\n 30351: a2 = u64 [a3 + 0xc8]\n 30355: a0 = a0 & 0xffffffffffffffff\n 30358: a1 = a1 & 0xffffffffffffffff\n 30361: a3 = u64 [s1 + 0x60]\n 30364: a2 = a2 & a3\n 30367: a1 = a1 | a2\n 30370: a0 = a0 | a1\n 30373: jump @1228 if a0 == 0\n      : @1226 (gas: 25)\n 30376: a0 = u64 [s1 + 0xe0]\n 30380: a2 = a0 + 0x2\n 30383: a0 = a2 <u a0\n 30386: a1 = u64 [s1 + 0xe8]\n 30390: a3 = a1 + a0\n 30393: a1 = a3 <u a1\n 30396: a1 = a0 if a0 == 0\n 30399: a0 = u64 [s1 + 0xf8]\n 30403: a4 = a0 + a1\n 30406: a0 = a4 <u a0\n 30409: a1 = u64 [s1 + 0xf0]\n 30413: a1 = a1 + a0\n 30416: a0 = s1 + 0x28b8\n 30420: u64 [s1 + 0x108] = a2\n 30424: u64 [a0 + 0x28] = a2\n 30427: u64 [s1 + 0xf8] = a3\n 30431: u64 [a0 + 0x30] = a3\n 30434: u64 [s1 + 0xf0] = a4\n 30438: u64 [a0 + 0x38] = a4\n 30441: u64 [s1 + 0xe8] = a1\n 30445: u64 [a0 + 0x40] = a1\n 30448: a0 = s1 + 0x7ff\n 30452: a0 = a0 + 0x641\n 30456: a1 = s1 + 0x28e0\n 30460: ra = 1408, jump @11\n      : @1227 [@dyn 704] (gas: 5)\n 30466: a0 = s1 + 0x7ff\n 30470: a0 = a0 + 0x99\n 30474: a0 = u64 [a0 + 0x5b0]\n 30478: a0 = a0 & 0xff\n 30482: jump @1229 if a0 == 0\n      : @1228 (gas: 6)\n 30485: a3 = 0\n 30487: a0 = u64 [s1 + 0xd0]\n 30491: a0 = a0 + 0x1\n 30494: a1 = u64 [s1 + 0xc8]\n 30498: a2 = a0 & a1\n 30501: jump @1206\n      : @1229 (gas: 13)\n 30504: a0 = s1 + 0x28b8\n 30508: a1 = u64 [s1 + 0x108]\n 30512: u64 [a0 + 0x48] = a1\n 30515: a1 = u64 [s1 + 0xf8]\n 30519: u64 [a0 + 0x50] = a1\n 30522: a1 = u64 [s1 + 0xf0]\n 30526: u64 [a0 + 0x58] = a1\n 30529: a1 = u64 [s1 + 0xe8]\n 30533: u64 [a0 + 0x60] = a1\n 30536: a0 = s1 + 0x7ff\n 30540: a0 = a0 + 0x621\n 30544: a1 = s1 + 0x2900\n 30548: ra = 1410, jump @11\n      : @1230 [@dyn 705] (gas: 14)\n 30554: a3 = s1 + 0x7ff\n 30558: a3 = a3 + 0x99\n 30562: a0 = u64 [a3 + 0x588]\n 30566: a4 = a0 & 0xffffffffffffffff\n 30569: a1 = u64 [s1 + 0x30]\n 30572: a0 = a4 <u a1\n 30575: a4 = a1 if a0 != 0\n 30578: t0 = u64 [s1 + 0x48]\n 30581: t0 = 0 if a0 == 0\n 30583: a5 = u64 [s1 + 0x40]\n 30586: a5 = 0 if a0 == 0\n 30588: a1 = u64 [s1 + 0x38]\n 30591: a1 = 0 if a0 == 0\n 30593: fallthrough\n      : @1231 (gas: 3)\n 30594: a2 = a4 & 0xffffffffffffffff\n 30597: a0 = u64 [s1 + 0x80]\n 30601: jump @1228 if a2 >=u a0\n      : @1232 (gas: 10)\n 30604: u64 [s1 + 0xf8] = a2\n 30608: u64 [s1 + 0x98] = a1\n 30612: u64 [s1 + 0xa0] = a5\n 30616: u64 [s1 + 0xa8] = t0\n 30620: u64 [s1 + 0x108] = a4\n 30624: a0 = u64 [s1 + 0xc8]\n 30628: a1 = u64 [s1 + 0x100]\n 30632: a0 = a0 & a1\n 30635: a1 = u64 [s1 + 0x90]\n 30639: jump @1228 if a0 >=u a1\n      : @1233 (gas: 12)\n 30643: u64 [a3 + 1408] = 0\n 30647: a0 = u64 [s1 + 0xb0]\n 30651: a2 = a3 + 0x500\n 30655: u64 [a2 + 0x68] = a0\n 30658: a0 = u64 [s1 + 0xb8]\n 30662: u64 [a2 + 0x70] = a0\n 30665: a1 = s1 + 0x7ff\n 30669: a1 = a1 + 0x601\n 30673: a0 = u64 [s1 + 0x88]\n 30677: u64 [a2 + 0x78] = a0\n 30680: a0 = 0\n 30682: ra = 1412, jump @9\n      : @1234 [@dyn 706] (gas: 11)\n 30688: a0 = s1 + 0x7ff\n 30692: a0 = a0 + 0x99\n 30696: u64 [a0 + 1376] = 0\n 30700: u64 [a0 + 1368] = 0\n 30704: u64 [a0 + 1360] = 0\n 30708: a3 = a0\n 30710: a0 = 0x20\n 30713: a1 = s1 + 0x7ff\n 30717: a1 = a1 + 0x5e1\n 30721: u64 [a3 + 1352] = 0x3\n 30726: ra = 1414, jump @9\n      : @1235 [@dyn 707] (gas: 3)\n 30732: a1 = u64 [s1 + 0x118]\n 30736: a0 = i32 [a1]\n 30738: jump @1237 if a0 >u 63\n      : @1236 (gas: 2)\n 30742: u32 [a1 + 0] = 0x40\n 30745: fallthrough\n      : @1237 (gas: 4)\n 30746: a0 = sp + 0xffffffffffffffe0\n 30749: a0 = a0 & 0xffffffffffffffe0\n 30752: u64 [s1 + 0xf0] = a0\n 30756: t0 = 1416, jump @1418\n      : @1238 [@dyn 708] (gas: 4)\n 30762: ra = 0x58a\n 30766: ecalli 8 // 'hash_keccak_256'\n 30768: t0 = 0x58c\n 30772: jump @1426\n      : @1239 [@dyn 709] (gas: 1)\n 30775: t0 = 1420, jump @1426\n      : @1240 [@dyn 710] (gas: 11)\n 30781: a2 = s1 + 0x7ff\n 30785: a2 = a2 + 0x99\n 30789: u64 [a2 + 1344] = 0\n 30793: u64 [a2 + 1336] = 0\n 30797: u64 [a2 + 1328] = 0\n 30801: a1 = s1 + 0x7ff\n 30805: a1 = a1 + 0x5c1\n 30809: a0 = u64 [s1 + 0xf8]\n 30813: u64 [a2 + 0x528] = a0\n 30817: a0 = 0\n 30819: ra = 1422, jump @9\n      : @1241 [@dyn 711] (gas: 5)\n 30825: a0 = u64 [s1 + 0xd8]\n 30829: a1 = s1 + 0x7ff\n 30833: a1 = a1 + 0x99\n 30837: a2 = a1 + 0x500\n 30841: t0 = 1424, jump @1453\n      : @1242 [@dyn 712] (gas: 4)\n 30847: a1 = a1 + 0x5a1\n 30851: a2 = u64 [s1 + 0xf0]\n 30855: u64 [a3 + 0x508] = a2\n 30859: ra = 1426, jump @9\n      : @1243 [@dyn 713] (gas: 3)\n 30865: a1 = u64 [s1 + 0x118]\n 30869: a0 = i32 [a1]\n 30871: jump @1245 if a0 >u 63\n      : @1244 (gas: 2)\n 30875: u32 [a1 + 0] = 0x40\n 30878: fallthrough\n      : @1245 (gas: 4)\n 30879: a0 = sp + 0xffffffffffffffe0\n 30882: a0 = a0 & 0xffffffffffffffe0\n 30885: u64 [s1 + 0xf8] = a0\n 30889: t0 = 1428, jump @1418\n      : @1246 [@dyn 714] (gas: 31)\n 30895: ecalli 8 // 'hash_keccak_256'\n 30897: a3 = u64 [s1 + 0xf8]\n 30901: a0 = u64 [a3 + 0x18]\n 30904: a1 = u64 [a3 + 0x10]\n 30907: a2 = u64 [a3 + 0x8]\n 30910: a3 = u64 [a3]\n 30912: a0 = reverse a0\n 30914: u64 [s1 + 0xf0] = a0\n 30918: a0 = reverse a1\n 30920: u64 [s1 + 0xe8] = a0\n 30924: a0 = reverse a2\n 30926: u64 [s1 + 0xe0] = a0\n 30930: a0 = reverse a3\n 30932: u64 [s1 + 0xd8] = a0\n 30936: a0 = sp + 0xffffffffffffffe0\n 30939: a0 = a0 & 0xffffffffffffffe0\n 30942: u64 [s1 + 0xf8] = a0\n 30946: sp = a0\n 30948: a2 = s1 + 0x7ff\n 30952: a2 = a2 + 0x99\n 30956: a0 = u64 [s1 + 0xc0]\n 30960: u64 [a2 + 0x500] = a0\n 30964: a3 = a2 + 0x400\n 30968: u64 [a3 + 0xf8] = a0\n 30972: u64 [a3 + 0xf0] = a0\n 30976: a1 = s1 + 0x7ff\n 30980: a1 = a1 + 0x581\n 30984: a0 = u64 [s1 + 0xd0]\n 30988: u64 [a3 + 0xe8] = a0\n 30992: a0 = 0\n 30994: ra = 1430, jump @9\n      : @1247 [@dyn 715] (gas: 16)\n 31000: a0 = u64 [s1 + 0xd8]\n 31004: a1 = s1 + 0x7ff\n 31008: a1 = a1 + 0x99\n 31012: a2 = a1 + 0x400\n 31016: u64 [a2 + 0xe0] = a0\n 31020: a0 = u64 [s1 + 0xe0]\n 31024: u64 [a2 + 0xd8] = a0\n 31028: a0 = u64 [s1 + 0xe8]\n 31032: u64 [a2 + 0xd0] = a0\n 31036: a3 = a1\n 31038: a0 = 0x20\n 31041: a1 = s1 + 0x7ff\n 31045: a1 = a1 + 0x561\n 31049: a2 = u64 [s1 + 0xf0]\n 31053: u64 [a3 + 0x4c8] = a2\n 31057: ra = 1432, jump @9\n      : @1248 [@dyn 716] (gas: 3)\n 31063: a1 = u64 [s1 + 0x118]\n 31067: a0 = i32 [a1]\n 31069: jump @1250 if a0 >u 63\n      : @1249 (gas: 2)\n 31073: u32 [a1 + 0] = 0x40\n 31076: fallthrough\n      : @1250 (gas: 4)\n 31077: a0 = sp + 0xffffffffffffffe0\n 31080: a0 = a0 & 0xffffffffffffffe0\n 31083: u64 [s1 + 0xf0] = a0\n 31087: t0 = 1434, jump @1418\n      : @1251 [@dyn 717] (gas: 5)\n 31093: ra = 0x59c\n 31097: ecalli 8 // 'hash_keccak_256'\n 31099: a3 = u64 [s1 + 0xf0]\n 31103: t0 = 0x59e\n 31107: jump @1430\n      : @1252 [@dyn 718] (gas: 2)\n 31110: a3 = u64 [s1 + 0xf0]\n 31114: t0 = 1438, jump @1430\n      : @1253 [@dyn 719] (gas: 8)\n 31120: a1 = u64 [s1 + 0xf8]\n 31124: u64 [a1 + 0x18] = a3\n 31127: u64 [a1 + 0x10] = a2\n 31130: u64 [a1 + 0x8] = a4\n 31133: u64 [a1] = a0\n 31135: a0 = s1 + 0x7ff\n 31139: a0 = a0 + 0x541\n 31143: ra = 1440, jump @11\n      : @1254 [@dyn 720] (gas: 5)\n 31149: a3 = s1 + 0x7ff\n 31153: a3 = a3 + 0x99\n 31157: a0 = u64 [a3 + 0x4a8]\n 31161: a0 = a0 & 0x5\n 31164: jump @1257 if a0 != 1\n      : @1255 (gas: 30)\n 31169: a0 = u64 [s1 + 0xd0]\n 31173: a5 = a3 + 0x400\n 31177: u64 [a5 + 0x48] = a0\n 31180: a0 = u64 [s1 + 0x108]\n 31184: u64 [a5 + 0x68] = a0\n 31187: a0 = u64 [s1 + 0xb0]\n 31191: u64 [a5 + 0x88] = a0\n 31195: a1 = u64 [s1 + 0xc0]\n 31199: u64 [a5 + 0x50] = a1\n 31202: a0 = u64 [s1 + 0x98]\n 31206: u64 [a5 + 0x70] = a0\n 31209: a0 = u64 [s1 + 0xb8]\n 31213: u64 [a5 + 0x90] = a0\n 31217: u64 [a5 + 0x58] = a1\n 31220: a0 = u64 [s1 + 0xa0]\n 31224: u64 [a5 + 0x78] = a0\n 31227: a0 = u64 [s1 + 0x78]\n 31230: u64 [a5 + 0x98] = a0\n 31234: u64 [a5 + 0x60] = a1\n 31237: a0 = u64 [s1 + 0xa8]\n 31241: u64 [a5 + 0x80] = a0\n 31245: a0 = s1 + 0x7ff\n 31249: a0 = a0 + 0x521\n 31253: a1 = s1 + 0x7ff\n 31257: a1 = a1 + 0x501\n 31261: a2 = s1 + 0x7ff\n 31265: a2 = a2 + 0x4e1\n 31269: a4 = u64 [s1 + 0x70]\n 31272: u64 [a5 + 0xa0] = a4\n 31276: ra = 1442, jump @1328\n      : @1256 [@dyn 721] (gas: 10)\n 31282: a2 = s1 + 0x100\n 31286: a4 = u64 [a2 + 0x8]\n 31289: a3 = s1 + 0x7ff\n 31293: a3 = a3 + 0x99\n 31297: a0 = u64 [a2]\n 31299: a0 = a0 + 0x1\n 31302: a1 = u64 [s1 + 0xc8]\n 31306: a0 = a0 & a1\n 31309: u64 [a2] = a0\n 31311: jump @1258\n      : @1257 (gas: 2)\n 31313: a4 = u64 [s1 + 0x108]\n 31317: fallthrough\n      : @1258 (gas: 6)\n 31318: a1 = 0\n 31320: a5 = 0\n 31322: t0 = 0\n 31324: a0 = a4 + 0x1\n 31327: a4 = a0 & 0xffffffffffffffff\n 31330: jump @1231\n      : @1259 (gas: 11)\n 31333: a2 = s1 + 0x7ff\n 31337: a2 = a2 + 0x99\n 31341: u64 [a2 + 56] = 0\n 31344: u64 [a2 + 48] = 0\n 31347: a0 = 0xcf114bd900000000\n 31357: u64 [a2 + 0x40] = a0\n 31360: a1 = s1 + 0x7ff\n 31364: a1 = a1 + 0xc1\n 31368: u64 [a2 + 40] = 0\n 31371: a0 = 0\n 31373: ra = 1444, jump @9\n      : @1260 [@dyn 722] (gas: 2)\n 31379: a1 = i32 [0x20170]\n 31384: jump @1262 if a1 >u 31\n      : @1261 (gas: 3)\n 31388: u32 [0x20170] = 0x20\n 31394: a1 = 0x20180\n 31399: jump @700\n      : @1262 (gas: 2)\n 31402: a1 = 0x20180\n 31407: jump @700\n      : @1263 (gas: 11)\n 31410: a2 = s1 + 0x7ff\n 31414: a2 = a2 + 0x99\n 31418: u64 [a2 + 24] = 0\n 31421: u64 [a2 + 16] = 0\n 31424: a0 = 0x7862e95900000000\n 31434: u64 [a2 + 0x20] = a0\n 31437: a1 = s1 + 0x7ff\n 31441: a1 = a1 + 0xa1\n 31445: u64 [a2 + 8] = 0\n 31448: a0 = 0\n 31450: ra = 1446, jump @9\n      : @1264 [@dyn 723] (gas: 2)\n 31456: a1 = i32 [0x20170]\n 31461: jump @1266 if a1 >u 31\n      : @1265 (gas: 3)\n 31465: u32 [0x20170] = 0x20\n 31471: a1 = 0x20180\n 31476: jump @700\n      : @1266 (gas: 2)\n 31479: a1 = 0x20180\n 31484: jump @700\n      : @1267 (gas: 5)\n 31487: a0 = 0\n 31489: a1 = u64 [s1 + 0x108]\n 31493: a2 = 0\n 31495: ecalli 13 // 'seal_return'\n 31497: jump @988\n      : @1268 (gas: 3)\n 31500: t0 = 0x5a8\n 31504: a2 = s1 + 0x10b8\n 31508: fallthrough\n      : @1269 [@dyn 724] (gas: 8)\n 31509: u64 [a2 + 472] = 0\n 31513: u64 [a2 + 464] = 0\n 31517: a0 = 0x7862e95900000000\n 31527: u64 [a2 + 0x1e0] = a0\n 31531: a1 = s1 + 0x1280\n 31535: u64 [a2 + 456] = 0\n 31539: a0 = 0\n 31541: ra = 1450, jump @9\n      : @1270 [@dyn 725] (gas: 2)\n 31547: a1 = i32 [0x20170]\n 31552: jump @1272 if a1 >u 31\n      : @1271 (gas: 3)\n 31556: u32 [0x20170] = 0x20\n 31562: a1 = 0x20180\n 31567: jump @700\n      : @1272 (gas: 2)\n 31570: a1 = 0x20180\n 31575: jump @700\n      : @1273 (gas: 5)\n 31578: a0 = 0\n 31580: a1 = u64 [s1 + 0x100]\n 31584: a2 = 0\n 31586: ecalli 13 // 'seal_return'\n 31588: jump @988\n      : @1274 [@dyn 726] (gas: 2)\n 31591: ecalli 2 // 'call_data_load'\n 31593: fallthrough\n      : @1275 (gas: 10)\n 31594: a0 = u64 [sp + 0x10]\n 31597: a1 = u64 [sp + 0x18]\n 31600: a2 = 0x100000000\n 31610: a2 = a2 ^ a0\n 31613: a2 = a2 | a1\n 31616: a3 = a0 >> 0x20\n 31619: a3 = a3 <u 0x1\n 31622: a3 = 0 if a1 != 0\n 31624: a3 = 0 if a2 == 0\n 31626: jump @1277 if a3 == 0\n      : @1276 (gas: 12)\n 31629: a2 = u64 [sp]\n 31631: a3 = u64 [sp + 0x8]\n 31634: u64 [s1] = a2\n 31636: u64 [s1 + 0x8] = a3\n 31639: u64 [s1 + 0x10] = a0\n 31642: u64 [s1 + 0x18] = a1\n 31645: sp = s0 + 0xffffffffffffffc0\n 31648: ra = u64 [sp + 0x38]\n 31651: s0 = u64 [sp + 0x30]\n 31654: s1 = u64 [sp + 0x28]\n 31657: sp = sp + 0x40\n 31660: ret\n      : @1277 (gas: 8)\n 31662: a1 = 0x20180\n 31667: i32 a1 = a1 + 0\n 31669: a0 = 0x1\n 31672: a2 = 0\n 31674: ra = 0x5ae\n 31678: ecalli 13 // 'seal_return'\n 31680: t0 = 0x5b0\n 31684: jump @1488\n      : @1278 [@dyn 727] (gas: 1)\n 31687: t0 = 1456, jump @1488\n      : @1279 [@dyn 728] (gas: 3)\n 31693: a1 = 0x24\n 31696: ecalli 2 // 'call_data_load'\n 31698: fallthrough\n      : @1280 (gas: 7)\n 31699: a0 = u64 [sp + 0x18]\n 31702: a1 = u64 [sp + 0x10]\n 31705: a2 = u64 [sp + 0x8]\n 31708: a3 = a1 | a0\n 31711: a4 = a2 <u 0x1\n 31714: a4 = 0 if a3 != 0\n 31716: jump @1283 if a4 == 0\n      : @1281 (gas: 2)\n 31719: a3 = u64 [sp]\n 31721: t0 = 1458, jump @1451\n      : @1282 [@dyn 729] (gas: 1)\n 31727: ret\n      : @1283 (gas: 8)\n 31729: a1 = 0x20180\n 31734: i32 a1 = a1 + 0\n 31736: a0 = 0x1\n 31739: a2 = 0\n 31741: ra = 0x5b4\n 31745: ecalli 13 // 'seal_return'\n 31747: t0 = 0x5b6\n 31751: jump @1488\n      : @1284 [@dyn 730] (gas: 1)\n 31754: t0 = 1462, jump @1488\n      : @1285 [@dyn 731] (gas: 5)\n 31760: a1 = 0x44\n 31763: ra = 0x5b8\n 31767: ecalli 2 // 'call_data_load'\n 31769: t0 = 0x5ba\n 31773: jump @1469\n      : @1286 [@dyn 732] (gas: 1)\n 31776: t0 = 1466, jump @1469\n      : @1287 [@dyn 733] (gas: 1)\n 31782: jump @1290 if a4 != 0\n      : @1288 (gas: 1)\n 31785: t0 = 1468, jump @1451\n      : @1289 [@dyn 734] (gas: 1)\n 31791: ret\n      : @1290 (gas: 8)\n 31793: a1 = 0x20180\n 31798: i32 a1 = a1 + 0\n 31800: a0 = 0x1\n 31803: a2 = 0\n 31805: ra = 0x5be\n 31809: ecalli 13 // 'seal_return'\n 31811: t0 = 0x5c0\n 31815: jump @1476\n      : @1291 [@dyn 735] (gas: 1)\n 31818: t0 = 1472, jump @1476\n      : @1292 [@dyn 736] (gas: 4)\n 31824: ra = 0x5c2\n 31828: ecalli 2 // 'call_data_load'\n 31830: t0 = 0x5c4\n 31834: jump @1469\n      : @1293 [@dyn 737] (gas: 1)\n 31837: t0 = 1476, jump @1469\n      : @1294 [@dyn 738] (gas: 1)\n 31843: jump @1297 if a4 != 0\n      : @1295 (gas: 1)\n 31846: t0 = 1478, jump @1451\n      : @1296 [@dyn 739] (gas: 1)\n 31852: ret\n      : @1297 (gas: 7)\n 31854: a1 = 0x20180\n 31859: i32 a1 = a1 + 0\n 31861: a0 = 0x1\n 31864: a2 = 0\n 31866: ra = 0x5c8\n 31870: ecalli 13 // 'seal_return'\n 31872: fallthrough\n      : @1298 [@dyn 740] (gas: 17)\n 31873: sp = sp + 0xffffffffffffff30\n 31877: u64 [sp + 0xc8] = ra\n 31881: u64 [sp + 0xc0] = s0\n 31885: u64 [sp + 0xb8] = s1\n 31889: s0 = sp + 0xd0\n 31893: sp = sp & 0xfffffffffffffff0\n 31896: a2 = u64 [a1 + 0x18]\n 31899: u64 [sp + 0x10] = a2\n 31902: a2 = u64 [a1 + 0x10]\n 31905: u64 [sp + 0x8] = a2\n 31908: a2 = u64 [a1 + 0x8]\n 31911: u64 [sp] = a2\n 31913: s1 = u64 [a1]\n 31915: u64 [sp + 0x28] = a0\n 31918: a0 = sp + 0x90\n 31922: a1 = 0x40\n 31925: ra = 1482, jump @7\n      : @1299 [@dyn 741] (gas: 39)\n 31931: a1 = u64 [sp + 0x98]\n 31935: a2 = u64 [sp + 0x90]\n 31939: a0 = s1 + 0x1f\n 31942: ra = a0 <u s1\n 31945: a3 = u64 [sp]\n 31947: a4 = a3 + ra\n 31950: a0 = a0 & 0xffffffffffffffe0\n 31953: t1 = a1 + a4\n 31956: t0 = a2 + a0\n 31959: u64 [sp + 0x20] = a2\n 31962: a5 = t0 <u a2\n 31965: t1 = t1 + a5\n 31968: s1 = t1 ^ a1\n 31971: u64 [sp + 0x18] = a1\n 31974: a2 = t1 <u a1\n 31977: a2 = a5 if s1 == 0\n 31980: t2 = u64 [sp + 0xa8]\n 31984: a4 = a4 <u a3\n 31987: s1 = u64 [sp + 0xa0]\n 31991: a4 = ra if ra == 0\n 31994: a0 = u64 [sp + 0x8]\n 31997: a4 = a4 + a0\n 32000: a5 = a4 <u a0\n 32003: a4 = a4 + s1\n 32006: a3 = a4 + a2\n 32009: a0 = u64 [sp + 0x10]\n 32012: a0 = a0 + t2\n 32015: a0 = a0 + a5\n 32018: a5 = a3 <u a4\n 32021: a4 = a4 <u s1\n 32024: a0 = a0 + a4\n 32027: a4 = a0 + a5\n 32030: a0 = a4 >u 0\n 32032: a5 = a3 >u 0\n 32034: a5 = a0 if a4 != 0\n 32037: a0 = a3 | a4\n 32040: a1 = t1 >u 0\n 32042: a1 = a5 if a0 != 0\n 32045: jump @1303 if a1 != 0\n      : @1300 (gas: 8)\n 32048: a0 = a3 <u s1\n 32051: a1 = a4 ^ t2\n 32054: a5 = a4 <u t2\n 32057: a5 = a0 if a1 == 0\n 32060: a0 = a3 ^ s1\n 32063: a0 = a0 | a1\n 32066: a2 = a5 if a0 != 0\n 32069: jump @1303 if a2 != 0\n      : @1301 (gas: 8)\n 32072: u64 [sp + 0x70] = t0\n 32075: u64 [sp + 0x78] = t1\n 32078: u64 [sp + 0x80] = a3\n 32082: a0 = 0x40\n 32085: a1 = sp + 0x70\n 32088: u64 [sp + 0x88] = a4\n 32092: u64 [sp + 0x10] = t2\n 32095: ra = 1484, jump @9\n      : @1302 [@dyn 742] (gas: 14)\n 32101: a0 = u64 [sp + 0x28]\n 32104: a1 = u64 [sp + 0x10]\n 32107: u64 [a0 + 0x18] = a1\n 32110: u64 [a0 + 0x10] = s1\n 32113: a1 = u64 [sp + 0x18]\n 32116: u64 [a0 + 0x8] = a1\n 32119: a1 = u64 [sp + 0x20]\n 32122: u64 [a0] = a1\n 32124: sp = s0 + 0xffffffffffffff30\n 32128: ra = u64 [sp + 0xc8]\n 32132: s0 = u64 [sp + 0xc0]\n 32136: s1 = u64 [sp + 0xb8]\n 32140: sp = sp + 0xd0\n 32144: ret\n      : @1303 (gas: 8)\n 32146: u64 [sp + 96] = 0\n 32149: u64 [sp + 88] = 0\n 32152: u64 [sp + 80] = 0\n 32155: a0 = 0x4e487b7100000000\n 32165: a1 = sp + 0x50\n 32168: u64 [sp + 0x68] = a0\n 32171: a0 = 0\n 32173: ra = 1486, jump @9\n      : @1304 [@dyn 743] (gas: 7)\n 32179: u64 [sp + 72] = 0\n 32182: u64 [sp + 64] = 0\n 32185: u64 [sp + 48] = 0x41\n 32189: a0 = 0x4\n 32192: a1 = sp + 0x30\n 32195: u64 [sp + 56] = 0\n 32198: ra = 1488, jump @9\n      : @1305 [@dyn 744] (gas: 2)\n 32204: a1 = i32 [0x20170]\n 32209: jump @1307 if a1 >u 63\n      : @1306 (gas: 2)\n 32213: u32 [0x20170] = 0x40\n 32219: fallthrough\n      : @1307 (gas: 7)\n 32220: a1 = 0x20180\n 32225: i32 a1 = a1 + 0\n 32227: a0 = 0x1\n 32230: a2 = 0x24\n 32233: ra = 0x5d2\n 32237: ecalli 13 // 'seal_return'\n 32239: fallthrough\n      : @1308 [@dyn 745] (gas: 74)\n 32240: sp = sp + 0xfffffffffffffec0\n 32244: u64 [sp + 0x138] = ra\n 32248: u64 [sp + 0x130] = s0\n 32252: u64 [sp + 0x128] = s1\n 32256: s0 = sp + 0x140\n 32260: sp = sp & 0xffffffffffffffe0\n 32263: a2 = u64 [a1]\n 32265: u64 [sp + 0x38] = a2\n 32268: a2 = u64 [a1 + 0x8]\n 32271: u64 [sp + 0x30] = a2\n 32274: a2 = u64 [a1 + 0x10]\n 32277: u64 [sp + 0x28] = a2\n 32280: a1 = u64 [a1 + 0x18]\n 32283: u64 [sp + 0x20] = a1\n 32286: a1 = u64 [a0]\n 32288: u64 [sp + 0x18] = a1\n 32291: a1 = u64 [a0 + 0x10]\n 32294: u64 [sp + 0x10] = a1\n 32297: s1 = u64 [a0 + 0x8]\n 32300: ecalli 10 // 'ref_time_left'\n 32302: a1 = reverse s1\n 32304: a2 = a1 << 0x20\n 32307: a3 = u64 [sp + 0x10]\n 32310: a3 = reverse a3\n 32312: a3 = a3 >> 0x20\n 32315: a2 = a2 | a3\n 32318: a1 = a1 >> 0x20\n 32321: a3 = u64 [sp + 0x18]\n 32324: a3 = reverse a3\n 32326: a4 = 0x30180\n 32331: a5 = a3 << 0x20\n 32334: a1 = a1 | a5\n 32337: a3 = a3 >> 0x20\n 32340: u32 [0x30190] = a3\n 32345: u64 [0x30188] = a1\n 32350: u64 [0x30180] = a2\n 32355: a1 = u64 [sp + 0x20]\n 32358: u64 [sp + 0xd8] = a1\n 32362: a1 = u64 [sp + 0x28]\n 32365: u64 [sp + 0xd0] = a1\n 32369: a1 = u64 [sp + 0x30]\n 32372: u64 [sp + 0xc8] = a1\n 32376: a1 = u64 [sp + 0x38]\n 32379: u64 [sp + 0xc0] = a1\n 32383: u32 [sp + 224] = 0\n 32387: a0 = a0 >u 0x8fc\n 32391: a1 = -a0\n 32393: u64 [sp + 0x118] = a1\n 32397: u64 [sp + 0x110] = a1\n 32401: u64 [sp + 0x108] = a1\n 32405: u64 [sp + 0x100] = a1\n 32409: a4 = a4 << 0x20\n 32412: a4 = a4 >> 0x20\n 32415: a0 = a0 << 0x23\n 32418: a0 = a0 | a4\n 32421: a1 = sp + 0xc0\n 32425: a1 = a1 << 0x20\n 32428: a1 = a1 >> 0x20\n 32431: a4 = 0x20180\n 32436: a2 = sp + 0x100\n 32440: a2 = a2 << 0x20\n 32443: a3 = a2 | a1\n 32446: u64 [sp + 0x18] = a4\n 32449: a4 = a4 << 0x20\n 32452: a4 = a4 >> 0x20\n 32455: a1 = sp + 0xe0\n 32459: a1 = a1 << 0x20\n 32462: a5 = a1 | a4\n 32465: a1 = 0xffffffffffffffff\n 32468: a2 = 0xffffffffffffffff\n 32471: ecalli 0 // 'call'\n 32472: s1 = a0\n 32474: ecalli 12 // 'return_data_size'\n 32476: fallthrough\n      : @1309 (gas: 1)\n 32477: jump @1321 if a0 == 0\n      : @1310 (gas: 4)\n 32481: u64 [sp + 0x20] = s1\n 32484: ra = 0x5d4\n 32488: ecalli 12 // 'return_data_size'\n 32490: fallthrough\n      : @1311 [@dyn 746] (gas: 3)\n 32491: a2 = a0 + 0x1f\n 32494: u64 [sp + 0x38] = a0\n 32497: t0 = 1494, jump @1460\n      : @1312 [@dyn 747] (gas: 7)\n 32503: u64 [sp + 152] = 0\n 32507: u64 [sp + 0x80] = a2\n 32511: u64 [sp + 0x88] = a3\n 32515: a0 = sp + 0xa0\n 32519: a1 = sp + 0x80\n 32523: u64 [sp + 0x90] = a4\n 32527: ra = 1496, jump @1298\n      : @1313 [@dyn 748] (gas: 14)\n 32533: a2 = u64 [sp + 0xb8]\n 32537: s1 = u64 [sp + 0xb0]\n 32541: a1 = u64 [sp + 0xa8]\n 32545: a0 = u64 [sp + 0xa0]\n 32549: u64 [sp + 0x30] = a1\n 32552: u64 [sp + 0x28] = a2\n 32555: a2 = a2 | a1\n 32558: a1 = a0 | s1\n 32561: a1 = a1 | a2\n 32564: a1 = a1 >> 0x20\n 32567: a2 = a2 | s1\n 32570: a2 = a2 << 0x20\n 32573: a1 = a1 | a2\n 32576: jump @1323 if a1 != 0\n      : @1314 (gas: 8)\n 32580: u64 [sp + 120] = 0\n 32583: u64 [sp + 112] = 0\n 32586: u64 [sp + 104] = 0\n 32589: a1 = sp + 0x60\n 32592: a2 = u64 [sp + 0x38]\n 32595: u64 [sp + 0x60] = a2\n 32598: u64 [sp + 0x38] = a0\n 32601: ra = 1498, jump @9\n      : @1315 [@dyn 749] (gas: 2)\n 32607: ecalli 12 // 'return_data_size'\n 32609: fallthrough\n      : @1316 (gas: 9)\n 32610: a3 = u64 [sp + 0x38]\n 32613: a1 = u64 [sp + 0x28]\n 32616: a1 = a1 | s1\n 32619: a2 = 0xffffffe0\n 32629: a2 = a3 <u a2\n 32632: a4 = u64 [sp + 0x30]\n 32635: a2 = 0 if a4 != 0\n 32637: a2 = 0 if a1 != 0\n 32639: jump @1323 if a2 == 0\n      : @1317 (gas: 3)\n 32642: s1 = a0\n 32644: a0 = a0 >> 0x20\n 32647: jump @1323 if a0 != 0\n      : @1318 (gas: 5)\n 32650: i32 a0 = a3 + 0x20\n 32653: i32 a1 = s1 + 0\n 32655: u64 [sp + 0x38] = a1\n 32658: a1 = s1\n 32660: ra = 1500, jump @21\n      : @1319 [@dyn 750] (gas: 6)\n 32666: u32 [sp + 0x120] = s1\n 32670: i32 a0 = a0 + 0\n 32672: i32 a1 = sp + 0x120\n 32676: a2 = 0\n 32678: ecalli 11 // 'return_data_copy'\n 32680: fallthrough\n      : @1320 (gas: 4)\n 32681: a0 = i32 [sp + 0x120]\n 32685: s1 = u64 [sp + 0x20]\n 32688: a1 = u64 [sp + 0x38]\n 32691: jump @1323 if a0 <u a1\n      : @1321 (gas: 1)\n 32694: jump @1324 if s1 != 0\n      : @1322 (gas: 6)\n 32697: sp = s0 + 0xfffffffffffffec0\n 32701: ra = u64 [sp + 0x138]\n 32705: s0 = u64 [sp + 0x130]\n 32709: s1 = u64 [sp + 0x128]\n 32713: sp = sp + 0x140\n 32717: ret\n      : @1323 (gas: 1)\n 32719: trap\n      : @1324 (gas: 8)\n 32720: u64 [sp + 80] = 0\n 32723: u64 [sp + 72] = 0\n 32726: u64 [sp + 64] = 0\n 32729: a0 = 0x90b8ec1800000000\n 32739: a1 = sp + 0x40\n 32742: u64 [sp + 0x58] = a0\n 32745: a0 = 0\n 32747: ra = 1502, jump @9\n      : @1325 [@dyn 751] (gas: 2)\n 32753: a1 = i32 [0x20170]\n 32758: jump @1327 if a1 >u 31\n      : @1326 (gas: 2)\n 32762: u32 [0x20170] = 0x20\n 32768: fallthrough\n      : @1327 (gas: 6)\n 32769: a1 = i32 [sp + 0x18]\n 32772: a0 = 0x1\n 32775: a2 = 0x4\n 32778: ra = 0x5e0\n 32782: ecalli 13 // 'seal_return'\n 32784: fallthrough\n      : @1328 [@dyn 752] (gas: 25)\n 32785: sp = sp + 0xfffffffffffffa00\n 32789: a3 = sp + 0x500\n 32793: u64 [a3 + 0xf8] = ra\n 32797: u64 [a3 + 0xf0] = s0\n 32801: u64 [a3 + 0xe8] = s1\n 32805: s0 = sp + 0x600\n 32809: sp = sp & 0xffffffffffffffe0\n 32812: s1 = sp\n 32814: a2 = u64 [a2]\n 32816: u64 [s1 + 0x68] = a2\n 32819: a1 = u64 [a1]\n 32821: u64 [s1 + 0x48] = a1\n 32824: a2 = u64 [a0]\n 32826: a1 = u64 [a0 + 0x8]\n 32829: a0 = u32 [a0 + 0x10]\n 32832: u64 [s1 + 1272] = 0\n 32836: u64 [s1 + 0x50] = a0\n 32839: u64 [s1 + 0x4f0] = a0\n 32843: u64 [s1 + 0x58] = a1\n 32846: u64 [s1 + 0x4e8] = a1\n 32850: a1 = s1 + 0x4e0\n 32854: u64 [s1 + 0x60] = a2\n 32857: u64 [s1 + 0x4e0] = a2\n 32861: a0 = 0\n 32863: ra = 1506, jump @9\n      : @1329 [@dyn 753] (gas: 7)\n 32869: u64 [s1 + 1240] = 0\n 32873: u64 [s1 + 1232] = 0\n 32877: u64 [s1 + 1216] = 0x1\n 32882: a0 = 0x20\n 32885: a1 = s1 + 0x4c0\n 32889: u64 [s1 + 1224] = 0\n 32893: ra = 1508, jump @9\n      : @1330 [@dyn 754] (gas: 3)\n 32899: a1 = 0x20170\n 32904: a0 = i32 [0x20170]\n 32909: jump @1332 if a0 >u 63\n      : @1331 (gas: 2)\n 32913: u32 [0x20170] = 0x40\n 32919: fallthrough\n      : @1332 (gas: 16)\n 32920: a0 = sp + 0xffffffffffffffe0\n 32923: a2 = a0 & 0xffffffffffffffe0\n 32926: u64 [s1 + 0x40] = a2\n 32929: sp = a2\n 32931: a0 = 0x20180\n 32936: u64 [s1 + 0x10] = a0\n 32939: i32 a0 = a0 + 0\n 32941: u64 [s1 + 0x70] = a1\n 32944: i32 a2 = a2 + 0\n 32946: a1 = 0x40\n 32949: u64 [s1 + 0x78] = a0\n 32952: ra = 0x5e6\n 32956: ecalli 8 // 'hash_keccak_256'\n 32958: a3 = u64 [s1 + 0x40]\n 32961: t0 = 0x5e8\n 32965: jump @1458\n      : @1333 [@dyn 755] (gas: 2)\n 32968: a3 = u64 [s1 + 0x40]\n 32971: t0 = 1512, jump @1458\n      : @1334 [@dyn 756] (gas: 22)\n 32977: u64 [s1 + 0x30] = a0\n 32980: a0 = reverse a1\n 32982: u64 [s1 + 0x28] = a0\n 32985: a0 = reverse a2\n 32987: u64 [s1 + 0x20] = a0\n 32990: a0 = reverse a3\n 32992: u64 [s1 + 0x18] = a0\n 32995: a0 = sp + 0xffffffffffffffe0\n 32998: a0 = a0 & 0xffffffffffffffe0\n 33001: u64 [s1 + 0x38] = a0\n 33004: sp = a0\n 33006: a0 = u64 [s1 + 0x68]\n 33009: a0 = a0 << 0x20\n 33012: a0 = a0 >> 0x20\n 33015: u64 [s1 + 1208] = 0\n 33019: u64 [s1 + 1200] = 0\n 33023: u64 [s1 + 1192] = 0\n 33027: a1 = s1 + 0x4a0\n 33031: u64 [s1 + 0x40] = a0\n 33034: u64 [s1 + 0x4a0] = a0\n 33038: a0 = 0\n 33040: ra = 1514, jump @9\n      : @1335 [@dyn 757] (gas: 12)\n 33046: a0 = u64 [s1 + 0x18]\n 33049: a3 = s1 + 0x400\n 33053: u64 [a3 + 0x98] = a0\n 33057: a0 = u64 [s1 + 0x20]\n 33060: u64 [a3 + 0x90] = a0\n 33064: a0 = u64 [s1 + 0x28]\n 33067: u64 [a3 + 0x88] = a0\n 33071: a0 = 0x20\n 33074: a1 = s1 + 0x480\n 33078: a2 = u64 [s1 + 0x30]\n 33081: u64 [a3 + 0x80] = a2\n 33085: ra = 1516, jump @9\n      : @1336 [@dyn 758] (gas: 3)\n 33091: a1 = u64 [s1 + 0x70]\n 33094: a0 = i32 [a1]\n 33096: jump @1338 if a0 >u 63\n      : @1337 (gas: 3)\n 33100: u32 [a1 + 0] = 0x40\n 33103: t0 = 0x5ee\n 33107: jump @1437\n      : @1338 (gas: 1)\n 33110: t0 = 1518, jump @1437\n      : @1339 [@dyn 759] (gas: 5)\n 33116: ra = 0x5f0\n 33120: ecalli 8 // 'hash_keccak_256'\n 33122: a3 = u64 [s1 + 0x68]\n 33125: t0 = 0x5f2\n 33129: jump @1430\n      : @1340 [@dyn 760] (gas: 2)\n 33132: a3 = u64 [s1 + 0x68]\n 33135: t0 = 1522, jump @1430\n      : @1341 [@dyn 761] (gas: 7)\n 33141: a1 = u64 [s1 + 0x38]\n 33144: u64 [a1 + 0x18] = a3\n 33147: u64 [a1 + 0x10] = a2\n 33150: u64 [a1 + 0x8] = a4\n 33153: u64 [a1] = a0\n 33155: a0 = s1 + 0x460\n 33159: ra = 1524, jump @11\n      : @1342 [@dyn 762] (gas: 7)\n 33165: a0 = u32 [s1 + 0x464]\n 33169: a1 = u64 [s1 + 0x468]\n 33173: a2 = u64 [s1 + 0x470]\n 33177: a0 = a0 << 0x20\n 33180: a1 = a1 | a2\n 33183: a0 = a0 | a1\n 33186: jump @1404 if a0 == 0\n      : @1343 (gas: 10)\n 33190: u64 [s1 + 1112] = 0\n 33194: a0 = u64 [s1 + 0x60]\n 33197: u64 [s1 + 0x440] = a0\n 33201: a0 = u64 [s1 + 0x58]\n 33204: u64 [s1 + 0x448] = a0\n 33208: a1 = s1 + 0x440\n 33212: a0 = u64 [s1 + 0x50]\n 33215: u64 [s1 + 0x450] = a0\n 33219: a0 = 0\n 33221: ra = 1526, jump @9\n      : @1344 [@dyn 763] (gas: 7)\n 33228: u64 [s1 + 1080] = 0\n 33232: u64 [s1 + 1072] = 0\n 33236: u64 [s1 + 1056] = 0x3\n 33241: a0 = 0x20\n 33244: a1 = s1 + 0x420\n 33248: u64 [s1 + 1064] = 0\n 33252: ra = 1528, jump @9\n      : @1345 [@dyn 764] (gas: 3)\n 33259: a1 = u64 [s1 + 0x70]\n 33262: a0 = i32 [a1]\n 33264: jump @1347 if a0 >u 63\n      : @1346 (gas: 3)\n 33268: u32 [a1 + 0] = 0x40\n 33271: t0 = 0x5fa\n 33275: jump @1437\n      : @1347 (gas: 1)\n 33278: t0 = 1530, jump @1437\n      : @1348 [@dyn 765] (gas: 5)\n 33284: ra = 0x5fc\n 33288: ecalli 8 // 'hash_keccak_256'\n 33290: a3 = u64 [s1 + 0x68]\n 33293: t0 = 0x5fe\n 33297: jump @1458\n      : @1349 [@dyn 766] (gas: 2)\n 33300: a3 = u64 [s1 + 0x68]\n 33303: t0 = 1534, jump @1458\n      : @1350 [@dyn 767] (gas: 15)\n 33309: u64 [s1 + 0x68] = a0\n 33312: a0 = reverse a1\n 33314: u64 [s1 + 0x38] = a0\n 33317: a0 = reverse a2\n 33319: u64 [s1 + 0x30] = a0\n 33322: a0 = reverse a3\n 33324: u64 [s1 + 0x28] = a0\n 33327: u64 [s1 + 1048] = 0\n 33331: u64 [s1 + 1040] = 0\n 33335: u64 [s1 + 1032] = 0\n 33339: a1 = s1 + 0x400\n 33343: a0 = u64 [s1 + 0x48]\n 33346: u64 [s1 + 0x400] = a0\n 33350: a0 = 0\n 33352: ra = 1536, jump @9\n      : @1351 [@dyn 768] (gas: 12)\n 33359: a0 = u64 [s1 + 0x28]\n 33362: a3 = s1 + 0x300\n 33366: u64 [a3 + 0xf8] = a0\n 33370: a0 = u64 [s1 + 0x30]\n 33373: u64 [a3 + 0xf0] = a0\n 33377: a0 = u64 [s1 + 0x38]\n 33380: u64 [a3 + 0xe8] = a0\n 33384: a0 = 0x20\n 33387: a1 = s1 + 0x3e0\n 33391: a2 = u64 [s1 + 0x68]\n 33394: u64 [a3 + 0xe0] = a2\n 33398: ra = 1538, jump @9\n      : @1352 [@dyn 769] (gas: 3)\n 33405: a1 = u64 [s1 + 0x70]\n 33408: a0 = i32 [a1]\n 33410: jump @1354 if a0 >u 63\n      : @1353 (gas: 3)\n 33414: u32 [a1 + 0] = 0x40\n 33417: t0 = 0x604\n 33421: jump @1437\n      : @1354 (gas: 1)\n 33424: t0 = 1540, jump @1437\n      : @1355 [@dyn 770] (gas: 5)\n 33430: ra = 0x606\n 33434: ecalli 8 // 'hash_keccak_256'\n 33436: a3 = u64 [s1 + 0x68]\n 33439: t0 = 0x608\n 33443: jump @1458\n      : @1356 [@dyn 771] (gas: 2)\n 33446: a3 = u64 [s1 + 0x68]\n 33449: t0 = 1544, jump @1458\n      : @1357 [@dyn 772] (gas: 19)\n 33455: u64 [s1 + 0x38] = a0\n 33458: a0 = reverse a1\n 33460: u64 [s1 + 0x30] = a0\n 33463: a0 = reverse a2\n 33465: u64 [s1 + 0x28] = a0\n 33468: a0 = reverse a3\n 33470: u64 [s1 + 0x20] = a0\n 33473: a0 = sp + 0xffffffffffffffe0\n 33476: a0 = a0 & 0xffffffffffffffe0\n 33479: u64 [s1 + 0x68] = a0\n 33482: sp = a0\n 33484: u64 [s1 + 984] = 0\n 33488: u64 [s1 + 976] = 0\n 33492: u64 [s1 + 968] = 0\n 33496: a1 = s1 + 0x3c0\n 33500: a0 = u64 [s1 + 0x40]\n 33503: u64 [s1 + 0x3c0] = a0\n 33507: a0 = 0\n 33509: ra = 1546, jump @9\n      : @1358 [@dyn 773] (gas: 12)\n 33516: a0 = u64 [s1 + 0x20]\n 33519: a3 = s1 + 0x300\n 33523: u64 [a3 + 0xb8] = a0\n 33527: a0 = u64 [s1 + 0x28]\n 33530: u64 [a3 + 0xb0] = a0\n 33534: a0 = u64 [s1 + 0x30]\n 33537: u64 [a3 + 0xa8] = a0\n 33541: a0 = 0x20\n 33544: a1 = s1 + 0x3a0\n 33548: a2 = u64 [s1 + 0x38]\n 33551: u64 [a3 + 0xa0] = a2\n 33555: ra = 1548, jump @9\n      : @1359 [@dyn 774] (gas: 3)\n 33562: a1 = u64 [s1 + 0x70]\n 33565: a0 = i32 [a1]\n 33567: jump @1361 if a0 >=u 64\n      : @1360 (gas: 2)\n 33571: u32 [a1 + 0] = 0x40\n 33574: fallthrough\n      : @1361 (gas: 12)\n 33575: a0 = sp + 0xffffffffffffffe0\n 33578: a0 = a0 & 0xffffffffffffffe0\n 33581: u64 [s1 + 0x38] = a0\n 33584: sp = a0\n 33586: i32 a2 = a0 + 0\n 33588: a1 = 0x40\n 33591: a0 = u64 [s1 + 0x78]\n 33594: ra = 0x60e\n 33598: ecalli 8 // 'hash_keccak_256'\n 33600: a3 = u64 [s1 + 0x38]\n 33603: t0 = 0x610\n 33607: jump @1430\n      : @1362 [@dyn 775] (gas: 2)\n 33610: a3 = u64 [s1 + 0x38]\n 33613: t0 = 1552, jump @1430\n      : @1363 [@dyn 776] (gas: 7)\n 33619: a1 = u64 [s1 + 0x68]\n 33622: u64 [a1 + 0x18] = a3\n 33625: u64 [a1 + 0x10] = a2\n 33628: u64 [a1 + 0x8] = a4\n 33631: u64 [a1] = a0\n 33633: a0 = s1 + 0x380\n 33637: ra = 1554, jump @11\n      : @1364 [@dyn 777] (gas: 3)\n 33644: a1 = u64 [s1 + 0x380]\n 33648: a0 = a1 & 0x1\n 33651: jump @1405 if a0 == 0\n      : @1365 (gas: 2)\n 33655: a0 = a1 & 0x4\n 33658: jump @1406 if a0 != 0\n      : @1366 (gas: 6)\n 33662: u64 [s1 + 0x38] = a1\n 33665: a0 = a1 & 0xfb\n 33669: u64 [s1 + 0x30] = a0\n 33672: a0 = s1 + 0x340\n 33676: a1 = u64 [s1 + 0x68]\n 33679: ra = 1556, jump @11\n      : @1367 [@dyn 778] (gas: 16)\n 33686: a0 = u64 [s1 + 0x340]\n 33690: a1 = u64 [s1 + 0x348]\n 33694: a2 = u64 [s1 + 0x350]\n 33698: a3 = u64 [s1 + 0x358]\n 33702: a0 = a0 & 0xffffffffffffff00\n 33706: a4 = u64 [s1 + 0x30]\n 33709: a0 = a0 | a4\n 33712: a0 = a0 + 0x4\n 33715: a4 = s1 + 0x500\n 33719: u64 [a4 + 0x18] = a3\n 33722: u64 [a4 + 0x10] = a2\n 33725: u64 [a4 + 0x8] = a1\n 33728: u64 [a4] = a0\n 33730: a1 = s1 + 0x500\n 33734: a0 = u64 [s1 + 0x68]\n 33737: ra = 1558, jump @12\n      : @1368 [@dyn 779] (gas: 11)\n 33744: u64 [s1 + 824] = 0\n 33748: a0 = u64 [s1 + 0x50]\n 33751: a2 = s1 + 0x300\n 33755: u64 [a2 + 0x30] = a0\n 33758: a0 = u64 [s1 + 0x58]\n 33761: u64 [a2 + 0x28] = a0\n 33764: a1 = s1 + 0x320\n 33768: a0 = u64 [s1 + 0x60]\n 33771: u64 [a2 + 0x20] = a0\n 33774: a0 = 0\n 33776: ra = 1560, jump @9\n      : @1369 [@dyn 780] (gas: 7)\n 33783: u64 [s1 + 792] = 0\n 33787: u64 [s1 + 784] = 0\n 33791: u64 [s1 + 776] = 0\n 33795: a0 = 0x20\n 33798: a1 = s1 + 0x300\n 33802: u64 [s1 + 768] = 0\n 33806: ra = 1562, jump @9\n      : @1370 [@dyn 781] (gas: 3)\n 33813: a2 = u64 [s1 + 0x70]\n 33816: a0 = i32 [a2]\n 33818: jump @1372 if a0 >u 63\n      : @1371 (gas: 3)\n 33822: u32 [a2 + 0] = 0x40\n 33825: t0 = 0x61c\n 33829: jump @1437\n      : @1372 (gas: 1)\n 33832: t0 = 1564, jump @1437\n      : @1373 [@dyn 782] (gas: 32)\n 33838: ecalli 8 // 'hash_keccak_256'\n 33840: a3 = u64 [s1 + 0x68]\n 33843: a0 = u64 [a3]\n 33845: a1 = u64 [a3 + 0x8]\n 33848: a2 = u64 [a3 + 0x10]\n 33851: a3 = u64 [a3 + 0x18]\n 33854: t0 = reverse a0\n 33856: a5 = reverse a1\n 33858: a2 = reverse a2\n 33860: a3 = reverse a3\n 33862: a0 = sp + 0xffffffffffffffe0\n 33865: a1 = a0 & 0xffffffffffffffe0\n 33868: u64 [s1 + 0x68] = a1\n 33871: sp = a1\n 33873: u64 [s1 + 0x18] = a3\n 33876: a0 = a3 + 0x1\n 33879: a3 = a0 <u 0x1\n 33882: u64 [s1 + 0x20] = a2\n 33885: a4 = a2 + a3\n 33888: a2 = a0 | a4\n 33891: a2 = a2 <u 0x1\n 33894: a2 = a2 + a5\n 33897: u64 [s1 + 0x28] = a5\n 33900: a3 = a2 <u a5\n 33903: u64 [s1 + 0x30] = t0\n 33906: a3 = a3 + t0\n 33909: u64 [a1 + 0x8] = a4\n 33912: u64 [a1] = a0\n 33914: u64 [a1 + 0x10] = a2\n 33917: u64 [a1 + 0x18] = a3\n 33920: a0 = s1 + 0x2e0\n 33924: ra = 1566, jump @11\n      : @1374 [@dyn 783] (gas: 27)\n 33931: a2 = s1 + 0x200\n 33935: a0 = u64 [a2 + 0xe0]\n 33939: a1 = u64 [0x20118]\n 33944: t0 = u64 [s1 + 0x2f8]\n 33948: a3 = u64 [a2 + 0xe8]\n 33952: a4 = u64 [a2 + 0xf0]\n 33956: a1 = a1 + a0\n 33959: a0 = a1 <u a0\n 33962: a5 = a3 + a0\n 33965: a5 = a5 + 0xffffffffffffffff\n 33968: a2 = a5 ^ a3\n 33971: a3 = a5 <u a3\n 33974: a3 = a0 if a2 == 0\n 33977: a0 = a4 + 0xffffffffffffffff\n 33980: a3 = a3 + a0\n 33983: a0 = a3 <u a0\n 33986: a2 = a4 <u 0x1\n 33989: a2 = t0 - a2\n 33992: a0 = a0 + a2\n 33995: a2 = s1 + 0x500\n 33999: u64 [a2 + 0x20] = a1\n 34002: u64 [a2 + 0x28] = a5\n 34005: u64 [a2 + 0x30] = a3\n 34008: u64 [a2 + 0x38] = a0\n 34011: a1 = s1 + 0x520\n 34015: a0 = u64 [s1 + 0x68]\n 34018: ra = 1568, jump @12\n      : @1375 [@dyn 784] (gas: 3)\n 34025: a0 = u64 [s1 + 0x38]\n 34028: a0 = a0 & 0x2\n 34031: jump @1396 if a0 != 0\n      : @1376 (gas: 1)\n 34035: ra = 1570, jump @0\n      : @1377 [@dyn 785] (gas: 60)\n 34042: a1 = u64 [0x301a0]\n 34047: u64 [s1 + 0x68] = a1\n 34050: a1 = u64 [0x301b0]\n 34055: u64 [s1 + 0x38] = a1\n 34058: a0 = u64 [0x301a8]\n 34063: u64 [s1 + 0x30] = a0\n 34066: ecalli 10 // 'ref_time_left'\n 34068: a1 = u64 [s1 + 0x30]\n 34071: a1 = reverse a1\n 34073: a2 = a1 << 0x20\n 34076: a3 = u64 [s1 + 0x38]\n 34079: a3 = reverse a3\n 34081: a3 = a3 >> 0x20\n 34084: a2 = a2 | a3\n 34087: a3 = a1 >> 0x20\n 34090: a1 = u64 [s1 + 0x68]\n 34093: a4 = reverse a1\n 34095: a1 = 0x30180\n 34100: a5 = a4 << 0x20\n 34103: a3 = a3 | a5\n 34106: a4 = a4 >> 0x20\n 34109: u32 [0x30190] = a4\n 34114: u64 [0x30188] = a3\n 34119: u64 [0x30180] = a2\n 34124: a2 = u64 [0x20120]\n 34129: u64 [s1 + 1368] = 0\n 34133: u64 [s1 + 1360] = 0\n 34137: u64 [s1 + 1352] = 0\n 34141: u64 [s1 + 0x38] = a2\n 34144: a3 = s1 + 0x500\n 34148: u64 [a3 + 0x40] = a2\n 34151: u32 [s1 + 1376] = 0\n 34155: a0 = a0 >u 0x8fc\n 34159: a2 = -a0\n 34161: u64 [a3 + 0x98] = a2\n 34165: u64 [a3 + 0x90] = a2\n 34169: u64 [a3 + 0x88] = a2\n 34173: u64 [a3 + 0x80] = a2\n 34177: a1 = a1 << 0x20\n 34180: a1 = a1 >> 0x20\n 34183: a0 = a0 << 0x23\n 34186: a0 = a0 | a1\n 34189: a1 = s1 + 0x540\n 34193: a1 = a1 << 0x20\n 34196: a1 = a1 >> 0x20\n 34199: a2 = s1 + 0x580\n 34203: a2 = a2 << 0x20\n 34206: a3 = a2 | a1\n 34209: a4 = u64 [s1 + 0x10]\n 34212: a4 = a4 << 0x20\n 34215: a4 = a4 >> 0x20\n 34218: a1 = s1 + 0x560\n 34222: a1 = a1 << 0x20\n 34225: a5 = a1 | a4\n 34228: a1 = 0xffffffffffffffff\n 34231: a2 = 0xffffffffffffffff\n 34234: ecalli 0 // 'call'\n 34235: u64 [s1 + 0x68] = a0\n 34238: ecalli 12 // 'return_data_size'\n 34240: fallthrough\n      : @1378 (gas: 1)\n 34241: jump @1390 if a0 == 0\n      : @1379 (gas: 3)\n 34245: ra = 0x624\n 34249: ecalli 12 // 'return_data_size'\n 34251: fallthrough\n      : @1380 [@dyn 786] (gas: 3)\n 34252: a2 = a0 + 0x1f\n 34255: u64 [s1 + 0x30] = a0\n 34258: t0 = 1574, jump @1460\n      : @1381 [@dyn 787] (gas: 7)\n 34264: u64 [s1 + 472] = 0\n 34268: u64 [s1 + 0x1c0] = a2\n 34272: u64 [s1 + 0x1c8] = a3\n 34276: a0 = s1 + 0x1e0\n 34280: a1 = s1 + 0x1c0\n 34284: u64 [s1 + 0x1d0] = a4\n 34288: ra = 1576, jump @1298\n      : @1382 [@dyn 788] (gas: 16)\n 34294: a4 = s1 + 0x100\n 34298: a2 = u64 [a4 + 0xf8]\n 34302: a3 = u64 [a4 + 0xf0]\n 34306: a1 = u64 [a4 + 0xe8]\n 34310: a0 = u64 [a4 + 0xe0]\n 34314: u64 [s1 + 0x28] = a1\n 34317: u64 [s1 + 0x20] = a2\n 34320: a2 = a2 | a1\n 34323: a1 = a0 | a3\n 34326: a1 = a1 | a2\n 34329: a1 = a1 >> 0x20\n 34332: u64 [s1 + 0x18] = a3\n 34335: a2 = a2 | a3\n 34338: a2 = a2 << 0x20\n 34341: a1 = a1 | a2\n 34344: jump @1403 if a1 != 0\n      : @1383 (gas: 8)\n 34348: u64 [s1 + 440] = 0\n 34352: u64 [s1 + 432] = 0\n 34356: u64 [s1 + 424] = 0\n 34360: a1 = s1 + 0x1a0\n 34364: a2 = u64 [s1 + 0x30]\n 34367: u64 [s1 + 0x1a0] = a2\n 34371: u64 [s1 + 0x30] = a0\n 34374: ra = 1578, jump @9\n      : @1384 [@dyn 789] (gas: 2)\n 34381: ecalli 12 // 'return_data_size'\n 34383: fallthrough\n      : @1385 (gas: 10)\n 34384: a3 = u64 [s1 + 0x30]\n 34387: a1 = u64 [s1 + 0x20]\n 34390: a2 = u64 [s1 + 0x18]\n 34393: a1 = a1 | a2\n 34396: a2 = 0xffffffe0\n 34406: a2 = a3 <u a2\n 34409: a4 = u64 [s1 + 0x28]\n 34412: a2 = 0 if a4 != 0\n 34414: a2 = 0 if a1 != 0\n 34416: jump @1403 if a2 == 0\n      : @1386 (gas: 3)\n 34420: a1 = a0\n 34422: a0 = a0 >> 0x20\n 34425: jump @1403 if a0 != 0\n      : @1387 (gas: 7)\n 34429: i32 a0 = a3 + 0x20\n 34432: a2 = a1\n 34434: u64 [s1 + 0x28] = a1\n 34437: i32 a1 = a1 + 0\n 34439: u64 [s1 + 0x30] = a1\n 34442: a1 = a2\n 34444: ra = 1580, jump @21\n      : @1388 [@dyn 790] (gas: 7)\n 34451: a1 = u64 [s1 + 0x28]\n 34454: u32 [s1 + 0x5a0] = a1\n 34458: i32 a0 = a0 + 0\n 34460: i32 a1 = s1 + 0x5a0\n 34464: a2 = 0\n 34466: ecalli 11 // 'return_data_copy'\n 34468: fallthrough\n      : @1389 (gas: 3)\n 34469: a0 = i32 [s1 + 0x5a0]\n 34473: a1 = u64 [s1 + 0x30]\n 34476: jump @1403 if a0 <u a1\n      : @1390 (gas: 2)\n 34480: a0 = u64 [s1 + 0x68]\n 34483: jump @1407 if a0 != 0\n      : @1391 (gas: 3)\n 34487: a0 = s1 + 0x160\n 34491: a1 = 0x40\n 34494: ra = 1582, jump @7\n      : @1392 [@dyn 791] (gas: 6)\n 34501: a4 = s1 + 0x100\n 34505: a0 = u64 [a4 + 0x78]\n 34508: a1 = u64 [a4 + 0x70]\n 34511: a2 = u64 [a4 + 0x68]\n 34514: a3 = u64 [a4 + 0x60]\n 34517: t0 = 1584, jump @1443\n      : @1393 [@dyn 792] (gas: 1)\n 34523: jump @1403 if a0 != 0\n      : @1394 (gas: 9)\n 34527: u64 [s1 + 344] = 0\n 34531: u64 [s1 + 336] = 0\n 34535: u64 [s1 + 328] = 0\n 34539: a1 = s1 + 0x140\n 34543: a0 = u64 [s1 + 0x38]\n 34546: u64 [s1 + 0x140] = a0\n 34550: a0 = a3\n 34552: u64 [s1 + 0x78] = a3\n 34555: ra = 1586, jump @9\n      : @1395 [@dyn 793] (gas: 33)\n 34562: u64 [s1 + 216] = 0\n 34566: u64 [s1 + 208] = 0\n 34570: u64 [s1 + 200] = 0\n 34574: a0 = u64 [s1 + 0x48]\n 34577: u64 [s1 + 0xc0] = a0\n 34581: u64 [s1 + 248] = 0\n 34585: u64 [s1 + 240] = 0\n 34589: u64 [s1 + 232] = 0\n 34593: a0 = u64 [s1 + 0x40]\n 34596: u64 [s1 + 0xe0] = a0\n 34600: u64 [s1 + 280] = 0\n 34604: a0 = u64 [s1 + 0x50]\n 34607: u64 [s1 + 0x110] = a0\n 34611: a0 = u64 [s1 + 0x58]\n 34614: u64 [s1 + 0x108] = a0\n 34618: a0 = u64 [0x20148]\n 34623: a1 = u64 [0x20150]\n 34628: a2 = u64 [0x20158]\n 34633: a3 = u64 [s1 + 0x60]\n 34636: u64 [s1 + 0x100] = a3\n 34640: u64 [s1 + 0x138] = a0\n 34644: u64 [s1 + 0x130] = a1\n 34648: u64 [s1 + 0x128] = a2\n 34652: a0 = u64 [0x20160]\n 34657: a1 = 0x20\n 34660: a2 = s1 + 0x120\n 34664: a3 = s1 + 0x100\n 34668: a4 = s1 + 0xe0\n 34672: a5 = s1 + 0xc0\n 34676: u64 [s1 + 0x120] = a0\n 34680: a0 = u64 [s1 + 0x78]\n 34683: ra = 0x63c\n 34687: jump @18\n      : @1396 (gas: 23)\n 34691: a0 = sp + 0xffffffffffffffe0\n 34694: a5 = a0 & 0xffffffffffffffe0\n 34697: sp = a5\n 34699: a1 = u64 [s1 + 0x18]\n 34702: a0 = a1 + 0x2\n 34705: a1 = a0 <u a1\n 34708: a3 = u64 [s1 + 0x20]\n 34711: a2 = a3 + a1\n 34714: a3 = a2 <u a3\n 34717: a3 = a1 if a1 == 0\n 34720: a1 = u64 [s1 + 0x28]\n 34723: a3 = a3 + a1\n 34726: a1 = a3 <u a1\n 34729: a4 = u64 [s1 + 0x30]\n 34732: a4 = a4 + a1\n 34735: a1 = a5\n 34737: u64 [s1 + 0x78] = a5\n 34740: u64 [a5 + 0x8] = a2\n 34743: u64 [a5] = a0\n 34745: u64 [a5 + 0x10] = a3\n 34748: u64 [a5 + 0x18] = a4\n 34751: a0 = s1 + 0x2c0\n 34755: ra = 1588, jump @11\n      : @1397 [@dyn 794] (gas: 22)\n 34762: a0 = u64 [s1 + 0x2c0]\n 34766: a4 = u64 [0x20120]\n 34771: a1 = u64 [s1 + 0x2d8]\n 34775: a2 = u64 [s1 + 0x2c8]\n 34779: a3 = u64 [s1 + 0x2d0]\n 34783: u64 [s1 + 0x70] = a4\n 34786: a4 = a4 + a0\n 34789: a0 = a4 <u a0\n 34792: a5 = a2 + a0\n 34795: a2 = a5 <u a2\n 34798: a2 = a0 if a0 == 0\n 34801: a2 = a2 + a3\n 34804: a0 = a2 <u a3\n 34807: a0 = a0 + a1\n 34810: a1 = s1 + 0x500\n 34814: u64 [a1 + 0xc0] = a4\n 34818: u64 [a1 + 0xc8] = a5\n 34822: u64 [a1 + 0xd0] = a2\n 34826: u64 [a1 + 0xd8] = a0\n 34830: a1 = s1 + 0x5c0\n 34834: a0 = u64 [s1 + 0x78]\n 34837: ra = 1590, jump @12\n      : @1398 [@dyn 795] (gas: 3)\n 34844: a0 = s1 + 0x2a0\n 34848: a1 = 0x40\n 34851: ra = 1592, jump @7\n      : @1399 [@dyn 796] (gas: 13)\n 34858: a4 = s1 + 0x200\n 34862: a3 = u64 [a4 + 0xb8]\n 34866: a1 = u64 [a4 + 0xb0]\n 34870: a2 = u64 [a4 + 0xa8]\n 34874: a0 = u64 [a4 + 0xa0]\n 34878: a3 = a3 | a2\n 34881: a2 = a0 | a1\n 34884: a2 = a2 | a3\n 34887: a2 = a2 >> 0x20\n 34890: a1 = a1 | a3\n 34893: a1 = a1 << 0x20\n 34896: a1 = a1 | a2\n 34899: jump @1403 if a1 != 0\n      : @1400 (gas: 8)\n 34903: u64 [s1 + 664] = 0\n 34907: u64 [s1 + 656] = 0\n 34911: u64 [s1 + 648] = 0\n 34915: a1 = s1 + 0x280\n 34919: a2 = u64 [s1 + 0x70]\n 34922: u64 [s1 + 0x280] = a2\n 34926: u64 [s1 + 0x78] = a0\n 34929: ra = 1594, jump @9\n      : @1401 [@dyn 797] (gas: 32)\n 34936: u64 [s1 + 536] = 0\n 34940: u64 [s1 + 528] = 0\n 34944: u64 [s1 + 520] = 0\n 34948: a0 = u64 [s1 + 0x48]\n 34951: u64 [s1 + 0x200] = a0\n 34955: u64 [s1 + 568] = 0\n 34959: u64 [s1 + 560] = 0\n 34963: u64 [s1 + 552] = 0\n 34967: a0 = u64 [s1 + 0x40]\n 34970: u64 [s1 + 0x220] = a0\n 34974: u64 [s1 + 600] = 0\n 34978: a0 = u64 [s1 + 0x50]\n 34981: u64 [s1 + 0x250] = a0\n 34985: a0 = u64 [s1 + 0x58]\n 34988: u64 [s1 + 0x248] = a0\n 34992: a0 = u64 [0x20128]\n 34997: a1 = u64 [0x20130]\n 35002: a2 = u64 [0x20138]\n 35007: a3 = u64 [s1 + 0x60]\n 35010: u64 [s1 + 0x240] = a3\n 35014: u64 [s1 + 0x278] = a0\n 35018: u64 [s1 + 0x270] = a1\n 35022: u64 [s1 + 0x268] = a2\n 35026: a0 = u64 [0x20140]\n 35031: a1 = 0x20\n 35034: a2 = s1 + 0x260\n 35038: a3 = s1 + 0x240\n 35042: a4 = s1 + 0x220\n 35046: a5 = s1 + 0x200\n 35050: u64 [s1 + 0x260] = a0\n 35054: a0 = u64 [s1 + 0x78]\n 35057: ra = 1596, jump @18\n      : @1402 [@dyn 798] (gas: 7)\n 35064: sp = s0 + 0xfffffffffffffa00\n 35068: a0 = sp + 0x500\n 35072: ra = u64 [a0 + 0xf8]\n 35076: s0 = u64 [a0 + 0xf0]\n 35080: s1 = u64 [a0 + 0xe8]\n 35084: sp = sp + 0x600\n 35088: ret\n      : @1403 (gas: 1)\n 35090: trap\n      : @1404 (gas: 9)\n 35091: u64 [s1 + 144] = 0\n 35095: u64 [s1 + 136] = 0\n 35099: u64 [s1 + 128] = 0\n 35103: a0 = 0xa7a9536d00000000\n 35113: a1 = s1 + 0x80\n 35117: u64 [s1 + 0x98] = a0\n 35121: a0 = 0\n 35123: ra = 0x63e\n 35127: jump @9\n      : @1405 (gas: 9)\n 35131: u64 [s1 + 176] = 0\n 35135: u64 [s1 + 168] = 0\n 35139: u64 [s1 + 160] = 0\n 35143: a0 = 0xafa4e2b600000000\n 35153: a1 = s1 + 0xa0\n 35157: u64 [s1 + 0xb8] = a0\n 35161: a0 = 0\n 35163: ra = 0x63e\n 35167: jump @9\n      : @1406 (gas: 9)\n 35171: u64 [s1 + 880] = 0\n 35175: u64 [s1 + 872] = 0\n 35179: u64 [s1 + 864] = 0\n 35183: a0 = 0x560ff90000000000\n 35193: a1 = s1 + 0x360\n 35197: u64 [s1 + 0x378] = a0\n 35201: a0 = 0\n 35203: ra = 0x63e\n 35207: jump @9\n      : @1407 (gas: 8)\n 35211: u64 [s1 + 400] = 0\n 35215: u64 [s1 + 392] = 0\n 35219: u64 [s1 + 384] = 0\n 35223: a0 = 0x90b8ec1800000000\n 35233: a1 = s1 + 0x180\n 35237: u64 [s1 + 0x198] = a0\n 35241: a0 = 0\n 35243: ra = 1598, jump @9\n      : @1408 [@dyn 799] (gas: 3)\n 35250: a0 = u64 [s1 + 0x70]\n 35253: a0 = i32 [a0]\n 35255: jump @1410 if a0 >u 31\n      : @1409 (gas: 3)\n 35259: a1 = u64 [s1 + 0x70]\n 35262: u32 [a1 + 0] = 0x20\n 35265: fallthrough\n      : @1410 (gas: 7)\n 35266: a0 = 0x1\n 35269: a2 = 0x4\n 35272: a1 = u64 [s1 + 0x78]\n 35275: ecalli 13 // 'seal_return'\n 35277: a0 = 0\n 35279: ra = 0x640\n 35283: jump @27\n      : @1411 [export #0: 'call'] (gas: 2)\n 35287: a0 = 0\n 35289: ra = 1600, jump @27\n      : @1412 [@dyn 800] [export #1: 'deploy'] (gas: 2)\n 35296: a0 = 0x1\n 35299: ra = 1602, jump @27\n      : @1413 [@dyn 801] (gas: 15)\n 35306: a0 = u64 [a2 + 0x8]\n 35309: a1 = i32 [a2 + 0x10]\n 35312: a2 = u64 [a2]\n 35314: a0 = reverse a0\n 35316: a3 = a0 << 0x20\n 35319: a1 = reverse a1\n 35321: a1 = a1 >> 0x20\n 35324: a3 = a3 | a1\n 35327: a0 = a0 >> 0x20\n 35330: a1 = reverse a2\n 35332: a2 = a1 << 0x20\n 35335: a0 = a0 | a2\n 35338: a1 = a1 >> 0x20\n 35341: a2 = s1 + 0x18b8\n 35345: jump [t0]\n      : @1414 (gas: 27)\n 35347: u64 [s1 + 0xe8] = a0\n 35351: a0 = ra - a3\n 35354: a0 = a0 <u a5\n 35357: a1 = ra <u a3\n 35360: a5 = u64 [s1 + 0xb8]\n 35364: a4 = ra - a5\n 35367: a4 = a4 - a1\n 35370: a4 = a4 - a0\n 35373: ra = a4 >>a 0x3f\n 35376: a0 = u64 [s1 + 0xb0]\n 35380: a0 = ra & a0\n 35383: a1 = u64 [s1 + 0xc0]\n 35387: t2 = a1 - a0\n 35390: a1 = a1 <u a0\n 35393: t1 = a2 - a1\n 35396: a1 = 0 if a2 != 0\n 35398: a0 = a3 - a1\n 35401: u64 [s1 + 0xc8] = a0\n 35405: a1 = a3 <u a1\n 35408: a1 = a5 - a1\n 35411: a0 = s1 + 0x100\n 35415: a3 = u64 [a0 + 0x18]\n 35418: a5 = u64 [a0 + 0x10]\n 35421: a2 = a3 | a5\n 35424: a2 = a2 <u 0x1\n 35427: a4 = u64 [a0]\n 35429: jump [t0]\n      : @1415 (gas: 24)\n 35431: a0 = a1 if a2 == 0\n 35434: a2 = u64 [s1 + 0xd0]\n 35438: a3 = a2\n 35440: a1 = a2\n 35442: a2 = u64 [s1 + 0xe0]\n 35446: a3 = a0 if a2 != 0\n 35449: u64 [s1 + 0xe8] = a3\n 35453: a0 = u64 [s1 + 0xc8]\n 35457: a3 = u64 [s1 + 0xb0]\n 35461: a0 = a0 | a3\n 35464: a3 = u64 [s1 + 0xa0]\n 35468: a0 = a3 if a5 == 0\n 35471: a4 = u64 [s1 + 0xd8]\n 35475: a3 = a4\n 35477: a3 = a0 if a2 != 0\n 35480: u64 [s1 + 0xe0] = a3\n 35484: a0 = u64 [s1 + 0xf0]\n 35488: a0 = 0 if a5 == 0\n 35490: u64 [s1 + 0xf0] = a0\n 35494: u64 [s1 + 176] = 0x15180\n 35501: a0 = u64 [s1 + 0x118]\n 35505: a2 = a0 + 0xffffffffffffff80\n 35508: a0 = a4\n 35510: jump [t0]\n      : @1416 (gas: 17)\n 35512: a2 = u64 [s1 + 0xd0]\n 35516: a0 = u64 [a2 + 0x8]\n 35519: a1 = i32 [a2 + 0x10]\n 35522: a2 = u64 [a2]\n 35524: a0 = reverse a0\n 35526: a3 = a0 << 0x20\n 35529: a1 = reverse a1\n 35531: a1 = a1 >> 0x20\n 35534: a3 = a3 | a1\n 35537: a0 = a0 >> 0x20\n 35540: a1 = reverse a2\n 35542: a2 = a1 << 0x20\n 35545: a0 = a0 | a2\n 35548: a1 = a1 >> 0x20\n 35551: a2 = s1 + 0x7ff\n 35555: a2 = a2 + 0x99\n 35559: jump [t0]\n      : @1417 (gas: 18)\n 35561: a1 = a2 + 0x1\n 35564: u64 [s1 + 0x118] = a1\n 35568: a0 = a1 <u 0x1\n 35571: a0 = a0 + a3\n 35574: u64 [s1 + 0x110] = a0\n 35578: a0 = a0 | a1\n 35581: a0 = a0 <u 0x1\n 35584: a0 = a0 + t1\n 35587: u64 [s1 + 0x100] = a0\n 35591: a0 = a0 <u t1\n 35594: a0 = a0 + ra\n 35597: u64 [s1 + 0x108] = a0\n 35601: a1 = 0xff - a2\n 35605: u64 [s1 + 0xe0] = a1\n 35609: a2 = 0x80 - a1\n 35613: a0 = u64 [s1 + 0xc0]\n 35617: a1 = u64 [s1 + 0xb8]\n 35621: jump [t0]\n      : @1418 (gas: 5)\n 35623: sp = a0\n 35625: i32 a2 = a0 + 0\n 35627: a1 = 0x40\n 35630: a0 = u64 [s1 + 0x110]\n 35634: jump [t0]\n      : @1419 (gas: 8)\n 35636: a0 = u64 [a2 + 0x8]\n 35639: a1 = i32 [a2 + 0x10]\n 35642: a2 = u64 [a2]\n 35644: a3 = reverse a0\n 35646: a0 = a3 << 0x20\n 35649: a1 = reverse a1\n 35651: a1 = a1 >> 0x20\n 35654: jump [t0]\n      : @1420 (gas: 16)\n 35656: a2 = u64 [s1 + 0x88]\n 35660: a0 = u64 [a2 + 0x8]\n 35663: a1 = i32 [a2 + 0x10]\n 35666: a2 = u64 [a2]\n 35668: a0 = reverse a0\n 35670: a3 = a0 << 0x20\n 35673: a1 = reverse a1\n 35675: a1 = a1 >> 0x20\n 35678: a3 = a3 | a1\n 35681: a0 = a0 >> 0x20\n 35684: a1 = reverse a2\n 35686: a2 = a1 << 0x20\n 35689: a0 = a0 | a2\n 35692: a1 = a1 >> 0x20\n 35695: a2 = s1 + 0x20b8\n 35699: jump [t0]\n      : @1421 (gas: 15)\n 35701: t2 = u64 [s1 + 0xc0]\n 35705: t1 = u64 [s1 + 0xb8]\n 35709: u64 [s1 + 216] = 0\n 35713: u64 [s1 + 208] = 0\n 35717: a2 = u64 [s1 + 0xa8]\n 35721: a1 = 0 if a2 == 0\n 35723: a0 = 0 if a2 == 0\n 35725: u64 [s1 + 0xc8] = a0\n 35729: a3 = u64 [s1 + 0xb0]\n 35733: a2 = a3 + 0xffffffffffffffff\n 35736: u64 [s1 + 0xa8] = a2\n 35740: a2 = a3 >u 0\n 35742: a2 = a2 + 0xffffffffffffffff\n 35745: u64 [s1 + 0xa0] = a2\n 35749: jump [t0]\n      : @1422 (gas: 15)\n 35751: a2 = u64 [s1 + 0x100]\n 35755: a0 = u64 [a2 + 0x8]\n 35758: a1 = i32 [a2 + 0x10]\n 35761: a2 = u64 [a2]\n 35763: a0 = reverse a0\n 35765: a3 = a0 << 0x20\n 35768: a1 = reverse a1\n 35770: a1 = a1 >> 0x20\n 35773: a3 = a3 | a1\n 35776: a0 = a0 >> 0x20\n 35779: a1 = reverse a2\n 35781: a2 = a1 << 0x20\n 35784: a0 = a0 | a2\n 35787: a1 = a1 >> 0x20\n 35790: jump [t0]\n      : @1423 (gas: 8)\n 35792: a0 = sp + 0xffffffffffffffe0\n 35795: a0 = a0 & 0xffffffffffffffe0\n 35798: u64 [s1 + 0x110] = a0\n 35802: sp = a0\n 35804: i32 a2 = a0 + 0\n 35806: a1 = 0x40\n 35809: a0 = u64 [s1 + 0x90]\n 35813: jump [t0]\n      : @1424 (gas: 12)\n 35815: a2 = t2 >> 0x3f\n 35818: a3 = t1 << 0x1\n 35821: a2 = a2 | a3\n 35824: a3 = t2 << 0x1\n 35827: t2 = u64 [s1 + 0xe8]\n 35831: a4 = t2 >> 0x3f\n 35834: a3 = a3 | a4\n 35837: u64 [s1 + 0xc0] = a3\n 35841: ra = u64 [s1 + 0xa0]\n 35845: a0 = t1\n 35847: t1 = ra ^ a2\n 35850: jump [t0]\n      : @1425 (gas: 14)\n 35852: a0 = u64 [a3 + 0x18]\n 35855: a1 = u64 [a3 + 0x10]\n 35858: a2 = u64 [a3 + 0x8]\n 35861: a3 = u64 [a3]\n 35863: a0 = reverse a0\n 35865: a4 = reverse a1\n 35867: a2 = reverse a2\n 35869: a3 = reverse a3\n 35871: a1 = u64 [s1 + 0xf0]\n 35875: u64 [a1 + 0x18] = a3\n 35878: u64 [a1 + 0x10] = a2\n 35881: u64 [a1 + 0x8] = a4\n 35884: u64 [a1] = a0\n 35886: jump [t0]\n      : @1426 (gas: 14)\n 35888: a3 = u64 [s1 + 0xf0]\n 35892: a0 = u64 [a3 + 0x18]\n 35895: a1 = u64 [a3 + 0x10]\n 35898: a2 = u64 [a3 + 0x8]\n 35901: a3 = u64 [a3]\n 35903: a0 = reverse a0\n 35905: u64 [s1 + 0xf0] = a0\n 35909: a0 = reverse a1\n 35911: u64 [s1 + 0xe8] = a0\n 35915: a0 = reverse a2\n 35917: u64 [s1 + 0xe0] = a0\n 35921: a0 = reverse a3\n 35923: u64 [s1 + 0xd8] = a0\n 35927: jump [t0]\n      : @1427 (gas: 20)\n 35929: a3 = u64 [s1 + 0xf0]\n 35933: a0 = u64 [a3 + 0x18]\n 35936: a1 = u64 [a3 + 0x10]\n 35939: a2 = u64 [a3 + 0x8]\n 35942: a3 = u64 [a3]\n 35944: a0 = reverse a0\n 35946: u64 [s1 + 0xe8] = a0\n 35950: a0 = reverse a1\n 35952: u64 [s1 + 0xe0] = a0\n 35956: a0 = reverse a2\n 35958: u64 [s1 + 0xd8] = a0\n 35962: a0 = reverse a3\n 35964: u64 [s1 + 0xd0] = a0\n 35968: a0 = sp + 0xffffffffffffffe0\n 35971: a0 = a0 & 0xffffffffffffffe0\n 35974: u64 [s1 + 0xf0] = a0\n 35978: sp = a0\n 35980: a2 = s1 + 0x10b8\n 35984: a0 = u64 [s1 + 0x108]\n 35988: jump [t0]\n      : @1428 (gas: 21)\n 35990: a3 = u64 [s1 + 0x100]\n 35994: a0 = u64 [a3 + 0x18]\n 35997: a1 = u64 [a3 + 0x10]\n 36000: a2 = u64 [a3 + 0x8]\n 36003: a3 = u64 [a3]\n 36005: a0 = reverse a0\n 36007: u64 [s1 + 0xf0] = a0\n 36011: a0 = reverse a1\n 36013: u64 [s1 + 0xe8] = a0\n 36017: a0 = reverse a2\n 36019: u64 [s1 + 0xe0] = a0\n 36023: a0 = reverse a3\n 36025: u64 [s1 + 0xd8] = a0\n 36029: a0 = sp + 0xffffffffffffffe0\n 36032: a0 = a0 & 0xffffffffffffffe0\n 36035: u64 [s1 + 0x100] = a0\n 36039: sp = a0\n 36041: a2 = s1 + 0x7ff\n 36045: a2 = a2 + 0x99\n 36049: a0 = u64 [s1 + 0xf8]\n 36053: jump [t0]\n      : @1429 (gas: 10)\n 36055: a0 = u64 [a3 + 0x18]\n 36058: a1 = u64 [a3 + 0x10]\n 36061: a2 = u64 [a3 + 0x8]\n 36064: a3 = u64 [a3]\n 36066: a0 = reverse a0\n 36068: a1 = reverse a1\n 36070: a2 = reverse a2\n 36072: a3 = reverse a3\n 36074: a4 = s1 + 0x20b8\n 36078: jump [t0]\n      : @1430 (gas: 9)\n 36080: a0 = u64 [a3 + 0x18]\n 36083: a1 = u64 [a3 + 0x10]\n 36086: a2 = u64 [a3 + 0x8]\n 36089: a3 = u64 [a3]\n 36091: a0 = reverse a0\n 36093: a4 = reverse a1\n 36095: a2 = reverse a2\n 36097: a3 = reverse a3\n 36099: jump [t0]\n      : @1431 (gas: 12)\n 36101: a1 = a1 << 0x1\n 36104: a4 = u64 [s1 + 0xc8]\n 36108: a3 = a4 >> 0x3f\n 36111: a1 = a1 | a3\n 36114: u64 [s1 + 0xb8] = a1\n 36118: a3 = a0 >> 0x3f\n 36121: a0 = a4 << 0x1\n 36124: a3 = a3 | a0\n 36127: a0 = t2 << 0x1\n 36130: a4 = u64 [s1 + 0xe0]\n 36134: a1 = a4 >> 0x3f\n 36137: jump [t0]\n      : @1432 (gas: 8)\n 36139: a3 = a4 <u a3\n 36142: a5 = a2 + a3\n 36145: a2 = a5 <u a2\n 36148: a2 = a3 if a3 == 0\n 36151: a2 = a2 + a1\n 36154: a1 = a2 <u a1\n 36157: a0 = a0 + a1\n 36160: jump [t0]\n      : @1433 (gas: 16)\n 36162: a3 = u64 [s1 + 0x110]\n 36166: a0 = u64 [a3 + 0x18]\n 36169: a1 = u64 [a3 + 0x10]\n 36172: a2 = u64 [a3 + 0x8]\n 36175: a3 = u64 [a3]\n 36177: a0 = reverse a0\n 36179: u64 [s1 + 0x110] = a0\n 36183: a0 = reverse a1\n 36185: u64 [s1 + 0x108] = a0\n 36189: a0 = reverse a2\n 36191: u64 [s1 + 0x100] = a0\n 36195: a0 = reverse a3\n 36197: u64 [s1 + 0xf8] = a0\n 36201: a0 = 0x18b8\n 36205: a2 = s1 + a0\n 36208: jump [t0]\n      : @1434 (gas: 11)\n 36210: a2 = u64 [s1 + 0xa8]\n 36214: a1 = a1 | a2\n 36217: a2 = u64 [s1 + 0x118]\n 36221: a3 = a2 <u 0x80\n 36225: u64 [s1 + 0xa8] = a3\n 36229: a4 = u64 [s1 + 0xa0]\n 36233: a1 = a4 if a3 == 0\n 36236: a4 = u64 [s1 + 0xb8]\n 36240: a4 = a1 if a2 != 0\n 36243: u64 [s1 + 0xb8] = a4\n 36247: jump [t0]\n      : @1435 (gas: 19)\n 36249: a3 = u64 [s1 + 0xf0]\n 36253: a0 = u64 [a3 + 0x18]\n 36256: a1 = u64 [a3 + 0x10]\n 36259: a2 = u64 [a3 + 0x8]\n 36262: a3 = u64 [a3]\n 36264: a0 = reverse a0\n 36266: u64 [s1 + 0xe8] = a0\n 36270: a0 = reverse a1\n 36272: u64 [s1 + 0xe0] = a0\n 36276: a0 = reverse a2\n 36278: u64 [s1 + 0xd8] = a0\n 36282: a0 = reverse a3\n 36284: u64 [s1 + 0xd0] = a0\n 36288: a0 = sp + 0xffffffffffffffe0\n 36291: a0 = a0 & 0xffffffffffffffe0\n 36294: u64 [s1 + 0xf0] = a0\n 36298: sp = a0\n 36300: a0 = u64 [s1 + 0x100]\n 36304: jump [t0]\n      : @1436 (gas: 19)\n 36306: a3 = u64 [s1 + 0xe8]\n 36310: a0 = u64 [a3 + 0x18]\n 36313: a1 = u64 [a3 + 0x10]\n 36316: a2 = u64 [a3 + 0x8]\n 36319: a3 = u64 [a3]\n 36321: a5 = reverse a0\n 36323: a4 = reverse a1\n 36325: a0 = reverse a2\n 36327: a2 = reverse a3\n 36329: a1 = u64 [s1 + 0xf0]\n 36333: u64 [s1 + 0xe0] = a2\n 36337: u64 [a1 + 0x18] = a2\n 36340: u64 [s1 + 0xe8] = a0\n 36344: u64 [a1 + 0x10] = a0\n 36347: u64 [s1 + 0xd8] = a4\n 36351: u64 [a1 + 0x8] = a4\n 36354: u64 [s1 + 0xd0] = a5\n 36358: u64 [a1] = a5\n 36360: jump [t0]\n      : @1437 (gas: 8)\n 36362: a0 = sp + 0xffffffffffffffe0\n 36365: a0 = a0 & 0xffffffffffffffe0\n 36368: u64 [s1 + 0x68] = a0\n 36371: sp = a0\n 36373: i32 a2 = a0 + 0\n 36375: a1 = 0x40\n 36378: a0 = u64 [s1 + 0x78]\n 36381: jump [t0]\n      : @1438 (gas: 17)\n 36383: a4 = s1 + 0x100\n 36387: a2 = u64 [a4]\n 36389: a0 = u64 [a2 + 0x8]\n 36392: a1 = i32 [a2 + 0x10]\n 36395: a2 = u64 [a2]\n 36397: a0 = reverse a0\n 36399: a3 = a0 << 0x20\n 36402: a1 = reverse a1\n 36404: a1 = a1 >> 0x20\n 36407: a3 = a3 | a1\n 36410: a0 = a0 >> 0x20\n 36413: a1 = reverse a2\n 36415: a2 = a1 << 0x20\n 36418: a0 = a0 | a2\n 36421: a1 = a1 >> 0x20\n 36424: a2 = u64 [a4 + 0x18]\n 36427: jump [t0]\n      : @1439 (gas: 14)\n 36429: a3 = u64 [s1 + 0x118]\n 36433: a0 = u64 [a3 + 0x18]\n 36436: a1 = u64 [a3 + 0x10]\n 36439: a2 = u64 [a3 + 0x8]\n 36442: a3 = u64 [a3]\n 36444: a5 = reverse a0\n 36446: u64 [s1 + 0x108] = a5\n 36450: a4 = reverse a1\n 36452: u64 [s1 + 0x110] = a4\n 36456: a2 = reverse a2\n 36458: u64 [s1 + 0x100] = a2\n 36462: a0 = reverse a3\n 36464: u64 [s1 + 0x118] = a0\n 36468: jump [t0]\n      : @1440 (gas: 15)\n 36470: a0 = u64 [a3 + 0x18]\n 36473: a1 = u64 [a3 + 0x10]\n 36476: a2 = u64 [a3 + 0x8]\n 36479: a3 = u64 [a3]\n 36481: a0 = reverse a0\n 36483: u64 [s1 + 0x108] = a0\n 36487: a0 = reverse a1\n 36489: u64 [s1 + 0x100] = a0\n 36493: a0 = reverse a2\n 36495: u64 [s1 + 0xf8] = a0\n 36499: a0 = reverse a3\n 36501: u64 [s1 + 0xf0] = a0\n 36505: a0 = sp + 0xffffffffffffffe0\n 36508: a0 = a0 & 0xffffffffffffffe0\n 36511: jump [t0]\n      : @1441 (gas: 16)\n 36513: a3 = u64 [s1 + 0x110]\n 36517: a0 = u64 [a3 + 0x18]\n 36520: a1 = u64 [a3 + 0x10]\n 36523: a2 = u64 [a3 + 0x8]\n 36526: a3 = u64 [a3]\n 36528: a0 = reverse a0\n 36530: a4 = reverse a1\n 36532: a2 = reverse a2\n 36534: a3 = reverse a3\n 36536: a1 = u64 [s1 + 0x118]\n 36540: u64 [a1 + 0x18] = a3\n 36543: u64 [a1 + 0x10] = a2\n 36546: u64 [a1 + 0x8] = a4\n 36549: u64 [a1] = a0\n 36551: a0 = 0x2000\n 36555: jump [t0]\n      : @1442 (gas: 9)\n 36557: a0 = u64 [a3 + 0x18]\n 36560: a1 = u64 [a3 + 0x10]\n 36563: a2 = u64 [a3 + 0x8]\n 36566: a3 = u64 [a3]\n 36568: a0 = reverse a0\n 36570: a1 = reverse a1\n 36572: a2 = reverse a2\n 36574: a3 = reverse a3\n 36576: jump [t0]\n      : @1443 (gas: 8)\n 36578: a0 = a0 | a2\n 36581: a2 = a3 | a1\n 36584: a2 = a2 | a0\n 36587: a2 = a2 >> 0x20\n 36590: a0 = a0 | a1\n 36593: a0 = a0 << 0x20\n 36596: a0 = a0 | a2\n 36599: jump [t0]\n      : @1444 (gas: 15)\n 36601: a0 = u64 [a3 + 0x18]\n 36604: a1 = u64 [a3 + 0x10]\n 36607: a2 = u64 [a3 + 0x8]\n 36610: a3 = u64 [a3]\n 36612: a0 = reverse a0\n 36614: u64 [s1 + 0xf8] = a0\n 36618: a0 = reverse a1\n 36620: u64 [s1 + 0xf0] = a0\n 36624: a0 = reverse a2\n 36626: u64 [s1 + 0xe8] = a0\n 36630: a0 = reverse a3\n 36632: u64 [s1 + 0xe0] = a0\n 36636: a0 = sp + 0xffffffffffffffe0\n 36639: a0 = a0 & 0xffffffffffffffe0\n 36642: jump [t0]\n      : @1445 (gas: 15)\n 36644: a0 = u64 [a3 + 0x18]\n 36647: a1 = u64 [a3 + 0x10]\n 36650: a2 = u64 [a3 + 0x8]\n 36653: a3 = u64 [a3]\n 36655: a0 = reverse a0\n 36657: u64 [s1 + 0xe8] = a0\n 36661: a0 = reverse a1\n 36663: u64 [s1 + 0xe0] = a0\n 36667: a0 = reverse a2\n 36669: u64 [s1 + 0xd8] = a0\n 36673: a0 = reverse a3\n 36675: u64 [s1 + 0xd0] = a0\n 36679: a0 = sp + 0xffffffffffffffe0\n 36682: a0 = a0 & 0xffffffffffffffe0\n 36685: jump [t0]\n      : @1446 (gas: 14)\n 36687: a0 = u64 [a3 + 0x18]\n 36690: a1 = u64 [a3 + 0x10]\n 36693: a2 = u64 [a3 + 0x8]\n 36696: a3 = u64 [a3]\n 36698: a0 = reverse a0\n 36700: a4 = reverse a1\n 36702: a2 = reverse a2\n 36704: a3 = reverse a3\n 36706: a1 = u64 [s1 + 0x100]\n 36710: u64 [a1 + 0x18] = a3\n 36713: u64 [a1 + 0x10] = a2\n 36716: u64 [a1 + 0x8] = a4\n 36719: u64 [a1] = a0\n 36721: jump [t0]\n      : @1447 (gas: 8)\n 36723: a0 = sp + 0xffffffffffffffe0\n 36726: a0 = a0 & 0xffffffffffffffe0\n 36729: u64 [s1 + 0xf0] = a0\n 36733: sp = a0\n 36735: i32 a2 = a0 + 0\n 36737: a1 = 0x40\n 36740: a0 = u64 [s1 + 0x108]\n 36744: jump [t0]\n      : @1448 (gas: 8)\n 36746: a0 = sp + 0xffffffffffffffe0\n 36749: a0 = a0 & 0xffffffffffffffe0\n 36752: u64 [s1 + 0xf0] = a0\n 36756: sp = a0\n 36758: i32 a2 = a0 + 0\n 36760: a1 = 0x40\n 36763: a0 = u64 [s1 + 0x100]\n 36767: jump [t0]\n      : @1449 (gas: 13)\n 36769: a1 = u64 [s1 + 0xd0]\n 36773: a0 = a1 + 0x2\n 36776: a1 = a0 <u a1\n 36779: a3 = u64 [s1 + 0xd8]\n 36783: a2 = a3 + a1\n 36786: a3 = a2 <u a3\n 36789: a3 = a1 if a1 == 0\n 36792: a1 = u64 [s1 + 0xe8]\n 36796: a3 = a3 + a1\n 36799: a1 = a3 <u a1\n 36802: a4 = u64 [s1 + 0xe0]\n 36806: a1 = a1 + a4\n 36809: jump [t0]\n      : @1450 (gas: 9)\n 36811: a5 = s1 + 0x100\n 36815: u64 [a5 + 0x18] = a1\n 36818: u64 [a5 + 0x10] = a3\n 36821: a0 = a3 | a1\n 36824: u64 [s1 + 0xf8] = a2\n 36828: u64 [a5 + 0x8] = a4\n 36831: a1 = a4 | a2\n 36834: a0 = a0 | a1\n 36837: jump [t0]\n      : @1451 (gas: 10)\n 36839: u64 [s1] = a3\n 36841: u64 [s1 + 0x8] = a2\n 36844: u64 [s1 + 0x10] = a1\n 36847: u64 [s1 + 0x18] = a0\n 36850: sp = s0 + 0xffffffffffffffc0\n 36853: ra = u64 [sp + 0x38]\n 36856: s0 = u64 [sp + 0x30]\n 36859: s1 = u64 [sp + 0x28]\n 36862: sp = sp + 0x40\n 36865: jump [t0]\n      : @1452 (gas: 10)\n 36867: a0 = u64 [a3 + 0x18]\n 36870: a1 = u64 [a3 + 0x10]\n 36873: a2 = u64 [a3 + 0x8]\n 36876: a3 = u64 [a3]\n 36878: a0 = reverse a0\n 36880: a1 = reverse a1\n 36882: a2 = reverse a2\n 36884: a3 = reverse a3\n 36886: a4 = s1 + 0x28b8\n 36890: jump [t0]\n      : @1453 (gas: 9)\n 36892: u64 [a2 + 0x20] = a0\n 36895: a0 = u64 [s1 + 0xe0]\n 36899: u64 [a2 + 0x18] = a0\n 36902: a0 = u64 [s1 + 0xe8]\n 36906: u64 [a2 + 0x10] = a0\n 36909: a3 = a1\n 36911: a0 = 0x20\n 36914: a1 = s1 + 0x7ff\n 36918: jump [t0]\n      : @1454 (gas: 10)\n 36920: u64 [s1 + 0xf0] = a1\n 36924: a4 = s1 + 0x100\n 36928: a1 = u64 [a4 + 0x10]\n 36931: a2 = u64 [a4 + 0x8]\n 36934: a2 = a2 | a1\n 36937: a1 = u64 [a4 + 0x18]\n 36940: a3 = u64 [a4]\n 36942: a1 = a1 | a3\n 36945: a1 = a1 | a2\n 36948: jump [t0]\n      : @1455 (gas: 9)\n 36950: a0 = a0 | a1\n 36953: a1 = u64 [s1 + 0xc8]\n 36957: a0 = a1 if a3 == 0\n 36960: a1 = u64 [s1 + 0xc0]\n 36964: a1 = a0 if a2 != 0\n 36967: u64 [s1 + 0xc0] = a1\n 36971: a0 = u64 [s1 + 0xd8]\n 36975: a1 = u64 [s1 + 0xd0]\n 36979: jump [t0]\n      : @1456 (gas: 16)\n 36981: a4 = u64 [a3]\n 36983: u64 [sp + 0x18] = a4\n 36986: a4 = u64 [a3 + 0x8]\n 36989: u64 [sp + 0x20] = a4\n 36992: a4 = u64 [a3 + 0x10]\n 36995: u64 [sp + 0x28] = a4\n 36998: a3 = u64 [a3 + 0x18]\n 37001: u64 [sp + 0x30] = a3\n 37004: s1 = u64 [a2]\n 37006: a3 = u64 [a2 + 0x8]\n 37009: u64 [sp] = a3\n 37011: a3 = u64 [a2 + 0x10]\n 37014: u64 [sp + 0x8] = a3\n 37017: a2 = u64 [a2 + 0x18]\n 37020: u64 [sp + 0x10] = a2\n 37023: jump [t0]\n      : @1457 (gas: 9)\n 37025: u64 [s1 + 0xe0] = a3\n 37029: a1 = 0 if a4 == 0\n 37031: u64 [s1 + 0xe8] = a1\n 37035: u64 [s1 + 184] = 0x15180\n 37042: a0 = u64 [s1 + 0x110]\n 37046: a2 = a0 + 0xffffffffffffff80\n 37049: a0 = a5\n 37051: a1 = t1\n 37053: jump [t0]\n      : @1458 (gas: 6)\n 37055: a0 = u64 [a3 + 0x18]\n 37058: a1 = u64 [a3 + 0x10]\n 37061: a2 = u64 [a3 + 0x8]\n 37064: a3 = u64 [a3]\n 37066: a0 = reverse a0\n 37068: jump [t0]\n      : @1459 (gas: 10)\n 37070: a3 = u64 [s1 + 0x110]\n 37074: a0 = u64 [a3]\n 37076: a1 = u64 [a3 + 0x8]\n 37079: a2 = u64 [a3 + 0x10]\n 37082: a3 = u64 [a3 + 0x18]\n 37085: a0 = reverse a0\n 37087: a1 = reverse a1\n 37089: a2 = reverse a2\n 37091: a3 = reverse a3\n 37093: jump [t0]\n      : @1460 (gas: 8)\n 37095: a1 = a2 <u a0\n 37098: a0 = a2 & 0xffffffffffffffe0\n 37101: a2 = a0 + 0x20\n 37104: a0 = a2 <u a0\n 37107: a3 = a1 + a0\n 37110: a4 = a3 <u a1\n 37113: a4 = a0 if a0 == 0\n 37116: jump [t0]\n      : @1461 (gas: 4)\n 37118: a0 = u64 [s1 + 0x118]\n 37122: a0 = i32 [a0]\n 37124: a1 = 0x3f\n 37127: jump [t0]\n      : @1462 (gas: 11)\n 37129: u64 [a3 + 0xf0] = a1\n 37133: a1 = a1 | a0\n 37136: u64 [a3 + 0xe8] = a0\n 37140: a0 = a1 <u 0x1\n 37143: a1 = u64 [s1 + 0x100]\n 37147: a0 = a0 + a1\n 37150: u64 [a3 + 0xf8] = a0\n 37154: a0 = a0 <u a1\n 37157: a1 = u64 [s1 + 0x118]\n 37161: a0 = a0 + a1\n 37164: jump [t0]\n      : @1463 (gas: 8)\n 37166: a1 = u64 [s1 + 0x108]\n 37170: a0 = a1 + 0x2\n 37173: a1 = a0 <u a1\n 37176: a3 = u64 [s1 + 0x110]\n 37180: a2 = a3 + a1\n 37183: a3 = a2 <u a3\n 37186: a3 = a1 if a1 == 0\n 37189: jump [t0]\n      : @1464 (gas: 6)\n 37191: u64 [s1 + 0xa8] = a1\n 37195: a1 = u64 [s1 + 0x118]\n 37199: a2 = 0x80 - a1\n 37203: a0 = u64 [s1 + 0xd8]\n 37207: a1 = u64 [s1 + 0xd0]\n 37211: jump [t0]\n      : @1465 (gas: 5)\n 37213: a0 = sp + 0xffffffffffffffe0\n 37216: a2 = a0 & 0xffffffffffffffe0\n 37219: u64 [s1 + 0x118] = a2\n 37223: sp = a2\n 37225: jump [t0]\n      : @1466 (gas: 5)\n 37227: a0 = a2 ^ 0xff\n 37231: a0 = a0 | t1\n 37234: a1 = a3 | ra\n 37237: a0 = a0 | a1\n 37240: jump [t0]\n      : @1467 (gas: 10)\n 37242: a2 = u64 [s1 + 0xa8]\n 37246: a1 = 0 if a2 == 0\n 37248: a0 = 0 if a2 == 0\n 37250: a3 = u64 [s1 + 0xb8]\n 37254: a2 = a3 + 0xffffffffffffffff\n 37257: u64 [s1 + 0xb0] = a2\n 37261: a2 = a3 >u 0\n 37263: a2 = a2 + 0xffffffffffffffff\n 37266: u64 [s1 + 0xa8] = a2\n 37270: jump [t0]\n      : @1468 (gas: 9)\n 37272: a0 = a0 & 0xffffffffffffffff\n 37275: a1 = a1 & 0xffffffffffffffff\n 37278: a2 = a2 & 0xffffffffffffffff\n 37281: a4 = u64 [s1 + 0xf8]\n 37285: a3 = a3 & a4\n 37288: a4 = u64 [s1 + 0x110]\n 37292: a3 = a3 | a4\n 37295: a4 = s1 + 0x28b8\n 37299: jump [t0]\n      : @1469 (gas: 12)\n 37301: a0 = u64 [sp + 0x18]\n 37304: a1 = u64 [sp + 0x10]\n 37307: a2 = u64 [sp + 0x8]\n 37310: a3 = u64 [sp]\n 37312: a4 = a2 | a0\n 37315: a5 = a3 | a1\n 37318: a5 = a5 | a4\n 37321: a5 = a5 >> 0x20\n 37324: a4 = a4 | a1\n 37327: a4 = a4 << 0x20\n 37330: a4 = a4 | a5\n 37333: jump [t0]\n      : @1470 (gas: 7)\n 37335: a3 = u64 [s1 + 0xd0]\n 37339: a0 = a0 - a3\n 37342: a3 = u64 [s1 + 0x108]\n 37346: a4 = u64 [s1 + 0xe0]\n 37350: a3 = a4 - a3\n 37353: a4 = s1 + 0x20b8\n 37357: jump [t0]\n      : @1471 (gas: 8)\n 37359: a0 = sp + 0xffffffffffffffe0\n 37362: a0 = a0 & 0xffffffffffffffe0\n 37365: u64 [s1 + 0xe8] = a0\n 37369: sp = a0\n 37371: i32 a2 = a0 + 0\n 37373: a1 = 0x40\n 37376: a0 = u64 [s1 + 0x108]\n 37380: jump [t0]\n      : @1472 (gas: 8)\n 37382: a0 = sp + 0xffffffffffffffe0\n 37385: a0 = a0 & 0xffffffffffffffe0\n 37388: u64 [s1 + 0xe8] = a0\n 37392: sp = a0\n 37394: i32 a2 = a0 + 0\n 37396: a1 = 0x40\n 37399: a0 = u64 [s1 + 0x100]\n 37403: jump [t0]\n      : @1473 (gas: 9)\n 37405: a0 = u64 [a2 + 0x8]\n 37408: a1 = i32 [a2 + 0x10]\n 37411: a2 = u64 [a2]\n 37413: a0 = reverse a0\n 37415: a3 = a0 << 0x20\n 37418: a1 = reverse a1\n 37420: a1 = a1 >> 0x20\n 37423: a1 = a1 | a3\n 37426: jump [t0]\n      : @1474 (gas: 4)\n 37428: a0 = u64 [s1 + 0x118]\n 37432: a0 = i32 [a0]\n 37434: a1 = 0x23\n 37437: jump [t0]\n      : @1475 (gas: 4)\n 37439: a0 = 0x40\n 37442: a1 = u64 [s1 + 0x118]\n 37446: u32 [a1] = a0\n 37448: jump [t0]\n      : @1476 (gas: 10)\n 37450: sp = sp + 0xffffffffffffffc0\n 37453: u64 [sp + 0x38] = ra\n 37456: u64 [sp + 0x30] = s0\n 37459: u64 [sp + 0x28] = s1\n 37462: s0 = sp + 0x40\n 37465: sp = sp & 0xffffffffffffffe0\n 37468: s1 = a0\n 37470: i32 a0 = sp + 0\n 37472: a1 = 0x4\n 37475: jump [t0]\n      : @1477 (gas: 7)\n 37477: a0 = sp + 0xffffffffffffffe0\n 37480: a0 = a0 & 0xffffffffffffffe0\n 37483: u64 [s1 + 0x118] = a0\n 37487: sp = a0\n 37489: i32 a2 = a0 + 0\n 37491: a1 = 0x40\n 37494: jump [t0]\n      : @1478 (gas: 5)\n 37496: a0 = sp + 0xffffffffffffffe0\n 37499: a2 = a0 & 0xffffffffffffffe0\n 37502: u64 [s1 + 0x110] = a2\n 37506: sp = a2\n 37508: jump [t0]\n      : @1479 (gas: 4)\n 37510: a0 = 0x10b8\n 37514: a1 = s1 + a0\n 37517: a2 = a1 + 0x700\n 37521: jump [t0]\n      : @1480 (gas: 4)\n 37523: a0 = u64 [s1 + 0x118]\n 37527: a1 = 0x40\n 37530: u32 [a0] = a1\n 37532: jump [t0]\n      : @1481 (gas: 4)\n 37534: a0 = 0x20b8\n 37538: a3 = s1 + a0\n 37541: a4 = a3 + 0x500\n 37545: jump [t0]\n      : @1482 (gas: 4)\n 37547: a0 = 0x28b8\n 37551: a3 = s1 + a0\n 37554: a4 = a3 + 0x200\n 37558: jump [t0]\n      : @1483 (gas: 4)\n 37560: a0 = 0x28b8\n 37564: a3 = s1 + a0\n 37567: a4 = a3 + 0x100\n 37571: jump [t0]\n      : @1484 (gas: 4)\n 37573: a0 = 0x28b8\n 37577: a3 = s1 + a0\n 37580: a4 = a3 + 0x300\n 37584: jump [t0]\n      : @1485 (gas: 8)\n 37586: a0 = u64 [a4 + 0xd8]\n 37590: a1 = u64 [a4 + 0xe0]\n 37594: a2 = u64 [a4 + 0xd0]\n 37598: a3 = u64 [a4 + 0xc8]\n 37602: a1 = a1 | a2\n 37605: a0 = a0 | a3\n 37608: a0 = a0 | a1\n 37611: jump [t0]\n      : @1486 (gas: 6)\n 37613: a0 = a2 <u 0x1\n 37616: a1 = a2 + 0xffffffffffffffff\n 37619: a1 = a1 <u 0x32\n 37622: a1 = a1 ^ 0x1\n 37625: a1 = a0 if a2 == 0\n 37628: jump [t0]\n      : @1487 (gas: 4)\n 37630: a2 = a0\n 37632: a0 = 0x4e487b7100000000\n 37642: a1 = 0x2000\n 37646: jump [t0]\n      : @1488 (gas: 9)\n 37648: sp = sp + 0xffffffffffffffc0\n 37651: u64 [sp + 0x38] = ra\n 37654: u64 [sp + 0x30] = s0\n 37657: u64 [sp + 0x28] = s1\n 37660: s0 = sp + 0x40\n 37663: sp = sp & 0xffffffffffffffe0\n 37666: s1 = a0\n 37668: i32 a0 = sp + 0\n 37670: jump [t0]\n      : @1489 (gas: 7)\n 37672: u64 [s1 + 0xb0] = a0\n 37676: u64 [s1 + 0xa8] = a1\n 37680: a0 = u64 [s1 + 0xe0]\n 37684: a2 = a0 + 0xffffffffffffff80\n 37687: a0 = u64 [s1 + 0xc0]\n 37691: a1 = u64 [s1 + 0xb8]\n 37695: jump [t0]\n      : @1490 (gas: 9)\n 37697: a3 = u64 [s1 + 0xf8]\n 37701: a0 = u64 [a3 + 0x18]\n 37704: a1 = u64 [a3 + 0x10]\n 37707: a2 = u64 [a3 + 0x8]\n 37710: a3 = u64 [a3]\n 37712: a0 = reverse a0\n 37714: u64 [s1 + 0xf8] = a0\n 37718: a0 = reverse a1\n 37720: jump [t0]\n      : @1491 (gas: 6)\n 37722: i32 a1 = a1 + 0xb8\n 37726: a2 = s1 + a1\n 37729: u64 [a2 + 800] = 0\n 37733: u64 [a2 + 792] = 0\n 37737: u64 [a2 + 784] = 0\n 37741: jump [t0]\n      : @1492 (gas: 8)\n 37743: a0 = u64 [a4 + 0x58]\n 37746: a1 = u64 [a4 + 0x60]\n 37749: a2 = u64 [a4 + 0x50]\n 37752: a3 = u64 [a4 + 0x48]\n 37755: a1 = a1 | a2\n 37758: a0 = a0 | a3\n 37761: a0 = a0 | a1\n 37764: jump [t0]\n      : @1493 (gas: 2)\n 37766: a3 = a2 & 0x40\n 37769: jump @1497 if a3 != 0\n      : @1494 (gas: 1)\n 37772: jump @1496 if a2 == 0\n      : @1495 (gas: 6)\n 37775: i32 a3 = 0x40 - a2\n 37778: a3 = a1 << a3\n 37781: a1 = a1 >> a2\n 37784: a0 = a0 >> a2\n 37787: a0 = a0 | a3\n 37790: ret\n      : @1496 (gas: 1)\n 37792: ret\n      : @1497 (gas: 4)\n 37794: a0 = a2 + 0xffffffffffffffc0\n 37797: a0 = a1 >> a0\n 37800: a1 = 0\n 37802: ret\n      : @1498 (gas: 2)\n 37804: a3 = a2 & 0x40\n 37807: jump @1502 if a3 != 0\n      : @1499 (gas: 1)\n 37810: jump @1501 if a2 == 0\n      : @1500 (gas: 6)\n 37813: i32 a3 = 0x40 - a2\n 37816: a3 = a0 >> a3\n 37819: a0 = a0 << a2\n 37822: a1 = a1 << a2\n 37825: a1 = a1 | a3\n 37828: ret\n      : @1501 (gas: 1)\n 37830: ret\n      : @1502 (gas: 4)\n 37832: a1 = a2 + 0xffffffffffffffc0\n 37835: a1 = a0 << a1\n 37838: a0 = 0\n 37840: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "STAKE_PER_DAY()": "4a91f7ae",
              "archiveHabit(uint32)": "b650673a",
              "checkIn(uint32,uint64)": "a0145927",
              "claim(uint256)": "379607f5",
              "createHabit(bytes32)": "e9714e07",
              "dailyStatuses(address,uint64,uint32)": "88b21c87",
              "deposit()": "d0e30db0",
              "epochNow()": "222ae786",
              "forceSettleAllEpochs(address,uint64,uint32)": "494bc62d",
              "forceSettleDay(address,uint64,uint32)": "6196d285",
              "habits(address,uint32)": "99626634",
              "prepareDay(uint64)": "48cc36b8",
              "redepositFromClaimable(uint256)": "8f23d36c",
              "settle(address,uint64,uint32)": "9c14eb6e",
              "settleAll(address,uint64,uint32)": "45123cce",
              "treasury()": "61d027b3",
              "userHabitCounters(address)": "0e08454a",
              "userStates(address)": "0ecc535f",
              "withdraw(uint256)": "2e1a7d4d"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/HabitTracker.sol\"\nobject \"HabitTracker_1231\" {\n    code {\n        {\n            /// @src 0:244:13389  \"contract HabitTracker {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"HabitTracker_1231\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:244:13389  \"contract HabitTracker {...\"\n            let value := mload(_1)\n            let _2 := and(value, sub(shl(160, 1), 1))\n            if iszero(eq(value, _2))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:2704:2757  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            if /** @src 0:2708:2731  \"_treasury == address(0)\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _2)\n            /// @src 0:2704:2757  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            {\n                /// @src 0:2740:2757  \"InvalidTreasury()\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:2740:2757  \"InvalidTreasury()\" */ shl(227, 0x02979eb9))\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:2740:2757  \"InvalidTreasury()\" */ 4)\n            }\n            /// @src 0:2767:2787  \"treasury = _treasury\"\n            mstore(128, value)\n            /// @src 0:244:13389  \"contract HabitTracker {...\"\n            let _3 := mload(64)\n            let _4 := datasize(\"HabitTracker_1231_deployed\")\n            codecopy(_3, dataoffset(\"HabitTracker_1231_deployed\"), _4)\n            setimmutable(_3, \"13\", mload(/** @src 0:2767:2787  \"treasury = _treasury\" */ 128))\n            /// @src 0:244:13389  \"contract HabitTracker {...\"\n            return(_3, _4)\n        }\n    }\n    /// @use-src 0:\"contracts/HabitTracker.sol\"\n    object \"HabitTracker_1231_deployed\" {\n        code {\n            {\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0e08454a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1057:1108  \"mapping(address => uint32) public userHabitCounters\" */ 2)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(_1, and(sload(keccak256(0, 64)), 0xffffffff))\n                        return(_1, 32)\n                    }\n                    case 0x0ecc535f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let dataSlot := keccak256(0, 64)\n                        let _2 := sload(/** @src 0:940:987  \"mapping(address => UserState) public userStates\" */ dataSlot)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _3 := sload(/** @src 0:940:987  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 1))\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _4 := sload(/** @src 0:940:987  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 2))\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let cleaned := and(sload(/** @src 0:940:987  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 3)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        let memPos := mload(64)\n                        mstore(memPos, _2)\n                        mstore(add(memPos, 32), _3)\n                        mstore(add(memPos, 64), _4)\n                        mstore(add(memPos, 96), cleaned)\n                        return(memPos, 128)\n                    }\n                    case 0x222ae786 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let var := 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, var)\n                        return(memPos_1, 32)\n                    }\n                    case 0x2e1a7d4d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(4)\n                        /// @src 0:3193:3232  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 0:3197:3208  \"amount == 0\" */ iszero(value)\n                        /// @src 0:3193:3232  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:3217:3232  \"InvalidAmount()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3217:3232  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:3279:3289  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        let dataSlot_1 := keccak256(0, 64)\n                        let _5 := sload(/** @src 0:3304:3324  \"state.depositBalance\" */ dataSlot_1)\n                        /// @src 0:3300:3363  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                        if /** @src 0:3304:3333  \"state.depositBalance < amount\" */ lt(_5, value)\n                        /// @src 0:3300:3363  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                        {\n                            /// @src 0:3342:3363  \"InsufficientBalance()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3342:3363  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(dataSlot_1, sub(_5, value))\n                        /// @src 0:3449:3455  \"amount\"\n                        fun_transfer(/** @src 0:3279:3289  \"msg.sender\" */ caller(), /** @src 0:3449:3455  \"amount\" */ value)\n                        /// @src 0:3471:3500  \"Withdrawn(msg.sender, amount)\"\n                        let _6 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_6, value)\n                        /// @src 0:3471:3500  \"Withdrawn(msg.sender, amount)\"\n                        log2(_6, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 32, /** @src 0:3471:3500  \"Withdrawn(msg.sender, amount)\" */ 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5, /** @src 0:3279:3289  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x379607f5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := calldataload(4)\n                        /// @src 0:3567:3606  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 0:3571:3582  \"amount == 0\" */ iszero(value_1)\n                        /// @src 0:3567:3606  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:3591:3606  \"InvalidAmount()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3217:3232  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 0:3591:3606  \"InvalidAmount()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:3653:3663  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        /// @src 0:3678:3700  \"state.claimableBalance\"\n                        let _7 := add(/** @src 0:244:13389  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:3678:3700  \"state.claimableBalance\" */ 2)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _8 := sload(/** @src 0:3678:3700  \"state.claimableBalance\" */ _7)\n                        /// @src 0:3674:3739  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                        if /** @src 0:3678:3709  \"state.claimableBalance < amount\" */ lt(_8, value_1)\n                        /// @src 0:3674:3739  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                        {\n                            /// @src 0:3718:3739  \"InsufficientBalance()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3342:3363  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                            /// @src 0:3718:3739  \"InsufficientBalance()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(_7, sub(_8, value_1))\n                        /// @src 0:3827:3833  \"amount\"\n                        fun_transfer(/** @src 0:3653:3663  \"msg.sender\" */ caller(), /** @src 0:3827:3833  \"amount\" */ value_1)\n                        /// @src 0:3849:3876  \"Claimed(msg.sender, amount)\"\n                        let _9 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_9, value_1)\n                        /// @src 0:3849:3876  \"Claimed(msg.sender, amount)\"\n                        log2(_9, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 32, /** @src 0:3849:3876  \"Claimed(msg.sender, amount)\" */ 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a, /** @src 0:3653:3663  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x45123cce {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value1 := abi_decode_uint64()\n                        let value2 := abi_decode_t_uint32()\n                        /// @src 0:9904:9914  \"epochNow()\"\n                        let var_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:9891:9947  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        if /** @src 0:9895:9914  \"epoch >= epochNow()\" */ iszero(lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:9895:9914  \"epoch >= epochNow()\" */ value1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:9895:9914  \"epoch >= epochNow()\" */ var_1))\n                        /// @src 0:9891:9947  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        {\n                            /// @src 0:9923:9947  \"CannotSettleCurrentDay()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:9923:9947  \"CannotSettleCurrentDay()\" */ shl(224, 0xcf114bd9))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:9961:9974  \"maxCount == 0\"\n                        let _10 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:9961:9974  \"maxCount == 0\" */ value2, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        /// @src 0:9961:10005  \"maxCount == 0 || maxCount > MAX_SETTLE_BATCH\"\n                        let expr := /** @src 0:9961:9974  \"maxCount == 0\" */ iszero(_10)\n                        /// @src 0:9961:10005  \"maxCount == 0 || maxCount > MAX_SETTLE_BATCH\"\n                        if iszero(expr)\n                        {\n                            expr := /** @src 0:9978:10005  \"maxCount > MAX_SETTLE_BATCH\" */ gt(_10, /** @src 0:423:425  \"50\" */ 0x32)\n                        }\n                        /// @src 0:9957:10032  \"if (maxCount == 0 || maxCount > MAX_SETTLE_BATCH) revert InvalidBatchSize()\"\n                        if expr\n                        {\n                            /// @src 0:10014:10032  \"InvalidBatchSize()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:10014:10032  \"InvalidBatchSize()\" */ shl(224, 0x7862e959))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _11 := and(value0, sub(shl(160, 1), 1))\n                        mstore(0, _11)\n                        mstore(32, /** @src 0:10066:10083  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let cleaned_1 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:10099:10113  \"uint32 settled\"\n                        let var_settled := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:10099:10113  \"uint32 settled\"\n                        var_settled := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:10137:10149  \"uint32 i = 1\"\n                        let var_i := /** @src 0:10148:10149  \"1\" */ 0x01\n                        /// @src 0:10132:10600  \"for (uint32 i = 1; i <= count && settled < maxCount;) {...\"\n                        for { }\n                        /** @src 0:10148:10149  \"1\" */ 0x01\n                        /// @src 0:10137:10149  \"uint32 i = 1\"\n                        { }\n                        {\n                            /// @src 0:10151:10183  \"i <= count && settled < maxCount\"\n                            let expr_1 := /** @src 0:10151:10161  \"i <= count\" */ iszero(gt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:10151:10161  \"i <= count\" */ var_i, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:10151:10161  \"i <= count\" */ cleaned_1))\n                            /// @src 0:10151:10183  \"i <= count && settled < maxCount\"\n                            if expr_1\n                            {\n                                expr_1 := /** @src 0:10165:10183  \"settled < maxCount\" */ lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:10165:10183  \"settled < maxCount\" */ var_settled, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:10165:10183  \"settled < maxCount\" */ _10)\n                            }\n                            /// @src 0:10151:10183  \"i <= count && settled < maxCount\"\n                            if iszero(expr_1) { break }\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(0, _11)\n                            mstore(32, /** @src 0:10148:10149  \"1\" */ 0x01)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            let dataSlot_2 := keccak256(0, 64)\n                            /// @src 0:10222:10237  \"habits[user][i]\"\n                            let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:10222:10237  \"habits[user][i]\" */ var_i, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                            mstore(0x20, /** @src 0:10222:10234  \"habits[user]\" */ dataSlot_2)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                            /// @src 0:10255:10299  \"habit.owner != address(0) && !habit.archived\"\n                            let expr_2 := /** @src 0:10255:10280  \"habit.owner != address(0)\" */ iszero(iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:10255:10266  \"habit.owner\" */ dataSlot_3)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                            /// @src 0:10255:10299  \"habit.owner != address(0) && !habit.archived\"\n                            if expr_2\n                            {\n                                expr_2 := /** @src 0:10284:10299  \"!habit.archived\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, sload(/** @src 0:10285:10299  \"habit.archived\" */ add(dataSlot_3, /** @src 0:10066:10083  \"userHabitCounters\" */ 0x02))), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff))\n                            }\n                            /// @src 0:10251:10559  \"if (habit.owner != address(0) && !habit.archived) {...\"\n                            if expr_2\n                            {\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(0, _11)\n                                mstore(32, /** @src 0:10333:10346  \"dailyStatuses\" */ 0x03)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                let dataSlot_4 := keccak256(0, 64)\n                                /// @src 0:10333:10359  \"dailyStatuses[user][epoch]\"\n                                let dataSlot_5 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:10333:10359  \"dailyStatuses[user][epoch]\" */ value1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                                mstore(0x20, /** @src 0:10333:10352  \"dailyStatuses[user]\" */ dataSlot_4)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                /// @src 0:10333:10362  \"dailyStatuses[user][epoch][i]\"\n                                let dataSlot_6 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:10333:10362  \"dailyStatuses[user][epoch][i]\" */ var_i, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                                mstore(0x20, /** @src 0:10333:10359  \"dailyStatuses[user][epoch]\" */ dataSlot_5)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_6 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                let _12 := sload(/** @src 0:10333:10362  \"dailyStatuses[user][epoch][i]\" */ dataSlot_6)\n                                /// @src 0:10390:10426  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                let expr_3 := /** @src 0:10391:10405  \"flags & 1 != 0\" */ iszero(iszero(/** @src 0:10391:10400  \"flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _12, /** @src 0:10148:10149  \"1\" */ 0x01)))\n                                /// @src 0:10390:10426  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                if expr_3\n                                {\n                                    expr_3 := /** @src 0:10411:10425  \"flags & 4 == 0\" */ iszero(/** @src 0:10411:10420  \"flags & 4\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _12, 4))\n                                }\n                                /// @src 0:10386:10545  \"if ((flags & 1 != 0) && (flags & 4 == 0)) {...\"\n                                if expr_3\n                                {\n                                    /// @src 0:10479:10480  \"i\"\n                                    fun_settleInternal(value0, value1, var_i)\n                                    /// @src 0:10515:10524  \"settled++\"\n                                    var_settled := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:10515:10524  \"settled++\" */ var_settled, /** @src 0:10148:10149  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                                }\n                            }\n                            /// @src 0:10584:10587  \"i++\"\n                            var_i := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:10584:10587  \"i++\" */ var_i, /** @src 0:10148:10149  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        return(0, 0)\n                    }\n                    case 0x48cc36b8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := 0\n                        value_2 := calldataload(4)\n                        let _13 := and(value_2, 0xffffffffffffffff)\n                        if iszero(eq(value_2, _13)) { revert(0, 0) }\n                        /// @src 0:6047:6057  \"epochNow()\"\n                        let var_2 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_2 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:6034:6080  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:6038:6057  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _13, /** @src 0:6038:6057  \"epoch != epochNow()\" */ var_2))\n                        /// @src 0:6034:6080  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:6066:6080  \"InvalidEpoch()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:6066:6080  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:6136:6146  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        let dataSlot_7 := keccak256(0, 64)\n                        mstore(0, /** @src 0:6136:6146  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:6172:6189  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let cleaned_2 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:6211:6229  \"uint32 fundedCount\"\n                        let var_fundedCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:6211:6229  \"uint32 fundedCount\"\n                        var_fundedCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:6239:6263  \"uint32 insufficientCount\"\n                        let var_insufficientCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:6239:6263  \"uint32 insufficientCount\"\n                        var_insufficientCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:6287:6299  \"uint32 i = 1\"\n                        let var_i_1 := /** @src 0:6298:6299  \"1\" */ 0x01\n                        /// @src 0:6282:7169  \"for (uint32 i = 1; i <= count;) {...\"\n                        for { }\n                        /** @src 0:6301:6311  \"i <= count\" */ iszero(gt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:6301:6311  \"i <= count\" */ var_i_1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:6301:6311  \"i <= count\" */ cleaned_2))\n                        /// @src 0:6287:6299  \"uint32 i = 1\"\n                        { }\n                        {\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(0, /** @src 0:6136:6146  \"msg.sender\" */ caller())\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(32, /** @src 0:6298:6299  \"1\" */ 0x01)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            let dataSlot_8 := keccak256(0, 64)\n                            /// @src 0:6350:6371  \"habits[msg.sender][i]\"\n                            let dataSlot_9 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:6350:6371  \"habits[msg.sender][i]\" */ var_i_1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                            mstore(0x20, /** @src 0:6350:6368  \"habits[msg.sender]\" */ dataSlot_8)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            dataSlot_9 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                            /// @src 0:6402:6446  \"!habit.archived && habit.owner != address(0)\"\n                            let expr_4 := /** @src 0:6402:6417  \"!habit.archived\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, sload(/** @src 0:6403:6417  \"habit.archived\" */ add(dataSlot_9, /** @src 0:6172:6189  \"userHabitCounters\" */ 0x02))), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff))\n                            /// @src 0:6402:6446  \"!habit.archived && habit.owner != address(0)\"\n                            if expr_4\n                            {\n                                expr_4 := /** @src 0:6421:6446  \"habit.owner != address(0)\" */ iszero(iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:6421:6432  \"habit.owner\" */ dataSlot_9)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                            }\n                            /// @src 0:6398:7128  \"if (!habit.archived && habit.owner != address(0)) {...\"\n                            if expr_4\n                            {\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(0, /** @src 0:6136:6146  \"msg.sender\" */ caller())\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(32, /** @src 0:6495:6508  \"dailyStatuses\" */ 0x03)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                let dataSlot_10 := keccak256(0, 64)\n                                /// @src 0:6495:6527  \"dailyStatuses[msg.sender][epoch]\"\n                                let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _13)\n                                mstore(0x20, /** @src 0:6495:6520  \"dailyStatuses[msg.sender]\" */ dataSlot_10)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                /// @src 0:6495:6530  \"dailyStatuses[msg.sender][epoch][i]\"\n                                let dataSlot_12 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:6495:6530  \"dailyStatuses[msg.sender][epoch][i]\" */ var_i_1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                                mstore(0x20, /** @src 0:6495:6527  \"dailyStatuses[msg.sender][epoch]\" */ dataSlot_11)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_12 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                /// @src 0:6565:7114  \"if (status.flags & 1 == 0) { // Check if funded bit is 0...\"\n                                if /** @src 0:6569:6590  \"status.flags & 1 == 0\" */ iszero(/** @src 0:6569:6585  \"status.flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ sload(/** @src 0:6569:6581  \"status.flags\" */ dataSlot_12), /** @src 0:6298:6299  \"1\" */ 0x01))\n                                /// @src 0:6565:7114  \"if (status.flags & 1 == 0) { // Check if funded bit is 0...\"\n                                {\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    let _14 := sload(/** @src 0:6646:6666  \"state.depositBalance\" */ dataSlot_7)\n                                    /// @src 0:6642:7096  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    switch /** @src 0:6646:6683  \"state.depositBalance >= STAKE_PER_DAY\" */ iszero(lt(_14, /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000))\n                                    case /** @src 0:6642:7096  \"if (state.depositBalance >= STAKE_PER_DAY) {...\" */ 0 {\n                                        /// @src 0:7052:7071  \"insufficientCount++\"\n                                        var_insufficientCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:7052:7071  \"insufficientCount++\" */ var_insufficientCount, /** @src 0:6298:6299  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                                    }\n                                    default /// @src 0:6642:7096  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    {\n                                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                        sstore(dataSlot_7, add(_14, not(0x8ac7230489e7ffff)))\n                                        /// @src 0:6818:6838  \"state.blockedBalance\"\n                                        let _15 := add(dataSlot_7, /** @src 0:6298:6299  \"1\" */ 0x01)\n                                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                        sstore(_15, add(sload(/** @src 0:6818:6855  \"state.blockedBalance += STAKE_PER_DAY\" */ _15), /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000))\n                                        /// @src 0:6885:6898  \"fundedCount++\"\n                                        var_fundedCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:6885:6898  \"fundedCount++\" */ var_fundedCount, /** @src 0:6298:6299  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                                        sstore(dataSlot_12, or(and(sload(dataSlot_12), not(255)), and(/** @src 0:6950:6967  \"status.flags |= 1\" */ or(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(sload(/** @src 0:6950:6967  \"status.flags |= 1\" */ dataSlot_12), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff), /** @src 0:6298:6299  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff)))\n                                    }\n                                }\n                            }\n                            /// @src 0:7153:7156  \"i++\"\n                            var_i_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:7153:7156  \"i++\" */ var_i_1, /** @src 0:6298:6299  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        /// @src 0:7192:7254  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        let _16 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_16, and(var_fundedCount, 0xffffffff))\n                        mstore(add(_16, 32), and(var_insufficientCount, 0xffffffff))\n                        /// @src 0:7192:7254  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        log3(_16, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 64, /** @src 0:7192:7254  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ 0xc3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5, /** @src 0:6136:6146  \"msg.sender\" */ caller(), /** @src 0:7192:7254  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ _13)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x494bc62d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1_1 := abi_decode_uint64()\n                        /// @src 0:12278:12297  \"maxSettlements == 0\"\n                        let _17 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(abi_decode_t_uint32(), 0xffffffff)\n                        /// @src 0:12278:12334  \"maxSettlements == 0 || maxSettlements > MAX_SETTLE_BATCH\"\n                        let expr_5 := /** @src 0:12278:12297  \"maxSettlements == 0\" */ iszero(_17)\n                        /// @src 0:12278:12334  \"maxSettlements == 0 || maxSettlements > MAX_SETTLE_BATCH\"\n                        if iszero(expr_5)\n                        {\n                            expr_5 := /** @src 0:12301:12334  \"maxSettlements > MAX_SETTLE_BATCH\" */ gt(_17, /** @src 0:423:425  \"50\" */ 0x32)\n                        }\n                        /// @src 0:12274:12361  \"if (maxSettlements == 0 || maxSettlements > MAX_SETTLE_BATCH) revert InvalidBatchSize()\"\n                        if expr_5\n                        {\n                            /// @src 0:12343:12361  \"InvalidBatchSize()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:10014:10032  \"InvalidBatchSize()\" */ shl(224, 0x7862e959))\n                            /// @src 0:12343:12361  \"InvalidBatchSize()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _18 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _18)\n                        mstore(32, /** @src 0:12400:12417  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let cleaned_3 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:12455:12465  \"epochNow()\"\n                        let var_3 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_3 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:12475:12494  \"uint32 settledCount\"\n                        let var_settledCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:12475:12494  \"uint32 settledCount\"\n                        var_settledCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:12518:12536  \"uint32 habitId = 1\"\n                        let var_habitId := /** @src 0:12535:12536  \"1\" */ 0x01\n                        /// @src 0:12513:13381  \"for (uint32 habitId = 1; habitId <= habitCount && settledCount < maxSettlements;) {...\"\n                        for { }\n                        /** @src 0:12535:12536  \"1\" */ 0x01\n                        /// @src 0:12518:12536  \"uint32 habitId = 1\"\n                        { }\n                        {\n                            /// @src 0:12538:12592  \"habitId <= habitCount && settledCount < maxSettlements\"\n                            let expr_6 := /** @src 0:12538:12559  \"habitId <= habitCount\" */ iszero(gt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12538:12559  \"habitId <= habitCount\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:12538:12559  \"habitId <= habitCount\" */ cleaned_3))\n                            /// @src 0:12538:12592  \"habitId <= habitCount && settledCount < maxSettlements\"\n                            if expr_6\n                            {\n                                expr_6 := /** @src 0:12563:12592  \"settledCount < maxSettlements\" */ lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12563:12592  \"settledCount < maxSettlements\" */ var_settledCount, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:12563:12592  \"settledCount < maxSettlements\" */ _17)\n                            }\n                            /// @src 0:12538:12592  \"habitId <= habitCount && settledCount < maxSettlements\"\n                            if iszero(expr_6) { break }\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(0, _18)\n                            mstore(32, /** @src 0:12535:12536  \"1\" */ 0x01)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            let dataSlot_13 := keccak256(0, 64)\n                            /// @src 0:12631:12652  \"habits[user][habitId]\"\n                            let dataSlot_14 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12631:12652  \"habits[user][habitId]\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                            mstore(0x20, /** @src 0:12631:12643  \"habits[user]\" */ dataSlot_13)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            dataSlot_14 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                            /// @src 0:12683:12727  \"habit.owner != address(0) && !habit.archived\"\n                            let expr_7 := /** @src 0:12683:12708  \"habit.owner != address(0)\" */ iszero(iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:12683:12694  \"habit.owner\" */ dataSlot_14)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                            /// @src 0:12683:12727  \"habit.owner != address(0) && !habit.archived\"\n                            if expr_7\n                            {\n                                expr_7 := /** @src 0:12712:12727  \"!habit.archived\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, sload(/** @src 0:12713:12727  \"habit.archived\" */ add(dataSlot_14, /** @src 0:12400:12417  \"userHabitCounters\" */ 0x02))), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff))\n                            }\n                            /// @src 0:12679:13334  \"if (habit.owner != address(0) && !habit.archived) {...\"\n                            if expr_7\n                            {\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                let cleaned_4 := and(sload(/** @src 0:12779:12799  \"habit.createdAtEpoch\" */ add(dataSlot_14, /** @src 0:12400:12417  \"userHabitCounters\" */ 0x02)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                                /// @src 0:12766:12835  \"startEpoch > habit.createdAtEpoch ? startEpoch : habit.createdAtEpoch\"\n                                let expr_8 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                                /// @src 0:12766:12835  \"startEpoch > habit.createdAtEpoch ? startEpoch : habit.createdAtEpoch\"\n                                switch /** @src 0:12766:12799  \"startEpoch > habit.createdAtEpoch\" */ gt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12766:12799  \"startEpoch > habit.createdAtEpoch\" */ value1_1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:12766:12799  \"startEpoch > habit.createdAtEpoch\" */ cleaned_4)\n                                case /** @src 0:12766:12835  \"startEpoch > habit.createdAtEpoch ? startEpoch : habit.createdAtEpoch\" */ 0 { expr_8 := cleaned_4 }\n                                default { expr_8 := value1_1 }\n                                /// @src 0:12875:12899  \"uint64 epoch = scanStart\"\n                                let var_epoch := expr_8\n                                /// @src 0:12870:13320  \"for (uint64 epoch = scanStart; epoch < currentEpoch && settledCount < maxSettlements;) {...\"\n                                for { }\n                                /** @src 0:12535:12536  \"1\" */ 0x01\n                                /// @src 0:12875:12899  \"uint64 epoch = scanStart\"\n                                { }\n                                {\n                                    /// @src 0:12901:12954  \"epoch < currentEpoch && settledCount < maxSettlements\"\n                                    let expr_9 := /** @src 0:12901:12921  \"epoch < currentEpoch\" */ lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12901:12921  \"epoch < currentEpoch\" */ var_epoch, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:12901:12921  \"epoch < currentEpoch\" */ var_3)\n                                    /// @src 0:12901:12954  \"epoch < currentEpoch && settledCount < maxSettlements\"\n                                    if expr_9\n                                    {\n                                        expr_9 := /** @src 0:12925:12954  \"settledCount < maxSettlements\" */ lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12925:12954  \"settledCount < maxSettlements\" */ var_settledCount, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:12925:12954  \"settledCount < maxSettlements\" */ _17)\n                                    }\n                                    /// @src 0:12901:12954  \"epoch < currentEpoch && settledCount < maxSettlements\"\n                                    if iszero(expr_9) { break }\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    mstore(0, _18)\n                                    mstore(32, /** @src 0:12993:13006  \"dailyStatuses\" */ 0x03)\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    let dataSlot_15 := keccak256(0, 64)\n                                    /// @src 0:12993:13019  \"dailyStatuses[user][epoch]\"\n                                    let dataSlot_16 := /** @src -1:-1:-1 */ 0\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12993:13019  \"dailyStatuses[user][epoch]\" */ var_epoch, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                                    mstore(0x20, /** @src 0:12993:13012  \"dailyStatuses[user]\" */ dataSlot_15)\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    dataSlot_16 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                    /// @src 0:12993:13028  \"dailyStatuses[user][epoch][habitId]\"\n                                    let dataSlot_17 := /** @src -1:-1:-1 */ 0\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:12993:13028  \"dailyStatuses[user][epoch][habitId]\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                                    mstore(0x20, /** @src 0:12993:13019  \"dailyStatuses[user][epoch]\" */ dataSlot_16)\n                                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                    dataSlot_17 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                    let _19 := sload(/** @src 0:12993:13028  \"dailyStatuses[user][epoch][habitId]\" */ dataSlot_17)\n                                    /// @src 0:13081:13117  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                    let expr_10 := /** @src 0:13082:13096  \"flags & 1 != 0\" */ iszero(iszero(/** @src 0:13082:13091  \"flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _19, /** @src 0:12535:12536  \"1\" */ 0x01)))\n                                    /// @src 0:13081:13117  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                    if expr_10\n                                    {\n                                        expr_10 := /** @src 0:13102:13116  \"flags & 4 == 0\" */ iszero(/** @src 0:13102:13111  \"flags & 4\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _19, 4))\n                                    }\n                                    /// @src 0:13077:13259  \"if ((flags & 1 != 0) && (flags & 4 == 0)) {...\"\n                                    if expr_10\n                                    {\n                                        /// @src 0:13174:13181  \"habitId\"\n                                        fun_settleInternal(value0_1, var_epoch, var_habitId)\n                                        /// @src 0:13220:13234  \"settledCount++\"\n                                        var_settledCount := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:13220:13234  \"settledCount++\" */ var_settledCount, /** @src 0:12535:12536  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                                    }\n                                    /// @src 0:13292:13299  \"epoch++\"\n                                    var_epoch := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(add(/** @src 0:13292:13299  \"epoch++\" */ var_epoch, /** @src 0:12535:12536  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                                }\n                            }\n                            /// @src 0:13359:13368  \"habitId++\"\n                            var_habitId := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:13359:13368  \"habitId++\" */ var_habitId, /** @src 0:12535:12536  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        return(0, 0)\n                    }\n                    case 0x4a91f7ae {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(memPos_2, 32)\n                    }\n                    case 0x6196d285 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        let value1_2 := abi_decode_uint64()\n                        /// @src 0:11089:11102  \"maxCount == 0\"\n                        let _20 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(abi_decode_t_uint32(), 0xffffffff)\n                        /// @src 0:11089:11133  \"maxCount == 0 || maxCount > MAX_SETTLE_BATCH\"\n                        let expr_11 := /** @src 0:11089:11102  \"maxCount == 0\" */ iszero(_20)\n                        /// @src 0:11089:11133  \"maxCount == 0 || maxCount > MAX_SETTLE_BATCH\"\n                        if iszero(expr_11)\n                        {\n                            expr_11 := /** @src 0:11106:11133  \"maxCount > MAX_SETTLE_BATCH\" */ gt(_20, /** @src 0:423:425  \"50\" */ 0x32)\n                        }\n                        /// @src 0:11085:11160  \"if (maxCount == 0 || maxCount > MAX_SETTLE_BATCH) revert InvalidBatchSize()\"\n                        if expr_11\n                        {\n                            /// @src 0:11142:11160  \"InvalidBatchSize()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:10014:10032  \"InvalidBatchSize()\" */ shl(224, 0x7862e959))\n                            /// @src 0:11142:11160  \"InvalidBatchSize()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _21 := and(value0_2, sub(shl(160, 1), 1))\n                        mstore(0, _21)\n                        mstore(32, /** @src 0:11194:11211  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let cleaned_5 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:11227:11241  \"uint32 settled\"\n                        let var_settled_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:11227:11241  \"uint32 settled\"\n                        var_settled_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:11265:11277  \"uint32 i = 1\"\n                        let var_i_2 := /** @src 0:11276:11277  \"1\" */ 0x01\n                        /// @src 0:11260:11728  \"for (uint32 i = 1; i <= count && settled < maxCount;) {...\"\n                        for { }\n                        /** @src 0:11276:11277  \"1\" */ 0x01\n                        /// @src 0:11265:11277  \"uint32 i = 1\"\n                        { }\n                        {\n                            /// @src 0:11279:11311  \"i <= count && settled < maxCount\"\n                            let expr_12 := /** @src 0:11279:11289  \"i <= count\" */ iszero(gt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:11279:11289  \"i <= count\" */ var_i_2, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:11279:11289  \"i <= count\" */ cleaned_5))\n                            /// @src 0:11279:11311  \"i <= count && settled < maxCount\"\n                            if expr_12\n                            {\n                                expr_12 := /** @src 0:11293:11311  \"settled < maxCount\" */ lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:11293:11311  \"settled < maxCount\" */ var_settled_1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:11293:11311  \"settled < maxCount\" */ _20)\n                            }\n                            /// @src 0:11279:11311  \"i <= count && settled < maxCount\"\n                            if iszero(expr_12) { break }\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(0, _21)\n                            mstore(32, /** @src 0:11276:11277  \"1\" */ 0x01)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            let dataSlot_18 := keccak256(0, 64)\n                            /// @src 0:11350:11365  \"habits[user][i]\"\n                            let dataSlot_19 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:11350:11365  \"habits[user][i]\" */ var_i_2, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                            mstore(0x20, /** @src 0:11350:11362  \"habits[user]\" */ dataSlot_18)\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            dataSlot_19 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                            /// @src 0:11383:11427  \"habit.owner != address(0) && !habit.archived\"\n                            let expr_13 := /** @src 0:11383:11408  \"habit.owner != address(0)\" */ iszero(iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:11383:11394  \"habit.owner\" */ dataSlot_19)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                            /// @src 0:11383:11427  \"habit.owner != address(0) && !habit.archived\"\n                            if expr_13\n                            {\n                                expr_13 := /** @src 0:11412:11427  \"!habit.archived\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, sload(/** @src 0:11413:11427  \"habit.archived\" */ add(dataSlot_19, /** @src 0:11194:11211  \"userHabitCounters\" */ 0x02))), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff))\n                            }\n                            /// @src 0:11379:11687  \"if (habit.owner != address(0) && !habit.archived) {...\"\n                            if expr_13\n                            {\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(0, _21)\n                                mstore(32, /** @src 0:11461:11474  \"dailyStatuses\" */ 0x03)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                let dataSlot_20 := keccak256(0, 64)\n                                /// @src 0:11461:11487  \"dailyStatuses[user][epoch]\"\n                                let dataSlot_21 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:11461:11487  \"dailyStatuses[user][epoch]\" */ value1_2, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                                mstore(0x20, /** @src 0:11461:11480  \"dailyStatuses[user]\" */ dataSlot_20)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_21 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                /// @src 0:11461:11490  \"dailyStatuses[user][epoch][i]\"\n                                let dataSlot_22 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:11461:11490  \"dailyStatuses[user][epoch][i]\" */ var_i_2, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                                mstore(0x20, /** @src 0:11461:11487  \"dailyStatuses[user][epoch]\" */ dataSlot_21)\n                                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                                dataSlot_22 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                                let _22 := sload(/** @src 0:11461:11490  \"dailyStatuses[user][epoch][i]\" */ dataSlot_22)\n                                /// @src 0:11518:11554  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                let expr_14 := /** @src 0:11519:11533  \"flags & 1 != 0\" */ iszero(iszero(/** @src 0:11519:11528  \"flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _22, /** @src 0:11276:11277  \"1\" */ 0x01)))\n                                /// @src 0:11518:11554  \"(flags & 1 != 0) && (flags & 4 == 0)\"\n                                if expr_14\n                                {\n                                    expr_14 := /** @src 0:11539:11553  \"flags & 4 == 0\" */ iszero(/** @src 0:11539:11548  \"flags & 4\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _22, 4))\n                                }\n                                /// @src 0:11514:11673  \"if ((flags & 1 != 0) && (flags & 4 == 0)) {...\"\n                                if expr_14\n                                {\n                                    /// @src 0:11607:11608  \"i\"\n                                    fun_settleInternal(value0_2, value1_2, var_i_2)\n                                    /// @src 0:11643:11652  \"settled++\"\n                                    var_settled_1 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:11643:11652  \"settled++\" */ var_settled_1, /** @src 0:11276:11277  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                                }\n                            }\n                            /// @src 0:11712:11715  \"i++\"\n                            var_i_2 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:423:425  \"50\" */ add(/** @src 0:11712:11715  \"i++\" */ var_i_2, /** @src 0:11276:11277  \"1\" */ 0x01), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        return(0, 0)\n                    }\n                    case 0x61d027b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, and(/** @src 0:431:464  \"address public immutable treasury\" */ loadimmutable(\"13\"), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_3, 32)\n                    }\n                    case 0x88b21c87 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value1_3 := abi_decode_uint64()\n                        let value2_1 := abi_decode_t_uint32()\n                        mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\" */ 3)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_23 := keccak256(0, 64)\n                        /// @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\"\n                        let dataSlot_24 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(value1_3, 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\" */ dataSlot_23)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_24 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\"\n                        let dataSlot_25 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(value2_1, 0xffffffff))\n                        mstore(0x20, /** @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\" */ dataSlot_24)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_25 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        let value_3 := and(sload(/** @src 0:1114:1204  \"mapping(address => mapping(uint64 => mapping(uint32 => DailyStatus))) public dailyStatuses\" */ dataSlot_25), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff)\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, value_3)\n                        return(memPos_4, 32)\n                    }\n                    case 0x8f23d36c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_4 := calldataload(4)\n                        /// @src 0:3960:3999  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 0:3964:3975  \"amount == 0\" */ iszero(value_4)\n                        /// @src 0:3960:3999  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:3984:3999  \"InvalidAmount()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3217:3232  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 0:3984:3999  \"InvalidAmount()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:4046:4056  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        let dataSlot_26 := keccak256(0, 64)\n                        /// @src 0:4071:4093  \"state.claimableBalance\"\n                        let _23 := add(dataSlot_26, 2)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _24 := sload(/** @src 0:4071:4093  \"state.claimableBalance\" */ _23)\n                        /// @src 0:4067:4132  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                        if /** @src 0:4071:4102  \"state.claimableBalance < amount\" */ lt(_24, value_4)\n                        /// @src 0:4067:4132  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                        {\n                            /// @src 0:4111:4132  \"InsufficientBalance()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3342:3363  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                            /// @src 0:4111:4132  \"InsufficientBalance()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(_23, sub(_24, value_4))\n                        sstore(dataSlot_26, add(sload(/** @src 0:4212:4242  \"state.depositBalance += amount\" */ dataSlot_26), /** @src 0:244:13389  \"contract HabitTracker {...\" */ value_4))\n                        /// @src 0:4267:4311  \"RedepositedFromClaimable(msg.sender, amount)\"\n                        let _25 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_25, value_4)\n                        /// @src 0:4267:4311  \"RedepositedFromClaimable(msg.sender, amount)\"\n                        log2(_25, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 32, /** @src 0:4267:4311  \"RedepositedFromClaimable(msg.sender, amount)\" */ 0xd6dbb592654017b4a03c128427776d8827794b54dcbd9b8529b81c69792e567c, /** @src 0:4046:4056  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x99626634 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value_5 := 0\n                        value_5 := calldataload(36)\n                        if iszero(eq(value_5, and(value_5, 0xffffffff))) { revert(0, 0) }\n                        mstore(0, and(value0_4, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ 1)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_27 := keccak256(0, 64)\n                        /// @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\"\n                        let dataSlot_28 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ value_5, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_27)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_28 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        let _26 := sload(/** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_28)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _27 := sload(/** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ add(dataSlot_28, 1))\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _28 := sload(/** @src 0:993:1051  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ add(dataSlot_28, 2))\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, and(_26, 0xffffffff))\n                        mstore(add(memPos_5, 32), and(shr(32, _26), sub(shl(160, 1), 1)))\n                        mstore(add(memPos_5, 64), _27)\n                        mstore(add(memPos_5, 96), and(_28, 0xffffffffffffffff))\n                        mstore(add(memPos_5, 128), iszero(iszero(and(shr(64, _28), 0xff))))\n                        return(memPos_5, 160)\n                    }\n                    case 0x9c14eb6e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let value1_4 := abi_decode_uint64()\n                        let value2_2 := abi_decode_t_uint32()\n                        /// @src 0:8337:8347  \"epochNow()\"\n                        let var_4 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_4 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:8324:8380  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        if /** @src 0:8328:8347  \"epoch >= epochNow()\" */ iszero(lt(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:8328:8347  \"epoch >= epochNow()\" */ value1_4, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:8328:8347  \"epoch >= epochNow()\" */ var_4))\n                        /// @src 0:8324:8380  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        {\n                            /// @src 0:8356:8380  \"CannotSettleCurrentDay()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:9923:9947  \"CannotSettleCurrentDay()\" */ shl(224, 0xcf114bd9))\n                            /// @src 0:8356:8380  \"CannotSettleCurrentDay()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:8419:8426  \"habitId\"\n                        fun_settleInternal(value0_5, value1_4, value2_2)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xa0145927 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_6 := abi_decode_uint32()\n                        let value1_5 := abi_decode_uint64()\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:2514:2520  \"habits\" */ 0x01)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_29 := keccak256(0, 64)\n                        /// @src 0:2514:2541  \"habits[msg.sender][habitId]\"\n                        let dataSlot_30 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:2514:2541  \"habits[msg.sender][habitId]\" */ value0_6, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:2514:2532  \"habits[msg.sender]\" */ dataSlot_29)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_30 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:2510:2585  \"if (habits[msg.sender][habitId].owner != msg.sender) revert NotHabitOwner()\"\n                        if /** @src 0:2514:2561  \"habits[msg.sender][habitId].owner != msg.sender\" */ iszero(eq(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:2514:2541  \"habits[msg.sender][habitId]\" */ dataSlot_30)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)), /** @src 0:2521:2531  \"msg.sender\" */ caller()))\n                        /// @src 0:2510:2585  \"if (habits[msg.sender][habitId].owner != msg.sender) revert NotHabitOwner()\"\n                        {\n                            /// @src 0:2570:2585  \"NotHabitOwner()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:2570:2585  \"NotHabitOwner()\" */ shl(224, 0x6f1cf7db))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:7547:7557  \"epochNow()\"\n                        let var_5 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_5 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let _29 := and(/** @src 0:7538:7557  \"epoch != epochNow()\" */ value1_5, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:7534:7580  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:7538:7557  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _29, /** @src 0:7538:7557  \"epoch != epochNow()\" */ var_5))\n                        /// @src 0:7534:7580  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:7566:7580  \"InvalidEpoch()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:6066:6080  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            /// @src 0:7566:7580  \"InvalidEpoch()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:2514:2520  \"habits\" */ 0x01)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_31 := keccak256(0, 64)\n                        /// @src 0:7594:7621  \"habits[msg.sender][habitId]\"\n                        let dataSlot_32 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:7594:7621  \"habits[msg.sender][habitId]\" */ value0_6, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:7594:7612  \"habits[msg.sender]\" */ dataSlot_31)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_32 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:7590:7654  \"if (habits[msg.sender][habitId].archived) revert HabitNotFound()\"\n                        if /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, sload(/** @src 0:7594:7630  \"habits[msg.sender][habitId].archived\" */ add(/** @src 0:7594:7621  \"habits[msg.sender][habitId]\" */ dataSlot_32, /** @src 0:7594:7630  \"habits[msg.sender][habitId].archived\" */ 2))), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff)\n                        /// @src 0:7590:7654  \"if (habits[msg.sender][habitId].archived) revert HabitNotFound()\"\n                        {\n                            /// @src 0:7639:7654  \"HabitNotFound()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:7639:7654  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7702:7715  \"dailyStatuses\" */ 0x03)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_33 := keccak256(0, 64)\n                        /// @src 0:7702:7734  \"dailyStatuses[msg.sender][epoch]\"\n                        let dataSlot_34 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _29)\n                        mstore(0x20, /** @src 0:7702:7727  \"dailyStatuses[msg.sender]\" */ dataSlot_33)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_34 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:7702:7743  \"dailyStatuses[msg.sender][epoch][habitId]\"\n                        let dataSlot_35 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:7702:7743  \"dailyStatuses[msg.sender][epoch][habitId]\" */ value0_6, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:7702:7734  \"dailyStatuses[msg.sender][epoch]\" */ dataSlot_34)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_35 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        let _30 := sload(/** @src 0:7702:7743  \"dailyStatuses[msg.sender][epoch][habitId]\" */ dataSlot_35)\n                        /// @src 0:7753:7801  \"if (status.flags & 1 == 0) revert DayNotFunded()\"\n                        if /** @src 0:7757:7778  \"status.flags & 1 == 0\" */ iszero(/** @src 0:7757:7773  \"status.flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _30, /** @src 0:2514:2520  \"habits\" */ 0x01))\n                        /// @src 0:7753:7801  \"if (status.flags & 1 == 0) revert DayNotFunded()\"\n                        {\n                            /// @src 0:7787:7801  \"DayNotFunded()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:7787:7801  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:7831:7883  \"if (status.flags & 2 != 0) revert AlreadyCheckedIn()\"\n                        if /** @src 0:7835:7856  \"status.flags & 2 != 0\" */ iszero(iszero(/** @src 0:7835:7851  \"status.flags & 2\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _30, /** @src 0:7594:7630  \"habits[msg.sender][habitId].archived\" */ 2)))\n                        /// @src 0:7831:7883  \"if (status.flags & 2 != 0) revert AlreadyCheckedIn()\"\n                        {\n                            /// @src 0:7865:7883  \"AlreadyCheckedIn()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:7865:7883  \"AlreadyCheckedIn()\" */ shl(228, 0x0c98289f))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(/** @src 0:7702:7743  \"dailyStatuses[msg.sender][epoch][habitId]\" */ dataSlot_35, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7702:7743  \"dailyStatuses[msg.sender][epoch][habitId]\" */ dataSlot_35), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(255)), and(/** @src 0:7923:7940  \"status.flags |= 2\" */ or(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(_30, 0xff), /** @src 0:7594:7630  \"habits[msg.sender][habitId].archived\" */ 2), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff)))\n                        /// @src 0:7974:8011  \"CheckedIn(msg.sender, habitId, epoch)\"\n                        log4(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:7974:8011  \"CheckedIn(msg.sender, habitId, epoch)\" */ 0xb004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682, /** @src 0:2521:2531  \"msg.sender\" */ caller(), /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:7974:8011  \"CheckedIn(msg.sender, habitId, epoch)\" */ value0_6, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), /** @src 0:7974:8011  \"CheckedIn(msg.sender, habitId, epoch)\" */ _29)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xb650673a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_7 := abi_decode_uint32()\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:2514:2520  \"habits\" */ 0x01)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_36 := keccak256(0, 64)\n                        /// @src 0:2514:2541  \"habits[msg.sender][habitId]\"\n                        let dataSlot_37 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:2514:2541  \"habits[msg.sender][habitId]\" */ value0_7, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:2514:2532  \"habits[msg.sender]\" */ dataSlot_36)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_37 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:2510:2585  \"if (habits[msg.sender][habitId].owner != msg.sender) revert NotHabitOwner()\"\n                        if /** @src 0:2514:2561  \"habits[msg.sender][habitId].owner != msg.sender\" */ iszero(eq(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(32, sload(/** @src 0:2514:2541  \"habits[msg.sender][habitId]\" */ dataSlot_37)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)), /** @src 0:2521:2531  \"msg.sender\" */ caller()))\n                        /// @src 0:2510:2585  \"if (habits[msg.sender][habitId].owner != msg.sender) revert NotHabitOwner()\"\n                        {\n                            /// @src 0:2570:2585  \"NotHabitOwner()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:2570:2585  \"NotHabitOwner()\" */ shl(224, 0x6f1cf7db))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:2514:2520  \"habits\" */ 0x01)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_38 := keccak256(0, 64)\n                        /// @src 0:5528:5555  \"habits[msg.sender][habitId]\"\n                        let dataSlot_39 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:5528:5555  \"habits[msg.sender][habitId]\" */ value0_7, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:5528:5546  \"habits[msg.sender]\" */ dataSlot_38)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_39 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:5569:5583  \"habit.archived\"\n                        let _31 := add(/** @src 0:5528:5555  \"habits[msg.sender][habitId]\" */ dataSlot_39, /** @src 0:5569:5583  \"habit.archived\" */ 2)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let _32 := sload(/** @src 0:5569:5583  \"habit.archived\" */ _31)\n                        /// @src 0:5565:5614  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        if /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(64, _32), 0xff)\n                        /// @src 0:5565:5614  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        {\n                            /// @src 0:5592:5614  \"HabitAlreadyArchived()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:5592:5614  \"HabitAlreadyArchived()\" */ shl(227, 0x18383099))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(_31, or(and(_32, not(0xff0000000000000000)), 0x010000000000000000))\n                        mstore(0, /** @src 0:2521:2531  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        /// @src 0:5667:5706  \"userStates[msg.sender].activeHabitCount\"\n                        let _33 := add(/** @src 0:244:13389  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:5667:5706  \"userStates[msg.sender].activeHabitCount\" */ 3)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:5667:5708  \"userStates[msg.sender].activeHabitCount--\" */ _33, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:5667:5708  \"userStates[msg.sender].activeHabitCount--\" */ _33), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(add(and(sload(/** @src 0:5667:5708  \"userStates[msg.sender].activeHabitCount--\" */ _33), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), not(0)), 0xffffffff), 0xffffffff)))\n                        /// @src 0:5725:5759  \"HabitArchived(msg.sender, habitId)\"\n                        log3(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:5725:5759  \"HabitArchived(msg.sender, habitId)\" */ 0x0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3, /** @src 0:2521:2531  \"msg.sender\" */ caller(), /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:5725:5759  \"HabitArchived(msg.sender, habitId)\" */ value0_7, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                        return(0, 0)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:2974:3016  \"if (msg.value == 0) revert InvalidAmount()\"\n                        if /** @src 0:2978:2992  \"msg.value == 0\" */ iszero(/** @src 0:2978:2987  \"msg.value\" */ callvalue())\n                        /// @src 0:2974:3016  \"if (msg.value == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:3001:3016  \"InvalidAmount()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:3217:3232  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 0:3001:3016  \"InvalidAmount()\"\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:3037:3047  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(0x20, 0)\n                        let dataSlot_40 := keccak256(0, 64)\n                        let _34 := sload(/** @src 0:3026:3076  \"userStates[msg.sender].depositBalance += msg.value\" */ dataSlot_40)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let sum := add(_34, /** @src 0:2978:2987  \"msg.value\" */ callvalue())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        if gt(_34, sum)\n                        {\n                            /// @src 0:369:374  \"86400\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 4, /** @src 0:369:374  \"86400\" */ 0x11)\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:369:374  \"86400\" */ 0x24)\n                        }\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        sstore(dataSlot_40, sum)\n                        /// @src 0:3091:3123  \"Deposited(msg.sender, msg.value)\"\n                        let _35 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_35, /** @src 0:2978:2987  \"msg.value\" */ callvalue())\n                        /// @src 0:3091:3123  \"Deposited(msg.sender, msg.value)\"\n                        log2(_35, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x20, /** @src 0:3091:3123  \"Deposited(msg.sender, msg.value)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:3037:3047  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xe9714e07 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_6 := calldataload(4)\n                        /// @src 0:4806:4855  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        if /** @src 0:4810:4828  \"text == bytes32(0)\" */ iszero(value_6)\n                        /// @src 0:4806:4855  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        {\n                            /// @src 0:4837:4855  \"HabitTextTooLong()\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:4837:4855  \"HabitTextTooLong()\" */ shl(224, 0xcc67c13b))\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:4911:4921  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:4893:4910  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let dataSlot_41 := keccak256(0, 64)\n                        let cleaned_6 := and(sload(/** @src 0:4891:4922  \"++userHabitCounters[msg.sender]\" */ dataSlot_41), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)\n                        if eq(cleaned_6, 0xffffffff)\n                        {\n                            /// @src 0:369:374  \"86400\"\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 4, /** @src 0:369:374  \"86400\" */ 0x11)\n                            revert(/** @src 0:244:13389  \"contract HabitTracker {...\" */ 0, /** @src 0:369:374  \"86400\" */ 0x24)\n                        }\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let ret := add(cleaned_6, 1)\n                        sstore(/** @src 0:4891:4922  \"++userHabitCounters[msg.sender]\" */ dataSlot_41, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:4891:4922  \"++userHabitCounters[msg.sender]\" */ dataSlot_41), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(0xffffffff)), and(/** @src 0:4891:4922  \"++userHabitCounters[msg.sender]\" */ ret, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff)))\n                        /// @src 0:5087:5097  \"epochNow()\"\n                        let var_6 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:2863:2911  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_6 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:369:374  \"86400\" */ div(/** @src 0:2877:2892  \"block.timestamp\" */ timestamp(), /** @src 0:369:374  \"86400\" */ 0x015180), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPtr := 0\n                        memPtr := mload(64)\n                        let newFreePtr := add(memPtr, 160)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        let _36 := and(ret, 0xffffffff)\n                        mstore(memPtr, _36)\n                        /// @src 0:4971:5137  \"Habit({...\"\n                        let _37 := add(memPtr, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 32)\n                        mstore(_37, /** @src 0:4911:4921  \"msg.sender\" */ caller())\n                        /// @src 0:4971:5137  \"Habit({...\"\n                        let _38 := add(memPtr, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 64)\n                        mstore(_38, value_6)\n                        /// @src 0:4971:5137  \"Habit({...\"\n                        let _39 := add(memPtr, 96)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(_39, var_6)\n                        /// @src 0:4971:5137  \"Habit({...\"\n                        let _40 := add(memPtr, 128)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(_40, 0)\n                        mstore(0, /** @src 0:4911:4921  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 1)\n                        let dataSlot_42 := keccak256(0, 64)\n                        /// @src 0:4941:4968  \"habits[msg.sender][habitId]\"\n                        let dataSlot_43 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _36)\n                        mstore(0x20, /** @src 0:4941:4959  \"habits[msg.sender]\" */ dataSlot_42)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        dataSlot_43 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                        sstore(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(mload(memPtr), 0xffffffff), 0xffffffff)))\n                        let _41 := mload(_37)\n                        let _42 := sload(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(_42, not(sub(shl(192, 1), 0x0100000000))), and(shl(32, _41), sub(shl(192, 1), 0x0100000000))))\n                        sstore(add(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 1), mload(_38))\n                        let memberSlot := add(/** @src 0:4941:4968  \"habits[msg.sender][habitId]\" */ dataSlot_43, /** @src 0:4893:4910  \"userHabitCounters\" */ 0x02)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        sstore(memberSlot, or(and(sload(memberSlot), not(0xffffffffffffffff)), and(mload(_39), 0xffffffffffffffff)))\n                        let cleaned_7 := iszero(iszero(mload(_40)))\n                        let _43 := sload(memberSlot)\n                        sstore(memberSlot, or(and(_43, not(0xff0000000000000000)), and(shl(64, cleaned_7), 0xff0000000000000000)))\n                        mstore(0, /** @src 0:4911:4921  \"msg.sender\" */ caller())\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(32, 0)\n                        /// @src 0:5168:5207  \"userStates[msg.sender].activeHabitCount\"\n                        let _44 := add(/** @src 0:244:13389  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:5168:5207  \"userStates[msg.sender].activeHabitCount\" */ 3)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:5168:5209  \"userStates[msg.sender].activeHabitCount++\" */ _44, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:5168:5209  \"userStates[msg.sender].activeHabitCount++\" */ _44), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(/** @src 0:423:425  \"50\" */ add(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(sload(/** @src 0:5168:5209  \"userStates[msg.sender].activeHabitCount++\" */ _44), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), 1), 0xffffffff), 0xffffffff)))\n                        /// @src 0:5235:5274  \"HabitCreated(msg.sender, habitId, text)\"\n                        let _45 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_45, value_6)\n                        /// @src 0:5235:5274  \"HabitCreated(msg.sender, habitId, text)\"\n                        log3(_45, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 32, /** @src 0:5235:5274  \"HabitCreated(msg.sender, habitId, text)\" */ 0x1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453, /** @src 0:4911:4921  \"msg.sender\" */ caller(), /** @src 0:5235:5274  \"HabitCreated(msg.sender, habitId, text)\" */ _36)\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, _36)\n                        return(memPos_6, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_uint64() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_t_uint32() -> value\n            {\n                value := calldataload(68)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_uint32() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := mload(64)\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @ast-id 414 @src 0:4328:4492  \"function _transfer(address to, uint256 amount) private {...\"\n            function fun_transfer(var_to, var_amount)\n            {\n                /// @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\"\n                let expr_component := call(gas(), var_to, var_amount, 0, 0, 0, 0)\n                let data := 0\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                        /// @src 0:244:13389  \"contract HabitTracker {...\"\n                        mstore(4, 0x41)\n                        revert(/** @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x24)\n                    }\n                    let memPtr := allocate_memory(add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ returndatasize())\n                }\n                /// @src 0:4448:4485  \"if (!success) revert TransferFailed()\"\n                if /** @src 0:4452:4460  \"!success\" */ iszero(expr_component)\n                /// @src 0:4448:4485  \"if (!success) revert TransferFailed()\"\n                {\n                    /// @src 0:4469:4485  \"TransferFailed()\"\n                    mstore(/** @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:4469:4485  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                    revert(/** @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:4469:4485  \"TransferFailed()\" */ 4)\n                }\n            }\n            /// @ast-id 871 @src 0:8656:9525  \"function _settleInternal(address user, uint64 epoch, uint32 habitId) private {...\"\n            function fun_settleInternal(var_user, var_epoch, var_habitId)\n            {\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                let _1 := and(var_user, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:8747:8753  \"habits\" */ 0x01)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:8747:8768  \"habits[user][habitId]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:8747:8768  \"habits[user][habitId]\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                mstore(0x20, /** @src 0:8747:8759  \"habits[user]\" */ dataSlot)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:8743:8812  \"if (habits[user][habitId].owner == address(0)) revert HabitNotFound()\"\n                if /** @src 0:8747:8788  \"habits[user][habitId].owner == address(0)\" */ iszero(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(shr(0x20, sload(/** @src 0:8747:8768  \"habits[user][habitId]\" */ dataSlot_1)), /** @src 0:244:13389  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n                /// @src 0:8743:8812  \"if (habits[user][habitId].owner == address(0)) revert HabitNotFound()\"\n                {\n                    /// @src 0:8797:8812  \"HabitNotFound()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:7639:7654  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                    /// @src 0:8797:8812  \"HabitNotFound()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:8797:8812  \"HabitNotFound()\" */ 4)\n                }\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:8860:8873  \"dailyStatuses\" */ 0x03)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                let dataSlot_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:8860:8886  \"dailyStatuses[user][epoch]\"\n                let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:8860:8886  \"dailyStatuses[user][epoch]\" */ var_epoch, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:8860:8879  \"dailyStatuses[user]\" */ dataSlot_2)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:8860:8895  \"dailyStatuses[user][epoch][habitId]\"\n                let dataSlot_4 := /** @src -1:-1:-1 */ 0\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:8860:8895  \"dailyStatuses[user][epoch][habitId]\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff))\n                mstore(0x20, /** @src 0:8860:8886  \"dailyStatuses[user][epoch]\" */ dataSlot_3)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                dataSlot_4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                let _2 := sload(/** @src 0:8860:8895  \"dailyStatuses[user][epoch][habitId]\" */ dataSlot_4)\n                /// @src 0:8941:8982  \"if (flags & 1 == 0) revert DayNotFunded()\"\n                if /** @src 0:8945:8959  \"flags & 1 == 0\" */ iszero(/** @src 0:8945:8954  \"flags & 1\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _2, /** @src 0:8747:8753  \"habits\" */ 0x01))\n                /// @src 0:8941:8982  \"if (flags & 1 == 0) revert DayNotFunded()\"\n                {\n                    /// @src 0:8968:8982  \"DayNotFunded()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:7787:7801  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                    /// @src 0:8968:8982  \"DayNotFunded()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:8968:8982  \"DayNotFunded()\" */ 4)\n                }\n                /// @src 0:8992:9035  \"if (flags & 4 != 0) revert AlreadySettled()\"\n                if /** @src 0:8996:9010  \"flags & 4 != 0\" */ iszero(iszero(/** @src 0:8996:9005  \"flags & 4\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _2, /** @src 0:9004:9005  \"4\" */ 0x04)))\n                /// @src 0:8992:9035  \"if (flags & 4 != 0) revert AlreadySettled()\"\n                {\n                    /// @src 0:9019:9035  \"AlreadySettled()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:9019:9035  \"AlreadySettled()\" */ shl(232, 5640185))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:9004:9005  \"4\" */ 0x04)\n                }\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                sstore(/** @src 0:8860:8895  \"dailyStatuses[user][epoch][habitId]\" */ dataSlot_4, /** @src 0:244:13389  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:8860:8895  \"dailyStatuses[user][epoch][habitId]\" */ dataSlot_4), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(255)), and(/** @src 0:9069:9078  \"flags | 4\" */ or(/** @src 0:244:13389  \"contract HabitTracker {...\" */ and(_2, 0xff), /** @src 0:9004:9005  \"4\" */ 0x04), /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xff)))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src -1:-1:-1 */ 0)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                let dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:9161:9181  \"state.blockedBalance\"\n                let _3 := add(dataSlot_5, /** @src 0:8747:8753  \"habits\" */ 0x01)\n                /// @src 0:244:13389  \"contract HabitTracker {...\"\n                sstore(_3, add(sload(/** @src 0:9161:9198  \"state.blockedBalance -= STAKE_PER_DAY\" */ _3), /** @src 0:244:13389  \"contract HabitTracker {...\" */ not(0x8ac7230489e7ffff)))\n                /// @src 0:9219:9519  \"if (flags & 2 != 0) {...\"\n                switch /** @src 0:9223:9237  \"flags & 2 != 0\" */ iszero(iszero(/** @src 0:9223:9232  \"flags & 2\" */ and(/** @src 0:244:13389  \"contract HabitTracker {...\" */ _2, /** @src 0:9231:9232  \"2\" */ 0x02)))\n                case /** @src 0:9219:9519  \"if (flags & 2 != 0) {...\" */ 0 {\n                    /// @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\"\n                    let expr_component := call(gas(), /** @src 0:9417:9425  \"treasury\" */ loadimmutable(\"13\"), /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000, /** @src -1:-1:-1 */ 0, 0, 0, 0)\n                    /// @src 0:4412:4438  \"to.call{value: amount}(\\\"\\\")\"\n                    let data := /** @src -1:-1:-1 */ 0\n                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                    switch returndatasize()\n                    case 0 { data := 96 }\n                    default {\n                        let _4 := returndatasize()\n                        if gt(_4, 0xffffffffffffffff)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:369:374  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:244:13389  \"contract HabitTracker {...\"\n                            mstore(/** @src 0:9004:9005  \"4\" */ 0x04, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x41)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x24)\n                        }\n                        let memPtr := allocate_memory(add(and(add(_4, 31), not(31)), 0x20))\n                        mstore(memPtr, _4)\n                        data := memPtr\n                        returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:244:13389  \"contract HabitTracker {...\" */ returndatasize())\n                    }\n                    /// @src 0:4448:4485  \"if (!success) revert TransferFailed()\"\n                    if /** @src 0:4452:4460  \"!success\" */ iszero(expr_component)\n                    /// @src 0:4448:4485  \"if (!success) revert TransferFailed()\"\n                    {\n                        /// @src 0:4469:4485  \"TransferFailed()\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:4469:4485  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:9004:9005  \"4\" */ 0x04)\n                    }\n                    /// @src 0:9460:9508  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _5 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_5, /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:9460:9508  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_5, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x20, /** @src 0:9460:9508  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xbe6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba, _1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:9460:9508  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), and(/** @src 0:9460:9508  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n                default /// @src 0:9219:9519  \"if (flags & 2 != 0) {...\"\n                {\n                    /// @src 0:9265:9287  \"state.claimableBalance\"\n                    let _6 := add(dataSlot_5, /** @src 0:9231:9232  \"2\" */ 0x02)\n                    /// @src 0:244:13389  \"contract HabitTracker {...\"\n                    sstore(_6, add(sload(/** @src 0:9265:9304  \"state.claimableBalance += STAKE_PER_DAY\" */ _6), /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000))\n                    /// @src 0:9325:9376  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _7 := /** @src 0:244:13389  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_7, /** @src 0:312:320  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:9325:9376  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_7, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0x20, /** @src 0:9325:9376  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209, _1, /** @src 0:244:13389  \"contract HabitTracker {...\" */ and(/** @src 0:9325:9376  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ var_habitId, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffff), and(/** @src 0:9325:9376  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:244:13389  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b9dc2d31cad0c319498083cfa15a820086e79d51d5a3a8c0c683c63332f4cdc764736f6c634300081c0033\"\n    }\n}\n",
          "hash": "295e4a448657b79be6d84d63cd9e00791fd405748f3adf1b0595a72153e5bcd1",
          "factoryDependencies": {}
        }
      }
    }
  }
}