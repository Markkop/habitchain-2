{
  "id": "81f910f2aed6599a0c20753e5f568f26",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/HabitTracker.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./interfaces/IStakingAdapter.sol\";\n\n/**\n * @title HabitTracker\n * @notice Gamified habit tracking with financial commitment and yield generation\n * @dev Uses epoch-based time (86400-second days) for daily cycles\n * @dev Integrates with external staking via IStakingAdapter\n * \n * @dev Two types of stakes:\n * - Funded Stake: User deposits locked during day (blockedBalance)\n * - Yield Stake: Successful rewards staked externally for yield generation\n * \n * @dev Two types of rewards:\n * - User Rewards: Base rewards from successful habit completion (claimableBalance)\n * - Yield Rewards: Additional rewards generated from external staking (tracked in adapter)\n * \n * @author HabitChain Team\n */\ncontract HabitTracker {\n    uint256 public constant STAKE_PER_DAY = 10 ether;\n    uint256 private constant SECONDS_PER_DAY = 86400;\n    address public immutable treasury;\n    IStakingAdapter public stakingAdapter;\n    address public owner;\n    \n    // Balance type identifiers\n    uint8 private constant BALANCE_DEPOSIT = 0;\n    uint8 private constant BALANCE_CLAIMABLE = 1;\n    uint8 private constant BALANCE_EXTERNAL = 2;\n    \n    // ============ Structs ============\n    \n    struct UserState {\n        uint256 depositBalance;      // Available funds for staking on habits\n        uint256 blockedBalance;      // Funded stake: locked during active day\n        uint256 claimableBalance;    // User rewards: earned from successful habits\n        uint32 activeHabitCount;\n    }\n    \n    struct Habit {\n        bytes32 text;\n        uint64 createdAtEpoch;\n        bool archived;\n    }\n    \n    mapping(address => UserState) public userStates;\n    mapping(address => mapping(uint32 => Habit)) public habits;\n    mapping(address => uint32) public userHabitCounters;\n    \n    // Bitmap storage: each bit represents a habitId (supports 256 habits per user per epoch)\n    mapping(address => mapping(uint64 => uint256)) public funded;\n    mapping(address => mapping(uint64 => uint256)) public checked;\n    mapping(address => mapping(uint64 => uint256)) public settled;\n    \n    event Deposited(address indexed user, uint256 amount);\n    event BalanceMoved(address indexed user, uint8 indexed from, uint8 indexed to, uint256 amount);\n    event HabitCreated(address indexed user, uint32 indexed habitId, bytes32 text);\n    event HabitArchived(address indexed user, uint32 indexed habitId);\n    event DayPrepared(address indexed user, uint64 indexed epoch, uint32 fundedCount, uint32 insufficientCount);\n    event CheckedIn(address indexed user, uint32 indexed habitId, uint64 indexed epoch);\n    event SettledSuccess(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 reward);\n    event SettledFail(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 slashed);\n    event StakingAdapterUpdated(address indexed oldAdapter, address indexed newAdapter);\n    \n    error InvalidTreasury();\n    error InvalidAmount();\n    error InsufficientBalance();\n    error InvalidBalanceType();\n    error HabitNotFound();\n    error HabitAlreadyArchived();\n    error InvalidEpoch();\n    error DayNotFunded();\n    error AlreadyCheckedIn();\n    error AlreadySettled();\n    error CannotSettleCurrentDay();\n    error TransferFailed();\n    error HabitTextTooLong();\n    error OnlyOwner();\n    error InvalidStakingAdapter();\n    error HabitIdTooLarge();\n    \n    function _checkOwner() private view {\n        if (msg.sender != owner) revert OnlyOwner();\n    }\n    \n    // ============ Constructor ============\n    \n    constructor(address _treasury, address _stakingAdapter) {\n        if (_treasury == address(0)) revert InvalidTreasury();\n        treasury = _treasury;\n        owner = msg.sender;\n        \n        // Staking adapter is optional - can be address(0) initially\n        if (_stakingAdapter != address(0)) {\n            stakingAdapter = IStakingAdapter(_stakingAdapter);\n        }\n    }\n    \n    function epochNow() public view returns (uint64) {\n        return uint64(block.timestamp / SECONDS_PER_DAY);\n    }\n    \n    // ============ Admin Functions ============\n    \n    function setStakingAdapter(address _newAdapter) external {\n        _checkOwner();\n        if (_newAdapter == address(0)) revert InvalidStakingAdapter();\n        address oldAdapter = address(stakingAdapter);\n        stakingAdapter = IStakingAdapter(_newAdapter);\n        emit StakingAdapterUpdated(oldAdapter, _newAdapter);\n    }\n    \n    function transferOwnership(address newOwner) external {\n        _checkOwner();\n        if (newOwner == address(0)) revert InvalidTreasury();\n        owner = newOwner;\n    }\n    \n    // ============ Balance Management ============\n    \n    function deposit() external payable {\n        if (msg.value == 0) revert InvalidAmount();\n        userStates[msg.sender].depositBalance += msg.value;\n        emit Deposited(msg.sender, msg.value);\n    }\n    \n    /**\n     * @notice Move funds between balance types\n     * @param from Source balance type (0=deposit, 1=claimable)\n     * @param to Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\n     * @param amount Amount to move\n     * @dev Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)\n     */\n    function move(uint8 from, uint8 to, uint256 amount) external {\n        if (amount == 0) revert InvalidAmount();\n        if (from == to) revert InvalidBalanceType();\n        if (from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL) revert InvalidBalanceType();\n        \n        UserState storage state = userStates[msg.sender];\n        \n        // Deduct from source\n        if (from == BALANCE_DEPOSIT) {\n            if (state.depositBalance < amount) revert InsufficientBalance();\n            unchecked { state.depositBalance -= amount; }\n        } else { // BALANCE_CLAIMABLE\n            if (state.claimableBalance < amount) revert InsufficientBalance();\n            unchecked { state.claimableBalance -= amount; }\n        }\n        \n        // Add to destination\n        if (to == BALANCE_DEPOSIT) {\n            unchecked { state.depositBalance += amount; }\n        } else if (to == BALANCE_CLAIMABLE) {\n            unchecked { state.claimableBalance += amount; }\n        } else { // BALANCE_EXTERNAL\n            _transfer(msg.sender, amount);\n        }\n        \n        emit BalanceMoved(msg.sender, from, to, amount);\n    }\n    \n    function _transfer(address to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n    }\n    \n    // ============ Habit Management Functions ============\n    \n    /**\n     * @notice Create a new habit\n     * @param text Description of the habit (up to 32 bytes)\n     * @return habitId The ID of the newly created habit\n     */\n    function createHabit(bytes32 text) external returns (uint32) {\n        if (text == bytes32(0)) revert HabitTextTooLong();\n        \n        uint32 habitId = ++userHabitCounters[msg.sender];\n        if (habitId > 255) revert HabitIdTooLarge(); // Bitmap limit\n        \n        habits[msg.sender][habitId] = Habit({\n            text: text,\n            createdAtEpoch: epochNow(),\n            archived: false\n        });\n        \n        unchecked { userStates[msg.sender].activeHabitCount++; }\n        \n        emit HabitCreated(msg.sender, habitId, text);\n        return habitId;\n    }\n    \n    /**\n     * @notice Archive a habit (soft delete)\n     * @param habitId ID of the habit to archive\n     */\n    function archiveHabit(uint32 habitId) external {\n        Habit storage habit = habits[msg.sender][habitId];\n        if (habit.createdAtEpoch == 0) revert HabitNotFound();\n        if (habit.archived) revert HabitAlreadyArchived();\n        habit.archived = true;\n        unchecked { userStates[msg.sender].activeHabitCount--; }\n        emit HabitArchived(msg.sender, habitId);\n    }\n    \n    // ============ Daily Cycle Functions ============\n    \n    /**\n     * @notice Prepare the day by locking funds (funded stake) for active habits\n     * @param epoch The epoch to prepare (must be current day)\n     * @dev Moves funds from depositBalance to blockedBalance (funded stake)\n     */\n    function prepareDay(uint64 epoch) external {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        \n        UserState storage state = userStates[msg.sender];\n        uint32 count = userHabitCounters[msg.sender];\n        uint32 fundedCount;\n        uint32 insufficientCount;\n        uint256 fundedBitmap = funded[msg.sender][epoch];\n        \n        for (uint32 i = 1; i <= count;) {\n            Habit storage habit = habits[msg.sender][i];\n            \n            if (!habit.archived && habit.createdAtEpoch != 0) {\n                uint256 mask = 1 << i;\n                \n                if (fundedBitmap & mask == 0) { // Check if not already funded\n                    if (state.depositBalance >= STAKE_PER_DAY) {\n                        unchecked {\n                            state.depositBalance -= STAKE_PER_DAY;\n                            state.blockedBalance += STAKE_PER_DAY; // Funded stake\n                            fundedCount++;\n                        }\n                        fundedBitmap |= mask; // Set funded bit\n                    } else {\n                        unchecked { insufficientCount++; }\n                    }\n                }\n            }\n            unchecked { i++; }\n        }\n        \n        funded[msg.sender][epoch] = fundedBitmap;\n        emit DayPrepared(msg.sender, epoch, fundedCount, insufficientCount);\n    }\n    \n    /**\n     * @notice Check in to a habit for the current day\n     * @param habitId ID of the habit\n     * @param epoch The epoch to check in (must be current day)\n     */\n    function checkIn(uint32 habitId, uint64 epoch) external {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        Habit storage habit = habits[msg.sender][habitId];\n        if (habit.createdAtEpoch == 0 || habit.archived) revert HabitNotFound();\n        \n        uint256 mask = 1 << habitId;\n        if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded();\n        if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn();\n        \n        checked[msg.sender][epoch] |= mask;\n        emit CheckedIn(msg.sender, habitId, epoch);\n    }\n    \n    /**\n     * @notice Settle a specific habit for a past day\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (must be past day)\n     * @param habitId ID of the habit to settle\n     */\n    function settle(address user, uint64 epoch, uint32 habitId) public {\n        if (epoch >= epochNow()) revert CannotSettleCurrentDay();\n        _settleInternal(user, epoch, habitId);\n    }\n    \n    /**\n     * @notice Force settle a specific habit without epoch validation (TESTING ONLY)\n     * @dev Bypasses the \"cannot settle current day\" check - use with caution\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (can be any epoch, including current)\n     * @param habitId ID of the habit to settle\n     */\n    function forceSettle(address user, uint64 epoch, uint32 habitId) public {\n        _settleInternal(user, epoch, habitId);\n    }\n    \n    /**\n     * @notice Internal settlement logic without epoch validation\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle\n     * @param habitId ID of the habit to settle\n     * @dev Settlement flow:\n     * - SUCCESS: User reward is staked externally (yield stake) to generate yield rewards\n     * - FAIL: Funded stake is sent to treasury (slashed)\n     */\n    function _settleInternal(address user, uint64 epoch, uint32 habitId) private {\n        if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound();\n        \n        uint256 mask = 1 << habitId;\n        if (funded[user][epoch] & mask == 0) revert DayNotFunded();\n        if (settled[user][epoch] & mask != 0) revert AlreadySettled();\n        \n        settled[user][epoch] |= mask;\n        UserState storage state = userStates[user];\n        \n        // Release funded stake from blocked balance\n        if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance();\n        unchecked { state.blockedBalance -= STAKE_PER_DAY; }\n        \n        if (checked[user][epoch] & mask != 0) {\n            // SUCCESS: Create yield stake by staking user rewards externally\n            // This generates yield rewards on top of the base user reward\n            if (address(stakingAdapter) != address(0)) {\n                stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY);\n            } else {\n                // Fallback: add user reward to claimable balance (no yield generation)\n                unchecked { state.claimableBalance += STAKE_PER_DAY; }\n            }\n            emit SettledSuccess(user, habitId, epoch, STAKE_PER_DAY);\n        } else {\n            // FAIL: Slash funded stake - send to treasury\n            _transfer(treasury, STAKE_PER_DAY);\n            emit SettledFail(user, habitId, epoch, STAKE_PER_DAY);\n        }\n    }\n    \n    // ============ Yield Rewards Functions ============\n    \n    /**\n     * @notice Claim yield rewards only (not principal)\n     */\n    function claimYieldRewards() external returns (uint256) {\n        if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter();\n        uint256 claimed = stakingAdapter.claimRewards(msg.sender);\n        if (claimed > 0) _transfer(msg.sender, claimed);\n        return claimed;\n    }\n    \n    /**\n     * @notice Claim everything: unstake principal + yield rewards + user rewards\n     */\n    function claimAll() external returns (uint256 total) {\n        UserState storage state = userStates[msg.sender];\n        \n        // Unstake + claim yield from adapter\n        if (address(stakingAdapter) != address(0)) {\n            uint256 staked = stakingAdapter.getStakedAmount(msg.sender);\n            if (staked > 0) {\n                stakingAdapter.unstake(msg.sender, staked);\n                total = staked;\n            }\n            uint256 yieldRewards = stakingAdapter.claimRewards(msg.sender);\n            total += yieldRewards;\n        }\n        \n        // Withdraw user rewards\n        uint256 claimable = state.claimableBalance;\n        if (claimable > 0) {\n            state.claimableBalance = 0;\n            emit BalanceMoved(msg.sender, BALANCE_CLAIMABLE, BALANCE_EXTERNAL, claimable);\n            total += claimable;\n        }\n        \n        if (total > 0) _transfer(msg.sender, total);\n    }\n    \n    // ============ Receive Function ============\n    \n    /**\n     * @notice Allow receiving native tokens from staking adapter\n     */\n    receive() external payable {}\n}\n\n"
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title IStakingAdapter\n * @notice Chain-agnostic interface for external staking protocols\n * @dev Allows HabitTracker to integrate with any staking protocol\n * \n * @dev Terminology:\n * - Yield Stake: User rewards staked in external protocol (principal)\n * - Yield Rewards: Additional rewards generated from external protocol\n */\ninterface IStakingAdapter {\n    /**\n     * @notice Create yield stake by staking user rewards into external protocol\n     * @param user Address of the user whose rewards are being staked\n     * @param amount Amount to stake (user's earned rewards)\n     * @dev For native token staking, msg.value should equal amount\n     */\n    function stake(address user, uint256 amount) external payable;\n\n    /**\n     * @notice Unstake from external protocol (yield stake + yield rewards)\n     * @param user Address of the user whose rewards are being unstaked\n     * @param amount Amount to unstake\n     * @dev Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker\n     */\n    function unstake(address user, uint256 amount) external;\n\n    /**\n     * @notice Claim accumulated yield rewards from external protocol for a specific user\n     * @param user Address of the user whose yield rewards to claim\n     * @return claimed Amount of yield rewards claimed\n     * @dev Returns 0 if no yield rewards available or not supported\n     * @dev Claimed rewards should be sent back to HabitTracker\n     */\n    function claimRewards(address user) external returns (uint256 claimed);\n\n    /**\n     * @notice Get total yield stake amount for an address (principal only)\n     * @param who Address to check\n     * @return staked Total yield stake by address (excludes yield rewards)\n     */\n    function getStakedAmount(address who) external view returns (uint256 staked);\n\n    /**\n     * @notice Get pending unclaimed yield rewards for an address\n     * @param who Address to check\n     * @return pending Pending yield rewards\n     * @dev Returns 0 if not supported by protocol\n     */\n    function getPendingRewards(address who) external view returns (uint256 pending);\n}\n\n"
      }
    },
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "parameters": "z",
        "fallbackOz": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi"
          ]
        }
      },
      "resolc": {
        "version": "latest",
        "compilerSource": "npm",
        "settings": {
          "optimizer": {
            "enabled": true,
            "parameters": "z",
            "fallbackOz": true,
            "runs": 200
          }
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
    "sources": {
      "contracts/HabitTracker.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/HabitTracker.sol",
          "exportedSymbols": {
            "HabitTracker": [
              1154
            ],
            "IStakingAdapter": [
              1198
            ]
          },
          "id": 1155,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
              "file": "./interfaces/IStakingAdapter.sol",
              "id": 2,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1155,
              "sourceUnit": 1199,
              "src": "58:42:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "HabitTracker",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 3,
                "nodeType": "StructuredDocumentation",
                "src": "102:658:0",
                "text": " @title HabitTracker\n @notice Gamified habit tracking with financial commitment and yield generation\n @dev Uses epoch-based time (86400-second days) for daily cycles\n @dev Integrates with external staking via IStakingAdapter\n \n @dev Two types of stakes:\n - Funded Stake: User deposits locked during day (blockedBalance)\n - Yield Stake: Successful rewards staked externally for yield generation\n \n @dev Two types of rewards:\n - User Rewards: Base rewards from successful habit completion (claimableBalance)\n - Yield Rewards: Additional rewards generated from external staking (tracked in adapter)\n \n @author HabitChain Team"
              },
              "fullyImplemented": true,
              "id": 1154,
              "linearizedBaseContracts": [
                1154
              ],
              "name": "HabitTracker",
              "nameLocation": "770:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "functionSelector": "4a91f7ae",
                  "id": 6,
                  "mutability": "constant",
                  "name": "STAKE_PER_DAY",
                  "nameLocation": "813:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "789:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3130",
                    "id": 5,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "829:8:0",
                    "subdenomination": "ether",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_10000000000000000000_by_1",
                      "typeString": "int_const 10000000000000000000"
                    },
                    "value": "10"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 9,
                  "mutability": "constant",
                  "name": "SECONDS_PER_DAY",
                  "nameLocation": "868:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "843:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "843:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3836343030",
                    "id": 8,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "886:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_86400_by_1",
                      "typeString": "int_const 86400"
                    },
                    "value": "86400"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "61d027b3",
                  "id": 11,
                  "mutability": "immutable",
                  "name": "treasury",
                  "nameLocation": "922:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "897:33:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "897:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "4cbb98f4",
                  "id": 14,
                  "mutability": "mutable",
                  "name": "stakingAdapter",
                  "nameLocation": "959:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "936:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                    "typeString": "contract IStakingAdapter"
                  },
                  "typeName": {
                    "id": 13,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12,
                      "name": "IStakingAdapter",
                      "nameLocations": [
                        "936:15:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1198,
                      "src": "936:15:0"
                    },
                    "referencedDeclaration": 1198,
                    "src": "936:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                      "typeString": "contract IStakingAdapter"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 16,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "994:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "979:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 19,
                  "mutability": "constant",
                  "name": "BALANCE_DEPOSIT",
                  "nameLocation": "1065:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1042:42:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 17,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1042:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 18,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1083:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 22,
                  "mutability": "constant",
                  "name": "BALANCE_CLAIMABLE",
                  "nameLocation": "1113:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1090:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1090:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1133:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 25,
                  "mutability": "constant",
                  "name": "BALANCE_EXTERNAL",
                  "nameLocation": "1163:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1140:43:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1140:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 24,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1182:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "canonicalName": "HabitTracker.UserState",
                  "id": 34,
                  "members": [
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "depositBalance",
                      "nameLocation": "1275:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1267:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1267:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 29,
                      "mutability": "mutable",
                      "name": "blockedBalance",
                      "nameLocation": "1353:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1345:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 28,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1345:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 31,
                      "mutability": "mutable",
                      "name": "claimableBalance",
                      "nameLocation": "1432:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1424:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1424:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 33,
                      "mutability": "mutable",
                      "name": "activeHabitCount",
                      "nameLocation": "1515:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1508:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 32,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1508:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserState",
                  "nameLocation": "1247:9:0",
                  "nodeType": "StructDefinition",
                  "scope": 1154,
                  "src": "1240:298:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "HabitTracker.Habit",
                  "id": 41,
                  "members": [
                    {
                      "constant": false,
                      "id": 36,
                      "mutability": "mutable",
                      "name": "text",
                      "nameLocation": "1579:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1571:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 35,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1571:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 38,
                      "mutability": "mutable",
                      "name": "createdAtEpoch",
                      "nameLocation": "1600:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1593:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 37,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "1593:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 40,
                      "mutability": "mutable",
                      "name": "archived",
                      "nameLocation": "1629:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1624:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 39,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1624:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Habit",
                  "nameLocation": "1555:5:0",
                  "nodeType": "StructDefinition",
                  "scope": 1154,
                  "src": "1548:96:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0ecc535f",
                  "id": 46,
                  "mutability": "mutable",
                  "name": "userStates",
                  "nameLocation": "1691:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1654:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                    "typeString": "mapping(address => struct HabitTracker.UserState)"
                  },
                  "typeName": {
                    "id": 45,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 42,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1662:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1654:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                      "typeString": "mapping(address => struct HabitTracker.UserState)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 44,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 43,
                        "name": "UserState",
                        "nameLocations": [
                          "1673:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 34,
                        "src": "1673:9:0"
                      },
                      "referencedDeclaration": 34,
                      "src": "1673:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                        "typeString": "struct HabitTracker.UserState"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "99626634",
                  "id": 53,
                  "mutability": "mutable",
                  "name": "habits",
                  "nameLocation": "1759:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1707:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                  },
                  "typeName": {
                    "id": 52,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 47,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1715:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1707:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 51,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 48,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1734:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1726:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                        "typeString": "mapping(uint32 => struct HabitTracker.Habit)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 50,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 49,
                          "name": "Habit",
                          "nameLocations": [
                            "1744:5:0"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 41,
                          "src": "1744:5:0"
                        },
                        "referencedDeclaration": 41,
                        "src": "1744:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                          "typeString": "struct HabitTracker.Habit"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0e08454a",
                  "id": 57,
                  "mutability": "mutable",
                  "name": "userHabitCounters",
                  "nameLocation": "1805:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1771:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                    "typeString": "mapping(address => uint32)"
                  },
                  "typeName": {
                    "id": 56,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 54,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1779:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1771:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                      "typeString": "mapping(address => uint32)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 55,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1790:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "319bec54",
                  "id": 63,
                  "mutability": "mutable",
                  "name": "funded",
                  "nameLocation": "1981:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1927:60:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 62,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 58,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1935:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1927:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 61,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 59,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "1954:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1946:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 60,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1964:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "a8389e0a",
                  "id": 69,
                  "mutability": "mutable",
                  "name": "checked",
                  "nameLocation": "2047:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "1993:61:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 68,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 64,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2001:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1993:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 67,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 65,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2020:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2012:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 66,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2030:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "39c51515",
                  "id": 75,
                  "mutability": "mutable",
                  "name": "settled",
                  "nameLocation": "2114:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1154,
                  "src": "2060:61:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 74,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 70,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2068:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2060:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 73,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 71,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2087:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2079:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 72,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2097:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4",
                  "id": 81,
                  "name": "Deposited",
                  "nameLocation": "2138:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 80,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 77,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2164:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2148:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 76,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2148:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 79,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2178:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2170:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 78,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2170:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2147:38:0"
                  },
                  "src": "2132:54:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1a76aaec2e9828be3e61d555cee697fff809245531b81aeaabfc9802480b1f05",
                  "id": 91,
                  "name": "BalanceMoved",
                  "nameLocation": "2197:12:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 90,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 83,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2226:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2210:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2210:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 85,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2246:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2232:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 84,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2232:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 87,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2266:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2252:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 86,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2252:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 89,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2278:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2270:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 88,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2270:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2209:76:0"
                  },
                  "src": "2191:95:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453",
                  "id": 99,
                  "name": "HabitCreated",
                  "nameLocation": "2297:12:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2326:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2310:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2310:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2347:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2332:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2332:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "2364:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2356:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2356:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2309:60:0"
                  },
                  "src": "2291:79:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3",
                  "id": 105,
                  "name": "HabitArchived",
                  "nameLocation": "2381:13:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 104,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 101,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2411:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "2395:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2395:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 103,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2432:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "2417:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 102,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2417:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2394:46:0"
                  },
                  "src": "2375:66:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "c3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5",
                  "id": 115,
                  "name": "DayPrepared",
                  "nameLocation": "2452:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 107,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2480:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2464:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2464:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 109,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2501:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2486:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2486:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 111,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "fundedCount",
                        "nameLocation": "2515:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2508:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 110,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2508:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 113,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "insufficientCount",
                        "nameLocation": "2535:17:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2528:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2528:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2463:90:0"
                  },
                  "src": "2446:108:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "b004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682",
                  "id": 123,
                  "name": "CheckedIn",
                  "nameLocation": "2565:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 117,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2591:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2575:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2575:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 119,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2612:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2597:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2597:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 121,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2636:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2621:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2621:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2574:68:0"
                  },
                  "src": "2559:84:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "ebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209",
                  "id": 133,
                  "name": "SettledSuccess",
                  "nameLocation": "2654:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 132,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 125,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2685:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2669:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 124,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 127,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2706:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2691:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 126,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2691:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 129,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2730:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2715:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 128,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2715:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 131,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "reward",
                        "nameLocation": "2745:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2737:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2737:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2668:84:0"
                  },
                  "src": "2648:105:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "be6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba",
                  "id": 143,
                  "name": "SettledFail",
                  "nameLocation": "2764:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 142,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 135,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2792:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2776:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2776:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 137,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2813:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2798:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 136,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2798:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 139,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2837:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2822:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 138,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2822:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 141,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "slashed",
                        "nameLocation": "2852:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2844:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 140,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2844:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2775:85:0"
                  },
                  "src": "2758:103:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "258ff515b65e53911071aed3f954e1f58eca37dce2ed4a50766f00c9d0161048",
                  "id": 149,
                  "name": "StakingAdapterUpdated",
                  "nameLocation": "2872:21:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 148,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 145,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldAdapter",
                        "nameLocation": "2910:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 149,
                        "src": "2894:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 144,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2894:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAdapter",
                        "nameLocation": "2938:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 149,
                        "src": "2922:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 146,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2922:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2893:56:0"
                  },
                  "src": "2866:84:0"
                },
                {
                  "errorSelector": "14bcf5c8",
                  "id": 151,
                  "name": "InvalidTreasury",
                  "nameLocation": "2966:15:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2981:2:0"
                  },
                  "src": "2960:24:0"
                },
                {
                  "errorSelector": "2c5211c6",
                  "id": 153,
                  "name": "InvalidAmount",
                  "nameLocation": "2995:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3008:2:0"
                  },
                  "src": "2989:22:0"
                },
                {
                  "errorSelector": "f4d678b8",
                  "id": 155,
                  "name": "InsufficientBalance",
                  "nameLocation": "3022:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 154,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3041:2:0"
                  },
                  "src": "3016:28:0"
                },
                {
                  "errorSelector": "fcb63a22",
                  "id": 157,
                  "name": "InvalidBalanceType",
                  "nameLocation": "3055:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3073:2:0"
                  },
                  "src": "3049:27:0"
                },
                {
                  "errorSelector": "a7a9536d",
                  "id": 159,
                  "name": "HabitNotFound",
                  "nameLocation": "3087:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3100:2:0"
                  },
                  "src": "3081:22:0"
                },
                {
                  "errorSelector": "c1c184c8",
                  "id": 161,
                  "name": "HabitAlreadyArchived",
                  "nameLocation": "3114:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3134:2:0"
                  },
                  "src": "3108:29:0"
                },
                {
                  "errorSelector": "d5b25b63",
                  "id": 163,
                  "name": "InvalidEpoch",
                  "nameLocation": "3148:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 162,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3160:2:0"
                  },
                  "src": "3142:21:0"
                },
                {
                  "errorSelector": "afa4e2b6",
                  "id": 165,
                  "name": "DayNotFunded",
                  "nameLocation": "3174:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 164,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3186:2:0"
                  },
                  "src": "3168:21:0"
                },
                {
                  "errorSelector": "c98289f0",
                  "id": 167,
                  "name": "AlreadyCheckedIn",
                  "nameLocation": "3200:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 166,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3216:2:0"
                  },
                  "src": "3194:25:0"
                },
                {
                  "errorSelector": "560ff900",
                  "id": 169,
                  "name": "AlreadySettled",
                  "nameLocation": "3230:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 168,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3244:2:0"
                  },
                  "src": "3224:23:0"
                },
                {
                  "errorSelector": "cf114bd9",
                  "id": 171,
                  "name": "CannotSettleCurrentDay",
                  "nameLocation": "3258:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 170,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3280:2:0"
                  },
                  "src": "3252:31:0"
                },
                {
                  "errorSelector": "90b8ec18",
                  "id": 173,
                  "name": "TransferFailed",
                  "nameLocation": "3294:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3308:2:0"
                  },
                  "src": "3288:23:0"
                },
                {
                  "errorSelector": "cc67c13b",
                  "id": 175,
                  "name": "HabitTextTooLong",
                  "nameLocation": "3322:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 174,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3338:2:0"
                  },
                  "src": "3316:25:0"
                },
                {
                  "errorSelector": "5fc483c5",
                  "id": 177,
                  "name": "OnlyOwner",
                  "nameLocation": "3352:9:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 176,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3361:2:0"
                  },
                  "src": "3346:18:0"
                },
                {
                  "errorSelector": "dd750592",
                  "id": 179,
                  "name": "InvalidStakingAdapter",
                  "nameLocation": "3375:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3396:2:0"
                  },
                  "src": "3369:30:0"
                },
                {
                  "errorSelector": "e9987cdd",
                  "id": 181,
                  "name": "HabitIdTooLarge",
                  "nameLocation": "3410:15:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3425:2:0"
                  },
                  "src": "3404:24:0"
                },
                {
                  "body": {
                    "id": 192,
                    "nodeType": "Block",
                    "src": "3474:60:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 184,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3488:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 185,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3492:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3488:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 186,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "3502:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3488:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 191,
                        "nodeType": "IfStatement",
                        "src": "3484:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 188,
                              "name": "OnlyOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 177,
                              "src": "3516:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 189,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3516:11:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 190,
                          "nodeType": "RevertStatement",
                          "src": "3509:18:0"
                        }
                      }
                    ]
                  },
                  "id": 193,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkOwner",
                  "nameLocation": "3447:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 182,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3458:2:0"
                  },
                  "returnParameters": {
                    "id": 183,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3474:0:0"
                  },
                  "scope": 1154,
                  "src": "3438:96:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 233,
                    "nodeType": "Block",
                    "src": "3650:324:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 200,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "3664:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 203,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3685:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 202,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3677:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 201,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3677:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3677:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3664:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 209,
                        "nodeType": "IfStatement",
                        "src": "3660:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 206,
                              "name": "InvalidTreasury",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "3696:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3696:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 208,
                          "nodeType": "RevertStatement",
                          "src": "3689:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 210,
                            "name": "treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "3723:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 211,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "3734:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3723:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 213,
                        "nodeType": "ExpressionStatement",
                        "src": "3723:20:0"
                      },
                      {
                        "expression": {
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 214,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "3753:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 215,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3761:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 216,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3765:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3761:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3753:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 218,
                        "nodeType": "ExpressionStatement",
                        "src": "3753:18:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 219,
                            "name": "_stakingAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 197,
                            "src": "3863:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 222,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3890:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3882:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 220,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3882:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3882:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3863:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 232,
                        "nodeType": "IfStatement",
                        "src": "3859:109:0",
                        "trueBody": {
                          "id": 231,
                          "nodeType": "Block",
                          "src": "3894:74:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 229,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 225,
                                  "name": "stakingAdapter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14,
                                  "src": "3908:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                    "typeString": "contract IStakingAdapter"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 227,
                                      "name": "_stakingAdapter",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 197,
                                      "src": "3941:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 226,
                                    "name": "IStakingAdapter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1198,
                                    "src": "3925:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IStakingAdapter_$1198_$",
                                      "typeString": "type(contract IStakingAdapter)"
                                    }
                                  },
                                  "id": 228,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3925:32:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                    "typeString": "contract IStakingAdapter"
                                  }
                                },
                                "src": "3908:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                  "typeString": "contract IStakingAdapter"
                                }
                              },
                              "id": 230,
                              "nodeType": "ExpressionStatement",
                              "src": "3908:49:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 234,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 198,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 195,
                        "mutability": "mutable",
                        "name": "_treasury",
                        "nameLocation": "3614:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 234,
                        "src": "3606:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 194,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3606:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 197,
                        "mutability": "mutable",
                        "name": "_stakingAdapter",
                        "nameLocation": "3633:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 234,
                        "src": "3625:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 196,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3625:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3605:44:0"
                  },
                  "returnParameters": {
                    "id": 199,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3650:0:0"
                  },
                  "scope": 1154,
                  "src": "3594:380:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 247,
                    "nodeType": "Block",
                    "src": "4033:65:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 241,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967292,
                                  "src": "4057:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 242,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4063:9:0",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "4057:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 243,
                                "name": "SECONDS_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 9,
                                "src": "4075:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4057:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 240,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4050:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint64_$",
                              "typeString": "type(uint64)"
                            },
                            "typeName": {
                              "id": 239,
                              "name": "uint64",
                              "nodeType": "ElementaryTypeName",
                              "src": "4050:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4050:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "functionReturnParameters": 238,
                        "id": 246,
                        "nodeType": "Return",
                        "src": "4043:48:0"
                      }
                    ]
                  },
                  "functionSelector": "222ae786",
                  "id": 248,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "epochNow",
                  "nameLocation": "3993:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 235,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4001:2:0"
                  },
                  "returnParameters": {
                    "id": 238,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 237,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 248,
                        "src": "4025:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 236,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "4025:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4024:8:0"
                  },
                  "scope": 1154,
                  "src": "3984:114:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 284,
                    "nodeType": "Block",
                    "src": "4219:271:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 253,
                            "name": "_checkOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4229:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$__$",
                              "typeString": "function () view"
                            }
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4229:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 255,
                        "nodeType": "ExpressionStatement",
                        "src": "4229:13:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 256,
                            "name": "_newAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 250,
                            "src": "4256:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 259,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4279:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 258,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4271:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 257,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4271:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 260,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4271:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4256:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 265,
                        "nodeType": "IfStatement",
                        "src": "4252:61:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 262,
                              "name": "InvalidStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "4290:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 263,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4290:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 264,
                          "nodeType": "RevertStatement",
                          "src": "4283:30:0"
                        }
                      },
                      {
                        "assignments": [
                          267
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 267,
                            "mutability": "mutable",
                            "name": "oldAdapter",
                            "nameLocation": "4331:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 284,
                            "src": "4323:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 266,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4323:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 272,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 270,
                              "name": "stakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "4352:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                "typeString": "contract IStakingAdapter"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                "typeString": "contract IStakingAdapter"
                              }
                            ],
                            "id": 269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4344:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 268,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4344:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4344:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4323:44:0"
                      },
                      {
                        "expression": {
                          "id": 277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 273,
                            "name": "stakingAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14,
                            "src": "4377:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                              "typeString": "contract IStakingAdapter"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 275,
                                "name": "_newAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 250,
                                "src": "4410:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 274,
                              "name": "IStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1198,
                              "src": "4394:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IStakingAdapter_$1198_$",
                                "typeString": "type(contract IStakingAdapter)"
                              }
                            },
                            "id": 276,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4394:28:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                              "typeString": "contract IStakingAdapter"
                            }
                          },
                          "src": "4377:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                            "typeString": "contract IStakingAdapter"
                          }
                        },
                        "id": 278,
                        "nodeType": "ExpressionStatement",
                        "src": "4377:45:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 280,
                              "name": "oldAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "4459:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 281,
                              "name": "_newAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 250,
                              "src": "4471:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 279,
                            "name": "StakingAdapterUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 149,
                            "src": "4437:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 282,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4437:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 283,
                        "nodeType": "EmitStatement",
                        "src": "4432:51:0"
                      }
                    ]
                  },
                  "functionSelector": "40729c58",
                  "id": 285,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setStakingAdapter",
                  "nameLocation": "4171:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 251,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 250,
                        "mutability": "mutable",
                        "name": "_newAdapter",
                        "nameLocation": "4197:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 285,
                        "src": "4189:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 249,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4189:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4188:21:0"
                  },
                  "returnParameters": {
                    "id": 252,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4219:0:0"
                  },
                  "scope": 1154,
                  "src": "4162:328:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 307,
                    "nodeType": "Block",
                    "src": "4554:118:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 290,
                            "name": "_checkOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4564:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$__$",
                              "typeString": "function () view"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4564:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 292,
                        "nodeType": "ExpressionStatement",
                        "src": "4564:13:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 293,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 287,
                            "src": "4591:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 296,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4611:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4603:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 294,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4603:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4603:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4591:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 302,
                        "nodeType": "IfStatement",
                        "src": "4587:52:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 299,
                              "name": "InvalidTreasury",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "4622:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4622:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 301,
                          "nodeType": "RevertStatement",
                          "src": "4615:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 303,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "4649:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 304,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 287,
                            "src": "4657:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4649:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 306,
                        "nodeType": "ExpressionStatement",
                        "src": "4649:16:0"
                      }
                    ]
                  },
                  "functionSelector": "f2fde38b",
                  "id": 308,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nameLocation": "4509:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 288,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 287,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "4535:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 308,
                        "src": "4527:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 286,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4527:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4526:18:0"
                  },
                  "returnParameters": {
                    "id": 289,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4554:0:0"
                  },
                  "scope": 1154,
                  "src": "4500:172:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 335,
                    "nodeType": "Block",
                    "src": "4775:166:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 314,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 311,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "4789:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4793:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "4789:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 313,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4802:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4789:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 318,
                        "nodeType": "IfStatement",
                        "src": "4785:42:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 315,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "4812:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4812:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 317,
                          "nodeType": "RevertStatement",
                          "src": "4805:22:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 319,
                                "name": "userStates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "4837:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                  "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                }
                              },
                              "id": 322,
                              "indexExpression": {
                                "expression": {
                                  "id": 320,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "4848:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 321,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4852:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4848:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4837:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage",
                                "typeString": "struct HabitTracker.UserState storage ref"
                              }
                            },
                            "id": 323,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "4860:14:0",
                            "memberName": "depositBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 27,
                            "src": "4837:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 324,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "4878:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4882:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "4878:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4837:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 327,
                        "nodeType": "ExpressionStatement",
                        "src": "4837:50:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 329,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4912:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 330,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4916:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4912:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 331,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4924:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 332,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4928:5:0",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "4924:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 328,
                            "name": "Deposited",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 81,
                            "src": "4902:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4902:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 334,
                        "nodeType": "EmitStatement",
                        "src": "4897:37:0"
                      }
                    ]
                  },
                  "functionSelector": "d0e30db0",
                  "id": 336,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "4748:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 309,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4755:2:0"
                  },
                  "returnParameters": {
                    "id": 310,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4775:0:0"
                  },
                  "scope": 1154,
                  "src": "4739:202:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 454,
                    "nodeType": "Block",
                    "src": "5371:1064:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 346,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 343,
                            "src": "5385:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 347,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5395:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5385:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 352,
                        "nodeType": "IfStatement",
                        "src": "5381:39:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 349,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "5405:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 350,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5405:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 351,
                          "nodeType": "RevertStatement",
                          "src": "5398:22:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 353,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5434:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 354,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 341,
                            "src": "5442:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "5434:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 359,
                        "nodeType": "IfStatement",
                        "src": "5430:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 356,
                              "name": "InvalidBalanceType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 157,
                              "src": "5453:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 357,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5453:20:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 358,
                          "nodeType": "RevertStatement",
                          "src": "5446:27:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 360,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5487:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 361,
                              "name": "BALANCE_CLAIMABLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "5494:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5487:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 365,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 363,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "5515:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 364,
                              "name": "BALANCE_EXTERNAL",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25,
                              "src": "5520:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5515:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5487:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 370,
                        "nodeType": "IfStatement",
                        "src": "5483:82:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 367,
                              "name": "InvalidBalanceType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 157,
                              "src": "5545:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5545:20:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 369,
                          "nodeType": "RevertStatement",
                          "src": "5538:27:0"
                        }
                      },
                      {
                        "assignments": [
                          373
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 373,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "5602:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 454,
                            "src": "5584:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 372,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 371,
                                "name": "UserState",
                                "nameLocations": [
                                  "5584:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "5584:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "5584:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 378,
                        "initialValue": {
                          "baseExpression": {
                            "id": 374,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "5610:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 377,
                          "indexExpression": {
                            "expression": {
                              "id": 375,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "5621:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5625:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5621:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5610:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5584:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 379,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5685:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 380,
                            "name": "BALANCE_DEPOSIT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "5693:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "5685:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 413,
                          "nodeType": "Block",
                          "src": "5862:171:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 401,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 398,
                                    "name": "state",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 373,
                                    "src": "5901:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                      "typeString": "struct HabitTracker.UserState storage pointer"
                                    }
                                  },
                                  "id": 399,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5907:16:0",
                                  "memberName": "claimableBalance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 31,
                                  "src": "5901:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 400,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 343,
                                  "src": "5926:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5901:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 405,
                              "nodeType": "IfStatement",
                              "src": "5897:65:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 402,
                                    "name": "InsufficientBalance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 155,
                                    "src": "5941:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                      "typeString": "function () pure returns (error)"
                                    }
                                  },
                                  "id": 403,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5941:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_error",
                                    "typeString": "error"
                                  }
                                },
                                "id": 404,
                                "nodeType": "RevertStatement",
                                "src": "5934:28:0"
                              }
                            },
                            {
                              "id": 412,
                              "nodeType": "UncheckedBlock",
                              "src": "5976:47:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 410,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 406,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 373,
                                        "src": "5988:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 408,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "5994:16:0",
                                      "memberName": "claimableBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 31,
                                      "src": "5988:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 409,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 343,
                                      "src": "6014:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5988:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 411,
                                  "nodeType": "ExpressionStatement",
                                  "src": "5988:32:0"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 414,
                        "nodeType": "IfStatement",
                        "src": "5681:352:0",
                        "trueBody": {
                          "id": 397,
                          "nodeType": "Block",
                          "src": "5710:146:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 385,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 382,
                                    "name": "state",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 373,
                                    "src": "5728:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                      "typeString": "struct HabitTracker.UserState storage pointer"
                                    }
                                  },
                                  "id": 383,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5734:14:0",
                                  "memberName": "depositBalance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 27,
                                  "src": "5728:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 384,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 343,
                                  "src": "5751:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5728:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 389,
                              "nodeType": "IfStatement",
                              "src": "5724:63:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 386,
                                    "name": "InsufficientBalance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 155,
                                    "src": "5766:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                      "typeString": "function () pure returns (error)"
                                    }
                                  },
                                  "id": 387,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5766:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_error",
                                    "typeString": "error"
                                  }
                                },
                                "id": 388,
                                "nodeType": "RevertStatement",
                                "src": "5759:28:0"
                              }
                            },
                            {
                              "id": 396,
                              "nodeType": "UncheckedBlock",
                              "src": "5801:45:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 394,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 390,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 373,
                                        "src": "5813:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 392,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "5819:14:0",
                                      "memberName": "depositBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 27,
                                      "src": "5813:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 393,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 343,
                                      "src": "5837:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5813:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 395,
                                  "nodeType": "ExpressionStatement",
                                  "src": "5813:30:0"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 415,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 341,
                            "src": "6085:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 416,
                            "name": "BALANCE_DEPOSIT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "6091:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "6085:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 426,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "6187:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 427,
                              "name": "BALANCE_CLAIMABLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "6193:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "6187:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 443,
                            "nodeType": "Block",
                            "src": "6289:74:0",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 438,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "6333:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 439,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "6337:6:0",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "6333:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 440,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 343,
                                      "src": "6345:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 437,
                                    "name": "_transfer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 478,
                                    "src": "6323:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256)"
                                    }
                                  },
                                  "id": 441,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6323:29:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 442,
                                "nodeType": "ExpressionStatement",
                                "src": "6323:29:0"
                              }
                            ]
                          },
                          "id": 444,
                          "nodeType": "IfStatement",
                          "src": "6183:180:0",
                          "trueBody": {
                            "id": 436,
                            "nodeType": "Block",
                            "src": "6212:71:0",
                            "statements": [
                              {
                                "id": 435,
                                "nodeType": "UncheckedBlock",
                                "src": "6226:47:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 433,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 429,
                                          "name": "state",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 373,
                                          "src": "6238:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                          }
                                        },
                                        "id": 431,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberLocation": "6244:16:0",
                                        "memberName": "claimableBalance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 31,
                                        "src": "6238:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "id": 432,
                                        "name": "amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 343,
                                        "src": "6264:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6238:32:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 434,
                                    "nodeType": "ExpressionStatement",
                                    "src": "6238:32:0"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "id": 445,
                        "nodeType": "IfStatement",
                        "src": "6081:282:0",
                        "trueBody": {
                          "id": 425,
                          "nodeType": "Block",
                          "src": "6108:69:0",
                          "statements": [
                            {
                              "id": 424,
                              "nodeType": "UncheckedBlock",
                              "src": "6122:45:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 422,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 418,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 373,
                                        "src": "6134:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 420,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "6140:14:0",
                                      "memberName": "depositBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 27,
                                      "src": "6134:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 421,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 343,
                                      "src": "6158:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6134:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 423,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6134:30:0"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 447,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "6399:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 448,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6403:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6399:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 449,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "6411:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 450,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "6417:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 451,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "6421:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 446,
                            "name": "BalanceMoved",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 91,
                            "src": "6386:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint8,uint8,uint256)"
                            }
                          },
                          "id": 452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6386:42:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 453,
                        "nodeType": "EmitStatement",
                        "src": "6381:47:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 337,
                    "nodeType": "StructuredDocumentation",
                    "src": "4951:354:0",
                    "text": " @notice Move funds between balance types\n @param from Source balance type (0=deposit, 1=claimable)\n @param to Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\n @param amount Amount to move\n @dev Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)"
                  },
                  "functionSelector": "4f126f03",
                  "id": 455,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "move",
                  "nameLocation": "5319:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 344,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5330:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5324:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "5324:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5342:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5336:8:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "5336:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "5354:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5346:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5346:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5323:38:0"
                  },
                  "returnParameters": {
                    "id": 345,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5371:0:0"
                  },
                  "scope": 1154,
                  "src": "5310:1125:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 477,
                    "nodeType": "Block",
                    "src": "6500:109:0",
                    "statements": [
                      {
                        "assignments": [
                          463,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 463,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6516:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 477,
                            "src": "6511:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 462,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6511:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 470,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6552:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 464,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 457,
                                "src": "6529:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6532:4:0",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "6529:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 466,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 459,
                                "src": "6544:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "6529:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 469,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6529:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6510:45:0"
                      },
                      {
                        "condition": {
                          "id": 472,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "6569:8:0",
                          "subExpression": {
                            "id": 471,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 463,
                            "src": "6570:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 476,
                        "nodeType": "IfStatement",
                        "src": "6565:37:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 473,
                              "name": "TransferFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 173,
                              "src": "6586:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 474,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6586:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 475,
                          "nodeType": "RevertStatement",
                          "src": "6579:23:0"
                        }
                      }
                    ]
                  },
                  "id": 478,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "6454:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 460,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 457,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6472:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 478,
                        "src": "6464:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6464:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 459,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "6484:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 478,
                        "src": "6476:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6476:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6463:28:0"
                  },
                  "returnParameters": {
                    "id": 461,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6500:0:0"
                  },
                  "scope": 1154,
                  "src": "6445:164:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 542,
                    "nodeType": "Block",
                    "src": "6913:522:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 486,
                            "name": "text",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 481,
                            "src": "6927:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 489,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6943:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 488,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6935:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": {
                                "id": 487,
                                "name": "bytes32",
                                "nodeType": "ElementaryTypeName",
                                "src": "6935:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 490,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6935:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "6927:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 495,
                        "nodeType": "IfStatement",
                        "src": "6923:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 492,
                              "name": "HabitTextTooLong",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 175,
                              "src": "6954:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 493,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6954:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 494,
                          "nodeType": "RevertStatement",
                          "src": "6947:25:0"
                        }
                      },
                      {
                        "assignments": [
                          497
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 497,
                            "mutability": "mutable",
                            "name": "habitId",
                            "nameLocation": "6998:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 542,
                            "src": "6991:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 496,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6991:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 503,
                        "initialValue": {
                          "id": 502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "7008:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 498,
                              "name": "userHabitCounters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 57,
                              "src": "7010:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                "typeString": "mapping(address => uint32)"
                              }
                            },
                            "id": 501,
                            "indexExpression": {
                              "expression": {
                                "id": 499,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7028:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 500,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7032:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7028:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7010:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6991:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 504,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 497,
                            "src": "7053:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "323535",
                            "id": 505,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7063:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_255_by_1",
                              "typeString": "int_const 255"
                            },
                            "value": "255"
                          },
                          "src": "7053:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 510,
                        "nodeType": "IfStatement",
                        "src": "7049:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 507,
                              "name": "HabitIdTooLarge",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 181,
                              "src": "7075:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 508,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7075:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 509,
                          "nodeType": "RevertStatement",
                          "src": "7068:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 523,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 511,
                                "name": "habits",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53,
                                "src": "7127:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                }
                              },
                              "id": 515,
                              "indexExpression": {
                                "expression": {
                                  "id": 512,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "7134:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 513,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7138:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "7134:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7127:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                              }
                            },
                            "id": 516,
                            "indexExpression": {
                              "id": 514,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "7146:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7127:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage",
                              "typeString": "struct HabitTracker.Habit storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 518,
                                "name": "text",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 481,
                                "src": "7183:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 519,
                                  "name": "epochNow",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 248,
                                  "src": "7217:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                    "typeString": "function () view returns (uint64)"
                                  }
                                },
                                "id": 520,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7217:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 521,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7251:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "id": 517,
                              "name": "Habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "7157:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Habit_$41_storage_ptr_$",
                                "typeString": "type(struct HabitTracker.Habit storage pointer)"
                              }
                            },
                            "id": 522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "nameLocations": [
                              "7177:4:0",
                              "7201:14:0",
                              "7241:8:0"
                            ],
                            "names": [
                              "text",
                              "createdAtEpoch",
                              "archived"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "7157:110:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_memory_ptr",
                              "typeString": "struct HabitTracker.Habit memory"
                            }
                          },
                          "src": "7127:140:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "id": 524,
                        "nodeType": "ExpressionStatement",
                        "src": "7127:140:0"
                      },
                      {
                        "id": 532,
                        "nodeType": "UncheckedBlock",
                        "src": "7286:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 530,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": false,
                              "src": "7298:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 525,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46,
                                    "src": "7298:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 528,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 526,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "7309:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 527,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7313:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "7309:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7298:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 529,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "7321:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 33,
                                "src": "7298:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 531,
                            "nodeType": "ExpressionStatement",
                            "src": "7298:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 534,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7378:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7382:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7378:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 536,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "7390:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 537,
                              "name": "text",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 481,
                              "src": "7399:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 533,
                            "name": "HabitCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 99,
                            "src": "7365:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_bytes32_$returns$__$",
                              "typeString": "function (address,uint32,bytes32)"
                            }
                          },
                          "id": 538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7365:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 539,
                        "nodeType": "EmitStatement",
                        "src": "7360:44:0"
                      },
                      {
                        "expression": {
                          "id": 540,
                          "name": "habitId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 497,
                          "src": "7421:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 485,
                        "id": 541,
                        "nodeType": "Return",
                        "src": "7414:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 479,
                    "nodeType": "StructuredDocumentation",
                    "src": "6684:163:0",
                    "text": " @notice Create a new habit\n @param text Description of the habit (up to 32 bytes)\n @return habitId The ID of the newly created habit"
                  },
                  "functionSelector": "e9714e07",
                  "id": 543,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "createHabit",
                  "nameLocation": "6861:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 482,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 481,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "6881:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 543,
                        "src": "6873:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 480,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6873:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6872:14:0"
                  },
                  "returnParameters": {
                    "id": 485,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 484,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 543,
                        "src": "6905:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 483,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6905:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6904:8:0"
                  },
                  "scope": 1154,
                  "src": "6852:583:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 593,
                    "nodeType": "Block",
                    "src": "7602:333:0",
                    "statements": [
                      {
                        "assignments": [
                          551
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 551,
                            "mutability": "mutable",
                            "name": "habit",
                            "nameLocation": "7626:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 593,
                            "src": "7612:19:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit"
                            },
                            "typeName": {
                              "id": 550,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 549,
                                "name": "Habit",
                                "nameLocations": [
                                  "7612:5:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 41,
                                "src": "7612:5:0"
                              },
                              "referencedDeclaration": 41,
                              "src": "7612:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 558,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 552,
                              "name": "habits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "7634:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                              }
                            },
                            "id": 555,
                            "indexExpression": {
                              "expression": {
                                "id": 553,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7641:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7645:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7641:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7634:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                            }
                          },
                          "id": 557,
                          "indexExpression": {
                            "id": 556,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 546,
                            "src": "7653:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7634:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7612:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 559,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 551,
                              "src": "7675:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 560,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7681:14:0",
                            "memberName": "createdAtEpoch",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38,
                            "src": "7675:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 561,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7699:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "7675:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 566,
                        "nodeType": "IfStatement",
                        "src": "7671:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 563,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "7709:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 564,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7709:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 565,
                          "nodeType": "RevertStatement",
                          "src": "7702:22:0"
                        }
                      },
                      {
                        "condition": {
                          "expression": {
                            "id": 567,
                            "name": "habit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 551,
                            "src": "7738:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit storage pointer"
                            }
                          },
                          "id": 568,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7744:8:0",
                          "memberName": "archived",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 40,
                          "src": "7738:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 572,
                        "nodeType": "IfStatement",
                        "src": "7734:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 569,
                              "name": "HabitAlreadyArchived",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "7761:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 570,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7761:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 571,
                          "nodeType": "RevertStatement",
                          "src": "7754:29:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 577,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 573,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 551,
                              "src": "7793:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 575,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "7799:8:0",
                            "memberName": "archived",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40,
                            "src": "7793:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7810:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "7793:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 578,
                        "nodeType": "ExpressionStatement",
                        "src": "7793:21:0"
                      },
                      {
                        "id": 586,
                        "nodeType": "UncheckedBlock",
                        "src": "7824:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 584,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "--",
                              "prefix": false,
                              "src": "7836:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 579,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46,
                                    "src": "7836:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 582,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 580,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "7847:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 581,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7851:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "7847:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7836:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 583,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "7859:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 33,
                                "src": "7836:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 585,
                            "nodeType": "ExpressionStatement",
                            "src": "7836:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 588,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7908:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 589,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7912:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7908:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 590,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 546,
                              "src": "7920:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 587,
                            "name": "HabitArchived",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 105,
                            "src": "7894:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint32)"
                            }
                          },
                          "id": 591,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7894:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 592,
                        "nodeType": "EmitStatement",
                        "src": "7889:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 544,
                    "nodeType": "StructuredDocumentation",
                    "src": "7445:105:0",
                    "text": " @notice Archive a habit (soft delete)\n @param habitId ID of the habit to archive"
                  },
                  "functionSelector": "b650673a",
                  "id": 594,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "archiveHabit",
                  "nameLocation": "7564:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 546,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "7584:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 594,
                        "src": "7577:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 545,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "7577:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7576:16:0"
                  },
                  "returnParameters": {
                    "id": 548,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7602:0:0"
                  },
                  "scope": 1154,
                  "src": "7555:380:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 732,
                    "nodeType": "Block",
                    "src": "8285:1327:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 603,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 600,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 597,
                            "src": "8299:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 601,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "8308:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 602,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8308:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "8299:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 607,
                        "nodeType": "IfStatement",
                        "src": "8295:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 604,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "8327:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 605,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8327:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 606,
                          "nodeType": "RevertStatement",
                          "src": "8320:21:0"
                        }
                      },
                      {
                        "assignments": [
                          610
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 610,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "8378:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "8360:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 609,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 608,
                                "name": "UserState",
                                "nameLocations": [
                                  "8360:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "8360:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "8360:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 615,
                        "initialValue": {
                          "baseExpression": {
                            "id": 611,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "8386:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 614,
                          "indexExpression": {
                            "expression": {
                              "id": 612,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "8397:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8401:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8397:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8386:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8360:48:0"
                      },
                      {
                        "assignments": [
                          617
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 617,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "8425:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "8418:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 616,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8418:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 622,
                        "initialValue": {
                          "baseExpression": {
                            "id": 618,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 57,
                            "src": "8433:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 621,
                          "indexExpression": {
                            "expression": {
                              "id": 619,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "8451:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8455:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8451:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8433:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8418:44:0"
                      },
                      {
                        "assignments": [
                          624
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 624,
                            "mutability": "mutable",
                            "name": "fundedCount",
                            "nameLocation": "8479:11:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "8472:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 623,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8472:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 625,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8472:18:0"
                      },
                      {
                        "assignments": [
                          627
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 627,
                            "mutability": "mutable",
                            "name": "insufficientCount",
                            "nameLocation": "8507:17:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "8500:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 626,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8500:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 628,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8500:24:0"
                      },
                      {
                        "assignments": [
                          630
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 630,
                            "mutability": "mutable",
                            "name": "fundedBitmap",
                            "nameLocation": "8542:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "8534:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 629,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8534:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 637,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 631,
                              "name": "funded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 63,
                              "src": "8557:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(uint64 => uint256))"
                              }
                            },
                            "id": 634,
                            "indexExpression": {
                              "expression": {
                                "id": 632,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "8564:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 633,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8568:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "8564:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8557:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                              "typeString": "mapping(uint64 => uint256)"
                            }
                          },
                          "id": 636,
                          "indexExpression": {
                            "id": 635,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 597,
                            "src": "8576:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8557:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8534:48:0"
                      },
                      {
                        "body": {
                          "id": 713,
                          "nodeType": "Block",
                          "src": "8633:837:0",
                          "statements": [
                            {
                              "assignments": [
                                647
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 647,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "8661:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 713,
                                  "src": "8647:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 646,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 645,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "8647:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 41,
                                      "src": "8647:5:0"
                                    },
                                    "referencedDeclaration": 41,
                                    "src": "8647:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 654,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 648,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "8669:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 651,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 649,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "8676:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 650,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8680:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "8676:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8669:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 653,
                                "indexExpression": {
                                  "id": 652,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 639,
                                  "src": "8688:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8669:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$41_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8647:43:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 662,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 657,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "8721:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 655,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 647,
                                      "src": "8722:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 656,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8728:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 40,
                                    "src": "8722:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  },
                                  "id": 661,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 658,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 647,
                                      "src": "8740:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 659,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8746:14:0",
                                    "memberName": "createdAtEpoch",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 38,
                                    "src": "8740:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 660,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8764:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "8740:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "8721:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 708,
                              "nodeType": "IfStatement",
                              "src": "8717:712:0",
                              "trueBody": {
                                "id": 707,
                                "nodeType": "Block",
                                "src": "8767:662:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      664
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 664,
                                        "mutability": "mutable",
                                        "name": "mask",
                                        "nameLocation": "8793:4:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 707,
                                        "src": "8785:12:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 663,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "8785:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 668,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 667,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "31",
                                        "id": 665,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8800:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<<",
                                      "rightExpression": {
                                        "id": 666,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 639,
                                        "src": "8805:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        }
                                      },
                                      "src": "8800:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "8785:21:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 673,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 671,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 669,
                                          "name": "fundedBitmap",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 630,
                                          "src": "8845:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "id": 670,
                                          "name": "mask",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 664,
                                          "src": "8860:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "8845:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 672,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8868:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "8845:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 706,
                                    "nodeType": "IfStatement",
                                    "src": "8841:574:0",
                                    "trueBody": {
                                      "id": 705,
                                      "nodeType": "Block",
                                      "src": "8871:544:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 677,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 674,
                                                "name": "state",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 610,
                                                "src": "8928:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                  "typeString": "struct HabitTracker.UserState storage pointer"
                                                }
                                              },
                                              "id": 675,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "8934:14:0",
                                              "memberName": "depositBalance",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 27,
                                              "src": "8928:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">=",
                                            "rightExpression": {
                                              "id": 676,
                                              "name": "STAKE_PER_DAY",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 6,
                                              "src": "8952:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "8928:37:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 703,
                                            "nodeType": "Block",
                                            "src": "9315:82:0",
                                            "statements": [
                                              {
                                                "id": 702,
                                                "nodeType": "UncheckedBlock",
                                                "src": "9341:34:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 700,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "9353:19:0",
                                                      "subExpression": {
                                                        "id": 699,
                                                        "name": "insufficientCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 627,
                                                        "src": "9353:17:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 701,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9353:19:0"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          "id": 704,
                                          "nodeType": "IfStatement",
                                          "src": "8924:473:0",
                                          "trueBody": {
                                            "id": 698,
                                            "nodeType": "Block",
                                            "src": "8967:342:0",
                                            "statements": [
                                              {
                                                "id": 693,
                                                "nodeType": "UncheckedBlock",
                                                "src": "8993:230:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 682,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 678,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 610,
                                                          "src": "9033:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 680,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "9039:14:0",
                                                        "memberName": "depositBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 27,
                                                        "src": "9033:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "-=",
                                                      "rightHandSide": {
                                                        "id": 681,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 6,
                                                        "src": "9057:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "9033:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 683,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9033:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 688,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 684,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 610,
                                                          "src": "9100:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 686,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "9106:14:0",
                                                        "memberName": "blockedBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 29,
                                                        "src": "9100:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "+=",
                                                      "rightHandSide": {
                                                        "id": 687,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 6,
                                                        "src": "9124:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "9100:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 689,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9100:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 691,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "9183:13:0",
                                                      "subExpression": {
                                                        "id": 690,
                                                        "name": "fundedCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 624,
                                                        "src": "9183:11:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 692,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9183:13:0"
                                                  }
                                                ]
                                              },
                                              {
                                                "expression": {
                                                  "id": 696,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 694,
                                                    "name": "fundedBitmap",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 630,
                                                    "src": "9248:12:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "|=",
                                                  "rightHandSide": {
                                                    "id": 695,
                                                    "name": "mask",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 664,
                                                    "src": "9264:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "src": "9248:20:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 697,
                                                "nodeType": "ExpressionStatement",
                                                "src": "9248:20:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "id": 712,
                              "nodeType": "UncheckedBlock",
                              "src": "9442:18:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 710,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "9454:3:0",
                                    "subExpression": {
                                      "id": 709,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 639,
                                      "src": "9454:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 711,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9454:3:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 642,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 639,
                            "src": "8620:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 643,
                            "name": "count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 617,
                            "src": "8625:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "8620:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 714,
                        "initializationExpression": {
                          "assignments": [
                            639
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 639,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "8613:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 714,
                              "src": "8606:8:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 638,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "8606:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 641,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 640,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8617:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "8606:12:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "8601:869:0"
                      },
                      {
                        "expression": {
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 715,
                                "name": "funded",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 63,
                                "src": "9488:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 719,
                              "indexExpression": {
                                "expression": {
                                  "id": 716,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "9495:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 717,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "9499:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "9495:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9488:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 720,
                            "indexExpression": {
                              "id": 718,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 597,
                              "src": "9507:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9488:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 721,
                            "name": "fundedBitmap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 630,
                            "src": "9516:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9488:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 723,
                        "nodeType": "ExpressionStatement",
                        "src": "9488:40:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 725,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "9555:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 726,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9559:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9555:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 727,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 597,
                              "src": "9567:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 728,
                              "name": "fundedCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 624,
                              "src": "9574:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 729,
                              "name": "insufficientCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 627,
                              "src": "9587:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 724,
                            "name": "DayPrepared",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 115,
                            "src": "9543:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint64_$_t_uint32_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32,uint32)"
                            }
                          },
                          "id": 730,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9543:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 731,
                        "nodeType": "EmitStatement",
                        "src": "9538:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 595,
                    "nodeType": "StructuredDocumentation",
                    "src": "8005:232:0",
                    "text": " @notice Prepare the day by locking funds (funded stake) for active habits\n @param epoch The epoch to prepare (must be current day)\n @dev Moves funds from depositBalance to blockedBalance (funded stake)"
                  },
                  "functionSelector": "48cc36b8",
                  "id": 733,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "prepareDay",
                  "nameLocation": "8251:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 598,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 597,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "8269:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 733,
                        "src": "8262:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 596,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "8262:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8261:14:0"
                  },
                  "returnParameters": {
                    "id": 599,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8285:0:0"
                  },
                  "scope": 1154,
                  "src": "8242:1370:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 820,
                    "nodeType": "Block",
                    "src": "9851:507:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 741,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 738,
                            "src": "9865:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 742,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "9874:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9874:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "9865:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 748,
                        "nodeType": "IfStatement",
                        "src": "9861:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 745,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "9893:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9893:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 747,
                          "nodeType": "RevertStatement",
                          "src": "9886:21:0"
                        }
                      },
                      {
                        "assignments": [
                          751
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 751,
                            "mutability": "mutable",
                            "name": "habit",
                            "nameLocation": "9931:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 820,
                            "src": "9917:19:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit"
                            },
                            "typeName": {
                              "id": 750,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 749,
                                "name": "Habit",
                                "nameLocations": [
                                  "9917:5:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 41,
                                "src": "9917:5:0"
                              },
                              "referencedDeclaration": 41,
                              "src": "9917:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 758,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 752,
                              "name": "habits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "9939:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                              }
                            },
                            "id": 755,
                            "indexExpression": {
                              "expression": {
                                "id": 753,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "9946:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 754,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9950:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9946:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9939:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                            }
                          },
                          "id": 757,
                          "indexExpression": {
                            "id": 756,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 736,
                            "src": "9958:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9939:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9917:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 765,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            "id": 762,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 759,
                                "name": "habit",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 751,
                                "src": "9980:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                  "typeString": "struct HabitTracker.Habit storage pointer"
                                }
                              },
                              "id": 760,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9986:14:0",
                              "memberName": "createdAtEpoch",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 38,
                              "src": "9980:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 761,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10004:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "9980:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "expression": {
                              "id": 763,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 751,
                              "src": "10009:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 764,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10015:8:0",
                            "memberName": "archived",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40,
                            "src": "10009:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9980:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 769,
                        "nodeType": "IfStatement",
                        "src": "9976:71:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 766,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "10032:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10032:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 768,
                          "nodeType": "RevertStatement",
                          "src": "10025:22:0"
                        }
                      },
                      {
                        "assignments": [
                          771
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 771,
                            "mutability": "mutable",
                            "name": "mask",
                            "nameLocation": "10074:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 820,
                            "src": "10066:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 770,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10066:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 775,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 774,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10081:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 773,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 736,
                            "src": "10086:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "10081:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10066:27:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 785,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 783,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 776,
                                  "name": "funded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "10107:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 779,
                                "indexExpression": {
                                  "expression": {
                                    "id": 777,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "10114:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 778,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10118:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "10114:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10107:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 781,
                              "indexExpression": {
                                "id": 780,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 738,
                                "src": "10126:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10107:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 782,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 771,
                              "src": "10135:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "10107:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 784,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10143:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10107:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 789,
                        "nodeType": "IfStatement",
                        "src": "10103:64:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 786,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "10153:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 787,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10153:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 788,
                          "nodeType": "RevertStatement",
                          "src": "10146:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 799,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 797,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 790,
                                  "name": "checked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69,
                                  "src": "10181:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 793,
                                "indexExpression": {
                                  "expression": {
                                    "id": 791,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "10189:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 792,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10193:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "10189:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10181:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 795,
                              "indexExpression": {
                                "id": 794,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 738,
                                "src": "10201:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10181:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 796,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 771,
                              "src": "10210:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "10181:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 798,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10218:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10181:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 803,
                        "nodeType": "IfStatement",
                        "src": "10177:69:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 800,
                              "name": "AlreadyCheckedIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "10228:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 801,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10228:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 802,
                          "nodeType": "RevertStatement",
                          "src": "10221:25:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 804,
                                "name": "checked",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "10265:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 808,
                              "indexExpression": {
                                "expression": {
                                  "id": 805,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "10273:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 806,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10277:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "10273:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10265:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 809,
                            "indexExpression": {
                              "id": 807,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 738,
                              "src": "10285:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10265:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "|=",
                          "rightHandSide": {
                            "id": 810,
                            "name": "mask",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "10295:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10265:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 812,
                        "nodeType": "ExpressionStatement",
                        "src": "10265:34:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 814,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "10324:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 815,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10328:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "10324:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 816,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 736,
                              "src": "10336:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 817,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 738,
                              "src": "10345:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "id": 813,
                            "name": "CheckedIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 123,
                            "src": "10314:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$returns$__$",
                              "typeString": "function (address,uint32,uint64)"
                            }
                          },
                          "id": 818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10314:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 819,
                        "nodeType": "EmitStatement",
                        "src": "10309:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 734,
                    "nodeType": "StructuredDocumentation",
                    "src": "9622:168:0",
                    "text": " @notice Check in to a habit for the current day\n @param habitId ID of the habit\n @param epoch The epoch to check in (must be current day)"
                  },
                  "functionSelector": "a0145927",
                  "id": 821,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "checkIn",
                  "nameLocation": "9804:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 739,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 736,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "9819:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 821,
                        "src": "9812:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 735,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9812:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 738,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "9835:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 821,
                        "src": "9828:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 737,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "9828:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9811:30:0"
                  },
                  "returnParameters": {
                    "id": 740,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9851:0:0"
                  },
                  "scope": 1154,
                  "src": "9795:563:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 845,
                    "nodeType": "Block",
                    "src": "10654:120:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 834,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 831,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 826,
                            "src": "10668:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 832,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "10677:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10677:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "10668:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 838,
                        "nodeType": "IfStatement",
                        "src": "10664:56:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 835,
                              "name": "CannotSettleCurrentDay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 171,
                              "src": "10696:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 836,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10696:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 837,
                          "nodeType": "RevertStatement",
                          "src": "10689:31:0"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 840,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 824,
                              "src": "10746:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 841,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 826,
                              "src": "10752:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 842,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 828,
                              "src": "10759:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 839,
                            "name": "_settleInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1007,
                            "src": "10730:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32)"
                            }
                          },
                          "id": 843,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10730:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 844,
                        "nodeType": "ExpressionStatement",
                        "src": "10730:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 822,
                    "nodeType": "StructuredDocumentation",
                    "src": "10368:214:0",
                    "text": " @notice Settle a specific habit for a past day\n @param user Address of habit owner\n @param epoch The epoch to settle (must be past day)\n @param habitId ID of the habit to settle"
                  },
                  "functionSelector": "9c14eb6e",
                  "id": 846,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "settle",
                  "nameLocation": "10596:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 829,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 824,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "10611:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 846,
                        "src": "10603:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 823,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10603:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 826,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "10624:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 846,
                        "src": "10617:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 825,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "10617:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 828,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "10638:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 846,
                        "src": "10631:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 827,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "10631:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10602:44:0"
                  },
                  "returnParameters": {
                    "id": 830,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10654:0:0"
                  },
                  "scope": 1154,
                  "src": "10587:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 862,
                    "nodeType": "Block",
                    "src": "11203:54:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 857,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 849,
                              "src": "11229:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 858,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 851,
                              "src": "11235:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 859,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 853,
                              "src": "11242:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 856,
                            "name": "_settleInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1007,
                            "src": "11213:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32)"
                            }
                          },
                          "id": 860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11213:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 861,
                        "nodeType": "ExpressionStatement",
                        "src": "11213:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 847,
                    "nodeType": "StructuredDocumentation",
                    "src": "10784:342:0",
                    "text": " @notice Force settle a specific habit without epoch validation (TESTING ONLY)\n @dev Bypasses the \"cannot settle current day\" check - use with caution\n @param user Address of habit owner\n @param epoch The epoch to settle (can be any epoch, including current)\n @param habitId ID of the habit to settle"
                  },
                  "functionSelector": "68188762",
                  "id": 863,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "forceSettle",
                  "nameLocation": "11140:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 854,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 849,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "11160:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 863,
                        "src": "11152:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 848,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11152:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 851,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "11173:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 863,
                        "src": "11166:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 850,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "11166:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 853,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "11187:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 863,
                        "src": "11180:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 852,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11180:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11151:44:0"
                  },
                  "returnParameters": {
                    "id": 855,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11203:0:0"
                  },
                  "scope": 1154,
                  "src": "11131:126:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1006,
                    "nodeType": "Block",
                    "src": "11734:1386:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 880,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 873,
                                  "name": "habits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 53,
                                  "src": "11748:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                  }
                                },
                                "id": 875,
                                "indexExpression": {
                                  "id": 874,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 866,
                                  "src": "11755:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11748:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                  "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                }
                              },
                              "id": 877,
                              "indexExpression": {
                                "id": 876,
                                "name": "habitId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 870,
                                "src": "11761:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11748:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage",
                                "typeString": "struct HabitTracker.Habit storage ref"
                              }
                            },
                            "id": 878,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11770:14:0",
                            "memberName": "createdAtEpoch",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38,
                            "src": "11748:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 879,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11788:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11748:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 884,
                        "nodeType": "IfStatement",
                        "src": "11744:69:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 881,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "11798:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11798:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 883,
                          "nodeType": "RevertStatement",
                          "src": "11791:22:0"
                        }
                      },
                      {
                        "assignments": [
                          886
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 886,
                            "mutability": "mutable",
                            "name": "mask",
                            "nameLocation": "11840:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1006,
                            "src": "11832:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 885,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "11832:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 890,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 889,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 887,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11847:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 888,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 870,
                            "src": "11852:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "11847:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11832:27:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 899,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 891,
                                  "name": "funded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "11873:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 893,
                                "indexExpression": {
                                  "id": 892,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 866,
                                  "src": "11880:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11873:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 895,
                              "indexExpression": {
                                "id": 894,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 868,
                                "src": "11886:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11873:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 896,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 886,
                              "src": "11895:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11873:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 898,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11903:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11873:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 903,
                        "nodeType": "IfStatement",
                        "src": "11869:58:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 900,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "11913:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 901,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11913:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 902,
                          "nodeType": "RevertStatement",
                          "src": "11906:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 904,
                                  "name": "settled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 75,
                                  "src": "11941:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 906,
                                "indexExpression": {
                                  "id": 905,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 866,
                                  "src": "11949:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11941:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 908,
                              "indexExpression": {
                                "id": 907,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 868,
                                "src": "11955:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11941:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 909,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 886,
                              "src": "11964:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11941:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11972:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11941:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 916,
                        "nodeType": "IfStatement",
                        "src": "11937:61:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 913,
                              "name": "AlreadySettled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "11982:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 914,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11982:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 915,
                          "nodeType": "RevertStatement",
                          "src": "11975:23:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 923,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 917,
                                "name": "settled",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 75,
                                "src": "12017:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 920,
                              "indexExpression": {
                                "id": 918,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 866,
                                "src": "12025:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12017:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 921,
                            "indexExpression": {
                              "id": 919,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 868,
                              "src": "12031:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "12017:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "|=",
                          "rightHandSide": {
                            "id": 922,
                            "name": "mask",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 886,
                            "src": "12041:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12017:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 924,
                        "nodeType": "ExpressionStatement",
                        "src": "12017:28:0"
                      },
                      {
                        "assignments": [
                          927
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 927,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "12073:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1006,
                            "src": "12055:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 926,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 925,
                                "name": "UserState",
                                "nameLocations": [
                                  "12055:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "12055:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "12055:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 931,
                        "initialValue": {
                          "baseExpression": {
                            "id": 928,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "12081:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 930,
                          "indexExpression": {
                            "id": 929,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 866,
                            "src": "12092:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12081:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12055:42:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 935,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 932,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 927,
                              "src": "12173:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState storage pointer"
                              }
                            },
                            "id": 933,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12179:14:0",
                            "memberName": "blockedBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 29,
                            "src": "12173:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 934,
                            "name": "STAKE_PER_DAY",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6,
                            "src": "12196:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12173:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 939,
                        "nodeType": "IfStatement",
                        "src": "12169:70:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 936,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 155,
                              "src": "12218:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 937,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12218:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 938,
                          "nodeType": "RevertStatement",
                          "src": "12211:28:0"
                        }
                      },
                      {
                        "id": 946,
                        "nodeType": "UncheckedBlock",
                        "src": "12249:52:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 944,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 940,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 927,
                                  "src": "12261:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 942,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "12267:14:0",
                                "memberName": "blockedBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 29,
                                "src": "12261:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 943,
                                "name": "STAKE_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 6,
                                "src": "12285:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12261:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 945,
                            "nodeType": "ExpressionStatement",
                            "src": "12261:37:0"
                          }
                        ]
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 955,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 953,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 947,
                                  "name": "checked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69,
                                  "src": "12323:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 949,
                                "indexExpression": {
                                  "id": 948,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 866,
                                  "src": "12331:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12323:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 951,
                              "indexExpression": {
                                "id": 950,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 868,
                                "src": "12337:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12323:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 952,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 886,
                              "src": "12346:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12323:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 954,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12354:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "12323:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1004,
                          "nodeType": "Block",
                          "src": "12929:185:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 993,
                                    "name": "treasury",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 11,
                                    "src": "13012:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 994,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "13022:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 992,
                                  "name": "_transfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 478,
                                  "src": "13002:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 995,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "13002:34:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 996,
                              "nodeType": "ExpressionStatement",
                              "src": "13002:34:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 998,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 866,
                                    "src": "13067:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 999,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 870,
                                    "src": "13073:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 1000,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 868,
                                    "src": "13082:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 1001,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "13089:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 997,
                                  "name": "SettledFail",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 143,
                                  "src": "13055:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 1002,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "13055:48:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1003,
                              "nodeType": "EmitStatement",
                              "src": "13050:53:0"
                            }
                          ]
                        },
                        "id": 1005,
                        "nodeType": "IfStatement",
                        "src": "12319:795:0",
                        "trueBody": {
                          "id": 991,
                          "nodeType": "Block",
                          "src": "12357:566:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 964,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 958,
                                      "name": "stakingAdapter",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 14,
                                      "src": "12536:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                        "typeString": "contract IStakingAdapter"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                        "typeString": "contract IStakingAdapter"
                                      }
                                    ],
                                    "id": 957,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12528:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 956,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12528:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 959,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12528:23:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 962,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12563:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 961,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12555:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 960,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12555:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 963,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12555:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "12528:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 982,
                                "nodeType": "Block",
                                "src": "12669:174:0",
                                "statements": [
                                  {
                                    "id": 981,
                                    "nodeType": "UncheckedBlock",
                                    "src": "12775:54:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "id": 979,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "expression": {
                                              "id": 975,
                                              "name": "state",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 927,
                                              "src": "12787:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                "typeString": "struct HabitTracker.UserState storage pointer"
                                              }
                                            },
                                            "id": 977,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "memberLocation": "12793:16:0",
                                            "memberName": "claimableBalance",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 31,
                                            "src": "12787:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "+=",
                                          "rightHandSide": {
                                            "id": 978,
                                            "name": "STAKE_PER_DAY",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 6,
                                            "src": "12813:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "12787:39:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 980,
                                        "nodeType": "ExpressionStatement",
                                        "src": "12787:39:0"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "id": 983,
                              "nodeType": "IfStatement",
                              "src": "12524:319:0",
                              "trueBody": {
                                "id": 974,
                                "nodeType": "Block",
                                "src": "12567:96:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 970,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 866,
                                          "src": "12628:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 971,
                                          "name": "STAKE_PER_DAY",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 6,
                                          "src": "12634:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 965,
                                            "name": "stakingAdapter",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 14,
                                            "src": "12585:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                              "typeString": "contract IStakingAdapter"
                                            }
                                          },
                                          "id": 967,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "12600:5:0",
                                          "memberName": "stake",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1165,
                                          "src": "12585:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$returns$__$",
                                            "typeString": "function (address,uint256) payable external"
                                          }
                                        },
                                        "id": 969,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "names": [
                                          "value"
                                        ],
                                        "nodeType": "FunctionCallOptions",
                                        "options": [
                                          {
                                            "id": 968,
                                            "name": "STAKE_PER_DAY",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 6,
                                            "src": "12613:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "src": "12585:42:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$returns$__$value",
                                          "typeString": "function (address,uint256) payable external"
                                        }
                                      },
                                      "id": 972,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "12585:63:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 973,
                                    "nodeType": "ExpressionStatement",
                                    "src": "12585:63:0"
                                  }
                                ]
                              }
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 985,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 866,
                                    "src": "12876:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 986,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 870,
                                    "src": "12882:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 987,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 868,
                                    "src": "12891:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 988,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "12898:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 984,
                                  "name": "SettledSuccess",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 133,
                                  "src": "12861:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 989,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12861:51:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 990,
                              "nodeType": "EmitStatement",
                              "src": "12856:56:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 864,
                    "nodeType": "StructuredDocumentation",
                    "src": "11267:385:0",
                    "text": " @notice Internal settlement logic without epoch validation\n @param user Address of habit owner\n @param epoch The epoch to settle\n @param habitId ID of the habit to settle\n @dev Settlement flow:\n - SUCCESS: User reward is staked externally (yield stake) to generate yield rewards\n - FAIL: Funded stake is sent to treasury (slashed)"
                  },
                  "id": 1007,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_settleInternal",
                  "nameLocation": "11666:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 871,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 866,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "11690:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "11682:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 865,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11682:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 868,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "11703:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "11696:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 867,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "11696:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 870,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "11717:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "11710:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 869,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11710:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11681:44:0"
                  },
                  "returnParameters": {
                    "id": 872,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11734:0:0"
                  },
                  "scope": 1154,
                  "src": "11657:1463:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1046,
                    "nodeType": "Block",
                    "src": "13320:238:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 1015,
                                "name": "stakingAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14,
                                "src": "13342:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                  "typeString": "contract IStakingAdapter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                  "typeString": "contract IStakingAdapter"
                                }
                              ],
                              "id": 1014,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13334:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1013,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13334:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1016,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13334:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1019,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "13369:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1018,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13361:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1017,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13361:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1020,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13361:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "13334:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1025,
                        "nodeType": "IfStatement",
                        "src": "13330:73:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1022,
                              "name": "InvalidStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "13380:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1023,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13380:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1024,
                          "nodeType": "RevertStatement",
                          "src": "13373:30:0"
                        }
                      },
                      {
                        "assignments": [
                          1027
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1027,
                            "mutability": "mutable",
                            "name": "claimed",
                            "nameLocation": "13421:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1046,
                            "src": "13413:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1026,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "13413:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1033,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1030,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "13459:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1031,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "13463:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13459:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1028,
                              "name": "stakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "13431:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                "typeString": "contract IStakingAdapter"
                              }
                            },
                            "id": 1029,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "13446:12:0",
                            "memberName": "claimRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1181,
                            "src": "13431:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) external returns (uint256)"
                            }
                          },
                          "id": 1032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13431:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "13413:57:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1034,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1027,
                            "src": "13484:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13494:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "13484:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1043,
                        "nodeType": "IfStatement",
                        "src": "13480:47:0",
                        "trueBody": {
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1038,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "13507:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "13511:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "13507:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1040,
                                "name": "claimed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1027,
                                "src": "13519:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1037,
                              "name": "_transfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 478,
                              "src": "13497:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                "typeString": "function (address,uint256)"
                              }
                            },
                            "id": 1041,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13497:30:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 1042,
                          "nodeType": "ExpressionStatement",
                          "src": "13497:30:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 1044,
                          "name": "claimed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1027,
                          "src": "13544:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1012,
                        "id": 1045,
                        "nodeType": "Return",
                        "src": "13537:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1008,
                    "nodeType": "StructuredDocumentation",
                    "src": "13192:67:0",
                    "text": " @notice Claim yield rewards only (not principal)"
                  },
                  "functionSelector": "db0f53f9",
                  "id": 1047,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimYieldRewards",
                  "nameLocation": "13273:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1009,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13290:2:0"
                  },
                  "returnParameters": {
                    "id": 1012,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1011,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1047,
                        "src": "13311:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1010,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13311:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13310:9:0"
                  },
                  "scope": 1154,
                  "src": "13264:294:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1147,
                    "nodeType": "Block",
                    "src": "13719:861:0",
                    "statements": [
                      {
                        "assignments": [
                          1055
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1055,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "13747:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1147,
                            "src": "13729:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 1054,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1053,
                                "name": "UserState",
                                "nameLocations": [
                                  "13729:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "13729:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "13729:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1060,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1056,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "13755:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 1059,
                          "indexExpression": {
                            "expression": {
                              "id": 1057,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "13766:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1058,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "13770:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "13766:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "13755:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "13729:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 1063,
                                "name": "stakingAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14,
                                "src": "13854:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                  "typeString": "contract IStakingAdapter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                  "typeString": "contract IStakingAdapter"
                                }
                              ],
                              "id": 1062,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13846:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1061,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13846:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1064,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13846:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1067,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "13881:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1066,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13873:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1065,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13873:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1068,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13873:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "13846:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1108,
                        "nodeType": "IfStatement",
                        "src": "13842:374:0",
                        "trueBody": {
                          "id": 1107,
                          "nodeType": "Block",
                          "src": "13885:331:0",
                          "statements": [
                            {
                              "assignments": [
                                1071
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1071,
                                  "mutability": "mutable",
                                  "name": "staked",
                                  "nameLocation": "13907:6:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1107,
                                  "src": "13899:14:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1070,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "13899:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1077,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1074,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "13947:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1075,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "13951:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "13947:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1072,
                                    "name": "stakingAdapter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 14,
                                    "src": "13916:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                      "typeString": "contract IStakingAdapter"
                                    }
                                  },
                                  "id": 1073,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "13931:15:0",
                                  "memberName": "getStakedAmount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1189,
                                  "src": "13916:30:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 1076,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "13916:42:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "13899:59:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1080,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1078,
                                  "name": "staked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1071,
                                  "src": "13976:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1079,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13985:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "13976:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1094,
                              "nodeType": "IfStatement",
                              "src": "13972:123:0",
                              "trueBody": {
                                "id": 1093,
                                "nodeType": "Block",
                                "src": "13988:107:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 1084,
                                            "name": "msg",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4294967281,
                                            "src": "14029:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_message",
                                              "typeString": "msg"
                                            }
                                          },
                                          "id": 1085,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "14033:6:0",
                                          "memberName": "sender",
                                          "nodeType": "MemberAccess",
                                          "src": "14029:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 1086,
                                          "name": "staked",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1071,
                                          "src": "14041:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 1081,
                                          "name": "stakingAdapter",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 14,
                                          "src": "14006:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                            "typeString": "contract IStakingAdapter"
                                          }
                                        },
                                        "id": 1083,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "14021:7:0",
                                        "memberName": "unstake",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1173,
                                        "src": "14006:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (address,uint256) external"
                                        }
                                      },
                                      "id": 1087,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "14006:42:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1088,
                                    "nodeType": "ExpressionStatement",
                                    "src": "14006:42:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 1091,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1089,
                                        "name": "total",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1051,
                                        "src": "14066:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1090,
                                        "name": "staked",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1071,
                                        "src": "14074:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "14066:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1092,
                                    "nodeType": "ExpressionStatement",
                                    "src": "14066:14:0"
                                  }
                                ]
                              }
                            },
                            {
                              "assignments": [
                                1096
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1096,
                                  "mutability": "mutable",
                                  "name": "yieldRewards",
                                  "nameLocation": "14116:12:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1107,
                                  "src": "14108:20:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1095,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "14108:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1102,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1099,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "14159:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1100,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "14163:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "14159:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1097,
                                    "name": "stakingAdapter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 14,
                                    "src": "14131:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IStakingAdapter_$1198",
                                      "typeString": "contract IStakingAdapter"
                                    }
                                  },
                                  "id": 1098,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "14146:12:0",
                                  "memberName": "claimRewards",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1181,
                                  "src": "14131:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) external returns (uint256)"
                                  }
                                },
                                "id": 1101,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14131:39:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "14108:62:0"
                            },
                            {
                              "expression": {
                                "id": 1105,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1103,
                                  "name": "total",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1051,
                                  "src": "14184:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 1104,
                                  "name": "yieldRewards",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1096,
                                  "src": "14193:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14184:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1106,
                              "nodeType": "ExpressionStatement",
                              "src": "14184:21:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1110
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1110,
                            "mutability": "mutable",
                            "name": "claimable",
                            "nameLocation": "14275:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1147,
                            "src": "14267:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1109,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14267:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1113,
                        "initialValue": {
                          "expression": {
                            "id": 1111,
                            "name": "state",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1055,
                            "src": "14287:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState storage pointer"
                            }
                          },
                          "id": 1112,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "14293:16:0",
                          "memberName": "claimableBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 31,
                          "src": "14287:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14267:42:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1114,
                            "name": "claimable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1110,
                            "src": "14323:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1115,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14335:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "14323:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1136,
                        "nodeType": "IfStatement",
                        "src": "14319:193:0",
                        "trueBody": {
                          "id": 1135,
                          "nodeType": "Block",
                          "src": "14338:174:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1121,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1117,
                                    "name": "state",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1055,
                                    "src": "14352:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                      "typeString": "struct HabitTracker.UserState storage pointer"
                                    }
                                  },
                                  "id": 1119,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "14358:16:0",
                                  "memberName": "claimableBalance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 31,
                                  "src": "14352:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "30",
                                  "id": 1120,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14377:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "14352:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1122,
                              "nodeType": "ExpressionStatement",
                              "src": "14352:26:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1124,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "14410:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1125,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "14414:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "14410:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1126,
                                    "name": "BALANCE_CLAIMABLE",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 22,
                                    "src": "14422:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  {
                                    "id": 1127,
                                    "name": "BALANCE_EXTERNAL",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 25,
                                    "src": "14441:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  {
                                    "id": 1128,
                                    "name": "claimable",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1110,
                                    "src": "14459:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1123,
                                  "name": "BalanceMoved",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 91,
                                  "src": "14397:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint8,uint8,uint256)"
                                  }
                                },
                                "id": 1129,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14397:72:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1130,
                              "nodeType": "EmitStatement",
                              "src": "14392:77:0"
                            },
                            {
                              "expression": {
                                "id": 1133,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1131,
                                  "name": "total",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1051,
                                  "src": "14483:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 1132,
                                  "name": "claimable",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1110,
                                  "src": "14492:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14483:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1134,
                              "nodeType": "ExpressionStatement",
                              "src": "14483:18:0"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1137,
                            "name": "total",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1051,
                            "src": "14534:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1138,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14542:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "14534:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1146,
                        "nodeType": "IfStatement",
                        "src": "14530:43:0",
                        "trueBody": {
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1141,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "14555:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1142,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "14559:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "14555:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1143,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1051,
                                "src": "14567:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1140,
                              "name": "_transfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 478,
                              "src": "14545:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                "typeString": "function (address,uint256)"
                              }
                            },
                            "id": 1144,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14545:28:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 1145,
                          "nodeType": "ExpressionStatement",
                          "src": "14545:28:0"
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1048,
                    "nodeType": "StructuredDocumentation",
                    "src": "13568:93:0",
                    "text": " @notice Claim everything: unstake principal + yield rewards + user rewards"
                  },
                  "functionSelector": "d1058e59",
                  "id": 1148,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimAll",
                  "nameLocation": "13675:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1049,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13683:2:0"
                  },
                  "returnParameters": {
                    "id": 1052,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1051,
                        "mutability": "mutable",
                        "name": "total",
                        "nameLocation": "13712:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1148,
                        "src": "13704:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1050,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13704:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13703:15:0"
                  },
                  "scope": 1154,
                  "src": "13666:914:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1152,
                    "nodeType": "Block",
                    "src": "14754:2:0",
                    "statements": []
                  },
                  "documentation": {
                    "id": 1149,
                    "nodeType": "StructuredDocumentation",
                    "src": "14645:77:0",
                    "text": " @notice Allow receiving native tokens from staking adapter"
                  },
                  "id": 1153,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14734:2:0"
                  },
                  "returnParameters": {
                    "id": 1151,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14754:0:0"
                  },
                  "scope": 1154,
                  "src": "14727:29:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1155,
              "src": "761:13997:0",
              "usedErrors": [
                151,
                153,
                155,
                157,
                159,
                161,
                163,
                165,
                167,
                169,
                171,
                173,
                175,
                177,
                179,
                181
              ],
              "usedEvents": [
                81,
                91,
                99,
                105,
                115,
                123,
                133,
                143,
                149
              ]
            }
          ],
          "src": "32:14728:0"
        }
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
          "exportedSymbols": {
            "IStakingAdapter": [
              1198
            ]
          },
          "id": 1199,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1156,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingAdapter",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1157,
                "nodeType": "StructuredDocumentation",
                "src": "58:335:1",
                "text": " @title IStakingAdapter\n @notice Chain-agnostic interface for external staking protocols\n @dev Allows HabitTracker to integrate with any staking protocol\n \n @dev Terminology:\n - Yield Stake: User rewards staked in external protocol (principal)\n - Yield Rewards: Additional rewards generated from external protocol"
              },
              "fullyImplemented": false,
              "id": 1198,
              "linearizedBaseContracts": [
                1198
              ],
              "name": "IStakingAdapter",
              "nameLocation": "404:15:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1158,
                    "nodeType": "StructuredDocumentation",
                    "src": "426:291:1",
                    "text": " @notice Create yield stake by staking user rewards into external protocol\n @param user Address of the user whose rewards are being staked\n @param amount Amount to stake (user's earned rewards)\n @dev For native token staking, msg.value should equal amount"
                  },
                  "functionSelector": "adc9772e",
                  "id": 1165,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake",
                  "nameLocation": "731:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1163,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1160,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "745:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1165,
                        "src": "737:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1159,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "737:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1162,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "759:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1165,
                        "src": "751:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1161,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "751:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "736:30:1"
                  },
                  "returnParameters": {
                    "id": 1164,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "783:0:1"
                  },
                  "scope": 1198,
                  "src": "722:62:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1166,
                    "nodeType": "StructuredDocumentation",
                    "src": "790:290:1",
                    "text": " @notice Unstake from external protocol (yield stake + yield rewards)\n @param user Address of the user whose rewards are being unstaked\n @param amount Amount to unstake\n @dev Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker"
                  },
                  "functionSelector": "c2a672e0",
                  "id": 1173,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unstake",
                  "nameLocation": "1094:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1171,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1168,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1110:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1173,
                        "src": "1102:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1167,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1102:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1170,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1124:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1173,
                        "src": "1116:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1169,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1116:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1101:30:1"
                  },
                  "returnParameters": {
                    "id": 1172,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1140:0:1"
                  },
                  "scope": 1198,
                  "src": "1085:56:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1174,
                    "nodeType": "StructuredDocumentation",
                    "src": "1147:357:1",
                    "text": " @notice Claim accumulated yield rewards from external protocol for a specific user\n @param user Address of the user whose yield rewards to claim\n @return claimed Amount of yield rewards claimed\n @dev Returns 0 if no yield rewards available or not supported\n @dev Claimed rewards should be sent back to HabitTracker"
                  },
                  "functionSelector": "ef5cfb8c",
                  "id": 1181,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimRewards",
                  "nameLocation": "1518:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1177,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1176,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1539:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1181,
                        "src": "1531:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1175,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1531:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1530:14:1"
                  },
                  "returnParameters": {
                    "id": 1180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1179,
                        "mutability": "mutable",
                        "name": "claimed",
                        "nameLocation": "1571:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1181,
                        "src": "1563:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1178,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1563:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1562:17:1"
                  },
                  "scope": 1198,
                  "src": "1509:71:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1182,
                    "nodeType": "StructuredDocumentation",
                    "src": "1586:198:1",
                    "text": " @notice Get total yield stake amount for an address (principal only)\n @param who Address to check\n @return staked Total yield stake by address (excludes yield rewards)"
                  },
                  "functionSelector": "4da6a556",
                  "id": 1189,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakedAmount",
                  "nameLocation": "1798:15:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1185,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1184,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "1822:3:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1189,
                        "src": "1814:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1183,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1814:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1813:13:1"
                  },
                  "returnParameters": {
                    "id": 1188,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1187,
                        "mutability": "mutable",
                        "name": "staked",
                        "nameLocation": "1858:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1189,
                        "src": "1850:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1186,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1850:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1849:16:1"
                  },
                  "scope": 1198,
                  "src": "1789:77:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1190,
                    "nodeType": "StructuredDocumentation",
                    "src": "1872:208:1",
                    "text": " @notice Get pending unclaimed yield rewards for an address\n @param who Address to check\n @return pending Pending yield rewards\n @dev Returns 0 if not supported by protocol"
                  },
                  "functionSelector": "f6ed2017",
                  "id": 1197,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPendingRewards",
                  "nameLocation": "2094:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1193,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1192,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "2120:3:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1197,
                        "src": "2112:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1191,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2112:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2111:13:1"
                  },
                  "returnParameters": {
                    "id": 1196,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1195,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "2156:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1197,
                        "src": "2148:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1194,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2148:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2147:17:1"
                  },
                  "scope": 1198,
                  "src": "2085:80:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1199,
              "src": "394:1773:1",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "32:2137:1"
        }
      }
    },
    "contracts": {
      "contracts/HabitTracker.sol": {
        "HabitTracker": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_treasury",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_stakingAdapter",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AlreadyCheckedIn",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "AlreadySettled",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "CannotSettleCurrentDay",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "DayNotFunded",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitAlreadyArchived",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitIdTooLarge",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitNotFound",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitTextTooLong",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidAmount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidBalanceType",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidEpoch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidStakingAdapter",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidTreasury",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OnlyOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint8",
                  "name": "from",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "uint8",
                  "name": "to",
                  "type": "uint8"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "BalanceMoved",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "CheckedIn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "fundedCount",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "insufficientCount",
                  "type": "uint32"
                }
              ],
              "name": "DayPrepared",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Deposited",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "HabitArchived",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "HabitCreated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "slashed",
                  "type": "uint256"
                }
              ],
              "name": "SettledFail",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                }
              ],
              "name": "SettledSuccess",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "oldAdapter",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newAdapter",
                  "type": "address"
                }
              ],
              "name": "StakingAdapterUpdated",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "STAKE_PER_DAY",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "archiveHabit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "checkIn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "checked",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "claimAll",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "total",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "claimYieldRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "createHabit",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "epochNow",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "forceSettle",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "funded",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "name": "habits",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "createdAtEpoch",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "archived",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "from",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "to",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "move",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "prepareDay",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_newAdapter",
                  "type": "address"
                }
              ],
              "name": "setStakingAdapter",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "settle",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "settled",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stakingAdapter",
              "outputs": [
                {
                  "internalType": "contract IStakingAdapter",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "treasury",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userHabitCounters",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userStates",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "depositBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "blockedBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimableBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "activeHabitCount",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAdapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyCheckedIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSettleCurrentDay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DayNotFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitAlreadyArchived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitIdTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitTextTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalanceType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"from\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"to\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fundedCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"insufficientCount\",\"type\":\"uint32\"}],\"name\":\"DayPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"HabitArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"HabitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashed\",\"type\":\"uint256\"}],\"name\":\"SettledFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SettledSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdapter\",\"type\":\"address\"}],\"name\":\"StakingAdapterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STAKE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"archiveHabit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"checked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"createHabit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"forceSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"funded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"habits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"createdAtEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"archived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"from\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"to\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"prepareDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdapter\",\"type\":\"address\"}],\"name\":\"setStakingAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAdapter\",\"outputs\":[{\"internalType\":\"contract IStakingAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHabitCounters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activeHabitCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"HabitChain Team\",\"details\":\"Uses epoch-based time (86400-second days) for daily cyclesIntegrates with external staking via IStakingAdapter Two types of stakes: - Funded Stake: User deposits locked during day (blockedBalance) - Yield Stake: Successful rewards staked externally for yield generation Two types of rewards: - User Rewards: Base rewards from successful habit completion (claimableBalance) - Yield Rewards: Additional rewards generated from external staking (tracked in adapter) \",\"kind\":\"dev\",\"methods\":{\"archiveHabit(uint32)\":{\"params\":{\"habitId\":\"ID of the habit to archive\"}},\"checkIn(uint32,uint64)\":{\"params\":{\"epoch\":\"The epoch to check in (must be current day)\",\"habitId\":\"ID of the habit\"}},\"createHabit(bytes32)\":{\"params\":{\"text\":\"Description of the habit (up to 32 bytes)\"},\"returns\":{\"_0\":\"habitId The ID of the newly created habit\"}},\"forceSettle(address,uint64,uint32)\":{\"details\":\"Bypasses the \\\"cannot settle current day\\\" check - use with caution\",\"params\":{\"epoch\":\"The epoch to settle (can be any epoch, including current)\",\"habitId\":\"ID of the habit to settle\",\"user\":\"Address of habit owner\"}},\"move(uint8,uint8,uint256)\":{\"details\":\"Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)\",\"params\":{\"amount\":\"Amount to move\",\"from\":\"Source balance type (0=deposit, 1=claimable)\",\"to\":\"Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\"}},\"prepareDay(uint64)\":{\"details\":\"Moves funds from depositBalance to blockedBalance (funded stake)\",\"params\":{\"epoch\":\"The epoch to prepare (must be current day)\"}},\"settle(address,uint64,uint32)\":{\"params\":{\"epoch\":\"The epoch to settle (must be past day)\",\"habitId\":\"ID of the habit to settle\",\"user\":\"Address of habit owner\"}}},\"title\":\"HabitTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"archiveHabit(uint32)\":{\"notice\":\"Archive a habit (soft delete)\"},\"checkIn(uint32,uint64)\":{\"notice\":\"Check in to a habit for the current day\"},\"claimAll()\":{\"notice\":\"Claim everything: unstake principal + yield rewards + user rewards\"},\"claimYieldRewards()\":{\"notice\":\"Claim yield rewards only (not principal)\"},\"createHabit(bytes32)\":{\"notice\":\"Create a new habit\"},\"forceSettle(address,uint64,uint32)\":{\"notice\":\"Force settle a specific habit without epoch validation (TESTING ONLY)\"},\"move(uint8,uint8,uint256)\":{\"notice\":\"Move funds between balance types\"},\"prepareDay(uint64)\":{\"notice\":\"Prepare the day by locking funds (funded stake) for active habits\"},\"settle(address,uint64,uint32)\":{\"notice\":\"Settle a specific habit for a past day\"}},\"notice\":\"Gamified habit tracking with financial commitment and yield generation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HabitTracker.sol\":\"HabitTracker\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HabitTracker.sol\":{\"keccak256\":\"0x607a7d05312ef85c4b9af376024060438cf67c66a3598d27f04c51e17908588e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32fb52d57f56f6b22d218c65b281810b312d57c59ffcb4f22ff15c5ac507b599\",\"dweb:/ipfs/QmU54M7o9YFwkG5oqqEcz9cvNUQt3x2XuFnVbochXPwkfg\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 332/65952 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 11128\n// Code size = 39363 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x20148\n    16: s0 = i32 [0x20148]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30180\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 7 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x20148]\n    41: u32 [0x20148] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x20148]\n    68: jump @57 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30180\n    77: i32 a0 = a0 + 0\n    79: ecalli 15 // 'set_immutable_data'\n    81: jump @57\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @20\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @20\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 8 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 16 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 [@dyn 3] (gas: 35)\n   874: a1 = u64 [sp]\n   876: a1 = reverse a1\n   878: a2 = u64 [sp + 0x8]\n   881: a2 = reverse a2\n   883: a3 = u64 [sp + 0x10]\n   886: a3 = reverse a3\n   888: a4 = u64 [sp + 0x18]\n   891: a4 = reverse a4\n   893: u64 [sp + 0x58] = a4\n   896: u64 [sp + 0x50] = a3\n   899: u64 [sp + 0x48] = a2\n   902: u64 [sp + 0x40] = a1\n   905: a1 = u64 [sp + 0x20]\n   908: a1 = reverse a1\n   910: a2 = u64 [sp + 0x28]\n   913: a2 = reverse a2\n   915: a3 = u64 [sp + 0x30]\n   918: a3 = reverse a3\n   920: a4 = u64 [sp + 0x38]\n   923: a4 = reverse a4\n   925: u64 [sp + 0x78] = a4\n   928: u64 [sp + 0x70] = a3\n   931: u64 [sp + 0x68] = a2\n   934: u64 [sp + 0x60] = a1\n   937: i32 a2 = a0 + 0\n   939: i32 a3 = s1 + 0\n   941: i32 a0 = sp + 0x40\n   944: a1 = 0x2\n   947: ecalli 6 // 'deposit_event'\n   949: sp = s0 + 0xffffffffffffff60\n   953: ra = u64 [sp + 0x98]\n   957: s0 = u64 [sp + 0x90]\n   961: s1 = u64 [sp + 0x88]\n   965: sp = sp + 0xa0\n   969: ret\n      : @14 (gas: 15)\n   971: sp = sp + 0xffffffffffffff20\n   975: u64 [sp + 0xd8] = ra\n   979: u64 [sp + 0xd0] = s0\n   983: u64 [sp + 0xc8] = s1\n   987: s0 = sp + 0xe0\n   991: sp = sp & 0xffffffffffffffe0\n   994: a5 = u64 [a4]\n   996: u64 [sp + 0x40] = a5\n   999: a5 = u64 [a4 + 0x8]\n  1002: u64 [sp + 0x48] = a5\n  1005: a5 = u64 [a4 + 0x10]\n  1008: u64 [sp + 0x50] = a5\n  1011: a4 = u64 [a4 + 0x18]\n  1014: u64 [sp + 0x58] = a4\n  1017: t0 = 8, jump @1480\n      : @15 [@dyn 4] (gas: 2)\n  1023: u64 [sp + 0x38] = a1\n  1026: ra = 10, jump @20\n      : @16 [@dyn 5] (gas: 46)\n  1031: a1 = reverse s1\n  1033: u64 [sp + 0x78] = a1\n  1036: a1 = u64 [sp]\n  1038: a1 = reverse a1\n  1040: u64 [sp + 0x70] = a1\n  1043: a1 = u64 [sp + 0x8]\n  1046: a1 = reverse a1\n  1048: u64 [sp + 0x68] = a1\n  1051: a1 = u64 [sp + 0x10]\n  1054: a1 = reverse a1\n  1056: u64 [sp + 0x60] = a1\n  1059: a1 = u64 [sp + 0x18]\n  1062: a1 = reverse a1\n  1064: u64 [sp + 0x98] = a1\n  1068: a1 = u64 [sp + 0x20]\n  1071: a1 = reverse a1\n  1073: u64 [sp + 0x90] = a1\n  1077: a1 = u64 [sp + 0x28]\n  1080: a1 = reverse a1\n  1082: u64 [sp + 0x88] = a1\n  1086: a1 = u64 [sp + 0x30]\n  1089: a1 = reverse a1\n  1091: u64 [sp + 0x80] = a1\n  1095: a1 = u64 [sp + 0x40]\n  1098: a1 = reverse a1\n  1100: u64 [sp + 0xb8] = a1\n  1104: a1 = u64 [sp + 0x48]\n  1107: a1 = reverse a1\n  1109: u64 [sp + 0xb0] = a1\n  1113: a1 = u64 [sp + 0x50]\n  1116: a1 = reverse a1\n  1118: u64 [sp + 0xa8] = a1\n  1122: a1 = u64 [sp + 0x58]\n  1125: a1 = reverse a1\n  1127: u64 [sp + 0xa0] = a1\n  1131: i32 a2 = a0 + 0\n  1133: a3 = i32 [sp + 0x38]\n  1136: i32 a0 = sp + 0x60\n  1139: a1 = 0x3\n  1142: ecalli 6 // 'deposit_event'\n  1144: sp = s0 + 0xffffffffffffff20\n  1148: ra = u64 [sp + 0xd8]\n  1152: s0 = u64 [sp + 0xd0]\n  1156: s1 = u64 [sp + 0xc8]\n  1160: sp = sp + 0xe0\n  1164: ret\n      : @17 (gas: 23)\n  1166: sp = sp + 0xfffffffffffffee0\n  1170: u64 [sp + 0x118] = ra\n  1174: u64 [sp + 0x110] = s0\n  1178: u64 [sp + 0x108] = s1\n  1182: s0 = sp + 0x120\n  1186: sp = sp & 0xffffffffffffffe0\n  1189: s1 = u64 [a5]\n  1191: u64 [sp + 0x60] = s1\n  1194: s1 = u64 [a5 + 0x8]\n  1197: u64 [sp + 0x68] = s1\n  1200: s1 = u64 [a5 + 0x10]\n  1203: u64 [sp + 0x70] = s1\n  1206: a5 = u64 [a5 + 0x18]\n  1209: u64 [sp + 0x78] = a5\n  1212: a5 = u64 [a4]\n  1214: u64 [sp + 0x38] = a5\n  1217: a5 = u64 [a4 + 0x8]\n  1220: u64 [sp + 0x40] = a5\n  1223: a5 = u64 [a4 + 0x10]\n  1226: u64 [sp + 0x48] = a5\n  1229: a4 = u64 [a4 + 0x18]\n  1232: u64 [sp + 0x50] = a4\n  1235: t0 = 12, jump @1480\n      : @18 [@dyn 6] (gas: 2)\n  1241: u64 [sp + 0x58] = a1\n  1244: ra = 14, jump @20\n      : @19 [@dyn 7] (gas: 58)\n  1249: a1 = reverse s1\n  1251: u64 [sp + 0x98] = a1\n  1255: a1 = u64 [sp]\n  1257: a1 = reverse a1\n  1259: u64 [sp + 0x90] = a1\n  1263: a1 = u64 [sp + 0x8]\n  1266: a1 = reverse a1\n  1268: u64 [sp + 0x88] = a1\n  1272: a1 = u64 [sp + 0x10]\n  1275: a1 = reverse a1\n  1277: u64 [sp + 0x80] = a1\n  1281: a1 = u64 [sp + 0x18]\n  1284: a1 = reverse a1\n  1286: u64 [sp + 0xb8] = a1\n  1290: a1 = u64 [sp + 0x20]\n  1293: a1 = reverse a1\n  1295: u64 [sp + 0xb0] = a1\n  1299: a1 = u64 [sp + 0x28]\n  1302: a1 = reverse a1\n  1304: u64 [sp + 0xa8] = a1\n  1308: a1 = u64 [sp + 0x30]\n  1311: a1 = reverse a1\n  1313: u64 [sp + 0xa0] = a1\n  1317: a1 = u64 [sp + 0x38]\n  1320: a1 = reverse a1\n  1322: u64 [sp + 0xd8] = a1\n  1326: a1 = u64 [sp + 0x40]\n  1329: a1 = reverse a1\n  1331: u64 [sp + 0xd0] = a1\n  1335: a1 = u64 [sp + 0x48]\n  1338: a1 = reverse a1\n  1340: u64 [sp + 0xc8] = a1\n  1344: a1 = u64 [sp + 0x50]\n  1347: a1 = reverse a1\n  1349: u64 [sp + 0xc0] = a1\n  1353: a1 = u64 [sp + 0x60]\n  1356: a1 = reverse a1\n  1358: u64 [sp + 0xf8] = a1\n  1362: a1 = u64 [sp + 0x68]\n  1365: a1 = reverse a1\n  1367: u64 [sp + 0xf0] = a1\n  1371: a1 = u64 [sp + 0x70]\n  1374: a1 = reverse a1\n  1376: u64 [sp + 0xe8] = a1\n  1380: a1 = u64 [sp + 0x78]\n  1383: a1 = reverse a1\n  1385: u64 [sp + 0xe0] = a1\n  1389: i32 a2 = a0 + 0\n  1391: a3 = i32 [sp + 0x58]\n  1394: i32 a0 = sp + 0x80\n  1398: a1 = 0x4\n  1401: ecalli 6 // 'deposit_event'\n  1403: sp = s0 + 0xfffffffffffffee0\n  1407: ra = u64 [sp + 0x118]\n  1411: s0 = u64 [sp + 0x110]\n  1415: s1 = u64 [sp + 0x108]\n  1419: sp = sp + 0x120\n  1423: ret\n      : @20 (gas: 2)\n  1425: i32 a2 = a0 >> 0x10\n  1428: jump @25 if a2 != 0\n      : @21 (gas: 4)\n  1431: a1 = a1 + a0\n  1434: i32 a1 = a1 + 0x1f\n  1437: a1 = a1 & 0xffffffffffffffe0\n  1440: jump @25 if a1 >u 65536\n      : @22 (gas: 3)\n  1446: a2 = 0x20150\n  1451: a3 = i32 [0x20150]\n  1456: jump @24 if a3 >=u a1\n      : @23 (gas: 2)\n  1459: u32 [0x20150] = a1\n  1464: fallthrough\n      : @24 (gas: 4)\n  1465: a1 = 0x20160\n  1470: i32 a0 = a0 + 0\n  1472: a0 = a0 + a1\n  1475: ret\n      : @25 (gas: 1)\n  1477: trap\n      : @26 (gas: 6)\n  1478: sp = sp + 0xfffffffffffffff0\n  1481: u64 [sp + 0x8] = ra\n  1484: u64 [sp] = s0\n  1486: s0 = a0 & 0x1\n  1489: ecalli 3 // 'call_data_size'\n  1491: fallthrough\n      : @27 (gas: 2)\n  1492: u32 [0x2014c] = a0\n  1497: jump @29 if s0 == 0\n      : @28 (gas: 1)\n  1500: ra = 16, jump @30\n      : @29 [@dyn 8] (gas: 1)\n  1504: ra = 18, jump @60\n      : @30 [@dyn 9] (gas: 14)\n  1509: sp = sp + 0xfffffffffffffd60\n  1513: a0 = sp + 0x200\n  1517: u64 [a0 + 0x98] = ra\n  1521: u64 [a0 + 0x90] = s0\n  1525: u64 [a0 + 0x88] = s1\n  1529: s0 = sp + 0x2a0\n  1533: sp = sp & 0xffffffffffffffe0\n  1536: u64 [sp + 440] = 0\n  1540: u64 [sp + 432] = 0\n  1544: u64 [sp + 424] = 0\n  1548: u64 [sp + 416] = 0\n  1552: i32 a0 = sp + 0x1a0\n  1556: ecalli 17 // 'value_transferred'\n  1558: fallthrough\n      : @31 (gas: 8)\n  1559: a0 = u64 [sp + 0x1b0]\n  1563: a1 = u64 [sp + 0x1b8]\n  1567: a2 = u64 [sp + 0x1a8]\n  1571: a3 = u64 [sp + 0x1a0]\n  1575: a1 = a1 | a2\n  1578: a0 = a0 | a3\n  1581: a0 = a0 | a1\n  1584: jump @48 if a0 != 0\n      : @32 (gas: 15)\n  1588: s1 = i32 [0x2014c]\n  1593: a0 = s1 << 0x20\n  1596: a0 = a0 >> 0x20\n  1599: a0 = a0 + 0x1f\n  1602: a0 = a0 & 0xffffffffffffffe0\n  1605: a1 = a0 + 0xa0\n  1609: a0 = a1 <u a0\n  1612: u64 [sp + 408] = 0\n  1616: u64 [sp + 0x180] = a1\n  1620: u64 [sp + 0x188] = a0\n  1624: a0 = 0 if a0 != 0\n  1626: u64 [sp + 0x190] = a0\n  1630: a0 = 0x40\n  1633: a1 = sp + 0x180\n  1637: ra = 20, jump @9\n      : @33 [@dyn 10] (gas: 3)\n  1642: a0 = 0xa0\n  1646: a1 = s1\n  1648: ra = 22, jump @20\n      : @34 [@dyn 11] (gas: 5)\n  1653: i32 a0 = a0 + 0\n  1655: a1 = s1\n  1657: a2 = 0\n  1659: ecalli 1 // 'call_data_copy'\n  1661: fallthrough\n      : @35 (gas: 1)\n  1662: jump @49 if s1 <u 64\n      : @36 (gas: 7)\n  1667: u64 [sp + 344] = 0\n  1671: u64 [sp + 336] = 0\n  1675: u64 [sp + 320] = 0xa0\n  1681: a0 = sp + 0x160\n  1685: a1 = sp + 0x140\n  1689: u64 [sp + 328] = 0\n  1693: ra = 24, jump @1203\n      : @37 [@dyn 12] (gas: 14)\n  1698: a0 = u64 [sp + 0x178]\n  1702: u64 [sp + 0x18] = a0\n  1705: a0 = u64 [sp + 0x170]\n  1709: u64 [sp + 0x10] = a0\n  1712: a0 = u64 [sp + 0x168]\n  1716: u64 [sp + 0x8] = a0\n  1719: s1 = u64 [sp + 0x160]\n  1723: u64 [sp + 280] = 0\n  1727: u64 [sp + 272] = 0\n  1731: u64 [sp + 256] = 0xc0\n  1737: a0 = sp + 0x120\n  1741: a1 = sp + 0x100\n  1745: u64 [sp + 264] = 0\n  1749: ra = 26, jump @1203\n      : @38 [@dyn 13] (gas: 7)\n  1754: a3 = u64 [sp + 0x8]\n  1757: a2 = u64 [sp + 0x10]\n  1760: a0 = a2 << 0x20\n  1763: a0 = a0 >> 0x20\n  1766: a1 = s1 | a3\n  1769: a0 = a0 | a1\n  1772: jump @50 if a0 == 0\n      : @39 (gas: 16)\n  1776: a0 = u64 [sp + 0x130]\n  1780: u64 [sp + 0x38] = a0\n  1783: a0 = u64 [sp + 0x128]\n  1787: u64 [sp + 0x28] = a0\n  1790: a0 = u64 [sp + 0x120]\n  1794: u64 [sp + 0x30] = a0\n  1797: a0 = 0xffffffff\n  1807: u64 [sp + 0x20] = a0\n  1810: u64 [sp + 0xe0] = s1\n  1814: u64 [sp + 0xe8] = a3\n  1818: u64 [sp + 0xf0] = a2\n  1822: a0 = 0x80\n  1826: a1 = sp + 0xe0\n  1830: a2 = u64 [sp + 0x18]\n  1833: u64 [sp + 0xf8] = a2\n  1837: ra = 28, jump @9\n      : @40 [@dyn 14] (gas: 25)\n  1842: s1 = 0x30160\n  1847: i32 a0 = s1 + 0\n  1849: ecalli 4 // 'caller'\n  1851: a0 = u64 [0x30168]\n  1856: a1 = i32 [0x30170]\n  1861: a2 = u64 [0x30160]\n  1866: a0 = reverse a0\n  1868: a3 = a0 << 0x20\n  1871: a1 = reverse a1\n  1873: a1 = a1 >> 0x20\n  1876: a1 = a1 | a3\n  1879: u64 [sp + 0x18] = a1\n  1882: a0 = a0 >> 0x20\n  1885: a1 = reverse a2\n  1887: s1 = a1 << 0x20\n  1890: a0 = a0 | s1\n  1893: u64 [sp + 0x10] = a0\n  1896: s1 = a1 >> 0x20\n  1899: u64 [sp + 472] = 0\n  1903: u64 [sp + 464] = 0\n  1907: u64 [sp + 456] = 0\n  1911: u64 [sp + 448] = 0x1\n  1916: a0 = sp + 0xc0\n  1920: a1 = sp + 0x1c0\n  1924: ra = 30, jump @11\n      : @41 [@dyn 15] (gas: 18)\n  1929: a0 = u32 [sp + 0xd4]\n  1933: a0 = a0 << 0x20\n  1936: a1 = u64 [sp + 0xd8]\n  1940: a0 = a0 | s1\n  1943: u64 [sp + 504] = 0\n  1947: u64 [sp + 496] = 0\n  1951: u64 [sp + 488] = 0\n  1955: u64 [sp + 480] = 0x1\n  1960: a2 = sp + 0x200\n  1964: u64 [a2 + 0x18] = a1\n  1967: a1 = u64 [sp + 0x10]\n  1970: u64 [a2 + 0x8] = a1\n  1973: a1 = u64 [sp + 0x18]\n  1976: u64 [a2] = a1\n  1978: u64 [a2 + 0x10] = a0\n  1981: a0 = sp + 0x1e0\n  1985: a1 = sp + 0x200\n  1989: ra = 32, jump @12\n      : @42 [@dyn 16] (gas: 10)\n  1994: a0 = u64 [sp + 0x28]\n  1997: a2 = a0 & 0xffffffffffffffff\n  2000: a0 = u64 [sp + 0x30]\n  2003: a1 = a0 & 0xffffffffffffffff\n  2006: a0 = u64 [sp + 0x38]\n  2009: s1 = u64 [sp + 0x20]\n  2012: s1 = s1 & a0\n  2015: a0 = a1 | s1\n  2018: a0 = a0 | a2\n  2021: jump @45 if a0 == 0\n      : @43 (gas: 12)\n  2024: a0 = 0xffffffff00000000\n  2034: u64 [sp + 0x38] = a0\n  2037: a0 = sp + 0x200\n  2041: u64 [a0 + 56] = 0\n  2044: u64 [a0 + 48] = 0\n  2047: u64 [a0 + 40] = 0\n  2050: u64 [a0 + 32] = 0\n  2053: a0 = sp + 0xa0\n  2057: u64 [sp + 0x30] = a1\n  2060: a1 = sp + 0x220\n  2064: u64 [sp + 0x28] = a2\n  2067: ra = 34, jump @11\n      : @44 [@dyn 17] (gas: 20)\n  2072: a0 = u64 [sp + 0xb8]\n  2076: a1 = u64 [sp + 0xb0]\n  2080: a0 = a0 & 0xffffffffffffffff\n  2083: a2 = u64 [sp + 0x38]\n  2086: a1 = a1 & a2\n  2089: a1 = a1 | s1\n  2092: a3 = sp + 0x200\n  2096: u64 [a3 + 88] = 0\n  2099: u64 [a3 + 80] = 0\n  2102: u64 [a3 + 72] = 0\n  2105: u64 [a3 + 64] = 0\n  2108: a2 = u64 [sp + 0x28]\n  2111: u64 [a3 + 0x68] = a2\n  2114: a2 = u64 [sp + 0x30]\n  2117: u64 [a3 + 0x60] = a2\n  2120: u64 [a3 + 0x78] = a0\n  2123: u64 [a3 + 0x70] = a1\n  2126: a0 = sp + 0x240\n  2130: a1 = sp + 0x260\n  2134: ra = 36, jump @12\n      : @45 [@dyn 18] (gas: 3)\n  2139: a0 = sp + 0x80\n  2143: a1 = 0x40\n  2146: ra = 38, jump @7\n      : @46 [@dyn 19] (gas: 12)\n  2151: a0 = u64 [sp + 0x98]\n  2155: a1 = u64 [sp + 0x90]\n  2159: a2 = u64 [sp + 0x88]\n  2163: s1 = u64 [sp + 0x80]\n  2167: a0 = a0 | a2\n  2170: a2 = s1 | a1\n  2173: a2 = a2 | a0\n  2176: a2 = a2 >> 0x20\n  2179: a0 = a0 | a1\n  2182: a0 = a0 << 0x20\n  2185: a0 = a0 | a2\n  2188: jump @54 if a0 == 0\n      : @47 (gas: 1)\n  2191: trap\n      : @48 (gas: 4)\n  2192: a1 = 0x20160\n  2197: i32 a1 = a1 + 0\n  2199: a0 = 0x1\n  2202: jump @59\n      : @49 (gas: 4)\n  2205: a1 = 0x20160\n  2210: i32 a1 = a1 + 0\n  2212: a0 = 0x1\n  2215: jump @59\n      : @50 (gas: 8)\n  2218: u64 [sp + 80] = 0\n  2221: u64 [sp + 72] = 0\n  2224: u64 [sp + 64] = 0\n  2227: a0 = 0x14bcf5c800000000\n  2237: a1 = sp + 0x40\n  2240: u64 [sp + 0x58] = a0\n  2243: a0 = 0\n  2245: ra = 40, jump @9\n      : @51 [@dyn 20] (gas: 2)\n  2250: a1 = i32 [0x20150]\n  2255: jump @53 if a1 >u 31\n      : @52 (gas: 2)\n  2259: u32 [0x20150] = 0x20\n  2265: fallthrough\n      : @53 (gas: 6)\n  2266: a1 = 0x20160\n  2271: i32 a1 = a1 + 0\n  2273: a0 = 0x1\n  2276: a2 = 0x4\n  2279: ecalli 14 // 'seal_return'\n  2281: fallthrough\n      : @54 (gas: 3)\n  2282: a0 = s1\n  2284: a1 = 0\n  2286: ra = 42, jump @20\n      : @55 [@dyn 21] (gas: 7)\n  2291: i32 a0 = a0 + 0\n  2293: a1 = 0\n  2295: a2 = 0\n  2297: ecalli 1 // 'call_data_copy'\n  2299: a0 = sp + 0x60\n  2302: a1 = 0x80\n  2306: ra = 44, jump @7\n      : @56 [@dyn 22] (gas: 9)\n  2311: a0 = u64 [sp + 0x78]\n  2314: a2 = u64 [sp + 0x70]\n  2317: a3 = u64 [sp + 0x68]\n  2320: a4 = u64 [sp + 0x60]\n  2323: u64 [0x30198] = a0\n  2328: u64 [0x30190] = a2\n  2333: u64 [0x30188] = a3\n  2338: u64 [0x30180] = a4\n  2343: jump @5\n      : @57 (gas: 3)\n  2346: a0 = s1\n  2348: a1 = 0\n  2350: ra = 46, jump @20\n      : @58 [@dyn 23] (gas: 6)\n  2355: i32 a1 = a0 + 0\n  2357: a0 = 0\n  2359: a2 = 0\n  2361: ra = 0x30\n  2364: ecalli 14 // 'seal_return'\n  2366: jump @60\n      : @59 (gas: 4)\n  2368: a2 = 0\n  2370: ra = 0x30\n  2373: ecalli 14 // 'seal_return'\n  2375: fallthrough\n      : @60 [@dyn 24] (gas: 11)\n  2376: sp = sp + 0xfffffffffffffe10\n  2380: u64 [sp + 0x1e8] = ra\n  2384: u64 [sp + 0x1e0] = s0\n  2388: u64 [sp + 0x1d8] = s1\n  2392: s0 = sp + 0x1f0\n  2396: sp = sp + 0xffffffffffffd2d0\n  2400: sp = sp & 0xffffffffffffffe0\n  2403: s1 = sp\n  2405: t0 = 0x32\n  2408: a2 = s1 + 0x2078\n  2412: fallthrough\n      : @61 [@dyn 25] (gas: 7)\n  2413: u64 [a2 + 992] = 0\n  2417: u64 [a2 + 984] = 0\n  2421: u64 [a2 + 968] = 0x80\n  2427: a0 = 0x40\n  2430: a1 = s1 + 0x2440\n  2434: u64 [a2 + 976] = 0\n  2438: ra = 52, jump @9\n      : @62 [@dyn 26] (gas: 4)\n  2443: a0 = 0x2014c\n  2448: u64 [s1 + 0xf8] = a0\n  2452: a0 = i32 [0x2014c]\n  2457: jump @64 if a0 >=u 4\n      : @63 (gas: 1)\n  2461: jump @1180\n      : @64 (gas: 16)\n  2464: a0 = sp + 0xffffffffffffffe0\n  2467: a0 = a0 & 0xffffffffffffffe0\n  2470: sp = a0\n  2472: u64 [a0 + 24] = 0\n  2475: u64 [a0 + 16] = 0\n  2478: u64 [a0 + 8] = 0\n  2481: u64 [s1 + 0xf0] = a0\n  2485: u64 [a0 + 0] = 0\n  2487: a0 = s1 + 0x2000\n  2491: i32 a0 = a0 + 0x460\n  2495: a1 = 0\n  2497: ra = 0x36\n  2500: ecalli 2 // 'call_data_load'\n  2502: t0 = 0x38\n  2505: a3 = s1 + 0x2078\n  2509: jump @66\n      : @65 [@dyn 27] (gas: 3)\n  2511: t0 = 0x38\n  2514: a3 = s1 + 0x2078\n  2518: fallthrough\n      : @66 [@dyn 28] (gas: 2)\n  2519: a0 = i32 [a3 + 0x404]\n  2523: jump @68 if a0 != 2376452955\n      : @67 (gas: 1)\n  2530: jump @300\n      : @68 (gas: 1)\n  2533: jump @126 if a0 == 2573362740\n      : @69 (gas: 2)\n  2541: a2 = s1 + 0x2878\n  2545: jump @71 if a0 != 2822282762\n      : @70 (gas: 1)\n  2552: jump @391\n      : @71 (gas: 1)\n  2555: jump @224 if a0 == 3504541104\n      : @72 (gas: 1)\n  2563: jump @161 if a0 == 3506802265\n      : @73 (gas: 1)\n  2571: jump @75 if a0 != 3675214841\n      : @74 (gas: 1)\n  2578: jump @454\n      : @75 (gas: 1)\n  2581: jump @77 if a0 != 3916516871\n      : @76 (gas: 1)\n  2588: jump @251\n      : @77 (gas: 1)\n  2591: jump @79 if a0 != 248271711\n      : @78 (gas: 1)\n  2598: jump @495\n      : @79 (gas: 1)\n  2601: jump @81 if a0 != 573237126\n      : @80 (gas: 1)\n  2608: jump @322\n      : @81 (gas: 1)\n  2611: jump @83 if a0 != 832302164\n      : @82 (gas: 1)\n  2618: jump @423\n      : @83 (gas: 1)\n  2621: jump @85 if a0 != 969217301\n      : @84 (gas: 1)\n  2628: jump @363\n      : @85 (gas: 1)\n  2631: jump @202 if a0 == 1221342904\n      : @86 (gas: 1)\n  2639: jump @88 if a0 != 1251080110\n      : @87 (gas: 1)\n  2646: jump @311\n      : @88 (gas: 1)\n  2649: jump @90 if a0 != 1287362804\n      : @89 (gas: 1)\n  2656: jump @288\n      : @90 (gas: 1)\n  2659: jump @92 if a0 == 1326608131\n      : @91 (gas: 1)\n  2666: jump @350\n      : @92 (gas: 12)\n  2669: u64 [a3 + 1824] = 0\n  2673: u64 [a3 + 1816] = 0\n  2677: u64 [a3 + 1808] = 0\n  2681: u64 [a3 + 1800] = 0\n  2685: a0 = s1 + 0x2000\n  2689: i32 a0 = a0 + 0x780\n  2693: ra = 0x3a\n  2696: ecalli 17 // 'value_transferred'\n  2698: a3 = s1 + 0x2078\n  2702: a4 = a3 + 0x700\n  2706: t0 = 0x3c\n  2709: jump @1475\n      : @93 [@dyn 29] (gas: 3)\n  2713: a3 = s1 + 0x2078\n  2717: a4 = a3 + 0x700\n  2721: t0 = 60, jump @1475\n      : @94 [@dyn 30] (gas: 1)\n  2727: jump @96 if a0 == 0\n      : @95 (gas: 1)\n  2730: jump @832\n      : @96 (gas: 3)\n  2733: a0 = u64 [s1 + 0xf8]\n  2737: a0 = i32 [a0]\n  2739: jump @98 if a0 >u 99\n      : @97 (gas: 1)\n  2743: jump @833\n      : @98 (gas: 5)\n  2746: a0 = s1 + 0x2000\n  2750: i32 a0 = a0 + 0x7a0\n  2754: a1 = 0x4\n  2757: ecalli 2 // 'call_data_load'\n  2759: fallthrough\n      : @99 (gas: 12)\n  2760: a2 = s1 + 0x2078\n  2764: a4 = a2 + 0x700\n  2768: a0 = u64 [a4 + 0x40]\n  2771: a1 = u64 [a4 + 0x38]\n  2774: a3 = u64 [a4 + 0x28]\n  2777: a2 = u64 [a4 + 0x30]\n  2780: a0 = a0 | a1\n  2783: u64 [s1 + 0xf8] = a3\n  2787: a1 = a3 <u 0x100\n  2791: a1 = 0 if a2 != 0\n  2793: a1 = 0 if a0 != 0\n  2795: jump @101 if a1 != 0\n      : @100 (gas: 1)\n  2798: jump @834\n      : @101 (gas: 5)\n  2801: a0 = s1 + 0x2000\n  2805: i32 a0 = a0 + 0x7c0\n  2809: a1 = 0x24\n  2812: ecalli 2 // 'call_data_load'\n  2814: fallthrough\n      : @102 (gas: 12)\n  2815: a2 = s1 + 0x2078\n  2819: a4 = a2 + 0x700\n  2823: a0 = u64 [a4 + 0x60]\n  2826: a1 = u64 [a4 + 0x58]\n  2829: a3 = u64 [a4 + 0x48]\n  2832: a2 = u64 [a4 + 0x50]\n  2835: a0 = a0 | a1\n  2838: u64 [s1 + 0xe8] = a3\n  2842: a1 = a3 <u 0x100\n  2846: a1 = 0 if a2 != 0\n  2848: a1 = 0 if a0 != 0\n  2850: jump @104 if a1 != 0\n      : @103 (gas: 1)\n  2853: jump @835\n      : @104 (gas: 5)\n  2856: a0 = s1 + 0x2000\n  2860: i32 a0 = a0 + 0x7e0\n  2864: a1 = 0x44\n  2867: ecalli 2 // 'call_data_load'\n  2869: fallthrough\n      : @105 (gas: 10)\n  2870: a0 = s1 + 0x2078\n  2874: t0 = u64 [a0 + 0x780]\n  2878: a1 = a0 + 0x700\n  2882: a4 = u64 [a1 + 0x78]\n  2885: a5 = u64 [a1 + 0x70]\n  2888: a3 = u64 [a1 + 0x68]\n  2891: a0 = a5 | t0\n  2894: a1 = a3 | a4\n  2897: a0 = a0 | a1\n  2900: jump @107 if a0 != 0\n      : @106 (gas: 1)\n  2903: jump @836\n      : @107 (gas: 3)\n  2906: a1 = u8 [s1 + 0xf8]\n  2910: a2 = u8 [s1 + 0xe8]\n  2914: jump @109 if a1 != a2\n      : @108 (gas: 1)\n  2917: jump @840\n      : @109 (gas: 6)\n  2920: u64 [s1 + 0xf8] = a3\n  2924: u64 [s1 + 0xd0] = a5\n  2928: u64 [s1 + 0xd8] = a4\n  2932: u64 [s1 + 0xe0] = t0\n  2936: u64 [s1 + 0xc0] = a1\n  2940: jump @111 if a1 <=u 1\n      : @110 (gas: 1)\n  2944: jump @828\n      : @111 (gas: 1)\n  2947: jump @113 if a2 <u 3\n      : @112 (gas: 1)\n  2951: jump @828\n      : @113 (gas: 10)\n  2954: u64 [s1 + 0x80] = a2\n  2958: a0 = 0x30160\n  2963: u64 [s1 + 0xc8] = a0\n  2967: i32 a0 = a0 + 0\n  2969: u64 [s1 + 0xa0] = a0\n  2973: ra = 0x3e\n  2976: ecalli 4 // 'caller'\n  2978: a2 = u64 [s1 + 0xc8]\n  2982: t0 = 0x40\n  2985: jump @1445\n      : @114 [@dyn 31] (gas: 2)\n  2989: a2 = u64 [s1 + 0xc8]\n  2993: t0 = 64, jump @1445\n      : @115 [@dyn 32] (gas: 9)\n  2999: u64 [a2 + 1088] = 0\n  3003: a4 = a2 + 0x400\n  3007: u64 [a4 + 0x38] = a1\n  3010: u64 [a4 + 0x30] = a0\n  3013: a1 = s1 + 0x7ff\n  3017: a1 = a1 + 0x4a1\n  3021: u64 [a4 + 0x28] = a3\n  3024: a0 = 0\n  3026: ra = 66, jump @9\n      : @116 [@dyn 33] (gas: 11)\n  3031: a1 = s1 + 0x7ff\n  3035: a1 = a1 + 0x79\n  3038: u64 [a1 + 1056] = 0\n  3042: u64 [a1 + 1048] = 0\n  3046: u64 [a1 + 1032] = 0x2\n  3051: a2 = a1\n  3053: a0 = 0x20\n  3056: a1 = s1 + 0x7ff\n  3060: a1 = a1 + 0x481\n  3064: u64 [a2 + 1040] = 0\n  3068: ra = 68, jump @9\n      : @117 [@dyn 34] (gas: 7)\n  3073: a0 = sp + 0xffffffffffffffe0\n  3076: a0 = a0 & 0xffffffffffffffe0\n  3079: u64 [s1 + 0xf0] = a0\n  3083: sp = a0\n  3085: a2 = 0x20150\n  3090: a0 = i32 [0x20150]\n  3095: jump @119 if a0 >u 63\n      : @118 (gas: 2)\n  3099: u32 [0x20150] = 0x40\n  3105: fallthrough\n      : @119 (gas: 12)\n  3106: u64 [s1 + 0x78] = a2\n  3109: a0 = sp + 0xffffffffffffffe0\n  3112: a2 = a0 & 0xffffffffffffffe0\n  3115: u64 [s1 + 0xb8] = a2\n  3119: sp = a2\n  3121: a0 = 0x20160\n  3126: i32 a0 = a0 + 0\n  3128: i32 a2 = a2 + 0\n  3130: a1 = 0x40\n  3133: u64 [s1 + 0x88] = a0\n  3137: ecalli 9 // 'hash_keccak_256'\n  3139: fallthrough\n      : @120 (gas: 22)\n  3140: a2 = u64 [s1 + 0xb8]\n  3144: a0 = u64 [a2 + 0x18]\n  3147: a1 = u64 [a2 + 0x10]\n  3150: a4 = u64 [a2 + 0x8]\n  3153: a3 = u64 [a2]\n  3155: a2 = reverse a0\n  3157: a5 = reverse a1\n  3159: a4 = reverse a4\n  3161: a3 = reverse a3\n  3163: a1 = u64 [s1 + 0xf0]\n  3167: u64 [a1 + 0x18] = a3\n  3170: u64 [a1 + 0x10] = a4\n  3173: u64 [a1 + 0x8] = a5\n  3176: u64 [a1] = a2\n  3178: t1 = a2 + 0x2\n  3181: a0 = u64 [s1 + 0xc0]\n  3185: u64 [s1 + 0xb8] = a4\n  3189: u64 [s1 + 0x98] = a3\n  3193: u64 [s1 + 0xb0] = a5\n  3197: u64 [s1 + 0x90] = t1\n  3201: u64 [s1 + 0xa8] = a2\n  3205: jump @122 if a0 == 0\n      : @121 (gas: 1)\n  3208: jump @580\n      : @122 (gas: 3)\n  3211: a0 = s1 + 0x7ff\n  3215: a0 = a0 + 0x421\n  3219: ra = 70, jump @11\n      : @123 [@dyn 35] (gas: 25)\n  3224: a0 = s1 + 0x7ff\n  3228: a0 = a0 + 0x79\n  3231: ra = u64 [a0 + 0x3b0]\n  3235: t0 = u64 [a0 + 0x3c0]\n  3239: a1 = u64 [a0 + 0x3a8]\n  3243: a5 = u64 [a0 + 0x3b8]\n  3247: t2 = u64 [s1 + 0xd0]\n  3251: a0 = ra ^ t2\n  3254: a4 = ra <u t2\n  3257: u64 [s1 + 0x70] = a1\n  3260: a2 = u64 [s1 + 0xf8]\n  3264: a1 = a1 <u a2\n  3267: u64 [s1 + 0x68] = a1\n  3270: a4 = a1 if a0 == 0\n  3273: t1 = u64 [s1 + 0xd8]\n  3277: a1 = a5 <u t1\n  3280: a2 = u64 [s1 + 0xe0]\n  3284: a3 = t0 ^ a2\n  3287: a0 = t0 <u a2\n  3290: u64 [s1 + 0x60] = a1\n  3293: a0 = a1 if a3 == 0\n  3296: a1 = a5 ^ t1\n  3299: a1 = a1 | a3\n  3302: a0 = a4 if a1 == 0\n  3305: jump @125 if a0 == 0\n      : @124 (gas: 1)\n  3308: jump @901\n      : @125 (gas: 23)\n  3311: a0 = a5 - t1\n  3314: a1 = t0 - a2\n  3317: a2 = u64 [s1 + 0x60]\n  3320: a1 = a1 - a2\n  3323: a2 = a0 <u a4\n  3326: a1 = a1 - a2\n  3329: a0 = a0 - a4\n  3332: a2 = ra - t2\n  3335: a3 = u64 [s1 + 0x68]\n  3338: a2 = a2 - a3\n  3341: a3 = u64 [s1 + 0x70]\n  3344: a4 = u64 [s1 + 0xf8]\n  3348: a3 = a3 - a4\n  3351: a4 = s1 + 0x2078\n  3355: a5 = a4 + 0x700\n  3359: u64 [a5 + 0xa8] = a3\n  3363: u64 [a5 + 0xb0] = a2\n  3367: u64 [a5 + 0xb8] = a0\n  3371: u64 [a5 + 0xc0] = a1\n  3375: a1 = s1 + 0x2820\n  3379: a0 = u64 [s1 + 0xf0]\n  3383: ra = 0x20c\n  3387: jump @12\n      : @126 (gas: 10)\n  3390: a0 = s1 + 0x2878\n  3394: u64 [a0 + 160] = 0\n  3398: u64 [a0 + 152] = 0\n  3402: u64 [a0 + 144] = 0\n  3406: u64 [a0 + 136] = 0\n  3410: a0 = s1 + 0x3000\n  3414: i32 a0 = a0 + 0xfffffffffffff900\n  3418: ecalli 17 // 'value_transferred'\n  3420: a3 = s1 + 0x2878\n  3424: fallthrough\n      : @127 (gas: 8)\n  3425: a0 = u64 [a3 + 0x98]\n  3429: a1 = u64 [a3 + 0xa0]\n  3433: a2 = u64 [a3 + 0x90]\n  3437: a3 = u64 [a3 + 0x88]\n  3441: a1 = a1 | a2\n  3444: a0 = a0 | a3\n  3447: a0 = a0 | a1\n  3450: jump @129 if a0 == 0\n      : @128 (gas: 1)\n  3453: jump @844\n      : @129 (gas: 3)\n  3456: a0 = u64 [s1 + 0xf8]\n  3460: a0 = i32 [a0]\n  3462: jump @131 if a0 >u 67\n      : @130 (gas: 1)\n  3466: jump @845\n      : @131 (gas: 5)\n  3469: a0 = s1 + 0x7ff\n  3473: a0 = a0 + 0x781\n  3477: ra = 0x48\n  3480: t0 = 0x4de\n  3484: jump @1493\n      : @132 [@dyn 36] (gas: 14)\n  3488: a0 = s1 + 0x7ff\n  3492: a0 = a0 + 0x79\n  3495: a2 = a0 + 0x700\n  3499: a1 = u64 [a2 + 0x18]\n  3502: u64 [s1 + 0xc8] = a1\n  3506: a1 = u64 [a2 + 0x10]\n  3509: u64 [s1 + 0xd8] = a1\n  3513: a0 = u64 [a2 + 0x8]\n  3516: u64 [s1 + 0xd0] = a0\n  3520: a0 = s1 + 0x3000\n  3524: i32 a0 = a0 + 0xfffffffffffff920\n  3528: a1 = 0x24\n  3531: ecalli 2 // 'call_data_load'\n  3533: fallthrough\n      : @133 (gas: 17)\n  3534: a0 = s1 + 0x2878\n  3538: a4 = u64 [a0 + 0xc0]\n  3542: a3 = u64 [a0 + 0xb8]\n  3546: a2 = u64 [a0 + 0xb0]\n  3550: a1 = u64 [a0 + 0xa8]\n  3554: u64 [s1 + 0xf0] = a2\n  3558: u64 [s1 + 0xe0] = a4\n  3562: a0 = a2 | a4\n  3565: u64 [s1 + 0xf8] = a1\n  3569: a1 = a1 | a3\n  3572: a1 = a1 | a0\n  3575: a1 = a1 >> 0x20\n  3578: u64 [s1 + 0xe8] = a3\n  3582: a0 = a0 | a3\n  3585: a0 = a0 << 0x20\n  3588: a0 = a0 | a1\n  3591: jump @135 if a0 == 0\n      : @134 (gas: 1)\n  3594: jump @846\n      : @135 (gas: 16)\n  3597: a0 = u64 [s1 + 0xc8]\n  3601: a0 = a0 << 0x20\n  3604: a0 = a0 >> 0x20\n  3607: a2 = s1 + 0x7ff\n  3611: a2 = a2 + 0x79\n  3614: u64 [a2 + 1792] = 0\n  3618: a1 = u64 [s1 + 0xd0]\n  3622: a3 = a2 + 0x600\n  3626: u64 [a3 + 0xe8] = a1\n  3630: a1 = u64 [s1 + 0xd8]\n  3634: u64 [a3 + 0xf0] = a1\n  3638: a1 = s1 + 0x7ff\n  3642: a1 = a1 + 0x761\n  3646: u64 [a3 + 0xf8] = a0\n  3650: a0 = 0\n  3652: ra = 74, jump @9\n      : @136 [@dyn 37] (gas: 11)\n  3657: a1 = s1 + 0x7ff\n  3661: a1 = a1 + 0x79\n  3664: u64 [a1 + 1760] = 0\n  3668: u64 [a1 + 1752] = 0\n  3672: u64 [a1 + 1736] = 0x3\n  3677: a2 = a1\n  3679: a0 = 0x20\n  3682: a1 = s1 + 0x7ff\n  3686: a1 = a1 + 0x741\n  3690: u64 [a2 + 1744] = 0\n  3694: ra = 76, jump @9\n      : @137 [@dyn 38] (gas: 3)\n  3699: a1 = 0x20150\n  3704: a0 = i32 [0x20150]\n  3709: jump @139 if a0 >u 63\n      : @138 (gas: 2)\n  3713: u32 [0x20150] = 0x40\n  3719: fallthrough\n      : @139 (gas: 14)\n  3720: a0 = sp + 0xffffffffffffffe0\n  3723: a2 = a0 & 0xffffffffffffffe0\n  3726: u64 [s1 + 0xc8] = a2\n  3730: sp = a2\n  3732: a0 = 0x20160\n  3737: i32 a0 = a0 + 0\n  3739: i32 a2 = a2 + 0\n  3741: u64 [s1 + 0xd8] = a1\n  3745: a1 = 0x40\n  3748: u64 [s1 + 0xd0] = a0\n  3752: ra = 0x4e\n  3755: ecalli 9 // 'hash_keccak_256'\n  3757: t0 = 0x50\n  3760: jump @1486\n      : @140 [@dyn 39] (gas: 1)\n  3764: t0 = 80, jump @1486\n      : @141 [@dyn 40] (gas: 22)\n  3770: u64 [s1 + 0xb0] = a0\n  3774: a0 = reverse a3\n  3776: u64 [s1 + 0xa8] = a0\n  3780: a0 = sp + 0xffffffffffffffe0\n  3783: a0 = a0 & 0xffffffffffffffe0\n  3786: u64 [s1 + 0xc8] = a0\n  3790: sp = a0\n  3792: a2 = s1 + 0x7ff\n  3796: a2 = a2 + 0x79\n  3799: a0 = u64 [s1 + 0xe0]\n  3803: a3 = a2 + 0x600\n  3807: u64 [a3 + 0xc0] = a0\n  3811: a0 = u64 [s1 + 0xe8]\n  3815: u64 [a3 + 0xb8] = a0\n  3819: a0 = u64 [s1 + 0xf0]\n  3823: u64 [a3 + 0xb0] = a0\n  3827: a1 = s1 + 0x7ff\n  3831: a1 = a1 + 0x721\n  3835: a0 = u64 [s1 + 0xf8]\n  3839: u64 [a3 + 0xa8] = a0\n  3843: a0 = 0\n  3845: ra = 82, jump @9\n      : @142 [@dyn 41] (gas: 16)\n  3850: a1 = s1 + 0x7ff\n  3854: a1 = a1 + 0x79\n  3857: a0 = u64 [s1 + 0xa8]\n  3861: a2 = a1 + 0x600\n  3865: u64 [a2 + 0xa0] = a0\n  3869: a0 = u64 [s1 + 0xb0]\n  3873: u64 [a2 + 0x98] = a0\n  3877: a0 = u64 [s1 + 0xb8]\n  3881: u64 [a2 + 0x90] = a0\n  3885: a3 = a1\n  3887: a0 = 0x20\n  3890: a1 = s1 + 0x7ff\n  3894: a1 = a1 + 0x701\n  3898: a2 = u64 [s1 + 0xc0]\n  3902: u64 [a3 + 0x688] = a2\n  3906: ra = 84, jump @9\n      : @143 [@dyn 42] (gas: 3)\n  3911: a1 = u64 [s1 + 0xd8]\n  3915: a0 = i32 [a1]\n  3917: jump @145 if a0 >u 63\n      : @144 (gas: 2)\n  3921: u32 [a1 + 0] = 0x40\n  3924: fallthrough\n      : @145 (gas: 11)\n  3925: a0 = sp + 0xffffffffffffffe0\n  3928: a0 = a0 & 0xffffffffffffffe0\n  3931: u64 [s1 + 0xf8] = a0\n  3935: sp = a0\n  3937: i32 a2 = a0 + 0\n  3939: a1 = 0x40\n  3942: a0 = u64 [s1 + 0xd0]\n  3946: ra = 0x56\n  3949: ecalli 9 // 'hash_keccak_256'\n  3951: t0 = 0x58\n  3954: jump @1501\n      : @146 [@dyn 43] (gas: 1)\n  3958: t0 = 88, jump @1501\n      : @147 [@dyn 44] (gas: 15)\n  3964: u64 [s1 + 0xe0] = a5\n  3968: a4 = reverse a1\n  3970: u64 [s1 + 0xe8] = a4\n  3974: a2 = reverse a2\n  3976: u64 [s1 + 0xf0] = a2\n  3980: a0 = reverse a3\n  3982: u64 [s1 + 0xf8] = a0\n  3986: a1 = u64 [s1 + 0xc8]\n  3990: u64 [a1 + 0x18] = a0\n  3993: u64 [a1 + 0x10] = a2\n  3996: u64 [a1 + 0x8] = a4\n  3999: u64 [a1] = a5\n  4001: a0 = s1 + 0x7ff\n  4005: a0 = a0 + 0x6e1\n  4009: ra = 90, jump @11\n      : @148 [@dyn 45] (gas: 33)\n  4014: a1 = s1 + 0x7ff\n  4018: a1 = a1 + 0x79\n  4021: a2 = a1 + 0x600\n  4025: a0 = u64 [a2 + 0x80]\n  4029: u64 [s1 + 0xd8] = a0\n  4033: a0 = u64 [a2 + 0x78]\n  4036: u64 [s1 + 0xd0] = a0\n  4040: a0 = u64 [a2 + 0x70]\n  4043: a5 = a1\n  4045: u64 [s1 + 0xc8] = a0\n  4049: a0 = u64 [s1 + 0xe0]\n  4053: a0 = a0 + 0x1\n  4056: a1 = a0 <u 0x1\n  4059: a2 = u64 [s1 + 0xe8]\n  4063: a1 = a1 + a2\n  4066: a2 = a0 | a1\n  4069: a2 = a2 <u 0x1\n  4072: a3 = u64 [s1 + 0xf0]\n  4076: a2 = a2 + a3\n  4079: a3 = a2 <u a3\n  4082: a4 = u64 [s1 + 0xf8]\n  4086: a3 = a3 + a4\n  4089: a4 = u64 [a5 + 0x668]\n  4093: u64 [s1 + 0xf8] = a4\n  4097: a4 = s1 + 0x2878\n  4101: u64 [a4 + 0xd0] = a1\n  4105: u64 [a4 + 0xc8] = a0\n  4109: u64 [a4 + 0xd8] = a2\n  4113: u64 [a4 + 0xe0] = a3\n  4117: a0 = s1 + 0x7ff\n  4121: a0 = a0 + 0x6c1\n  4125: a1 = s1 + 0x2940\n  4129: ra = 92, jump @11\n      : @149 [@dyn 46] (gas: 10)\n  4134: a1 = s1 + 0x7ff\n  4138: a1 = a1 + 0x79\n  4141: a0 = u64 [a1 + 0x650]\n  4145: u64 [s1 + 0xc0] = a0\n  4149: a0 = u64 [a1 + 0x648]\n  4153: u64 [s1 + 0xe0] = a0\n  4157: a0 = s1 + 0x7ff\n  4161: a0 = a0 + 0x6a1\n  4165: a1 = 0x40\n  4168: ra = 94, jump @7\n      : @150 [@dyn 47] (gas: 15)\n  4173: a2 = s1 + 0x7ff\n  4177: a2 = a2 + 0x79\n  4180: t0 = u64 [a2 + 0x640]\n  4184: a1 = a2 + 0x600\n  4188: a5 = u64 [a1 + 0x38]\n  4191: a4 = u64 [a1 + 0x30]\n  4194: a0 = u64 [a1 + 0x28]\n  4197: a3 = a4 | t0\n  4200: a1 = a0 | a5\n  4203: a1 = a1 | a3\n  4206: a1 = a1 >> 0x20\n  4209: a3 = a3 | a5\n  4212: a3 = a3 << 0x20\n  4215: a1 = a1 | a3\n  4218: jump @152 if a1 == 0\n      : @151 (gas: 1)\n  4221: jump @827\n      : @152 (gas: 15)\n  4224: a1 = u64 [s1 + 0xf8]\n  4228: u64 [a2 + 0x608] = a1\n  4232: a1 = u64 [s1 + 0xc8]\n  4236: u64 [a2 + 0x610] = a1\n  4240: a1 = u64 [s1 + 0xd0]\n  4244: u64 [a2 + 0x618] = a1\n  4248: a1 = s1 + 0x7ff\n  4252: a1 = a1 + 0x681\n  4256: a3 = u64 [s1 + 0xd8]\n  4260: u64 [a2 + 0x620] = a3\n  4264: u64 [s1 + 0xf0] = a0\n  4268: u64 [s1 + 0xe8] = a4\n  4272: u64 [s1 + 0xd8] = t0\n  4276: u64 [s1 + 0xf8] = a5\n  4280: ra = 96, jump @9\n      : @153 [@dyn 48] (gas: 11)\n  4285: a2 = u64 [s1 + 0xe8]\n  4289: a1 = u64 [s1 + 0xf0]\n  4293: a0 = u64 [s1 + 0xf8]\n  4297: a3 = u64 [s1 + 0xd8]\n  4301: a3 = a3 | a0\n  4304: a4 = 0x100000000\n  4314: a0 = 0xffffffe0\n  4324: a0 = a1 <u a0\n  4327: a0 = 0 if a2 != 0\n  4329: a0 = 0 if a3 != 0\n  4331: jump @155 if a0 != 0\n      : @154 (gas: 1)\n  4334: jump @827\n      : @155 (gas: 14)\n  4337: i32 a0 = a1 + 0x20\n  4340: a1 = s1 + 0x7ff\n  4344: a1 = a1 + 0x79\n  4347: u64 [s1 + 0xf8] = a3\n  4351: a3 = a1\n  4353: u64 [a1 + 1536] = 0\n  4357: u64 [a1 + 1528] = 0\n  4361: a1 = u64 [s1 + 0xe0]\n  4365: u64 [a3 + 0x5e8] = a1\n  4369: a1 = s1 + 0x7ff\n  4373: a1 = a1 + 0x661\n  4377: u64 [a3 + 1520] = 0\n  4381: u64 [s1 + 0xe0] = a4\n  4385: ra = 98, jump @9\n      : @156 [@dyn 49] (gas: 9)\n  4390: a2 = u64 [s1 + 0xf0]\n  4394: a0 = u64 [s1 + 0xe0]\n  4398: a0 = a0 + 0xffffffffffffffc0\n  4401: a0 = a2 <u a0\n  4404: a1 = u64 [s1 + 0xe8]\n  4408: a0 = 0 if a1 != 0\n  4410: a1 = u64 [s1 + 0xf8]\n  4414: a0 = 0 if a1 != 0\n  4416: jump @158 if a0 != 0\n      : @157 (gas: 1)\n  4419: jump @827\n      : @158 (gas: 12)\n  4422: a0 = u8 [s1 + 0xc0]\n  4426: a1 = a0 >u 0\n  4428: i32 a0 = a2 + 0x40\n  4431: a3 = s1 + 0x7ff\n  4435: a3 = a3 + 0x79\n  4438: u64 [a3 + 1504] = 0\n  4442: u64 [a3 + 1496] = 0\n  4446: u64 [a3 + 0x5c8] = a1\n  4450: a1 = s1 + 0x7ff\n  4454: a1 = a1 + 0x641\n  4458: u64 [a3 + 1488] = 0\n  4462: ra = 100, jump @9\n      : @159 [@dyn 50] (gas: 3)\n  4467: a1 = 0x60\n  4470: a0 = u64 [s1 + 0xf0]\n  4474: ra = 102, jump @20\n      : @160 [@dyn 51] (gas: 5)\n  4479: i32 a1 = a0 + 0\n  4481: a2 = 0x60\n  4484: a0 = 0\n  4486: ecalli 14 // 'seal_return'\n  4488: jump @454\n      : @161 (gas: 10)\n  4491: u64 [a2 + 704] = 0\n  4495: u64 [a2 + 696] = 0\n  4499: u64 [a2 + 688] = 0\n  4503: u64 [a2 + 680] = 0\n  4507: a0 = s1 + 0x3000\n  4511: i32 a0 = a0 + 0xfffffffffffffb20\n  4515: ra = 0x68\n  4518: ecalli 17 // 'value_transferred'\n  4520: t0 = 0x6a\n  4523: jump @1498\n      : @162 [@dyn 52] (gas: 1)\n  4527: t0 = 106, jump @1498\n      : @163 [@dyn 53] (gas: 1)\n  4533: t0 = 108, jump @1500\n      : @164 [@dyn 54] (gas: 1)\n  4539: jump @166 if a0 == 0\n      : @165 (gas: 1)\n  4542: jump @847\n      : @166 (gas: 3)\n  4545: a0 = u64 [s1 + 0xf8]\n  4549: a0 = i32 [a0]\n  4551: jump @168 if a0 >u 3\n      : @167 (gas: 1)\n  4555: jump @848\n      : @168 (gas: 9)\n  4558: a0 = 0x30160\n  4563: u64 [s1 + 0xf8] = a0\n  4567: i32 a0 = a0 + 0\n  4569: u64 [s1 + 0xe0] = a0\n  4573: ra = 0x6e\n  4576: ecalli 4 // 'caller'\n  4578: a2 = u64 [s1 + 0xf8]\n  4582: t0 = 0x70\n  4585: jump @1446\n      : @169 [@dyn 55] (gas: 2)\n  4589: a2 = u64 [s1 + 0xf8]\n  4593: t0 = 112, jump @1446\n      : @170 [@dyn 56] (gas: 8)\n  4599: u64 [a2 + 1376] = 0\n  4603: a4 = a2 + 0x500\n  4607: u64 [a4 + 0x58] = a1\n  4610: u64 [a4 + 0x50] = a0\n  4613: a1 = s1 + 0x1dc0\n  4617: u64 [a4 + 0x48] = a3\n  4620: a0 = 0\n  4622: ra = 114, jump @9\n      : @171 [@dyn 57] (gas: 3)\n  4627: t0 = 0x74\n  4630: a1 = s1 + 0x1878\n  4634: fallthrough\n      : @172 [@dyn 58] (gas: 8)\n  4635: u64 [a1 + 1344] = 0\n  4639: u64 [a1 + 1336] = 0\n  4643: u64 [a1 + 1320] = 0x2\n  4648: a2 = a1\n  4650: a0 = 0x20\n  4653: a1 = s1 + 0x1da0\n  4657: u64 [a2 + 1328] = 0\n  4661: ra = 118, jump @9\n      : @173 [@dyn 59] (gas: 2)\n  4666: a1 = i32 [0x20150]\n  4671: jump @175 if a1 >u 63\n      : @174 (gas: 2)\n  4675: u32 [0x20150] = 0x40\n  4681: fallthrough\n      : @175 (gas: 27)\n  4682: a0 = sp + 0xffffffffffffffe0\n  4685: a2 = a0 & 0xffffffffffffffe0\n  4688: u64 [s1 + 0xe8] = a2\n  4692: sp = a2\n  4694: a0 = 0x20160\n  4699: i32 a0 = a0 + 0\n  4701: i32 a2 = a2 + 0\n  4703: a1 = 0x40\n  4706: u64 [s1 + 0xc0] = a0\n  4710: ecalli 9 // 'hash_keccak_256'\n  4712: a1 = u64 [s1 + 0xe8]\n  4716: a0 = u64 [a1 + 0x18]\n  4719: u64 [s1 + 0xd8] = a0\n  4723: a0 = u64 [a1 + 0x10]\n  4726: u64 [s1 + 0xd0] = a0\n  4730: a0 = u64 [a1 + 0x8]\n  4733: u64 [s1 + 0xc8] = a0\n  4737: a0 = u64 [a1]\n  4739: u64 [s1 + 0xe8] = a0\n  4743: a0 = s1 + 0x2878\n  4747: u64 [a0 + 736] = 0\n  4751: u64 [a0 + 728] = 0\n  4755: u64 [a0 + 720] = 0\n  4759: u64 [a0 + 712] = 0\n  4763: a0 = s1 + 0x1d80\n  4767: a1 = s1 + 0x2b40\n  4771: ra = 120, jump @11\n      : @176 [@dyn 60] (gas: 10)\n  4776: a0 = s1 + 0x1878\n  4780: a1 = a0 + 0x500\n  4784: a3 = u64 [a1 + 0x18]\n  4787: a4 = u64 [a1 + 0x10]\n  4790: a2 = u64 [a1 + 0x8]\n  4793: a0 = a3 << 0x20\n  4796: a0 = a0 >> 0x20\n  4799: a1 = a2 | a4\n  4802: a0 = a0 | a1\n  4805: jump @178 if a0 == 0\n      : @177 (gas: 1)\n  4808: jump @527\n      : @178 (gas: 5)\n  4811: u64 [s1 + 192] = 0\n  4815: u64 [s1 + 168] = 0\n  4819: u64 [s1 + 176] = 0\n  4823: u64 [s1 + 184] = 0\n  4827: fallthrough\n      : @179 (gas: 26)\n  4828: a0 = u64 [s1 + 0xe8]\n  4832: t0 = reverse a0\n  4834: a1 = u64 [s1 + 0xc8]\n  4838: a0 = reverse a1\n  4840: a2 = u64 [s1 + 0xd0]\n  4844: a2 = reverse a2\n  4846: a3 = u64 [s1 + 0xd8]\n  4850: a3 = reverse a3\n  4852: a4 = sp + 0xffffffffffffffe0\n  4855: a1 = a4 & 0xffffffffffffffe0\n  4858: sp = a1\n  4860: a4 = a3 + 0x2\n  4863: a3 = a4 <u a3\n  4866: a5 = a2 + a3\n  4869: a2 = a5 <u a2\n  4872: a2 = a3 if a3 == 0\n  4875: a2 = a2 + a0\n  4878: a0 = a2 <u a0\n  4881: a0 = a0 + t0\n  4884: u64 [a1 + 0x8] = a5\n  4887: u64 [a1] = a4\n  4889: u64 [a1 + 0x10] = a2\n  4892: u64 [a1 + 0x18] = a0\n  4895: a0 = s1 + 0x1a40\n  4899: u64 [s1 + 0xe8] = a1\n  4903: ra = 122, jump @11\n      : @180 [@dyn 61] (gas: 10)\n  4908: a0 = s1 + 0x1878\n  4912: a1 = a0 + 0x100\n  4916: a5 = u64 [a1 + 0xe0]\n  4920: a4 = u64 [a1 + 0xd8]\n  4924: a3 = u64 [a1 + 0xd0]\n  4928: a2 = u64 [a1 + 0xc8]\n  4932: a0 = a3 | a5\n  4935: a1 = a2 | a4\n  4938: a0 = a0 | a1\n  4941: jump @193 if a0 == 0\n      : @181 (gas: 7)\n  4945: u64 [s1 + 0xa0] = a5\n  4949: u64 [s1 + 0xc8] = a4\n  4953: u64 [s1 + 0xd0] = a3\n  4957: u64 [s1 + 0xd8] = a2\n  4961: a0 = u64 [s1 + 0xe8]\n  4965: a1 = u64 [s1 + 0xf0]\n  4969: ra = 124, jump @12\n      : @182 [@dyn 62] (gas: 3)\n  4974: a0 = s1 + 0x1a20\n  4978: a1 = 0x40\n  4981: ra = 126, jump @7\n      : @183 [@dyn 63] (gas: 7)\n  4986: a3 = s1 + 0x1878\n  4990: a5 = a3 + 0x100\n  4994: a4 = u64 [a5 + 0xc0]\n  4998: a1 = u64 [a5 + 0xb8]\n  5002: a2 = u64 [a5 + 0xb0]\n  5006: a0 = u64 [a5 + 0xa8]\n  5010: t0 = 128, jump @1476\n      : @184 [@dyn 64] (gas: 1)\n  5017: jump @186 if a1 == 0\n      : @185 (gas: 1)\n  5020: jump @827\n      : @186 (gas: 12)\n  5023: a1 = u64 [s1 + 0xd8]\n  5027: a4 = a3 + 0x100\n  5031: u64 [a4 + 0x88] = a1\n  5035: a1 = u64 [s1 + 0xd0]\n  5039: u64 [a4 + 0x90] = a1\n  5043: a1 = u64 [s1 + 0xc8]\n  5047: u64 [a4 + 0x98] = a1\n  5051: a1 = s1 + 0x1a00\n  5055: a2 = u64 [s1 + 0xa0]\n  5059: u64 [a4 + 0xa0] = a2\n  5063: u64 [s1 + 0xf0] = a0\n  5067: ra = 130, jump @9\n      : @187 [@dyn 65] (gas: 6)\n  5073: a0 = u64 [s1 + 0xe0]\n  5077: ra = 0x84\n  5081: ecalli 4 // 'caller'\n  5083: a2 = u64 [s1 + 0xf8]\n  5087: t0 = 0x86\n  5091: jump @1453\n      : @188 [@dyn 66] (gas: 2)\n  5094: a2 = u64 [s1 + 0xf8]\n  5098: t0 = 134, jump @1453\n      : @189 [@dyn 67] (gas: 30)\n  5104: a5 = s1 + 0x1878\n  5108: u64 [a5 + 288] = 0\n  5112: u64 [a5 + 280] = 0\n  5116: u64 [a5 + 264] = 0x2\n  5121: u64 [a5 + 296] = 0x1\n  5126: a3 = u64 [0x20020]\n  5131: a4 = u64 [0x20028]\n  5136: u64 [a5 + 272] = 0\n  5140: u64 [a5 + 320] = 0\n  5144: u64 [a5 + 0x180] = a3\n  5148: u64 [a5 + 0x178] = a4\n  5152: a3 = u64 [0x20030]\n  5157: a4 = u64 [0x20038]\n  5162: u64 [a5 + 312] = 0\n  5166: u64 [a5 + 304] = 0\n  5170: u64 [a5 + 0x170] = a3\n  5174: a3 = a5 + 0x100\n  5178: u64 [a3 + 0x68] = a4\n  5181: u64 [a3 + 0x58] = a2\n  5184: u64 [a3 + 0x50] = a1\n  5187: u64 [a3 + 0x48] = a0\n  5190: a0 = a5\n  5192: a1 = 0x20\n  5195: a2 = s1 + 0x19e0\n  5199: a3 = s1 + 0x19c0\n  5203: a4 = s1 + 0x19a0\n  5207: a5 = s1 + 0x1980\n  5211: u64 [a0 + 352] = 0\n  5215: a0 = u64 [s1 + 0xf0]\n  5219: ra = 136, jump @17\n      : @190 [@dyn 68] (gas: 22)\n  5225: a0 = u64 [s1 + 0xa0]\n  5229: a1 = s1 + 0x1878\n  5233: u64 [a1 + 0xc0] = a0\n  5237: a0 = u64 [s1 + 0xc8]\n  5241: u64 [a1 + 0xb8] = a0\n  5245: a0 = u64 [s1 + 0xd0]\n  5249: u64 [a1 + 0xb0] = a0\n  5253: a0 = u64 [s1 + 0xd8]\n  5257: u64 [a1 + 0xa8] = a0\n  5261: a0 = u64 [s1 + 0xb8]\n  5265: u64 [a1 + 0xe0] = a0\n  5269: a0 = u64 [s1 + 0xb0]\n  5273: u64 [a1 + 0xd8] = a0\n  5277: a0 = u64 [s1 + 0xa8]\n  5281: u64 [a1 + 0xd0] = a0\n  5285: a4 = a1\n  5287: a0 = s1 + 0x1960\n  5291: a1 = s1 + 0x1940\n  5295: a2 = s1 + 0x1920\n  5299: a3 = u64 [s1 + 0xc0]\n  5303: u64 [a4 + 0xc8] = a3\n  5307: ra = 138, jump @1238\n      : @191 [@dyn 69] (gas: 3)\n  5313: t0 = 0x8c\n  5317: a1 = s1 + 0x1878\n  5321: fallthrough\n      : @192 [@dyn 70] (gas: 9)\n  5322: a0 = u64 [a1 + 0x100]\n  5326: u64 [s1 + 0xb8] = a0\n  5330: a0 = u64 [a1 + 0xf8]\n  5334: u64 [s1 + 0xb0] = a0\n  5338: a0 = u64 [a1 + 0xf0]\n  5342: u64 [s1 + 0xa8] = a0\n  5346: a0 = u64 [a1 + 0xe8]\n  5350: u64 [s1 + 0xc0] = a0\n  5354: fallthrough\n      : @193 (gas: 8)\n  5355: a0 = u64 [s1 + 0xc0]\n  5359: a1 = u64 [s1 + 0xb0]\n  5363: a0 = a0 | a1\n  5366: a1 = u64 [s1 + 0xb8]\n  5370: a2 = u64 [s1 + 0xa8]\n  5374: a1 = a1 | a2\n  5377: a0 = a0 | a1\n  5380: jump @197 if a0 == 0\n      : @194 (gas: 6)\n  5383: a0 = u64 [s1 + 0xe0]\n  5387: ra = 0x8e\n  5391: ecalli 4 // 'caller'\n  5393: a2 = u64 [s1 + 0xf8]\n  5397: t0 = 0x90\n  5401: jump @1446\n      : @195 [@dyn 71] (gas: 2)\n  5404: a2 = u64 [s1 + 0xf8]\n  5408: t0 = 144, jump @1446\n      : @196 [@dyn 72] (gas: 15)\n  5414: a4 = u64 [s1 + 0xb8]\n  5418: u64 [a2 + 0x80] = a4\n  5422: a4 = u64 [s1 + 0xb0]\n  5426: u64 [a2 + 0x78] = a4\n  5429: a4 = u64 [s1 + 0xa8]\n  5433: u64 [a2 + 0x70] = a4\n  5436: a4 = u64 [s1 + 0xc0]\n  5440: u64 [a2 + 0x68] = a4\n  5443: u64 [a2 + 160] = 0\n  5447: u64 [a2 + 0x98] = a1\n  5451: u64 [a2 + 0x90] = a0\n  5455: a0 = s1 + 0x1900\n  5459: a1 = s1 + 0x18e0\n  5463: u64 [a2 + 0x88] = a3\n  5467: ra = 146, jump @1264\n      : @197 [@dyn 73] (gas: 3)\n  5473: a0 = s1 + 0x18c0\n  5477: a1 = 0x40\n  5480: ra = 148, jump @7\n      : @198 [@dyn 74] (gas: 6)\n  5486: a3 = s1 + 0x1878\n  5490: a0 = u64 [a3 + 0x60]\n  5493: a1 = u64 [a3 + 0x58]\n  5496: a2 = u64 [a3 + 0x50]\n  5499: a4 = u64 [a3 + 0x48]\n  5502: t0 = 150, jump @1479\n      : @199 [@dyn 75] (gas: 1)\n  5509: jump @201 if a0 == 0\n      : @200 (gas: 1)\n  5512: jump @827\n      : @201 (gas: 13)\n  5515: a0 = u64 [s1 + 0xc0]\n  5519: u64 [a3 + 0x28] = a0\n  5522: a0 = u64 [s1 + 0xa8]\n  5526: u64 [a3 + 0x30] = a0\n  5529: a0 = u64 [s1 + 0xb0]\n  5533: u64 [a3 + 0x38] = a0\n  5536: a1 = s1 + 0x18a0\n  5540: a0 = u64 [s1 + 0xb8]\n  5544: u64 [a3 + 0x40] = a0\n  5547: a0 = a4\n  5549: u64 [s1 + 0xf8] = a4\n  5553: ra = 0x196\n  5557: jump @9\n      : @202 (gas: 10)\n  5560: u64 [a3 + 1504] = 0\n  5564: u64 [a3 + 1496] = 0\n  5568: u64 [a3 + 1488] = 0\n  5572: u64 [a3 + 1480] = 0\n  5576: a0 = s1 + 0x2000\n  5580: i32 a0 = a0 + 0x640\n  5584: ra = 0x98\n  5588: ecalli 17 // 'value_transferred'\n  5590: t0 = 0x9a\n  5594: jump @1483\n      : @203 [@dyn 76] (gas: 1)\n  5598: t0 = 154, jump @1483\n      : @204 [@dyn 77] (gas: 1)\n  5605: t0 = 156, jump @1482\n      : @205 [@dyn 78] (gas: 1)\n  5612: jump @207 if a0 == 0\n      : @206 (gas: 1)\n  5615: jump @849\n      : @207 (gas: 3)\n  5618: a0 = u64 [s1 + 0xf8]\n  5622: a0 = i32 [a0]\n  5624: jump @209 if a0 >u 35\n      : @208 (gas: 1)\n  5628: jump @850\n      : @209 (gas: 6)\n  5631: a0 = s1 + 0x2000\n  5635: i32 a0 = a0 + 0x660\n  5639: a1 = 0x4\n  5642: ecalli 2 // 'call_data_load'\n  5644: a3 = s1 + 0x2078\n  5648: fallthrough\n      : @210 (gas: 7)\n  5649: a0 = u64 [a3 + 0x600]\n  5653: a1 = u64 [a3 + 0x5f8]\n  5657: a2 = u64 [a3 + 0x5f0]\n  5661: a0 = a0 | a1\n  5664: a1 = a2 <u 0x1\n  5667: a1 = 0 if a0 != 0\n  5669: jump @212 if a1 != 0\n      : @211 (gas: 1)\n  5672: jump @851\n      : @212 (gas: 6)\n  5675: a0 = u64 [a3 + 0x5e8]\n  5679: u64 [s1 + 0x38] = a0\n  5682: a0 = s1 + 0x2000\n  5686: i32 a0 = a0 + 0x680\n  5690: ecalli 10 // 'now'\n  5692: fallthrough\n      : @213 (gas: 49)\n  5693: a0 = s1 + 0x2078\n  5697: t2 = u64 [a0 + 0x620]\n  5701: a3 = u64 [a0 + 0x618]\n  5705: u64 [s1 + 0xb0] = a3\n  5709: t0 = u64 [a0 + 0x610]\n  5713: ra = u64 [a0 + 0x608]\n  5717: a0 = clz t2\n  5719: a1 = clz a3\n  5721: a2 = a1 + 0x40\n  5724: a2 = a0 if t2 != 0\n  5727: a0 = clz t0\n  5729: a1 = clz ra\n  5731: a1 = a1 + 0x40\n  5734: a1 = a0 if t0 != 0\n  5737: a0 = a1 + 0x80\n  5741: a3 = a3 | t2\n  5744: a2 = a0 if a3 == 0\n  5747: a5 = a0 <u a1\n  5750: a5 = 0 if a3 != 0\n  5752: a4 = a5 >u 0\n  5754: a0 = a2 <u 0xf0\n  5758: a3 = a0 ^ 0x1\n  5761: a4 = a3 if a5 == 0\n  5764: a0 = a4 <u 0x1\n  5767: a0 = a0 + 0xffffffffffffffff\n  5770: a1 = -a4\n  5772: a5 = -a5\n  5774: a3 = a5 - a3\n  5777: t1 = 0xef - a2\n  5781: u64 [s1 + 0xf8] = a1\n  5785: a5 = a1 >u 0\n  5787: a1 = a0 >u 0\n  5789: a1 = a5 if a0 == 0\n  5792: a5 = t1 <u 0x100\n  5796: a5 = a5 ^ 0x1\n  5799: a2 = a3 >u 0\n  5801: a5 = a2 if a3 != 0\n  5804: a5 = a1 if a4 != 0\n  5807: u64 [s1 + 0xa0] = t2\n  5811: u64 [s1 + 0xb8] = t0\n  5815: a1 = t0 | t2\n  5818: t2 = u64 [s1 + 0xb0]\n  5822: a2 = ra | t2\n  5825: a1 = a1 | a2\n  5828: a1 = a1 <u 0x1\n  5831: a1 = a1 | a5\n  5834: a4 = ra\n  5836: a4 = 0 if a1 != 0\n  5838: jump @215 if a1 == 0\n      : @214 (gas: 1)\n  5841: jump @613\n      : @215 (gas: 6)\n  5844: a1 = t1 ^ 0xff\n  5848: a5 = u64 [s1 + 0xf8]\n  5852: a1 = a1 | a5\n  5855: a2 = a3 | a0\n  5858: a1 = a1 | a2\n  5861: jump @217 if a1 != 0\n      : @216 (gas: 1)\n  5864: jump @613\n      : @217 (gas: 20)\n  5867: t0 = ra\n  5869: a2 = t1 + 0x1\n  5872: u64 [s1 + 0xf0] = a2\n  5876: a1 = a2 <u 0x1\n  5879: a1 = a1 + a3\n  5882: u64 [s1 + 0xe0] = a1\n  5886: a1 = a1 | a2\n  5889: a1 = a1 <u 0x1\n  5892: a1 = a1 + a5\n  5895: u64 [s1 + 0xd0] = a1\n  5899: a1 = a1 <u a5\n  5902: a0 = a0 + a1\n  5905: u64 [s1 + 0xd8] = a0\n  5909: a1 = 0xff - t1\n  5913: u64 [s1 + 0xc8] = a1\n  5917: a2 = 0x80 - a1\n  5921: a0 = ra\n  5923: u64 [s1 + 0xa8] = t0\n  5927: a1 = u64 [s1 + 0xb8]\n  5931: ra = 158, jump @1504\n      : @218 [@dyn 79] (gas: 6)\n  5938: u64 [s1 + 0xc0] = a0\n  5942: u64 [s1 + 0xf8] = a1\n  5946: a0 = u64 [s1 + 0xb0]\n  5950: a1 = u64 [s1 + 0xa0]\n  5954: a2 = u64 [s1 + 0xc8]\n  5958: ra = 160, jump @1509\n      : @219 [@dyn 80] (gas: 7)\n  5965: u64 [s1 + 0x90] = a0\n  5969: u64 [s1 + 0x88] = a1\n  5973: a0 = u64 [s1 + 0xc8]\n  5977: a2 = a0 + 0xffffffffffffff80\n  5980: a0 = u64 [s1 + 0xa8]\n  5984: a1 = u64 [s1 + 0xb8]\n  5988: ra = 162, jump @1509\n      : @220 [@dyn 81] (gas: 8)\n  5995: u64 [s1 + 0x80] = a0\n  5999: u64 [s1 + 0x78] = a1\n  6002: a2 = u64 [s1 + 0xc8]\n  6006: a0 = a2 <u 0x80\n  6010: u64 [s1 + 0x98] = a0\n  6014: a0 = u64 [s1 + 0xa8]\n  6018: a1 = u64 [s1 + 0xb8]\n  6022: ra = 164, jump @1509\n      : @221 [@dyn 82] (gas: 11)\n  6029: a4 = u64 [s1 + 0x98]\n  6033: t0 = u64 [s1 + 0xd0]\n  6037: a5 = u64 [s1 + 0xd8]\n  6041: a2 = u64 [s1 + 0xe0]\n  6045: a5 = a5 | a2\n  6048: a3 = u64 [s1 + 0xf0]\n  6052: a3 = a3 | t0\n  6055: a3 = a3 | a5\n  6058: a0 = 0 if a4 == 0\n  6060: u64 [s1 + 0xe8] = a0\n  6064: jump @223 if a3 == 0\n      : @222 (gas: 1)\n  6067: jump @604\n      : @223 (gas: 2)\n  6070: a4 = 0\n  6072: jump @612\n      : @224 (gas: 3)\n  6075: a0 = u64 [s1 + 0xf8]\n  6079: a0 = i32 [a0]\n  6081: jump @226 if a0 >u 3\n      : @225 (gas: 1)\n  6085: jump @852\n      : @226 (gas: 10)\n  6088: u64 [a2 + 576] = 0\n  6092: u64 [a2 + 568] = 0\n  6096: u64 [a2 + 560] = 0\n  6100: u64 [a2 + 552] = 0\n  6104: a0 = s1 + 0x3000\n  6108: i32 a0 = a0 + 0xfffffffffffffaa0\n  6112: ra = 0xa6\n  6116: ecalli 17 // 'value_transferred'\n  6118: t0 = 0xa8\n  6122: jump @1498\n      : @227 [@dyn 83] (gas: 1)\n  6126: t0 = 168, jump @1498\n      : @228 [@dyn 84] (gas: 1)\n  6133: t0 = 170, jump @1494\n      : @229 [@dyn 85] (gas: 1)\n  6140: jump @231 if a0 != 0\n      : @230 (gas: 1)\n  6143: jump @853\n      : @231 (gas: 9)\n  6146: a0 = 0x30160\n  6151: u64 [s1 + 0xf0] = a0\n  6155: i32 a0 = a0 + 0\n  6157: u64 [s1 + 0xc8] = a0\n  6161: ra = 0xac\n  6165: ecalli 4 // 'caller'\n  6167: a2 = u64 [s1 + 0xf0]\n  6171: t0 = 0xae\n  6175: jump @1446\n      : @232 [@dyn 86] (gas: 2)\n  6178: a2 = u64 [s1 + 0xf0]\n  6182: t0 = 174, jump @1446\n      : @233 [@dyn 87] (gas: 7)\n  6188: u64 [a2 + 32] = 0\n  6191: u64 [a2 + 0x18] = a1\n  6194: u64 [a2 + 0x10] = a0\n  6197: a1 = s1 + 0x1880\n  6201: u64 [a2 + 0x8] = a3\n  6204: a0 = 0\n  6206: ra = 176, jump @9\n      : @234 [@dyn 88] (gas: 3)\n  6212: t0 = 0xb2\n  6216: a1 = s1 + 0x1878\n  6220: fallthrough\n      : @235 [@dyn 89] (gas: 8)\n  6221: u64 [a1 + 0] = 0\n  6223: u64 [a1 + 4294967288] = 0\n  6226: u64 [a1 + 4294967272] = 0x2\n  6230: a2 = a1\n  6232: a0 = 0x20\n  6235: a1 = s1 + 0x1860\n  6239: u64 [a2 + 4294967280] = 0\n  6242: ra = 180, jump @9\n      : @236 [@dyn 90] (gas: 6)\n  6248: a0 = sp + 0xffffffffffffffe0\n  6251: a0 = a0 & 0xffffffffffffffe0\n  6254: u64 [s1 + 0xf8] = a0\n  6258: sp = a0\n  6260: a1 = i32 [0x20150]\n  6265: jump @238 if a1 >u 63\n      : @237 (gas: 2)\n  6269: u32 [0x20150] = 0x40\n  6275: fallthrough\n      : @238 (gas: 45)\n  6276: a0 = sp + 0xffffffffffffffe0\n  6279: a2 = a0 & 0xffffffffffffffe0\n  6282: u64 [s1 + 0xe8] = a2\n  6286: sp = a2\n  6288: a0 = 0x20160\n  6293: i32 a0 = a0 + 0\n  6295: i32 a2 = a2 + 0\n  6297: a1 = 0x40\n  6300: u64 [s1 + 0xc0] = a0\n  6304: ecalli 9 // 'hash_keccak_256'\n  6306: a3 = u64 [s1 + 0xe8]\n  6310: a0 = u64 [a3 + 0x18]\n  6313: a1 = u64 [a3 + 0x10]\n  6316: a2 = u64 [a3 + 0x8]\n  6319: a3 = u64 [a3]\n  6321: a0 = reverse a0\n  6323: a1 = reverse a1\n  6325: a2 = reverse a2\n  6327: a3 = reverse a3\n  6329: a4 = u64 [s1 + 0xf8]\n  6333: u64 [a4 + 0x18] = a3\n  6336: u64 [a4 + 0x10] = a2\n  6339: u64 [a4 + 0x8] = a1\n  6342: u64 [a4] = a0\n  6344: a0 = s1 + 0x2878\n  6348: u64 [a0 + 608] = 0\n  6352: u64 [a0 + 600] = 0\n  6356: u64 [a0 + 592] = 0\n  6360: u64 [a0 + 584] = 0\n  6364: a0 = s1 + 0x3000\n  6368: i32 a0 = a0 + 0xfffffffffffffac0\n  6372: ecalli 17 // 'value_transferred'\n  6374: a0 = s1 + 0x2878\n  6378: a2 = a0 + 0x200\n  6382: a1 = u64 [a2 + 0x48]\n  6385: u64 [s1 + 0xe8] = a1\n  6389: a1 = u64 [a2 + 0x50]\n  6392: u64 [s1 + 0xe0] = a1\n  6396: a1 = u64 [a2 + 0x58]\n  6399: u64 [s1 + 0xd8] = a1\n  6403: a0 = u64 [a2 + 0x60]\n  6406: u64 [s1 + 0xd0] = a0\n  6410: a0 = s1 + 0x1840\n  6414: a1 = u64 [s1 + 0xf8]\n  6418: ra = 182, jump @11\n      : @239 [@dyn 91] (gas: 22)\n  6424: a4 = s1 + 0x1078\n  6428: a3 = u64 [a4 + 0x7c8]\n  6432: a0 = u64 [a4 + 0x7d0]\n  6436: a1 = u64 [a4 + 0x7d8]\n  6440: a2 = u64 [a4 + 0x7e0]\n  6444: a5 = u64 [s1 + 0xd0]\n  6448: u64 [a4 + 0x780] = a5\n  6452: a5 = u64 [s1 + 0xd8]\n  6456: u64 [a4 + 0x778] = a5\n  6460: a5 = u64 [s1 + 0xe0]\n  6464: u64 [a4 + 0x770] = a5\n  6468: a5 = u64 [s1 + 0xe8]\n  6472: u64 [a4 + 0x768] = a5\n  6476: a5 = a4 + 0x700\n  6480: u64 [a5 + 0xa0] = a2\n  6484: u64 [a5 + 0x98] = a1\n  6488: u64 [a5 + 0x90] = a0\n  6492: a0 = s1 + 0x1820\n  6496: a1 = s1 + 0x1800\n  6500: a2 = s1 + 0x17e0\n  6504: u64 [a5 + 0x88] = a3\n  6508: ra = 184, jump @1238\n      : @240 [@dyn 92] (gas: 15)\n  6514: a3 = s1 + 0x1078\n  6518: a4 = a3 + 0x700\n  6522: a0 = u64 [a4 + 0xc0]\n  6526: a1 = u64 [a4 + 0xb8]\n  6530: a2 = u64 [a4 + 0xb0]\n  6534: a3 = u64 [a4 + 0xa8]\n  6538: a4 = s1 + 0x2878\n  6542: a5 = a4 + 0x200\n  6546: u64 [a5 + 0x80] = a0\n  6550: u64 [a5 + 0x78] = a1\n  6553: u64 [a5 + 0x70] = a2\n  6556: u64 [a5 + 0x68] = a3\n  6559: a1 = s1 + 0x2ae0\n  6563: a0 = u64 [s1 + 0xf8]\n  6567: ra = 186, jump @12\n      : @241 [@dyn 93] (gas: 3)\n  6573: a0 = s1 + 0x17c0\n  6577: a1 = 0x40\n  6580: ra = 188, jump @7\n      : @242 [@dyn 94] (gas: 20)\n  6586: a0 = s1 + 0x1078\n  6590: a2 = a0 + 0x700\n  6594: a1 = u64 [a2 + 0x60]\n  6597: u64 [s1 + 0xe8] = a1\n  6601: a1 = u64 [a2 + 0x58]\n  6604: u64 [s1 + 0xe0] = a1\n  6608: a1 = u64 [a2 + 0x50]\n  6611: u64 [s1 + 0xd8] = a1\n  6615: a0 = u64 [a2 + 0x48]\n  6618: u64 [s1 + 0xf8] = a0\n  6622: a0 = s1 + 0x2878\n  6626: u64 [a0 + 672] = 0\n  6630: u64 [a0 + 664] = 0\n  6634: u64 [a0 + 656] = 0\n  6638: u64 [a0 + 648] = 0\n  6642: a0 = s1 + 0x3000\n  6646: i32 a0 = a0 + 0xfffffffffffffb00\n  6650: ra = 0xbe\n  6654: ecalli 17 // 'value_transferred'\n  6656: fallthrough\n      : @243 [@dyn 95] (gas: 13)\n  6657: a0 = u64 [s1 + 0xe8]\n  6661: a1 = u64 [s1 + 0xd8]\n  6665: a0 = a0 | a1\n  6668: a1 = u64 [s1 + 0xf8]\n  6672: a5 = a1\n  6674: a2 = u64 [s1 + 0xe0]\n  6678: a1 = a1 | a2\n  6681: a1 = a1 | a0\n  6684: a1 = a1 >> 0x20\n  6687: a0 = a0 | a2\n  6690: a0 = a0 << 0x20\n  6693: a0 = a0 | a1\n  6696: jump @245 if a0 == 0\n      : @244 (gas: 1)\n  6699: jump @827\n      : @245 (gas: 1)\n  6702: t0 = 192, jump @1498\n      : @246 [@dyn 96] (gas: 13)\n  6708: a0 = u64 [a4 + 0x88]\n  6712: a1 = u64 [a4 + 0x90]\n  6716: a2 = u64 [a4 + 0x98]\n  6720: a3 = u64 [a4 + 0xa0]\n  6724: a4 = s1 + 0x1078\n  6728: u64 [a4 + 0x740] = a3\n  6732: a3 = a4 + 0x700\n  6736: u64 [a3 + 0x38] = a2\n  6739: u64 [a3 + 0x30] = a1\n  6742: a1 = s1 + 0x17a0\n  6746: u64 [a3 + 0x28] = a0\n  6749: a0 = a5\n  6751: ra = 194, jump @9\n      : @247 [@dyn 97] (gas: 6)\n  6757: a0 = u64 [s1 + 0xc8]\n  6761: ra = 0xc4\n  6765: ecalli 4 // 'caller'\n  6767: a2 = u64 [s1 + 0xf0]\n  6771: t0 = 0xc6\n  6775: jump @1464\n      : @248 [@dyn 98] (gas: 2)\n  6778: a2 = u64 [s1 + 0xf0]\n  6782: t0 = 198, jump @1464\n      : @249 [@dyn 99] (gas: 49)\n  6788: t0 = a1 | a0\n  6791: a3 = a3 >> 0x20\n  6794: a2 = reverse a2\n  6796: a1 = a2 << 0x20\n  6799: a1 = a1 | a3\n  6802: a2 = a2 >> 0x20\n  6805: a3 = u64 [0x20040]\n  6810: a0 = s1 + 0x1078\n  6814: u64 [a0 + 0x720] = a3\n  6818: a3 = u64 [0x20048]\n  6823: a4 = u64 [0x20050]\n  6828: a5 = u64 [0x20058]\n  6833: u64 [a0 + 0x718] = a3\n  6837: u64 [a0 + 0x710] = a4\n  6841: u64 [a0 + 1792] = 0\n  6845: u64 [a0 + 0x708] = a5\n  6849: u64 [a0 + 0x6f8] = a2\n  6853: u64 [a0 + 0x6f0] = a1\n  6857: a1 = 0x20\n  6860: a2 = s1 + 0x1780\n  6864: a3 = s1 + 0x1760\n  6868: u64 [a0 + 0x6e8] = t0\n  6872: a0 = u64 [s1 + 0xf8]\n  6876: ra = 0xc8\n  6880: sp = sp + 0xffffffffffffff60\n  6884: u64 [sp + 0x98] = ra\n  6888: u64 [sp + 0x90] = s0\n  6892: u64 [sp + 0x88] = s1\n  6896: s0 = sp + 0xa0\n  6900: sp = sp & 0xffffffffffffffe0\n  6903: a4 = u64 [a3]\n  6905: u64 [sp + 0x38] = a4\n  6908: a4 = u64 [a3 + 0x8]\n  6911: u64 [sp + 0x30] = a4\n  6914: a4 = u64 [a3 + 0x10]\n  6917: u64 [sp + 0x28] = a4\n  6920: a3 = u64 [a3 + 0x18]\n  6923: u64 [sp + 0x20] = a3\n  6926: a3 = u64 [a2]\n  6928: u64 [sp + 0x18] = a3\n  6931: a3 = u64 [a2 + 0x8]\n  6934: u64 [sp + 0x10] = a3\n  6937: a3 = u64 [a2 + 0x10]\n  6940: u64 [sp + 0x8] = a3\n  6943: a2 = u64 [a2 + 0x18]\n  6946: u64 [sp] = a2\n  6948: s1 = a1\n  6950: ra = 0x6\n  6953: jump @20\n      : @250 [@dyn 100] (gas: 3)\n  6956: a0 = 0\n  6958: a1 = u64 [s1 + 0xc0]\n  6962: jump @1183\n      : @251 (gas: 12)\n  6965: u64 [a2 + 1312] = 0\n  6969: u64 [a2 + 1304] = 0\n  6973: u64 [a2 + 1296] = 0\n  6977: u64 [a2 + 1288] = 0\n  6981: a0 = s1 + 0x3000\n  6985: i32 a0 = a0 + 0xfffffffffffffd80\n  6989: ra = 0xca\n  6993: ecalli 17 // 'value_transferred'\n  6995: a3 = s1 + 0x2878\n  6999: a4 = a3 + 0x500\n  7003: t0 = 0xcc\n  7007: jump @1475\n      : @252 [@dyn 101] (gas: 3)\n  7010: a3 = s1 + 0x2878\n  7014: a4 = a3 + 0x500\n  7018: t0 = 204, jump @1475\n      : @253 [@dyn 102] (gas: 1)\n  7024: jump @255 if a0 == 0\n      : @254 (gas: 1)\n  7027: jump @934\n      : @255 (gas: 3)\n  7030: a0 = u64 [s1 + 0xf8]\n  7034: a0 = i32 [a0]\n  7036: jump @257 if a0 >u 35\n      : @256 (gas: 1)\n  7040: jump @934\n      : @257 (gas: 5)\n  7043: a0 = s1 + 0x3000\n  7047: i32 a0 = a0 + 0xfffffffffffffda0\n  7051: a1 = 0x4\n  7054: ecalli 2 // 'call_data_load'\n  7056: fallthrough\n      : @258 (gas: 14)\n  7057: a0 = s1 + 0x2878\n  7061: a5 = a0 + 0x500\n  7065: a1 = u64 [a5 + 0x40]\n  7068: a2 = u64 [a5 + 0x38]\n  7071: a3 = u64 [a5 + 0x30]\n  7074: a4 = u64 [a5 + 0x28]\n  7077: u64 [s1 + 0x58] = a1\n  7080: u64 [s1 + 0x48] = a3\n  7083: a0 = a3 | a1\n  7086: u64 [s1 + 0x50] = a2\n  7089: u64 [s1 + 0x40] = a4\n  7092: a1 = a4 | a2\n  7095: a0 = a0 | a1\n  7098: jump @260 if a0 != 0\n      : @259 (gas: 1)\n  7101: jump @858\n      : @260 (gas: 10)\n  7104: a0 = 0xffffffff\n  7114: u64 [s1 + 0x60] = a0\n  7117: a0 = 0x30160\n  7122: u64 [s1 + 0x80] = a0\n  7126: i32 a0 = a0 + 0\n  7128: u64 [s1 + 0x38] = a0\n  7131: ra = 0xce\n  7135: ecalli 4 // 'caller'\n  7137: t0 = 0xd0\n  7141: jump @1449\n      : @261 [@dyn 103] (gas: 1)\n  7144: t0 = 208, jump @1449\n      : @262 [@dyn 104] (gas: 8)\n  7150: u64 [a2 + 864] = 0\n  7154: a4 = a2 + 0x300\n  7158: u64 [a4 + 0x58] = a1\n  7161: u64 [a4 + 0x50] = a0\n  7164: a1 = s1 + 0x23c0\n  7168: u64 [a4 + 0x48] = a3\n  7171: a0 = 0\n  7173: ra = 210, jump @9\n      : @263 [@dyn 105] (gas: 3)\n  7179: t0 = 0xd4\n  7183: a2 = s1 + 0x2078\n  7187: fallthrough\n      : @264 [@dyn 106] (gas: 7)\n  7188: u64 [a2 + 832] = 0\n  7192: u64 [a2 + 824] = 0\n  7196: u64 [a2 + 808] = 0x4\n  7201: a0 = 0x20\n  7204: a1 = s1 + 0x23a0\n  7208: u64 [a2 + 816] = 0\n  7212: ra = 214, jump @9\n      : @265 [@dyn 107] (gas: 7)\n  7218: a0 = sp + 0xffffffffffffffe0\n  7221: a0 = a0 & 0xffffffffffffffe0\n  7224: u64 [s1 + 0xf8] = a0\n  7228: sp = a0\n  7230: a1 = 0x40\n  7233: a0 = 0\n  7235: ra = 216, jump @20\n      : @266 [@dyn 108] (gas: 1)\n  7241: t0 = 218, jump @1502\n      : @267 [@dyn 109] (gas: 5)\n  7247: ra = 0xdc\n  7251: ecalli 9 // 'hash_keccak_256'\n  7253: a3 = u64 [s1 + 0xf0]\n  7257: t0 = 0xde\n  7261: jump @1469\n      : @268 [@dyn 110] (gas: 2)\n  7264: a3 = u64 [s1 + 0xf0]\n  7268: t0 = 222, jump @1469\n      : @269 [@dyn 111] (gas: 7)\n  7274: a1 = u64 [s1 + 0xf8]\n  7278: u64 [a1 + 0x18] = a3\n  7281: u64 [a1 + 0x10] = a2\n  7284: u64 [a1 + 0x8] = a4\n  7287: u64 [a1] = a0\n  7289: a0 = s1 + 0x2380\n  7293: ra = 224, jump @11\n      : @270 [@dyn 112] (gas: 4)\n  7299: a0 = s1 + 0x2078\n  7303: a2 = u32 [a0 + 0x308]\n  7307: a0 = u64 [s1 + 0x60]\n  7310: jump @272 if a2 != a0\n      : @271 (gas: 1)\n  7313: jump @860\n      : @272 (gas: 11)\n  7316: a1 = a2 + 0x1\n  7319: u64 [s1 + 0x70] = a1\n  7322: a0 = a1 <u 0x1\n  7325: u64 [s1 + 0x68] = a0\n  7328: a0 = a0 | a1\n  7331: a0 = a0 <u 0x1\n  7334: u64 [s1 + 0x78] = a0\n  7337: a0 = s1 + 0x2360\n  7341: u64 [s1 + 0xf0] = a2\n  7345: a1 = u64 [s1 + 0xf8]\n  7349: ra = 226, jump @11\n      : @273 [@dyn 113] (gas: 21)\n  7355: a3 = s1 + 0x2078\n  7359: a0 = u32 [a3 + 0x2ec]\n  7363: a1 = u64 [a3 + 0x2f8]\n  7367: a0 = a0 << 0x20\n  7370: a2 = u64 [a3 + 0x2f0]\n  7374: a3 = u64 [a3 + 0x300]\n  7378: a4 = u64 [s1 + 0x78]\n  7381: a1 = a1 | a4\n  7384: a4 = u64 [s1 + 0x70]\n  7387: a0 = a0 | a4\n  7390: a4 = u64 [s1 + 0x68]\n  7393: a2 = a2 | a4\n  7396: a4 = s1 + 0x2878\n  7400: a5 = a4 + 0x500\n  7404: u64 [a5 + 0x60] = a3\n  7407: u64 [a5 + 0x50] = a2\n  7410: u64 [a5 + 0x48] = a0\n  7413: u64 [a5 + 0x58] = a1\n  7416: a1 = s1 + 0x2dc0\n  7420: a0 = u64 [s1 + 0xf8]\n  7424: ra = 228, jump @12\n      : @274 [@dyn 114] (gas: 2)\n  7430: a1 = u64 [s1 + 0xf0]\n  7434: jump @276 if a1 <=u 254\n      : @275 (gas: 1)\n  7439: jump @863\n      : @276 (gas: 4)\n  7442: a0 = s1 + 0x3000\n  7446: i32 a0 = a0 + 0xfffffffffffffde0\n  7450: ecalli 10 // 'now'\n  7452: fallthrough\n      : @277 (gas: 49)\n  7453: a0 = s1 + 0x2878\n  7457: t2 = u64 [a0 + 0x580]\n  7461: a3 = u64 [a0 + 0x578]\n  7465: u64 [s1 + 0xb8] = a3\n  7469: t0 = u64 [a0 + 0x570]\n  7473: ra = u64 [a0 + 0x568]\n  7477: a0 = clz t2\n  7479: a1 = clz a3\n  7481: a2 = a1 + 0x40\n  7484: a2 = a0 if t2 != 0\n  7487: a0 = clz t0\n  7489: a1 = clz ra\n  7491: a1 = a1 + 0x40\n  7494: a1 = a0 if t0 != 0\n  7497: a0 = a1 + 0x80\n  7501: a3 = a3 | t2\n  7504: a2 = a0 if a3 == 0\n  7507: a5 = a0 <u a1\n  7510: a5 = 0 if a3 != 0\n  7512: a4 = a5 >u 0\n  7514: a0 = a2 <u 0xf0\n  7518: a3 = a0 ^ 0x1\n  7521: a4 = a3 if a5 == 0\n  7524: a0 = a4 <u 0x1\n  7527: a0 = a0 + 0xffffffffffffffff\n  7530: a1 = -a4\n  7532: a5 = -a5\n  7534: a3 = a5 - a3\n  7537: t1 = 0xef - a2\n  7541: u64 [s1 + 0xf8] = a1\n  7545: a5 = a1 >u 0\n  7547: a1 = a0 >u 0\n  7549: a1 = a5 if a0 == 0\n  7552: a5 = t1 <u 0x100\n  7556: a5 = a5 ^ 0x1\n  7559: a2 = a3 >u 0\n  7561: a5 = a2 if a3 != 0\n  7564: a5 = a1 if a4 != 0\n  7567: u64 [s1 + 0xa0] = t2\n  7571: a1 = t0 | t2\n  7574: t2 = t0\n  7576: a4 = u64 [s1 + 0xb8]\n  7580: a2 = ra | a4\n  7583: a1 = a1 | a2\n  7586: a1 = a1 <u 0x1\n  7589: a1 = a1 | a5\n  7592: t0 = ra\n  7594: ra = 0 if a1 != 0\n  7596: jump @279 if a1 == 0\n      : @278 (gas: 1)\n  7599: jump @720\n      : @279 (gas: 6)\n  7602: a1 = t1 ^ 0xff\n  7606: a5 = u64 [s1 + 0xf8]\n  7610: a1 = a1 | a5\n  7613: a2 = a3 | a0\n  7616: a1 = a1 | a2\n  7619: jump @281 if a1 != 0\n      : @280 (gas: 1)\n  7622: jump @720\n      : @281 (gas: 20)\n  7625: a2 = t1 + 0x1\n  7628: u64 [s1 + 0xf0] = a2\n  7632: a1 = a2 <u 0x1\n  7635: a1 = a1 + a3\n  7638: u64 [s1 + 0xe0] = a1\n  7642: a1 = a1 | a2\n  7645: a1 = a1 <u 0x1\n  7648: a1 = a1 + a5\n  7651: u64 [s1 + 0xd0] = a1\n  7655: a1 = a1 <u a5\n  7658: a0 = a0 + a1\n  7661: u64 [s1 + 0xd8] = a0\n  7665: a1 = 0xff - t1\n  7669: u64 [s1 + 0xc8] = a1\n  7673: a2 = 0x80 - a1\n  7677: a0 = t0\n  7679: u64 [s1 + 0xb0] = t0\n  7683: a1 = t2\n  7685: u64 [s1 + 0xa8] = t2\n  7689: ra = 230, jump @1504\n      : @282 [@dyn 115] (gas: 6)\n  7695: u64 [s1 + 0xc0] = a0\n  7699: u64 [s1 + 0xf8] = a1\n  7703: a0 = u64 [s1 + 0xb8]\n  7707: a1 = u64 [s1 + 0xa0]\n  7711: a2 = u64 [s1 + 0xc8]\n  7715: ra = 232, jump @1509\n      : @283 [@dyn 116] (gas: 7)\n  7721: u64 [s1 + 0x90] = a0\n  7725: u64 [s1 + 0x88] = a1\n  7729: a0 = u64 [s1 + 0xc8]\n  7733: a2 = a0 + 0xffffffffffffff80\n  7736: a0 = u64 [s1 + 0xb0]\n  7740: a1 = u64 [s1 + 0xa8]\n  7744: ra = 234, jump @1509\n      : @284 [@dyn 117] (gas: 8)\n  7750: u64 [s1 + 0x30] = a0\n  7753: u64 [s1 + 0x28] = a1\n  7756: a2 = u64 [s1 + 0xc8]\n  7760: a0 = a2 <u 0x80\n  7764: u64 [s1 + 0x98] = a0\n  7768: a0 = u64 [s1 + 0xb0]\n  7772: a1 = u64 [s1 + 0xa8]\n  7776: ra = 236, jump @1509\n      : @285 [@dyn 118] (gas: 11)\n  7782: a4 = u64 [s1 + 0x98]\n  7786: t0 = u64 [s1 + 0xd0]\n  7790: a5 = u64 [s1 + 0xd8]\n  7794: a2 = u64 [s1 + 0xe0]\n  7798: a5 = a5 | a2\n  7801: a3 = u64 [s1 + 0xf0]\n  7805: a3 = a3 | t0\n  7808: a3 = a3 | a5\n  7811: a0 = 0 if a4 == 0\n  7813: u64 [s1 + 0xe8] = a0\n  7817: jump @287 if a3 == 0\n      : @286 (gas: 1)\n  7820: jump @711\n      : @287 (gas: 2)\n  7823: a5 = 0\n  7825: jump @719\n      : @288 (gas: 9)\n  7828: u64 [a3 + 1760] = 0\n  7832: u64 [a3 + 1752] = 0\n  7836: u64 [a3 + 1744] = 0\n  7840: u64 [a3 + 1736] = 0\n  7844: a0 = s1 + 0x2000\n  7848: i32 a0 = a0 + 0x740\n  7852: ra = 0xee\n  7856: ecalli 17 // 'value_transferred'\n  7858: fallthrough\n      : @289 [@dyn 119] (gas: 3)\n  7859: a3 = s1 + 0x2078\n  7863: a4 = a3 + 0x600\n  7867: t0 = 240, jump @1482\n      : @290 [@dyn 120] (gas: 1)\n  7873: jump @292 if a0 == 0\n      : @291 (gas: 1)\n  7876: jump @865\n      : @292 (gas: 3)\n  7879: a0 = u64 [s1 + 0xf8]\n  7883: a0 = i32 [a0]\n  7885: jump @294 if a0 >u 3\n      : @293 (gas: 1)\n  7889: jump @866\n      : @294 (gas: 9)\n  7892: a0 = s1 + 0x2078\n  7896: u64 [a0 + 1792] = 0\n  7900: u64 [a0 + 1784] = 0\n  7904: u64 [a0 + 1776] = 0\n  7908: u64 [a0 + 1768] = 0\n  7912: a0 = s1 + 0x7ff\n  7916: a0 = a0 + 0x261\n  7920: a1 = s1 + 0x2760\n  7924: ra = 242, jump @11\n      : @295 [@dyn 121] (gas: 13)\n  7930: a1 = s1 + 0x7ff\n  7934: a1 = a1 + 0x79\n  7937: a2 = a1 + 0x100\n  7941: a0 = u64 [a2 + 0xf8]\n  7945: u64 [s1 + 0xe8] = a0\n  7949: a0 = u64 [a2 + 0xf0]\n  7953: u64 [s1 + 0xf8] = a0\n  7957: a0 = u64 [a2 + 0xe8]\n  7961: u64 [s1 + 0xf0] = a0\n  7965: a0 = s1 + 0x7ff\n  7969: a0 = a0 + 0x241\n  7973: a1 = 0x40\n  7976: ra = 244, jump @7\n      : @296 [@dyn 122] (gas: 8)\n  7982: a3 = s1 + 0x7ff\n  7986: a3 = a3 + 0x79\n  7989: a5 = a3 + 0x100\n  7993: a4 = u64 [a5 + 0xe0]\n  7997: a1 = u64 [a5 + 0xd8]\n  8001: a2 = u64 [a5 + 0xd0]\n  8005: a0 = u64 [a5 + 0xc8]\n  8009: t0 = 246, jump @1476\n      : @297 [@dyn 123] (gas: 1)\n  8015: jump @299 if a1 == 0\n      : @298 (gas: 1)\n  8018: jump @827\n      : @299 (gas: 15)\n  8021: a1 = u64 [s1 + 0xe8]\n  8025: a1 = a1 << 0x20\n  8028: a2 = a1 >> 0x20\n  8031: u64 [a3 + 448] = 0\n  8035: a1 = u64 [s1 + 0xf0]\n  8039: a4 = a3 + 0x100\n  8043: u64 [a4 + 0xa8] = a1\n  8047: a1 = u64 [s1 + 0xf8]\n  8051: u64 [a4 + 0xb0] = a1\n  8055: a1 = s1 + 0x7ff\n  8059: a1 = a1 + 0x221\n  8063: u64 [a4 + 0xb8] = a2\n  8067: u64 [s1 + 0xf8] = a0\n  8071: ra = 0x196\n  8075: jump @9\n      : @300 (gas: 10)\n  8078: a0 = s1 + 0x2878\n  8082: u64 [a0 + 96] = 0\n  8085: u64 [a0 + 88] = 0\n  8088: u64 [a0 + 80] = 0\n  8091: u64 [a0 + 72] = 0\n  8094: a0 = s1 + 0x3000\n  8098: i32 a0 = a0 + 0xfffffffffffff8c0\n  8102: ecalli 17 // 'value_transferred'\n  8104: a3 = s1 + 0x2878\n  8108: fallthrough\n      : @301 (gas: 8)\n  8109: a0 = u64 [a3 + 0x58]\n  8112: a1 = u64 [a3 + 0x60]\n  8115: a2 = u64 [a3 + 0x50]\n  8118: a3 = u64 [a3 + 0x48]\n  8121: a1 = a1 | a2\n  8124: a0 = a0 | a3\n  8127: a0 = a0 | a1\n  8130: jump @303 if a0 == 0\n      : @302 (gas: 1)\n  8133: jump @867\n      : @303 (gas: 3)\n  8136: a0 = u64 [s1 + 0xf8]\n  8140: a0 = i32 [a0]\n  8142: jump @305 if a0 >u 3\n      : @304 (gas: 1)\n  8146: jump @868\n      : @305 (gas: 9)\n  8149: a1 = s1 + 0x2878\n  8153: u64 [a1 + 128] = 0\n  8157: u64 [a1 + 120] = 0\n  8160: u64 [a1 + 112] = 0\n  8163: u64 [a1 + 104] = 0x1\n  8167: a0 = s1 + 0x7ff\n  8171: a0 = a0 + 0x621\n  8175: a1 = s1 + 0x28e0\n  8179: ra = 248, jump @11\n      : @306 [@dyn 124] (gas: 13)\n  8185: a1 = s1 + 0x7ff\n  8189: a1 = a1 + 0x79\n  8192: a2 = a1 + 0x500\n  8196: a0 = u64 [a2 + 0xb8]\n  8200: u64 [s1 + 0xe8] = a0\n  8204: a0 = u64 [a2 + 0xb0]\n  8208: u64 [s1 + 0xf8] = a0\n  8212: a0 = u64 [a2 + 0xa8]\n  8216: u64 [s1 + 0xf0] = a0\n  8220: a0 = s1 + 0x7ff\n  8224: a0 = a0 + 0x601\n  8228: a1 = 0x40\n  8231: ra = 250, jump @7\n      : @307 [@dyn 125] (gas: 8)\n  8237: a3 = s1 + 0x7ff\n  8241: a3 = a3 + 0x79\n  8244: a5 = a3 + 0x500\n  8248: a4 = u64 [a5 + 0xa0]\n  8252: a1 = u64 [a5 + 0x98]\n  8256: a2 = u64 [a5 + 0x90]\n  8260: a0 = u64 [a5 + 0x88]\n  8264: t0 = 252, jump @1476\n      : @308 [@dyn 126] (gas: 1)\n  8270: jump @310 if a1 == 0\n      : @309 (gas: 1)\n  8273: jump @827\n      : @310 (gas: 15)\n  8276: a1 = u64 [s1 + 0xe8]\n  8280: a1 = a1 << 0x20\n  8283: a2 = a1 >> 0x20\n  8286: u64 [a3 + 1408] = 0\n  8290: a1 = u64 [s1 + 0xf0]\n  8294: a4 = a3 + 0x500\n  8298: u64 [a4 + 0x68] = a1\n  8301: a1 = u64 [s1 + 0xf8]\n  8305: u64 [a4 + 0x70] = a1\n  8308: a1 = s1 + 0x7ff\n  8312: a1 = a1 + 0x5e1\n  8316: u64 [a4 + 0x78] = a2\n  8319: u64 [s1 + 0xf8] = a0\n  8323: ra = 0x196\n  8327: jump @9\n      : @311 (gas: 9)\n  8330: u64 [a3 + 1728] = 0\n  8334: u64 [a3 + 1720] = 0\n  8338: u64 [a3 + 1712] = 0\n  8342: u64 [a3 + 1704] = 0\n  8346: a0 = s1 + 0x2000\n  8350: i32 a0 = a0 + 0x720\n  8354: ra = 0xfe\n  8358: ecalli 17 // 'value_transferred'\n  8360: fallthrough\n      : @312 [@dyn 127] (gas: 3)\n  8361: a3 = s1 + 0x2078\n  8365: a4 = a3 + 0x600\n  8369: t0 = 256, jump @1500\n      : @313 [@dyn 128] (gas: 1)\n  8375: jump @315 if a0 == 0\n      : @314 (gas: 1)\n  8378: jump @869\n      : @315 (gas: 3)\n  8381: a0 = u64 [s1 + 0xf8]\n  8385: a0 = i32 [a0]\n  8387: jump @317 if a0 >u 3\n      : @316 (gas: 1)\n  8391: jump @870\n      : @317 (gas: 4)\n  8394: a0 = s1 + 0x7ff\n  8398: a0 = a0 + 0x201\n  8402: a1 = 0x40\n  8405: ra = 258, jump @7\n      : @318 [@dyn 129] (gas: 8)\n  8411: a3 = s1 + 0x7ff\n  8415: a3 = a3 + 0x79\n  8418: a5 = a3 + 0x100\n  8422: a4 = u64 [a5 + 0xa0]\n  8426: a1 = u64 [a5 + 0x98]\n  8430: a2 = u64 [a5 + 0x90]\n  8434: a0 = u64 [a5 + 0x88]\n  8438: t0 = 260, jump @1476\n      : @319 [@dyn 130] (gas: 1)\n  8444: jump @321 if a1 == 0\n      : @320 (gas: 1)\n  8447: jump @827\n      : @321 (gas: 10)\n  8450: a1 = u64 [0x200a0]\n  8455: u64 [a3 + 384] = 0\n  8459: u64 [a3 + 376] = 0\n  8463: u64 [a3 + 0x168] = a1\n  8467: a1 = s1 + 0x7ff\n  8471: a1 = a1 + 0x1e1\n  8475: u64 [a3 + 368] = 0\n  8479: u64 [s1 + 0xf8] = a0\n  8483: ra = 0x196\n  8487: jump @9\n      : @322 (gas: 10)\n  8490: u64 [a3 + 1248] = 0\n  8494: u64 [a3 + 1240] = 0\n  8498: u64 [a3 + 1232] = 0\n  8502: u64 [a3 + 1224] = 0\n  8506: a0 = s1 + 0x2000\n  8510: i32 a0 = a0 + 0x540\n  8514: ra = 0x106\n  8518: ecalli 17 // 'value_transferred'\n  8520: t0 = 0x108\n  8524: jump @1496\n      : @323 [@dyn 131] (gas: 1)\n  8527: t0 = 264, jump @1496\n      : @324 [@dyn 132] (gas: 1)\n  8533: t0 = 266, jump @1482\n      : @325 [@dyn 133] (gas: 1)\n  8539: jump @327 if a0 == 0\n      : @326 (gas: 1)\n  8542: jump @871\n      : @327 (gas: 3)\n  8545: a0 = u64 [s1 + 0xf8]\n  8549: a0 = i32 [a0]\n  8551: jump @329 if a0 >u 3\n      : @328 (gas: 1)\n  8555: jump @872\n      : @329 (gas: 16)\n  8558: a0 = s1 + 0x2000\n  8562: i32 a0 = a0 + 0x560\n  8566: ecalli 10 // 'now'\n  8568: a0 = s1 + 0x2078\n  8572: a1 = u64 [a0 + 0x500]\n  8576: u64 [s1 + 0xb8] = a1\n  8580: a2 = a0 + 0x400\n  8584: a1 = u64 [a2 + 0xf8]\n  8588: u64 [s1 + 0xb0] = a1\n  8592: a1 = u64 [a2 + 0xf0]\n  8596: u64 [s1 + 0xf8] = a1\n  8600: a0 = u64 [a2 + 0xe8]\n  8604: u64 [s1 + 0xf0] = a0\n  8608: a0 = s1 + 0x340\n  8612: a1 = 0x40\n  8615: ra = 268, jump @7\n      : @330 [@dyn 134] (gas: 6)\n  8621: a4 = s1 + 0x300\n  8625: a0 = u64 [a4 + 0x58]\n  8628: a1 = u64 [a4 + 0x50]\n  8631: a2 = u64 [a4 + 0x48]\n  8634: a3 = u64 [a4 + 0x40]\n  8637: t0 = 270, jump @1459\n      : @331 [@dyn 135] (gas: 1)\n  8643: jump @333 if a0 == 0\n      : @332 (gas: 1)\n  8646: jump @827\n      : @333 (gas: 46)\n  8649: u64 [s1 + 0x78] = a3\n  8652: t1 = u64 [s1 + 0xb0]\n  8656: a0 = clz t1\n  8658: a0 = a0 + 0x40\n  8661: ra = u64 [s1 + 0xb8]\n  8665: a2 = clz ra\n  8667: a2 = a0 if ra == 0\n  8670: t2 = u64 [s1 + 0xf0]\n  8674: a0 = clz t2\n  8676: a0 = a0 + 0x40\n  8679: t0 = u64 [s1 + 0xf8]\n  8683: a1 = clz t0\n  8685: a1 = a0 if t0 == 0\n  8688: a0 = a1 + 0x80\n  8692: a3 = t1 | ra\n  8695: a2 = a0 if a3 == 0\n  8698: a5 = a0 <u a1\n  8701: a5 = 0 if a3 != 0\n  8703: a4 = a5 >u 0\n  8705: a0 = a2 <u 0xf0\n  8709: a3 = a0 ^ 0x1\n  8712: a4 = a3 if a5 == 0\n  8715: a0 = a4 <u 0x1\n  8718: a0 = a0 + 0xffffffffffffffff\n  8721: a1 = -a4\n  8723: a5 = -a5\n  8725: a3 = a5 - a3\n  8728: a2 = 0xef - a2\n  8732: u64 [s1 + 0xd8] = a1\n  8736: a5 = a1 >u 0\n  8738: a1 = a0 >u 0\n  8740: a1 = a5 if a0 == 0\n  8743: a5 = a3 >u 0\n  8745: u64 [s1 + 0xc8] = a2\n  8749: a2 = a2 <u 0x100\n  8753: a2 = a2 ^ 0x1\n  8756: a2 = a5 if a3 != 0\n  8759: a2 = a1 if a4 != 0\n  8762: a1 = t2 | t1\n  8765: a4 = t0 | ra\n  8768: a1 = a1 | a4\n  8771: a1 = a1 <u 0x1\n  8774: a1 = a1 | a2\n  8777: a4 = t2\n  8779: a4 = 0 if a1 != 0\n  8781: jump @335 if a1 == 0\n      : @334 (gas: 1)\n  8784: jump @920\n      : @335 (gas: 7)\n  8787: a1 = u64 [s1 + 0xc8]\n  8791: a1 = a1 ^ 0xff\n  8795: a2 = u64 [s1 + 0xd8]\n  8799: a1 = a1 | a2\n  8802: a2 = a3 | a0\n  8805: a1 = a1 | a2\n  8808: jump @337 if a1 != 0\n      : @336 (gas: 1)\n  8811: jump @920\n      : @337 (gas: 20)\n  8814: a4 = u64 [s1 + 0xc8]\n  8818: a2 = a4 + 0x1\n  8821: u64 [s1 + 0xe8] = a2\n  8825: a1 = a2 <u 0x1\n  8828: a1 = a1 + a3\n  8831: u64 [s1 + 0xe0] = a1\n  8835: a1 = a1 | a2\n  8838: a1 = a1 <u 0x1\n  8841: a3 = u64 [s1 + 0xd8]\n  8845: a1 = a1 + a3\n  8848: u64 [s1 + 0xd0] = a1\n  8852: a1 = a1 <u a3\n  8855: a0 = a0 + a1\n  8858: u64 [s1 + 0xd8] = a0\n  8862: a1 = 0xff - a4\n  8866: u64 [s1 + 0xa0] = a1\n  8870: a2 = 0x80 - a1\n  8874: a0 = u64 [s1 + 0xf0]\n  8878: a1 = u64 [s1 + 0xf8]\n  8882: ra = 272, jump @1504\n      : @338 [@dyn 136] (gas: 6)\n  8888: u64 [s1 + 0x90] = a0\n  8892: u64 [s1 + 0xa8] = a1\n  8896: a0 = u64 [s1 + 0xb0]\n  8900: a1 = u64 [s1 + 0xb8]\n  8904: a2 = u64 [s1 + 0xa0]\n  8908: ra = 274, jump @1509\n      : @339 [@dyn 137] (gas: 7)\n  8914: u64 [s1 + 0x88] = a0\n  8918: u64 [s1 + 0x80] = a1\n  8922: a0 = u64 [s1 + 0xa0]\n  8926: a2 = a0 + 0xffffffffffffff80\n  8929: a0 = u64 [s1 + 0xf0]\n  8933: a1 = u64 [s1 + 0xf8]\n  8937: ra = 276, jump @1509\n      : @340 [@dyn 138] (gas: 8)\n  8943: u64 [s1 + 0x70] = a0\n  8946: u64 [s1 + 0x68] = a1\n  8949: a2 = u64 [s1 + 0xa0]\n  8953: a0 = a2 <u 0x80\n  8957: u64 [s1 + 0x98] = a0\n  8961: a0 = u64 [s1 + 0xf0]\n  8965: a1 = u64 [s1 + 0xf8]\n  8969: ra = 278, jump @1509\n      : @341 [@dyn 139] (gas: 12)\n  8975: u64 [s1 + 0xc0] = a1\n  8979: a1 = u64 [s1 + 0xe0]\n  8983: a2 = u64 [s1 + 0xd8]\n  8987: a2 = a2 | a1\n  8990: a1 = u64 [s1 + 0xe8]\n  8994: a3 = u64 [s1 + 0xd0]\n  8998: a1 = a1 | a3\n  9001: a1 = a1 | a2\n  9004: a3 = u64 [s1 + 0x98]\n  9008: a0 = 0 if a3 == 0\n  9010: u64 [s1 + 0xc8] = a0\n  9014: jump @343 if a1 != 0\n      : @342 (gas: 1)\n  9017: jump @918\n      : @343 (gas: 30)\n  9020: a2 = a3\n  9022: a0 = u64 [s1 + 0xa8]\n  9026: a1 = u64 [s1 + 0x80]\n  9030: a0 = a0 | a1\n  9033: a5 = a3\n  9035: a1 = u64 [s1 + 0x68]\n  9038: a0 = a1 if a2 == 0\n  9041: a2 = u64 [s1 + 0xb8]\n  9045: a3 = a2\n  9047: a1 = a2\n  9049: a2 = u64 [s1 + 0xa0]\n  9053: a3 = a0 if a2 != 0\n  9056: u64 [s1 + 0xa8] = a3\n  9060: a0 = u64 [s1 + 0x90]\n  9064: a3 = u64 [s1 + 0x88]\n  9068: a0 = a0 | a3\n  9071: a3 = u64 [s1 + 0x70]\n  9074: a0 = a3 if a5 == 0\n  9077: a4 = u64 [s1 + 0xb0]\n  9081: a3 = a4\n  9083: a3 = a0 if a2 != 0\n  9086: u64 [s1 + 0xa0] = a3\n  9090: a0 = u64 [s1 + 0xc0]\n  9094: a0 = 0 if a5 == 0\n  9096: u64 [s1 + 0xc0] = a0\n  9100: u64 [s1 + 144] = 0x15180\n  9107: a0 = u64 [s1 + 0xe8]\n  9111: a2 = a0 + 0xffffffffffffff80\n  9114: a0 = a4\n  9116: ra = 280, jump @1504\n      : @344 [@dyn 140] (gas: 6)\n  9122: u64 [s1 + 0x98] = a0\n  9126: u64 [s1 + 0x80] = a1\n  9130: a0 = u64 [s1 + 0xf0]\n  9134: a1 = u64 [s1 + 0xf8]\n  9138: a2 = u64 [s1 + 0xe8]\n  9142: ra = 282, jump @1504\n      : @345 [@dyn 141] (gas: 7)\n  9148: u64 [s1 + 0x70] = a0\n  9151: u64 [s1 + 0x88] = a1\n  9155: a1 = u64 [s1 + 0xe8]\n  9159: a2 = 0x80 - a1\n  9163: a0 = u64 [s1 + 0xb0]\n  9167: a1 = u64 [s1 + 0xb8]\n  9171: ra = 284, jump @1509\n      : @346 [@dyn 142] (gas: 20)\n  9177: a2 = u64 [s1 + 0x88]\n  9181: a1 = a1 | a2\n  9184: a2 = u64 [s1 + 0xe8]\n  9188: a3 = a2 <u 0x80\n  9192: u64 [s1 + 0x88] = a3\n  9196: a4 = u64 [s1 + 0x80]\n  9200: a1 = a4 if a3 == 0\n  9203: a4 = u64 [s1 + 0xf8]\n  9207: a4 = a1 if a2 != 0\n  9210: u64 [s1 + 0xf8] = a4\n  9214: a1 = u64 [s1 + 0x70]\n  9217: a0 = a0 | a1\n  9220: a1 = u64 [s1 + 0x98]\n  9224: a0 = a1 if a3 == 0\n  9227: a1 = u64 [s1 + 0xf0]\n  9231: a1 = a0 if a2 != 0\n  9234: u64 [s1 + 0xf0] = a1\n  9238: a0 = u64 [s1 + 0xb0]\n  9242: a1 = u64 [s1 + 0xb8]\n  9246: ra = 286, jump @1504\n      : @347 [@dyn 143] (gas: 15)\n  9252: t2 = u64 [s1 + 0xf0]\n  9256: t1 = u64 [s1 + 0xf8]\n  9260: u64 [s1 + 184] = 0\n  9264: u64 [s1 + 176] = 0\n  9268: a2 = u64 [s1 + 0x88]\n  9272: a1 = 0 if a2 == 0\n  9274: a0 = 0 if a2 == 0\n  9276: u64 [s1 + 0x98] = a0\n  9280: a3 = u64 [s1 + 0x90]\n  9284: a2 = a3 + 0xffffffffffffffff\n  9287: u64 [s1 + 0x88] = a2\n  9291: a2 = a3 >u 0\n  9293: a2 = a2 + 0xffffffffffffffff\n  9296: u64 [s1 + 0x80] = a2\n  9300: fallthrough\n      : @348 (gas: 88)\n  9301: a2 = t2 >> 0x3f\n  9304: a3 = t1 << 0x1\n  9307: a2 = a2 | a3\n  9310: a3 = t2 << 0x1\n  9313: t2 = u64 [s1 + 0xa8]\n  9317: a4 = t2 >> 0x3f\n  9320: a3 = a3 | a4\n  9323: u64 [s1 + 0xf8] = a3\n  9327: ra = u64 [s1 + 0x80]\n  9331: a0 = t1\n  9333: t1 = ra ^ a2\n  9336: t0 = ra <u a2\n  9339: a4 = u64 [s1 + 0x88]\n  9343: a5 = a4 <u a3\n  9346: a5 = t0 if t1 != 0\n  9349: a1 = a1 << 0x1\n  9352: a4 = u64 [s1 + 0x98]\n  9356: a3 = a4 >> 0x3f\n  9359: a1 = a1 | a3\n  9362: u64 [s1 + 0xf0] = a1\n  9366: a3 = a0 >> 0x3f\n  9369: a0 = a4 << 0x1\n  9372: a3 = a3 | a0\n  9375: a0 = t2 << 0x1\n  9378: a4 = u64 [s1 + 0xa0]\n  9382: a1 = a4 >> 0x3f\n  9385: t0 = a0 | a1\n  9388: a1 = a4 << 0x1\n  9391: a4 = u64 [s1 + 0xc0]\n  9395: t1 = a4 >> 0x3f\n  9398: t1 = a1 | t1\n  9401: a1 = a4 << 0x1\n  9404: a4 = u64 [s1 + 0xc8]\n  9408: t2 = a4 >> 0x3f\n  9411: a1 = a1 | t2\n  9414: a4 = a4 << 0x1\n  9417: a0 = u64 [s1 + 0xb8]\n  9421: a4 = a4 | a0\n  9424: u64 [s1 + 0xc8] = a4\n  9428: a0 = u64 [s1 + 0xb0]\n  9432: a1 = a1 | a0\n  9435: u64 [s1 + 0xc0] = a1\n  9439: a1 = a0 | t1\n  9442: u64 [s1 + 0xa0] = a1\n  9446: a0 = a0 | t0\n  9449: u64 [s1 + 0xa8] = a0\n  9453: a0 = ra - a3\n  9456: a0 = a0 <u a5\n  9459: a1 = ra <u a3\n  9462: a5 = u64 [s1 + 0xf0]\n  9466: a4 = ra - a5\n  9469: a4 = a4 - a1\n  9472: a4 = a4 - a0\n  9475: ra = a4 >>a 0x3f\n  9478: a0 = u64 [s1 + 0x90]\n  9482: a0 = ra & a0\n  9485: a1 = u64 [s1 + 0xf8]\n  9489: t2 = a1 - a0\n  9492: a1 = a1 <u a0\n  9495: t1 = a2 - a1\n  9498: a1 = 0 if a2 != 0\n  9500: a0 = a3 - a1\n  9503: u64 [s1 + 0x98] = a0\n  9507: a1 = a3 <u a1\n  9510: a1 = a5 - a1\n  9513: a3 = u64 [s1 + 0xe8]\n  9517: a5 = u64 [s1 + 0xe0]\n  9521: a2 = a3 | a5\n  9524: a2 = a2 <u 0x1\n  9527: a4 = u64 [s1 + 0xd0]\n  9531: t0 = a4 <u a2\n  9534: a2 = a4 - a2\n  9537: a4 = a3 <u 0x1\n  9540: a5 = a5 - a4\n  9543: a4 = u64 [s1 + 0xd8]\n  9547: a4 = a4 - t0\n  9550: a3 = a3 + 0xffffffffffffffff\n  9553: u64 [s1 + 0xe0] = a5\n  9557: u64 [s1 + 0xd8] = a4\n  9561: t0 = a5 | a4\n  9564: u64 [s1 + 0xe8] = a3\n  9568: a4 = a3 | a2\n  9571: a3 = a4 | t0\n  9574: a4 = ra & 0x1\n  9577: u64 [s1 + 0xb8] = a4\n  9581: u64 [s1 + 0xd0] = a2\n  9585: u64 [s1 + 176] = 0\n  9589: jump @348 if a3 != 0\n      : @349 (gas: 1)\n  9593: jump @919\n      : @350 (gas: 1)\n  9596: jump @352 if a0 == 1641031603\n      : @351 (gas: 1)\n  9603: jump @873\n      : @352 (gas: 10)\n  9606: u64 [a2 + 32] = 0\n  9609: u64 [a2 + 24] = 0\n  9612: u64 [a2 + 16] = 0\n  9615: u64 [a2 + 8] = 0\n  9618: a0 = s1 + 0x3000\n  9622: i32 a0 = a0 + 0xfffffffffffff880\n  9626: ecalli 17 // 'value_transferred'\n  9628: t0 = 0x120\n  9632: a3 = s1 + 0x2878\n  9636: fallthrough\n      : @353 [@dyn 144] (gas: 8)\n  9637: a0 = u64 [a3 + 0x18]\n  9640: a1 = u64 [a3 + 0x20]\n  9643: a2 = u64 [a3 + 0x10]\n  9646: a3 = u64 [a3 + 0x8]\n  9649: a1 = a1 | a2\n  9652: a0 = a0 | a3\n  9655: a0 = a0 | a1\n  9658: jump @355 if a0 == 0\n      : @354 (gas: 1)\n  9661: jump @877\n      : @355 (gas: 3)\n  9664: a0 = u64 [s1 + 0xf8]\n  9668: a0 = i32 [a0]\n  9670: jump @357 if a0 >u 3\n      : @356 (gas: 1)\n  9674: jump @878\n      : @357 (gas: 4)\n  9677: a0 = s1 + 0x7ff\n  9681: a0 = a0 + 0x501\n  9685: a1 = 0x40\n  9688: ra = 290, jump @7\n      : @358 [@dyn 145] (gas: 12)\n  9694: a0 = s1 + 0x7ff\n  9698: a0 = a0 + 0x79\n  9701: a2 = a0 + 0x400\n  9705: a1 = u64 [a2 + 0xa0]\n  9709: u64 [s1 + 0xf8] = a1\n  9713: a1 = u64 [a2 + 0x98]\n  9717: u64 [s1 + 0xf0] = a1\n  9721: a1 = u64 [a2 + 0x90]\n  9725: u64 [s1 + 0xe0] = a1\n  9729: a0 = u64 [a2 + 0x88]\n  9733: u64 [s1 + 0xe8] = a0\n  9737: ra = 292, jump @0\n      : @359 [@dyn 146] (gas: 13)\n  9743: a0 = u64 [s1 + 0xf8]\n  9747: a1 = u64 [s1 + 0xe0]\n  9751: a0 = a0 | a1\n  9754: a1 = u64 [s1 + 0xe8]\n  9758: a3 = a1\n  9760: a2 = u64 [s1 + 0xf0]\n  9764: a1 = a1 | a2\n  9767: a1 = a1 | a0\n  9770: a1 = a1 >> 0x20\n  9773: a0 = a0 | a2\n  9776: a0 = a0 << 0x20\n  9779: a0 = a0 | a1\n  9782: jump @361 if a0 == 0\n      : @360 (gas: 1)\n  9785: jump @827\n      : @361 (gas: 14)\n  9788: a2 = u64 [0x30180]\n  9793: a1 = u64 [0x30188]\n  9798: a0 = u32 [0x30190]\n  9803: a4 = s1 + 0x7ff\n  9807: a4 = a4 + 0x79\n  9810: u64 [a4 + 1152] = 0\n  9814: a5 = a4 + 0x400\n  9818: u64 [a5 + 0x78] = a0\n  9821: u64 [a5 + 0x70] = a1\n  9824: a1 = s1 + 0x7ff\n  9828: a1 = a1 + 0x4e1\n  9832: u64 [a5 + 0x68] = a2\n  9835: a0 = a3\n  9837: ra = 294, jump @9\n      : @362 [@dyn 147] (gas: 4)\n  9843: a1 = 0x20\n  9846: a0 = u64 [s1 + 0xe8]\n  9850: ra = 0x198\n  9854: jump @20\n      : @363 (gas: 10)\n  9857: u64 [a3 + 1344] = 0\n  9861: u64 [a3 + 1336] = 0\n  9865: u64 [a3 + 1328] = 0\n  9869: u64 [a3 + 1320] = 0\n  9873: a0 = s1 + 0x2000\n  9877: i32 a0 = a0 + 0x5a0\n  9881: ra = 0x128\n  9885: ecalli 17 // 'value_transferred'\n  9887: t0 = 0x12a\n  9891: jump @1483\n      : @364 [@dyn 148] (gas: 1)\n  9894: t0 = 298, jump @1483\n      : @365 [@dyn 149] (gas: 1)\n  9900: t0 = 300, jump @1494\n      : @366 [@dyn 150] (gas: 1)\n  9906: jump @368 if a0 == 0\n      : @367 (gas: 1)\n  9909: jump @879\n      : @368 (gas: 3)\n  9912: a0 = u64 [s1 + 0xf8]\n  9916: a0 = i32 [a0]\n  9918: jump @370 if a0 >u 67\n      : @369 (gas: 1)\n  9922: jump @880\n      : @370 (gas: 4)\n  9925: a0 = s1 + 0x580\n  9929: ra = 0x12e\n  9933: t0 = 0x4de\n  9937: jump @1493\n      : @371 [@dyn 151] (gas: 10)\n  9940: a0 = u64 [s1 + 0x580]\n  9944: u64 [s1 + 0xf0] = a0\n  9948: a0 = u64 [s1 + 0x588]\n  9952: u64 [s1 + 0xe8] = a0\n  9956: a0 = u32 [s1 + 0x590]\n  9960: u64 [s1 + 0xe0] = a0\n  9964: a0 = s1 + 0x560\n  9968: ra = 0x130\n  9972: t0 = 0x4e8\n  9976: jump @1499\n      : @372 [@dyn 152] (gas: 12)\n  9979: a0 = u64 [s1 + 0x560]\n  9983: u64 [s1 + 0xf8] = a0\n  9987: u64 [s1 + 1368] = 0\n  9991: a0 = u64 [s1 + 0xe0]\n  9995: u64 [s1 + 0x550] = a0\n  9999: a0 = u64 [s1 + 0xe8]\n 10003: u64 [s1 + 0x548] = a0\n 10007: a1 = s1 + 0x540\n 10011: a0 = u64 [s1 + 0xf0]\n 10015: u64 [s1 + 0x540] = a0\n 10019: a0 = 0\n 10021: ra = 306, jump @9\n      : @373 [@dyn 153] (gas: 7)\n 10027: u64 [s1 + 1336] = 0\n 10031: u64 [s1 + 1328] = 0\n 10035: u64 [s1 + 1312] = 0x7\n 10040: a0 = 0x20\n 10043: a1 = s1 + 0x520\n 10047: u64 [s1 + 1320] = 0\n 10051: ra = 308, jump @9\n      : @374 [@dyn 154] (gas: 3)\n 10057: a1 = 0x20150\n 10062: a0 = i32 [0x20150]\n 10067: jump @376 if a0 >u 63\n      : @375 (gas: 2)\n 10071: u32 [0x20150] = 0x40\n 10077: fallthrough\n      : @376 (gas: 14)\n 10078: a0 = sp + 0xffffffffffffffe0\n 10081: a2 = a0 & 0xffffffffffffffe0\n 10084: u64 [s1 + 0xe0] = a2\n 10088: sp = a2\n 10090: a0 = 0x20160\n 10095: i32 a0 = a0 + 0\n 10097: i32 a2 = a2 + 0\n 10099: u64 [s1 + 0xf0] = a1\n 10103: a1 = 0x40\n 10106: u64 [s1 + 0xe8] = a0\n 10110: ra = 0x136\n 10114: ecalli 9 // 'hash_keccak_256'\n 10116: t0 = 0x138\n 10120: jump @1451\n      : @377 [@dyn 155] (gas: 1)\n 10123: t0 = 312, jump @1451\n      : @378 [@dyn 156] (gas: 8)\n 10129: u64 [s1 + 1304] = 0\n 10133: u64 [s1 + 1296] = 0\n 10137: u64 [s1 + 1288] = 0\n 10141: a1 = s1 + 0x500\n 10145: a0 = u64 [s1 + 0xf8]\n 10149: u64 [s1 + 0x500] = a0\n 10153: a0 = 0\n 10155: ra = 314, jump @9\n      : @379 [@dyn 157] (gas: 12)\n 10161: a0 = u64 [s1 + 0xc0]\n 10165: a3 = s1 + 0x400\n 10169: u64 [a3 + 0xf8] = a0\n 10173: a0 = u64 [s1 + 0xc8]\n 10177: u64 [a3 + 0xf0] = a0\n 10181: a0 = u64 [s1 + 0xd0]\n 10185: u64 [a3 + 0xe8] = a0\n 10189: a0 = 0x20\n 10192: a1 = s1 + 0x4e0\n 10196: a2 = u64 [s1 + 0xd8]\n 10200: u64 [a3 + 0xe0] = a2\n 10204: ra = 316, jump @9\n      : @380 [@dyn 158] (gas: 3)\n 10210: a1 = u64 [s1 + 0xf0]\n 10214: a0 = i32 [a1]\n 10216: jump @382 if a0 >u 63\n      : @381 (gas: 2)\n 10220: u32 [a1 + 0] = 0x40\n 10223: fallthrough\n      : @382 (gas: 4)\n 10224: a0 = sp + 0xffffffffffffffe0\n 10227: a0 = a0 & 0xffffffffffffffe0\n 10230: u64 [s1 + 0xf8] = a0\n 10234: t0 = 318, jump @1465\n      : @383 [@dyn 159] (gas: 4)\n 10240: ra = 0x140\n 10244: ecalli 9 // 'hash_keccak_256'\n 10246: t0 = 0x142\n 10250: jump @1454\n      : @384 [@dyn 160] (gas: 1)\n 10253: t0 = 322, jump @1454\n      : @385 [@dyn 161] (gas: 2)\n 10259: a0 = s1 + 0x4c0\n 10263: ra = 324, jump @11\n      : @386 [@dyn 162] (gas: 11)\n 10269: a0 = u64 [s1 + 0x4d8]\n 10273: u64 [s1 + 0xf8] = a0\n 10277: a0 = u64 [s1 + 0x4d0]\n 10281: u64 [s1 + 0xf0] = a0\n 10285: a0 = u64 [s1 + 0x4c8]\n 10289: u64 [s1 + 0xe8] = a0\n 10293: a0 = u64 [s1 + 0x4c0]\n 10297: u64 [s1 + 0xe0] = a0\n 10301: a0 = s1 + 0x4a0\n 10305: a1 = 0x40\n 10308: ra = 326, jump @7\n      : @387 [@dyn 163] (gas: 6)\n 10314: a4 = s1 + 0x400\n 10318: a0 = u64 [a4 + 0xb8]\n 10322: a1 = u64 [a4 + 0xb0]\n 10326: a2 = u64 [a4 + 0xa8]\n 10330: a3 = u64 [a4 + 0xa0]\n 10334: t0 = 328, jump @1459\n      : @388 [@dyn 164] (gas: 1)\n 10340: jump @390 if a0 == 0\n      : @389 (gas: 1)\n 10343: jump @827\n      : @390 (gas: 14)\n 10346: a0 = u64 [s1 + 0xe0]\n 10350: a2 = s1 + 0x400\n 10354: u64 [a2 + 0x80] = a0\n 10358: a0 = u64 [s1 + 0xe8]\n 10362: u64 [a2 + 0x88] = a0\n 10366: a0 = u64 [s1 + 0xf0]\n 10370: u64 [a2 + 0x90] = a0\n 10374: a1 = s1 + 0x480\n 10378: a0 = u64 [s1 + 0xf8]\n 10382: u64 [a2 + 0x98] = a0\n 10386: a0 = a3\n 10388: u64 [s1 + 0xf8] = a3\n 10392: ra = 0x196\n 10396: jump @9\n      : @391 (gas: 10)\n 10399: u64 [a2 + 448] = 0\n 10403: u64 [a2 + 440] = 0\n 10407: u64 [a2 + 432] = 0\n 10411: u64 [a2 + 424] = 0\n 10415: a0 = s1 + 0x3000\n 10419: i32 a0 = a0 + 0xfffffffffffffa20\n 10423: ra = 0x14a\n 10427: ecalli 17 // 'value_transferred'\n 10429: t0 = 0x14c\n 10433: jump @1497\n      : @392 [@dyn 165] (gas: 1)\n 10436: t0 = 332, jump @1497\n      : @393 [@dyn 166] (gas: 1)\n 10442: t0 = 334, jump @1500\n      : @394 [@dyn 167] (gas: 1)\n 10448: jump @396 if a0 == 0\n      : @395 (gas: 1)\n 10451: jump @881\n      : @396 (gas: 3)\n 10454: a0 = u64 [s1 + 0xf8]\n 10458: a0 = i32 [a0]\n 10460: jump @398 if a0 >u 67\n      : @397 (gas: 1)\n 10464: jump @882\n      : @398 (gas: 4)\n 10467: a0 = s1 + 0x1540\n 10471: ra = 0x150\n 10475: t0 = 0x4de\n 10479: jump @1493\n      : @399 [@dyn 168] (gas: 11)\n 10482: a1 = s1 + 0x1078\n 10486: a0 = u64 [a1 + 0x4c8]\n 10490: u64 [s1 + 0xf0] = a0\n 10494: a0 = u64 [a1 + 0x4d0]\n 10498: u64 [s1 + 0xe8] = a0\n 10502: a0 = u32 [a1 + 0x4d8]\n 10506: u64 [s1 + 0xe0] = a0\n 10510: a0 = s1 + 0x1520\n 10514: ra = 0x152\n 10518: t0 = 0x4e8\n 10522: jump @1499\n      : @400 [@dyn 169] (gas: 3)\n 10525: t0 = 0x154\n 10529: a2 = s1 + 0x1078\n 10533: fallthrough\n      : @401 [@dyn 170] (gas: 13)\n 10534: a3 = a2 + 0x400\n 10538: a0 = u64 [a3 + 0xa8]\n 10542: u64 [s1 + 0xf8] = a0\n 10546: u64 [a2 + 1184] = 0\n 10550: a0 = u64 [s1 + 0xe0]\n 10554: u64 [a3 + 0x98] = a0\n 10558: a0 = u64 [s1 + 0xe8]\n 10562: u64 [a3 + 0x90] = a0\n 10566: a1 = s1 + 0x1500\n 10570: a0 = u64 [s1 + 0xf0]\n 10574: u64 [a3 + 0x88] = a0\n 10578: a0 = 0\n 10580: ra = 342, jump @9\n      : @402 [@dyn 171] (gas: 3)\n 10586: t0 = 0x158\n 10590: a1 = s1 + 0x1078\n 10594: fallthrough\n      : @403 [@dyn 172] (gas: 8)\n 10595: u64 [a1 + 1152] = 0\n 10599: u64 [a1 + 1144] = 0\n 10603: u64 [a1 + 1128] = 0x6\n 10608: a2 = a1\n 10610: a0 = 0x20\n 10613: a1 = s1 + 0x14e0\n 10617: u64 [a2 + 1136] = 0\n 10621: ra = 346, jump @9\n      : @404 [@dyn 173] (gas: 3)\n 10627: a1 = 0x20150\n 10632: a0 = i32 [0x20150]\n 10637: jump @406 if a0 >u 63\n      : @405 (gas: 2)\n 10641: u32 [0x20150] = 0x40\n 10647: fallthrough\n      : @406 (gas: 14)\n 10648: a0 = sp + 0xffffffffffffffe0\n 10651: a2 = a0 & 0xffffffffffffffe0\n 10654: u64 [s1 + 0xe0] = a2\n 10658: sp = a2\n 10660: a0 = 0x20160\n 10665: i32 a0 = a0 + 0\n 10667: i32 a2 = a2 + 0\n 10669: u64 [s1 + 0xf0] = a1\n 10673: a1 = 0x40\n 10676: u64 [s1 + 0xe8] = a0\n 10680: ra = 0x15c\n 10684: ecalli 9 // 'hash_keccak_256'\n 10686: t0 = 0x15e\n 10690: jump @1451\n      : @407 [@dyn 174] (gas: 1)\n 10693: t0 = 350, jump @1451\n      : @408 [@dyn 175] (gas: 3)\n 10699: t0 = 0x160\n 10703: a2 = s1 + 0x1078\n 10707: fallthrough\n      : @409 [@dyn 176] (gas: 8)\n 10708: u64 [a2 + 1120] = 0\n 10712: u64 [a2 + 1112] = 0\n 10716: u64 [a2 + 1104] = 0\n 10720: a1 = s1 + 0x14c0\n 10724: a0 = u64 [s1 + 0xf8]\n 10728: u64 [a2 + 0x448] = a0\n 10732: a0 = 0\n 10734: ra = 354, jump @9\n      : @410 [@dyn 177] (gas: 14)\n 10740: a0 = u64 [s1 + 0xc0]\n 10744: a1 = s1 + 0x1078\n 10748: a2 = a1 + 0x400\n 10752: u64 [a2 + 0x40] = a0\n 10755: a0 = u64 [s1 + 0xc8]\n 10759: u64 [a2 + 0x38] = a0\n 10762: a0 = u64 [s1 + 0xd0]\n 10766: u64 [a2 + 0x30] = a0\n 10769: a3 = a1\n 10771: a0 = 0x20\n 10774: a1 = s1 + 0x14a0\n 10778: a2 = u64 [s1 + 0xd8]\n 10782: u64 [a3 + 0x428] = a2\n 10786: ra = 356, jump @9\n      : @411 [@dyn 178] (gas: 3)\n 10792: a1 = u64 [s1 + 0xf0]\n 10796: a0 = i32 [a1]\n 10798: jump @413 if a0 >u 63\n      : @412 (gas: 2)\n 10802: u32 [a1 + 0] = 0x40\n 10805: fallthrough\n      : @413 (gas: 4)\n 10806: a0 = sp + 0xffffffffffffffe0\n 10809: a0 = a0 & 0xffffffffffffffe0\n 10812: u64 [s1 + 0xf8] = a0\n 10816: t0 = 358, jump @1465\n      : @414 [@dyn 179] (gas: 4)\n 10822: ra = 0x168\n 10826: ecalli 9 // 'hash_keccak_256'\n 10828: t0 = 0x16a\n 10832: jump @1454\n      : @415 [@dyn 180] (gas: 1)\n 10835: t0 = 362, jump @1454\n      : @416 [@dyn 181] (gas: 2)\n 10841: a0 = s1 + 0x1480\n 10845: ra = 364, jump @11\n      : @417 [@dyn 182] (gas: 3)\n 10851: t0 = 0x16e\n 10855: a1 = s1 + 0x1078\n 10859: fallthrough\n      : @418 [@dyn 183] (gas: 12)\n 10860: a2 = a1 + 0x400\n 10864: a0 = u64 [a2 + 0x20]\n 10867: u64 [s1 + 0xf8] = a0\n 10871: a0 = u64 [a2 + 0x18]\n 10874: u64 [s1 + 0xf0] = a0\n 10878: a0 = u64 [a2 + 0x10]\n 10881: u64 [s1 + 0xe8] = a0\n 10885: a0 = u64 [a2 + 0x8]\n 10888: u64 [s1 + 0xe0] = a0\n 10892: a0 = s1 + 0x1460\n 10896: a1 = 0x40\n 10899: ra = 368, jump @7\n      : @419 [@dyn 184] (gas: 7)\n 10905: a3 = s1 + 0x1078\n 10909: a0 = u64 [a3 + 0x400]\n 10913: a5 = a3 + 0x300\n 10917: a1 = u64 [a5 + 0xf8]\n 10921: a2 = u64 [a5 + 0xf0]\n 10925: a4 = u64 [a5 + 0xe8]\n 10929: t0 = 370, jump @1479\n      : @420 [@dyn 185] (gas: 1)\n 10935: jump @422 if a0 == 0\n      : @421 (gas: 1)\n 10938: jump @827\n      : @422 (gas: 14)\n 10941: a0 = u64 [s1 + 0xe0]\n 10945: a2 = a3 + 0x300\n 10949: u64 [a2 + 0xc8] = a0\n 10953: a0 = u64 [s1 + 0xe8]\n 10957: u64 [a2 + 0xd0] = a0\n 10961: a0 = u64 [s1 + 0xf0]\n 10965: u64 [a2 + 0xd8] = a0\n 10969: a1 = s1 + 0x1440\n 10973: a0 = u64 [s1 + 0xf8]\n 10977: u64 [a2 + 0xe0] = a0\n 10981: a0 = a4\n 10983: u64 [s1 + 0xf8] = a4\n 10987: ra = 0x196\n 10991: jump @9\n      : @423 (gas: 10)\n 10994: u64 [a3 + 1312] = 0\n 10998: u64 [a3 + 1304] = 0\n 11002: u64 [a3 + 1296] = 0\n 11006: u64 [a3 + 1288] = 0\n 11010: a0 = s1 + 0x2000\n 11014: i32 a0 = a0 + 0x580\n 11018: ra = 0x174\n 11022: ecalli 17 // 'value_transferred'\n 11024: t0 = 0x176\n 11028: jump @1483\n      : @424 [@dyn 186] (gas: 1)\n 11031: t0 = 374, jump @1483\n      : @425 [@dyn 187] (gas: 1)\n 11037: t0 = 376, jump @1475\n      : @426 [@dyn 188] (gas: 1)\n 11043: jump @428 if a0 == 0\n      : @427 (gas: 1)\n 11046: jump @883\n      : @428 (gas: 3)\n 11049: a0 = u64 [s1 + 0xf8]\n 11053: a0 = i32 [a0]\n 11055: jump @430 if a0 >u 67\n      : @429 (gas: 1)\n 11059: jump @884\n      : @430 (gas: 4)\n 11062: a0 = s1 + 0x460\n 11066: ra = 0x17a\n 11070: t0 = 0x4de\n 11074: jump @1493\n      : @431 [@dyn 189] (gas: 10)\n 11077: a0 = u64 [s1 + 0x460]\n 11081: u64 [s1 + 0xf0] = a0\n 11085: a0 = u64 [s1 + 0x468]\n 11089: u64 [s1 + 0xe8] = a0\n 11093: a0 = u32 [s1 + 0x470]\n 11097: u64 [s1 + 0xe0] = a0\n 11101: a0 = s1 + 0x440\n 11105: ra = 0x17c\n 11109: t0 = 0x4e8\n 11113: jump @1499\n      : @432 [@dyn 190] (gas: 12)\n 11116: a0 = u64 [s1 + 0x440]\n 11120: u64 [s1 + 0xf8] = a0\n 11124: u64 [s1 + 1080] = 0\n 11128: a0 = u64 [s1 + 0xe0]\n 11132: u64 [s1 + 0x430] = a0\n 11136: a0 = u64 [s1 + 0xe8]\n 11140: u64 [s1 + 0x428] = a0\n 11144: a1 = s1 + 0x420\n 11148: a0 = u64 [s1 + 0xf0]\n 11152: u64 [s1 + 0x420] = a0\n 11156: a0 = 0\n 11158: ra = 382, jump @9\n      : @433 [@dyn 191] (gas: 7)\n 11164: u64 [s1 + 1048] = 0\n 11168: u64 [s1 + 1040] = 0\n 11172: u64 [s1 + 1024] = 0x5\n 11177: a0 = 0x20\n 11180: a1 = s1 + 0x400\n 11184: u64 [s1 + 1032] = 0\n 11188: ra = 384, jump @9\n      : @434 [@dyn 192] (gas: 3)\n 11194: a1 = 0x20150\n 11199: a0 = i32 [0x20150]\n 11204: jump @436 if a0 >u 63\n      : @435 (gas: 2)\n 11208: u32 [0x20150] = 0x40\n 11214: fallthrough\n      : @436 (gas: 14)\n 11215: a0 = sp + 0xffffffffffffffe0\n 11218: a2 = a0 & 0xffffffffffffffe0\n 11221: u64 [s1 + 0xe0] = a2\n 11225: sp = a2\n 11227: a0 = 0x20160\n 11232: i32 a0 = a0 + 0\n 11234: i32 a2 = a2 + 0\n 11236: u64 [s1 + 0xf0] = a1\n 11240: a1 = 0x40\n 11243: u64 [s1 + 0xe8] = a0\n 11247: ra = 0x182\n 11251: ecalli 9 // 'hash_keccak_256'\n 11253: t0 = 0x184\n 11257: jump @1451\n      : @437 [@dyn 193] (gas: 1)\n 11260: t0 = 388, jump @1451\n      : @438 [@dyn 194] (gas: 8)\n 11266: u64 [s1 + 1016] = 0\n 11270: u64 [s1 + 1008] = 0\n 11274: u64 [s1 + 1000] = 0\n 11278: a1 = s1 + 0x3e0\n 11282: a0 = u64 [s1 + 0xf8]\n 11286: u64 [s1 + 0x3e0] = a0\n 11290: a0 = 0\n 11292: ra = 390, jump @9\n      : @439 [@dyn 195] (gas: 12)\n 11298: a0 = u64 [s1 + 0xc0]\n 11302: a3 = s1 + 0x300\n 11306: u64 [a3 + 0xd8] = a0\n 11310: a0 = u64 [s1 + 0xc8]\n 11314: u64 [a3 + 0xd0] = a0\n 11318: a0 = u64 [s1 + 0xd0]\n 11322: u64 [a3 + 0xc8] = a0\n 11326: a0 = 0x20\n 11329: a1 = s1 + 0x3c0\n 11333: a2 = u64 [s1 + 0xd8]\n 11337: u64 [a3 + 0xc0] = a2\n 11341: ra = 392, jump @9\n      : @440 [@dyn 196] (gas: 3)\n 11347: a1 = u64 [s1 + 0xf0]\n 11351: a0 = i32 [a1]\n 11353: jump @442 if a0 >u 63\n      : @441 (gas: 2)\n 11357: u32 [a1 + 0] = 0x40\n 11360: fallthrough\n      : @442 (gas: 4)\n 11361: a0 = sp + 0xffffffffffffffe0\n 11364: a0 = a0 & 0xffffffffffffffe0\n 11367: u64 [s1 + 0xf8] = a0\n 11371: t0 = 394, jump @1465\n      : @443 [@dyn 197] (gas: 4)\n 11377: ra = 0x18c\n 11381: ecalli 9 // 'hash_keccak_256'\n 11383: t0 = 0x18e\n 11387: jump @1454\n      : @444 [@dyn 198] (gas: 1)\n 11390: t0 = 398, jump @1454\n      : @445 [@dyn 199] (gas: 2)\n 11396: a0 = s1 + 0x3a0\n 11400: ra = 400, jump @11\n      : @446 [@dyn 200] (gas: 11)\n 11406: a0 = u64 [s1 + 0x3b8]\n 11410: u64 [s1 + 0xf8] = a0\n 11414: a0 = u64 [s1 + 0x3b0]\n 11418: u64 [s1 + 0xf0] = a0\n 11422: a0 = u64 [s1 + 0x3a8]\n 11426: u64 [s1 + 0xe8] = a0\n 11430: a0 = u64 [s1 + 0x3a0]\n 11434: u64 [s1 + 0xe0] = a0\n 11438: a0 = s1 + 0x380\n 11442: a1 = 0x40\n 11445: ra = 402, jump @7\n      : @447 [@dyn 201] (gas: 6)\n 11451: a4 = s1 + 0x300\n 11455: a0 = u64 [a4 + 0x98]\n 11459: a1 = u64 [a4 + 0x90]\n 11463: a2 = u64 [a4 + 0x88]\n 11467: a3 = u64 [a4 + 0x80]\n 11471: t0 = 404, jump @1459\n      : @448 [@dyn 202] (gas: 1)\n 11477: jump @450 if a0 == 0\n      : @449 (gas: 1)\n 11480: jump @827\n      : @450 (gas: 13)\n 11483: a0 = u64 [s1 + 0xe0]\n 11487: a2 = s1 + 0x300\n 11491: u64 [a2 + 0x60] = a0\n 11494: a0 = u64 [s1 + 0xe8]\n 11498: u64 [a2 + 0x68] = a0\n 11501: a0 = u64 [s1 + 0xf0]\n 11505: u64 [a2 + 0x70] = a0\n 11508: a1 = s1 + 0x360\n 11512: a0 = u64 [s1 + 0xf8]\n 11516: u64 [a2 + 0x78] = a0\n 11519: a0 = a3\n 11521: u64 [s1 + 0xf8] = a3\n 11525: ra = 406, jump @9\n      : @451 [@dyn 203] (gas: 3)\n 11531: a1 = 0x20\n 11534: a0 = u64 [s1 + 0xf8]\n 11538: ra = 408, jump @20\n      : @452 [@dyn 204] (gas: 5)\n 11544: i32 a1 = a0 + 0\n 11546: a2 = 0x20\n 11549: a0 = 0\n 11551: ecalli 14 // 'seal_return'\n 11553: jump @454\n      : @453 (gas: 4)\n 11555: a2 = 0x20\n 11558: a0 = 0\n 11560: ecalli 14 // 'seal_return'\n 11562: fallthrough\n      : @454 (gas: 10)\n 11563: u64 [a2 + 1152] = 0\n 11567: u64 [a2 + 1144] = 0\n 11571: u64 [a2 + 1136] = 0\n 11575: u64 [a2 + 1128] = 0\n 11579: a0 = s1 + 0x3000\n 11583: i32 a0 = a0 + 0xfffffffffffffce0\n 11587: ecalli 17 // 'value_transferred'\n 11589: t0 = 0x19a\n 11593: a3 = s1 + 0x2878\n 11597: fallthrough\n      : @455 [@dyn 205] (gas: 9)\n 11598: a4 = a3 + 0x400\n 11602: a0 = u64 [a4 + 0x78]\n 11605: a1 = u64 [a4 + 0x80]\n 11609: a2 = u64 [a4 + 0x70]\n 11612: a3 = u64 [a4 + 0x68]\n 11615: a1 = a1 | a2\n 11618: a0 = a0 | a3\n 11621: a0 = a0 | a1\n 11624: jump @457 if a0 == 0\n      : @456 (gas: 1)\n 11627: jump @934\n      : @457 (gas: 3)\n 11630: a0 = u64 [s1 + 0xf8]\n 11634: a0 = i32 [a0]\n 11636: jump @459 if a0 >u 3\n      : @458 (gas: 1)\n 11640: jump @934\n      : @459 (gas: 3)\n 11643: a0 = s1 + 0x1f60\n 11647: a1 = u64 [s1 + 0xf0]\n 11651: ra = 412, jump @11\n      : @460 [@dyn 206] (gas: 3)\n 11657: t0 = 0x19e\n 11661: a1 = s1 + 0x1878\n 11665: fallthrough\n      : @461 [@dyn 207] (gas: 12)\n 11666: a3 = a1 + 0x600\n 11670: a0 = u64 [a3 + 0xf8]\n 11674: a2 = u64 [a3 + 0xf0]\n 11678: a1 = u64 [a3 + 0xe8]\n 11682: u64 [s1 + 0xe0] = a0\n 11686: a0 = a0 << 0x20\n 11689: a0 = a0 >> 0x20\n 11692: u64 [s1 + 0xe8] = a1\n 11696: u64 [s1 + 0xd8] = a2\n 11700: a1 = a1 | a2\n 11703: a0 = a0 | a1\n 11706: jump @463 if a0 != 0\n      : @462 (gas: 1)\n 11709: jump @885\n      : @463 (gas: 3)\n 11712: a0 = s1 + 0x1f40\n 11716: a1 = 0x40\n 11719: ra = 416, jump @7\n      : @464 [@dyn 208] (gas: 14)\n 11725: a5 = s1 + 0x1878\n 11729: a1 = a5 + 0x600\n 11733: a3 = u64 [a1 + 0xe0]\n 11737: a4 = u64 [a1 + 0xd8]\n 11741: t0 = u64 [a5 + 0x6d0]\n 11745: a0 = u64 [a1 + 0xc8]\n 11749: a2 = t0 | a3\n 11752: a1 = a0 | a4\n 11755: a1 = a1 | a2\n 11758: a1 = a1 >> 0x20\n 11761: a2 = a2 | a4\n 11764: a2 = a2 << 0x20\n 11767: a1 = a1 | a2\n 11770: jump @466 if a1 == 0\n      : @465 (gas: 1)\n 11773: jump @827\n      : @466 (gas: 11)\n 11776: u64 [a5 + 1720] = 0\n 11780: u64 [a5 + 1712] = 0\n 11784: u64 [a5 + 1704] = 0\n 11788: u64 [s1 + 0xd0] = a3\n 11792: a3 = 0xef5cfb8c00000000\n 11802: a1 = s1 + 0x1f20\n 11806: u64 [a5 + 0x6c0] = a3\n 11810: u64 [s1 + 0xf8] = a0\n 11814: u64 [s1 + 0xc8] = a4\n 11818: u64 [s1 + 0xc0] = t0\n 11822: ra = 418, jump @9\n      : @467 [@dyn 209] (gas: 7)\n 11828: a0 = 0x30160\n 11833: u64 [s1 + 0xf0] = a0\n 11837: i32 a0 = a0 + 0\n 11839: u64 [s1 + 0xb8] = a0\n 11843: ra = 0x1a4\n 11847: ecalli 4 // 'caller'\n 11849: fallthrough\n      : @468 [@dyn 210] (gas: 10)\n 11850: a4 = u64 [s1 + 0xf8]\n 11854: a0 = u64 [s1 + 0xd0]\n 11858: a1 = u64 [s1 + 0xc8]\n 11862: a0 = a0 | a1\n 11865: a1 = 0xfffffffc\n 11875: a1 = a4 <u a1\n 11878: a2 = u64 [s1 + 0xc0]\n 11882: a1 = 0 if a2 != 0\n 11884: a1 = 0 if a0 != 0\n 11886: jump @470 if a1 != 0\n      : @469 (gas: 1)\n 11889: jump @827\n      : @470 (gas: 2)\n 11892: a2 = u64 [s1 + 0xf0]\n 11896: t0 = 422, jump @1463\n      : @471 [@dyn 211] (gas: 7)\n 11902: u64 [a5 + 1696] = 0\n 11906: a4 = a5 + 0x600\n 11910: u64 [a4 + 0x98] = a1\n 11914: u64 [a4 + 0x90] = a2\n 11918: a1 = s1 + 0x1f00\n 11922: u64 [a4 + 0x88] = a3\n 11926: ra = 424, jump @9\n      : @472 [@dyn 212] (gas: 26)\n 11932: ecalli 11 // 'ref_time_left'\n 11934: a0 = u64 [s1 + 0xd8]\n 11938: a0 = reverse a0\n 11940: a1 = a0 << 0x20\n 11943: a2 = u64 [s1 + 0xe0]\n 11947: a2 = reverse a2\n 11949: a2 = a2 >> 0x20\n 11952: a1 = a1 | a2\n 11955: a2 = u64 [s1 + 0xe8]\n 11959: a2 = reverse a2\n 11961: a3 = a2 << 0x20\n 11964: a0 = a0 >> 0x20\n 11967: a0 = a0 | a3\n 11970: a2 = a2 >> 0x20\n 11973: a3 = u64 [s1 + 0xf0]\n 11977: u64 [a3 + 0x8] = a0\n 11980: u64 [a3] = a1\n 11982: u32 [a3 + 0x10] = a2\n 11985: a0 = s1 + 0x2878\n 11989: u64 [a0 + 1184] = 0\n 11993: u64 [a0 + 1176] = 0\n 11997: u64 [a0 + 1168] = 0\n 12001: u64 [a0 + 1160] = 0\n 12005: a1 = 0x24\n 12008: a0 = u64 [s1 + 0xf8]\n 12012: ra = 426, jump @20\n      : @473 [@dyn 213] (gas: 4)\n 12018: u64 [s1 + 0xe8] = a0\n 12022: a1 = 0x20\n 12025: a0 = u64 [s1 + 0xf8]\n 12029: ra = 428, jump @20\n      : @474 [@dyn 214] (gas: 33)\n 12035: a2 = s1 + 0x2878\n 12039: u32 [a2 + 1192] = 0x20\n 12044: a3 = a2 + 0x400\n 12048: u64 [a3 + 224] = 0xffffffffffffffff\n 12053: u64 [a3 + 216] = 0xffffffffffffffff\n 12058: u64 [a3 + 208] = 0xffffffffffffffff\n 12063: u64 [a3 + 200] = 0xffffffffffffffff\n 12068: a1 = u64 [s1 + 0xf0]\n 12072: a1 = a1 << 0x20\n 12075: a1 = a1 >> 0x20\n 12078: a2 = 0x800000000\n 12088: t0 = a1 | a2\n 12091: a1 = s1 + 0x2d00\n 12095: a1 = a1 << 0x20\n 12098: a1 = a1 >> 0x20\n 12101: a2 = s1 + 0x2d40\n 12105: a2 = a2 << 0x20\n 12108: a3 = a2 | a1\n 12111: a1 = u64 [s1 + 0xe8]\n 12115: a1 = a1 << 0x20\n 12118: a1 = a1 >> 0x20\n 12121: a2 = 0x2400000000\n 12131: a4 = a1 | a2\n 12134: a0 = a0 << 0x20\n 12137: a0 = a0 >> 0x20\n 12140: a1 = s1 + 0x2d20\n 12144: a1 = a1 << 0x20\n 12147: a5 = a1 | a0\n 12150: a1 = 0xffffffffffffffff\n 12153: a2 = 0xffffffffffffffff\n 12156: a0 = t0\n 12158: ecalli 0 // 'call'\n 12159: fallthrough\n      : @475 (gas: 1)\n 12160: jump @477 if a0 == 0\n      : @476 (gas: 1)\n 12163: jump @777\n      : @477 (gas: 2)\n 12166: ecalli 13 // 'return_data_size'\n 12168: fallthrough\n      : @478 (gas: 2)\n 12169: a4 = 0x20\n 12172: jump @480 if a0 >=u a4\n      : @479 (gas: 4)\n 12175: ecalli 13 // 'return_data_size'\n 12177: a4 = a0\n 12179: a2 = s1 + 0x1878\n 12183: jump @481\n      : @480 (gas: 2)\n 12185: a2 = s1 + 0x1878\n 12189: fallthrough\n      : @481 (gas: 18)\n 12190: a3 = u64 [s1 + 0xf8]\n 12194: a0 = u64 [s1 + 0xc8]\n 12198: a1 = u64 [s1 + 0xc0]\n 12202: u64 [s1 + 224] = 0\n 12206: u64 [s1 + 0xe8] = a4\n 12210: a5 = a2 + 0x600\n 12214: u64 [a5 + 0x28] = a4\n 12217: u64 [a5 + 0x48] = a3\n 12220: u64 [a2 + 1584] = 0\n 12224: u64 [a5 + 0x50] = a1\n 12227: u64 [a2 + 1592] = 0\n 12231: u64 [a5 + 0x58] = a0\n 12234: u64 [a2 + 1600] = 0\n 12238: a0 = s1 + 0x1ec0\n 12242: a1 = s1 + 0x1ea0\n 12246: a4 = u64 [s1 + 0xd0]\n 12250: u64 [a5 + 0x60] = a4\n 12253: ra = 430, jump @1246\n      : @482 [@dyn 215] (gas: 4)\n 12259: a3 = u64 [s1 + 0xe0]\n 12263: a0 = a3 >u 0\n 12265: a1 = u64 [s1 + 0xe8]\n 12269: t0 = 432, jump @1458\n      : @483 [@dyn 216] (gas: 1)\n 12275: jump @485 if a2 != 0\n      : @484 (gas: 1)\n 12278: jump @922\n      : @485 (gas: 3)\n 12281: a0 = s1 + 0x1e80\n 12285: a1 = u64 [s1 + 0xf8]\n 12289: ra = 434, jump @7\n      : @486 [@dyn 217] (gas: 14)\n 12295: a0 = s1 + 0x1878\n 12299: a5 = a0 + 0x600\n 12303: a1 = u64 [a5 + 0x20]\n 12306: a2 = u64 [a5 + 0x18]\n 12309: a3 = u64 [a5 + 0x10]\n 12312: a4 = u64 [a5 + 0x8]\n 12315: u64 [s1 + 0xf8] = a1\n 12319: u64 [s1 + 0xe0] = a3\n 12323: a0 = a3 | a1\n 12326: u64 [s1 + 0xe8] = a2\n 12330: u64 [s1 + 0xd8] = a4\n 12334: a1 = a4 | a2\n 12337: a0 = a0 | a1\n 12340: jump @490 if a0 == 0\n      : @487 (gas: 6)\n 12343: a0 = u64 [s1 + 0xb8]\n 12347: ra = 0x1b4\n 12351: ecalli 4 // 'caller'\n 12353: a2 = u64 [s1 + 0xf0]\n 12357: t0 = 0x1b6\n 12361: jump @1446\n      : @488 [@dyn 218] (gas: 2)\n 12364: a2 = u64 [s1 + 0xf0]\n 12368: t0 = 438, jump @1446\n      : @489 [@dyn 219] (gas: 16)\n 12374: a4 = u64 [s1 + 0xf8]\n 12378: a5 = a2 + 0x500\n 12382: u64 [a5 + 0xe0] = a4\n 12386: a4 = u64 [s1 + 0xe8]\n 12390: u64 [a5 + 0xd8] = a4\n 12394: a4 = u64 [s1 + 0xe0]\n 12398: u64 [a5 + 0xd0] = a4\n 12402: a4 = u64 [s1 + 0xd8]\n 12406: u64 [a5 + 0xc8] = a4\n 12410: u64 [a2 + 1536] = 0\n 12414: u64 [a5 + 0xf8] = a1\n 12418: u64 [a5 + 0xf0] = a0\n 12422: a0 = s1 + 0x1e60\n 12426: a1 = s1 + 0x1e40\n 12430: u64 [a5 + 0xe8] = a3\n 12434: ra = 440, jump @1264\n      : @490 [@dyn 220] (gas: 3)\n 12440: a0 = s1 + 0x1e20\n 12444: a1 = 0x40\n 12447: ra = 442, jump @7\n      : @491 [@dyn 221] (gas: 7)\n 12453: a3 = s1 + 0x1878\n 12457: a5 = a3 + 0x500\n 12461: a0 = u64 [a5 + 0xc0]\n 12465: a1 = u64 [a5 + 0xb8]\n 12469: a2 = u64 [a5 + 0xb0]\n 12473: a4 = u64 [a5 + 0xa8]\n 12477: t0 = 444, jump @1479\n      : @492 [@dyn 222] (gas: 1)\n 12483: jump @494 if a0 == 0\n      : @493 (gas: 1)\n 12486: jump @827\n      : @494 (gas: 14)\n 12489: a0 = u64 [s1 + 0xd8]\n 12493: a2 = a3 + 0x500\n 12497: u64 [a2 + 0x88] = a0\n 12501: a0 = u64 [s1 + 0xe0]\n 12505: u64 [a2 + 0x90] = a0\n 12509: a0 = u64 [s1 + 0xe8]\n 12513: u64 [a2 + 0x98] = a0\n 12517: a1 = s1 + 0x1e00\n 12521: a0 = u64 [s1 + 0xf8]\n 12525: u64 [a2 + 0xa0] = a0\n 12529: a0 = a4\n 12531: u64 [s1 + 0xf8] = a4\n 12535: ra = 0x196\n 12539: jump @9\n      : @495 (gas: 10)\n 12542: u64 [a3 + 1120] = 0\n 12546: u64 [a3 + 1112] = 0\n 12550: u64 [a3 + 1104] = 0\n 12554: u64 [a3 + 1096] = 0\n 12558: a0 = s1 + 0x2000\n 12562: i32 a0 = a0 + 0x4c0\n 12566: ra = 0x1be\n 12570: ecalli 17 // 'value_transferred'\n 12572: t0 = 0x1c0\n 12576: jump @1496\n      : @496 [@dyn 223] (gas: 1)\n 12579: t0 = 448, jump @1496\n      : @497 [@dyn 224] (gas: 8)\n 12585: a0 = u64 [a4 + 0x58]\n 12588: a1 = u64 [a4 + 0x60]\n 12591: a2 = u64 [a4 + 0x50]\n 12594: a3 = u64 [a4 + 0x48]\n 12597: a1 = a1 | a2\n 12600: a0 = a0 | a3\n 12603: a0 = a0 | a1\n 12606: jump @499 if a0 == 0\n      : @498 (gas: 1)\n 12609: jump @889\n      : @499 (gas: 3)\n 12612: a0 = u64 [s1 + 0xf8]\n 12616: a0 = i32 [a0]\n 12618: jump @501 if a0 >u 35\n      : @500 (gas: 1)\n 12622: jump @890\n      : @501 (gas: 4)\n 12625: a0 = s1 + 0x300\n 12629: ra = 0x1c2\n 12633: t0 = 0x4de\n 12637: jump @1493\n      : @502 [@dyn 225] (gas: 10)\n 12640: a0 = u64 [s1 + 0x300]\n 12644: a1 = u64 [s1 + 0x308]\n 12648: a2 = u32 [s1 + 0x310]\n 12652: u64 [s1 + 760] = 0\n 12656: u64 [s1 + 0x2f0] = a2\n 12660: u64 [s1 + 0x2e8] = a1\n 12664: a1 = s1 + 0x2e0\n 12668: u64 [s1 + 0x2e0] = a0\n 12672: a0 = 0\n 12674: ra = 452, jump @9\n      : @503 [@dyn 226] (gas: 7)\n 12680: u64 [s1 + 728] = 0\n 12684: u64 [s1 + 720] = 0\n 12688: u64 [s1 + 704] = 0x2\n 12693: a0 = 0x20\n 12696: a1 = s1 + 0x2c0\n 12700: u64 [s1 + 712] = 0\n 12704: ra = 454, jump @9\n      : @504 [@dyn 227] (gas: 6)\n 12710: a0 = sp + 0xffffffffffffffe0\n 12713: a0 = a0 & 0xffffffffffffffe0\n 12716: u64 [s1 + 0xd8] = a0\n 12720: sp = a0\n 12722: a1 = i32 [0x20150]\n 12727: jump @506 if a1 >u 63\n      : @505 (gas: 2)\n 12731: u32 [0x20150] = 0x40\n 12737: fallthrough\n      : @506 (gas: 12)\n 12738: a0 = sp + 0xffffffffffffffe0\n 12741: a2 = a0 & 0xffffffffffffffe0\n 12744: u64 [s1 + 0xf8] = a2\n 12748: sp = a2\n 12750: a0 = 0x20160\n 12755: i32 a0 = a0 + 0\n 12757: i32 a2 = a2 + 0\n 12759: a1 = 0x40\n 12762: ra = 0x1c8\n 12766: ecalli 9 // 'hash_keccak_256'\n 12768: t0 = 0x1ca\n 12772: jump @1501\n      : @507 [@dyn 228] (gas: 1)\n 12775: t0 = 458, jump @1501\n      : @508 [@dyn 229] (gas: 14)\n 12781: u64 [s1 + 0xe8] = a5\n 12785: a4 = reverse a1\n 12787: u64 [s1 + 0xf0] = a4\n 12791: a2 = reverse a2\n 12793: u64 [s1 + 0xe0] = a2\n 12797: a0 = reverse a3\n 12799: u64 [s1 + 0xf8] = a0\n 12803: a1 = u64 [s1 + 0xd8]\n 12807: u64 [a1 + 0x18] = a0\n 12810: u64 [a1 + 0x10] = a2\n 12813: u64 [a1 + 0x8] = a4\n 12816: u64 [a1] = a5\n 12818: a0 = s1 + 0x2a0\n 12822: ra = 460, jump @11\n      : @509 [@dyn 230] (gas: 29)\n 12828: a0 = u64 [s1 + 0x2b8]\n 12832: u64 [s1 + 0xd8] = a0\n 12836: a0 = u64 [s1 + 0x2b0]\n 12840: u64 [s1 + 0xd0] = a0\n 12844: a0 = u64 [s1 + 0x2a8]\n 12848: u64 [s1 + 0xc8] = a0\n 12852: a0 = u64 [s1 + 0x2a0]\n 12856: u64 [s1 + 0xc0] = a0\n 12860: a0 = u64 [s1 + 0xe8]\n 12864: a0 = a0 + 0x1\n 12867: a1 = a0 <u 0x1\n 12870: a2 = u64 [s1 + 0xf0]\n 12874: a1 = a1 + a2\n 12877: a2 = s1 + 0x2078\n 12881: a3 = a2 + 0x400\n 12885: u64 [a3 + 0x70] = a1\n 12888: a1 = a1 | a0\n 12891: u64 [a3 + 0x68] = a0\n 12894: a0 = a1 <u 0x1\n 12897: a1 = u64 [s1 + 0xe0]\n 12901: a0 = a0 + a1\n 12904: u64 [a3 + 0x78] = a0\n 12907: a0 = a0 <u a1\n 12910: a1 = u64 [s1 + 0xf8]\n 12914: a0 = a0 + a1\n 12917: u64 [a3 + 0x80] = a0\n 12921: a0 = s1 + 0x280\n 12925: a1 = s1 + 0x24e0\n 12929: ra = 462, jump @11\n      : @510 [@dyn 231] (gas: 29)\n 12935: a0 = u64 [s1 + 0x298]\n 12939: u64 [s1 + 0xb8] = a0\n 12943: a0 = u64 [s1 + 0x290]\n 12947: u64 [s1 + 0xb0] = a0\n 12951: a0 = u64 [s1 + 0x288]\n 12955: u64 [s1 + 0xa8] = a0\n 12959: a0 = u64 [s1 + 0x280]\n 12963: u64 [s1 + 0xa0] = a0\n 12967: a1 = u64 [s1 + 0xe8]\n 12971: a0 = a1 + 0x2\n 12974: a1 = a0 <u a1\n 12977: a3 = u64 [s1 + 0xf0]\n 12981: a2 = a3 + a1\n 12984: a3 = a2 <u a3\n 12987: a3 = a1 if a1 == 0\n 12990: a1 = u64 [s1 + 0xe0]\n 12994: a3 = a3 + a1\n 12997: a1 = a3 <u a1\n 13000: a4 = u64 [s1 + 0xf8]\n 13004: a1 = a1 + a4\n 13007: a4 = s1 + 0x2078\n 13011: a5 = a4 + 0x400\n 13015: u64 [a5 + 0xa0] = a1\n 13019: u64 [a5 + 0x98] = a3\n 13023: u64 [a5 + 0x90] = a2\n 13027: u64 [a5 + 0x88] = a0\n 13031: a0 = s1 + 0x260\n 13035: a1 = s1 + 0x2500\n 13039: ra = 464, jump @11\n      : @511 [@dyn 232] (gas: 29)\n 13045: a0 = u64 [s1 + 0x278]\n 13049: u64 [s1 + 0x98] = a0\n 13053: a0 = u64 [s1 + 0x270]\n 13057: u64 [s1 + 0x90] = a0\n 13061: a1 = u64 [s1 + 0xe8]\n 13065: a0 = a1 + 0x3\n 13068: a1 = a0 <u a1\n 13071: a3 = u64 [s1 + 0xf0]\n 13075: a2 = a3 + a1\n 13078: a3 = a2 <u a3\n 13081: a3 = a1 if a1 == 0\n 13084: a1 = u64 [s1 + 0x268]\n 13088: u64 [s1 + 0xe8] = a1\n 13092: a1 = u64 [s1 + 0xe0]\n 13096: a3 = a3 + a1\n 13099: a1 = a3 <u a1\n 13102: a4 = u64 [s1 + 0xf8]\n 13106: a1 = a1 + a4\n 13109: a4 = u64 [s1 + 0x260]\n 13113: u64 [s1 + 0xe0] = a4\n 13117: a4 = s1 + 0x2078\n 13121: a5 = a4 + 0x400\n 13125: u64 [a5 + 0xc0] = a1\n 13129: u64 [a5 + 0xb8] = a3\n 13133: u64 [a5 + 0xb0] = a2\n 13137: u64 [a5 + 0xa8] = a0\n 13141: a0 = s1 + 0x240\n 13145: a1 = s1 + 0x2520\n 13149: ra = 466, jump @11\n      : @512 [@dyn 233] (gas: 5)\n 13155: a0 = u64 [s1 + 0x240]\n 13159: u64 [s1 + 0x88] = a0\n 13163: a0 = s1 + 0x220\n 13167: a1 = 0x40\n 13170: ra = 468, jump @7\n      : @513 [@dyn 234] (gas: 13)\n 13176: a0 = s1 + 0x200\n 13180: a4 = u64 [a0 + 0x38]\n 13183: a5 = u64 [a0 + 0x30]\n 13186: a3 = u64 [a0 + 0x28]\n 13189: a2 = u64 [a0 + 0x20]\n 13192: a0 = a3 | a4\n 13195: a1 = a2 | a5\n 13198: a1 = a1 | a0\n 13201: a1 = a1 >> 0x20\n 13204: a0 = a0 | a5\n 13207: a0 = a0 << 0x20\n 13210: a0 = a0 | a1\n 13213: jump @515 if a0 == 0\n      : @514 (gas: 1)\n 13216: jump @827\n      : @515 (gas: 15)\n 13219: a0 = u64 [s1 + 0xc0]\n 13223: u64 [s1 + 0x200] = a0\n 13227: a0 = u64 [s1 + 0xc8]\n 13231: u64 [s1 + 0x208] = a0\n 13235: a0 = u64 [s1 + 0xd0]\n 13239: u64 [s1 + 0x210] = a0\n 13243: a1 = s1 + 0x200\n 13247: a0 = u64 [s1 + 0xd8]\n 13251: u64 [s1 + 0x218] = a0\n 13255: a0 = a2\n 13257: u64 [s1 + 0xf8] = a2\n 13261: u64 [s1 + 0xf0] = a3\n 13265: u64 [s1 + 0xd8] = a4\n 13269: u64 [s1 + 0xd0] = a5\n 13273: ra = 470, jump @9\n      : @516 [@dyn 235] (gas: 11)\n 13279: a1 = u64 [s1 + 0xf8]\n 13283: a0 = u64 [s1 + 0xd8]\n 13287: a3 = u64 [s1 + 0xd0]\n 13291: a3 = a3 | a0\n 13294: a4 = 0x100000000\n 13304: a0 = 0xffffffe0\n 13314: a0 = a1 <u a0\n 13317: a2 = u64 [s1 + 0xf0]\n 13321: a0 = 0 if a2 != 0\n 13323: a0 = 0 if a3 != 0\n 13325: jump @518 if a0 != 0\n      : @517 (gas: 1)\n 13328: jump @827\n      : @518 (gas: 14)\n 13331: i32 a0 = a1 + 0x20\n 13334: a1 = u64 [s1 + 0xa0]\n 13338: a5 = s1 + 0x100\n 13342: u64 [a5 + 0xe0] = a1\n 13346: a1 = u64 [s1 + 0xa8]\n 13350: u64 [a5 + 0xe8] = a1\n 13354: a1 = u64 [s1 + 0xb0]\n 13358: u64 [a5 + 0xf0] = a1\n 13362: a1 = s1 + 0x1e0\n 13366: a2 = u64 [s1 + 0xb8]\n 13370: u64 [a5 + 0xf8] = a2\n 13374: u64 [s1 + 0xd8] = a3\n 13378: u64 [s1 + 0xd0] = a4\n 13382: ra = 472, jump @9\n      : @519 [@dyn 236] (gas: 9)\n 13388: a4 = u64 [s1 + 0xd8]\n 13392: a3 = u64 [s1 + 0xf0]\n 13396: a1 = u64 [s1 + 0xf8]\n 13400: a0 = u64 [s1 + 0xd0]\n 13404: a0 = a0 + 0xffffffffffffffc0\n 13407: a0 = a1 <u a0\n 13410: a0 = 0 if a3 != 0\n 13412: a0 = 0 if a4 != 0\n 13414: jump @521 if a0 != 0\n      : @520 (gas: 1)\n 13417: jump @827\n      : @521 (gas: 12)\n 13420: i32 a0 = a1 + 0x40\n 13423: a1 = u64 [s1 + 0xe0]\n 13427: a3 = s1 + 0x100\n 13431: u64 [a3 + 0xc0] = a1\n 13435: a1 = u64 [s1 + 0xe8]\n 13439: u64 [a3 + 0xc8] = a1\n 13443: a1 = u64 [s1 + 0x90]\n 13447: u64 [a3 + 0xd0] = a1\n 13451: a1 = s1 + 0x1c0\n 13455: a2 = u64 [s1 + 0x98]\n 13459: u64 [a3 + 0xd8] = a2\n 13463: ra = 474, jump @9\n      : @522 [@dyn 237] (gas: 8)\n 13469: a2 = u64 [s1 + 0xf8]\n 13473: a0 = 0xffffffa0\n 13483: a0 = a2 <u a0\n 13486: a1 = u64 [s1 + 0xf0]\n 13490: a0 = 0 if a1 != 0\n 13492: a1 = u64 [s1 + 0xd8]\n 13496: a0 = 0 if a1 != 0\n 13498: jump @524 if a0 != 0\n      : @523 (gas: 1)\n 13501: jump @827\n      : @524 (gas: 10)\n 13504: a0 = u64 [s1 + 0x88]\n 13508: a0 = a0 << 0x20\n 13511: a1 = a0 >> 0x20\n 13514: i32 a0 = a2 + 0x60\n 13517: u64 [s1 + 440] = 0\n 13521: u64 [s1 + 432] = 0\n 13525: u64 [s1 + 0x1a0] = a1\n 13529: a1 = s1 + 0x1a0\n 13533: u64 [s1 + 424] = 0\n 13537: ra = 476, jump @9\n      : @525 [@dyn 238] (gas: 3)\n 13543: a1 = 0x80\n 13547: a0 = u64 [s1 + 0xf8]\n 13551: ra = 478, jump @20\n      : @526 [@dyn 239] (gas: 5)\n 13557: i32 a1 = a0 + 0\n 13559: a2 = 0x80\n 13563: a0 = 0\n 13565: ecalli 14 // 'seal_return'\n 13567: jump @454\n      : @527 (gas: 6)\n 13570: u64 [s1 + 0xa0] = a4\n 13574: u64 [s1 + 0xa8] = a3\n 13578: u64 [s1 + 0xb0] = a2\n 13582: a0 = s1 + 0x1d60\n 13586: a1 = 0x40\n 13589: ra = 480, jump @7\n      : @528 [@dyn 240] (gas: 2)\n 13595: a2 = s1 + 0x1878\n 13599: fallthrough\n      : @529 (gas: 13)\n 13600: t0 = u64 [a2 + 0x500]\n 13604: a1 = a2 + 0x400\n 13608: a5 = u64 [a1 + 0xf8]\n 13612: a4 = u64 [a1 + 0xf0]\n 13616: a0 = u64 [a1 + 0xe8]\n 13620: a3 = a4 | t0\n 13623: a1 = a0 | a5\n 13626: a1 = a1 | a3\n 13629: a1 = a1 >> 0x20\n 13632: a3 = a3 | a5\n 13635: a3 = a3 << 0x20\n 13638: a1 = a1 | a3\n 13641: jump @531 if a1 == 0\n      : @530 (gas: 1)\n 13644: jump @827\n      : @531 (gas: 11)\n 13647: u64 [a2 + 1240] = 0\n 13651: u64 [a2 + 1232] = 0\n 13655: u64 [a2 + 1224] = 0\n 13659: a3 = 0x4da6a55600000000\n 13669: a1 = s1 + 0x1d40\n 13673: u64 [a2 + 0x4e0] = a3\n 13677: u64 [s1 + 0xb8] = a0\n 13681: u64 [s1 + 0x98] = t0\n 13685: u64 [s1 + 0x90] = a5\n 13689: u64 [s1 + 0x88] = a4\n 13693: ra = 482, jump @9\n      : @532 [@dyn 241] (gas: 3)\n 13699: a0 = u64 [s1 + 0xe0]\n 13703: ecalli 4 // 'caller'\n 13705: fallthrough\n      : @533 (gas: 10)\n 13706: a4 = u64 [s1 + 0xb8]\n 13710: a0 = u64 [s1 + 0x98]\n 13714: a1 = u64 [s1 + 0x90]\n 13718: a0 = a0 | a1\n 13721: a1 = 0xfffffffc\n 13731: a1 = a4 <u a1\n 13734: a2 = u64 [s1 + 0x88]\n 13738: a1 = 0 if a2 != 0\n 13740: a1 = 0 if a0 != 0\n 13742: jump @535 if a1 != 0\n      : @534 (gas: 1)\n 13745: jump @827\n      : @535 (gas: 25)\n 13748: a2 = u64 [s1 + 0xf8]\n 13752: a1 = u64 [a2 + 0x8]\n 13755: a0 = 0x2400000000\n 13765: u64 [s1 + 0x80] = a0\n 13769: a0 = i32 [a2 + 0x10]\n 13772: a2 = u64 [a2]\n 13774: a1 = reverse a1\n 13776: a3 = a1 << 0x20\n 13779: a0 = reverse a0\n 13781: a0 = a0 >> 0x20\n 13784: a3 = a3 | a0\n 13787: a1 = a1 >> 0x20\n 13790: a0 = reverse a2\n 13792: a2 = a0 << 0x20\n 13795: a1 = a1 | a2\n 13798: a2 = a0 >> 0x20\n 13801: i32 a0 = a4 + 0x4\n 13804: a5 = s1 + 0x1878\n 13808: u64 [a5 + 1216] = 0\n 13812: a4 = a5 + 0x400\n 13816: u64 [a4 + 0xb8] = a2\n 13820: u64 [a4 + 0xb0] = a1\n 13824: a1 = s1 + 0x1d20\n 13828: u64 [a4 + 0xa8] = a3\n 13832: ra = 484, jump @9\n      : @536 [@dyn 242] (gas: 29)\n 13838: ecalli 11 // 'ref_time_left'\n 13840: a0 = u64 [s1 + 0xa0]\n 13844: a0 = reverse a0\n 13846: a1 = a0 << 0x20\n 13849: a2 = u64 [s1 + 0xa8]\n 13853: a2 = reverse a2\n 13855: a2 = a2 >> 0x20\n 13858: a3 = a2 | a1\n 13861: a1 = u64 [s1 + 0xb0]\n 13865: a1 = reverse a1\n 13867: a2 = a1 << 0x20\n 13870: a0 = a0 >> 0x20\n 13873: a0 = a0 | a2\n 13876: a1 = a1 >> 0x20\n 13879: u64 [s1 + 0x78] = a0\n 13882: a2 = u64 [s1 + 0xf8]\n 13886: u64 [a2 + 0x8] = a0\n 13889: u64 [s1 + 0xa8] = a3\n 13893: u64 [a2] = a3\n 13895: u64 [s1 + 0xa0] = a1\n 13899: u32 [a2 + 0x10] = a1\n 13902: a0 = s1 + 0x2878\n 13906: u64 [a0 + 768] = 0\n 13910: u64 [a0 + 760] = 0\n 13914: u64 [a0 + 752] = 0\n 13918: u64 [a0 + 744] = 0\n 13922: a1 = 0x24\n 13925: a0 = u64 [s1 + 0xb8]\n 13929: ra = 486, jump @20\n      : @537 [@dyn 243] (gas: 4)\n 13935: u64 [s1 + 0xb0] = a0\n 13939: a1 = 0x20\n 13942: a0 = u64 [s1 + 0xb8]\n 13946: ra = 488, jump @20\n      : @538 [@dyn 244] (gas: 33)\n 13952: a1 = s1 + 0x2878\n 13956: u32 [a1 + 776] = 0x20\n 13961: u64 [a1 + 832] = 0\n 13965: u64 [a1 + 824] = 0\n 13969: u64 [a1 + 816] = 0\n 13973: u64 [a1 + 808] = 0\n 13977: a1 = u64 [s1 + 0xf8]\n 13981: a1 = a1 << 0x20\n 13984: a2 = a1 >> 0x20\n 13987: a1 = 0x1800000000\n 13997: u64 [s1 + 0x70] = a2\n 14000: t0 = a2 | a1\n 14003: a1 = s1 + 0x2b60\n 14007: a1 = a1 << 0x20\n 14010: a1 = a1 >> 0x20\n 14013: a2 = s1 + 0x2ba0\n 14017: a2 = a2 << 0x20\n 14020: a3 = a2 | a1\n 14023: a1 = u64 [s1 + 0xb0]\n 14027: a1 = a1 << 0x20\n 14030: a1 = a1 >> 0x20\n 14033: a4 = u64 [s1 + 0x80]\n 14037: a4 = a4 | a1\n 14040: a0 = a0 << 0x20\n 14043: a0 = a0 >> 0x20\n 14046: a1 = s1 + 0x2b80\n 14050: a1 = a1 << 0x20\n 14053: a5 = a1 | a0\n 14056: a1 = 0xffffffffffffffff\n 14059: a2 = 0xffffffffffffffff\n 14062: a0 = t0\n 14064: ecalli 0 // 'call'\n 14065: fallthrough\n      : @539 (gas: 1)\n 14066: jump @541 if a0 == 0\n      : @540 (gas: 1)\n 14069: jump @784\n      : @541 (gas: 2)\n 14072: ecalli 13 // 'return_data_size'\n 14074: fallthrough\n      : @542 (gas: 2)\n 14075: a5 = 0x20\n 14078: jump @544 if a0 >=u a5\n      : @543 (gas: 4)\n 14081: ecalli 13 // 'return_data_size'\n 14083: a5 = a0\n 14085: a2 = s1 + 0x1878\n 14089: jump @545\n      : @544 (gas: 2)\n 14091: a2 = s1 + 0x1878\n 14095: fallthrough\n      : @545 (gas: 18)\n 14096: a3 = u64 [s1 + 0xb8]\n 14100: t0 = u64 [s1 + 0x98]\n 14104: a0 = u64 [s1 + 0x90]\n 14108: a1 = u64 [s1 + 0x88]\n 14112: u64 [s1 + 152] = 0\n 14116: u64 [s1 + 0xb0] = a5\n 14120: a4 = a2 + 0x400\n 14124: u64 [a4 + 0x48] = a5\n 14127: u64 [a4 + 0x68] = a3\n 14130: u64 [a2 + 1104] = 0\n 14134: u64 [a4 + 0x70] = a1\n 14137: u64 [a2 + 1112] = 0\n 14141: u64 [a4 + 0x78] = a0\n 14144: u64 [a2 + 1120] = 0\n 14148: a0 = s1 + 0x1ce0\n 14152: a1 = s1 + 0x1cc0\n 14156: u64 [a2 + 0x480] = t0\n 14160: ra = 490, jump @1246\n      : @546 [@dyn 245] (gas: 4)\n 14166: a3 = u64 [s1 + 0x98]\n 14170: a0 = a3 >u 0\n 14172: a1 = u64 [s1 + 0xb0]\n 14176: t0 = 492, jump @1458\n      : @547 [@dyn 246] (gas: 1)\n 14182: jump @549 if a2 != 0\n      : @548 (gas: 1)\n 14185: jump @923\n      : @549 (gas: 3)\n 14188: a0 = s1 + 0x1ca0\n 14192: a1 = u64 [s1 + 0xb8]\n 14196: ra = 494, jump @7\n      : @550 [@dyn 247] (gas: 2)\n 14202: a1 = s1 + 0x1878\n 14206: fallthrough\n      : @551 (gas: 13)\n 14207: a4 = a1 + 0x400\n 14211: a3 = u64 [a4 + 0x40]\n 14214: a2 = u64 [a4 + 0x38]\n 14217: a0 = u64 [a4 + 0x30]\n 14220: a1 = u64 [a4 + 0x28]\n 14223: u64 [s1 + 0xb0] = a0\n 14227: u64 [s1 + 0x90] = a3\n 14231: a0 = a0 | a3\n 14234: u64 [s1 + 0xb8] = a1\n 14238: u64 [s1 + 0x98] = a2\n 14242: a1 = a1 | a2\n 14245: a0 = a0 | a1\n 14248: jump @553 if a0 == 0\n      : @552 (gas: 1)\n 14251: jump @796\n      : @553 (gas: 3)\n 14254: a0 = s1 + 0x1ba0\n 14258: a1 = u64 [s1 + 0xf0]\n 14262: ra = 496, jump @11\n      : @554 [@dyn 248] (gas: 3)\n 14268: t0 = 0x1f2\n 14272: a1 = s1 + 0x1878\n 14276: fallthrough\n      : @555 [@dyn 249] (gas: 10)\n 14277: a2 = a1 + 0x300\n 14281: a0 = u64 [a2 + 0x38]\n 14284: u64 [s1 + 0x88] = a0\n 14288: a0 = u64 [a2 + 0x30]\n 14291: u64 [s1 + 0x78] = a0\n 14294: a0 = u64 [a2 + 0x28]\n 14297: u64 [s1 + 0xa0] = a0\n 14301: a0 = s1 + 0x1b80\n 14305: a1 = 0x40\n 14308: ra = 500, jump @7\n      : @556 [@dyn 250] (gas: 14)\n 14314: t0 = s1 + 0x1878\n 14318: a1 = t0 + 0x300\n 14322: a3 = u64 [a1 + 0x20]\n 14325: a4 = u64 [a1 + 0x18]\n 14328: a5 = u64 [a1 + 0x10]\n 14331: a0 = u64 [a1 + 0x8]\n 14334: a2 = a5 | a3\n 14337: a1 = a0 | a4\n 14340: a1 = a1 | a2\n 14343: a1 = a1 >> 0x20\n 14346: a2 = a2 | a4\n 14349: a2 = a2 << 0x20\n 14352: a1 = a1 | a2\n 14355: jump @558 if a1 == 0\n      : @557 (gas: 1)\n 14358: jump @827\n      : @558 (gas: 11)\n 14361: u64 [t0 + 760] = 0\n 14365: u64 [t0 + 752] = 0\n 14369: u64 [t0 + 744] = 0\n 14373: u64 [s1 + 0x68] = a3\n 14376: a3 = 0xef5cfb8c00000000\n 14386: a1 = s1 + 0x1b60\n 14390: u64 [t0 + 0x300] = a3\n 14394: u64 [s1 + 0xa8] = a0\n 14398: u64 [s1 + 0x60] = a4\n 14401: u64 [s1 + 0x58] = a5\n 14404: ra = 502, jump @9\n      : @559 [@dyn 251] (gas: 4)\n 14410: a0 = u64 [s1 + 0xe0]\n 14414: ra = 0x1f8\n 14418: ecalli 4 // 'caller'\n 14420: fallthrough\n      : @560 [@dyn 252] (gas: 10)\n 14421: a4 = u64 [s1 + 0xa8]\n 14425: a0 = u64 [s1 + 0x68]\n 14428: a1 = u64 [s1 + 0x60]\n 14431: a0 = a0 | a1\n 14434: a1 = 0xfffffffc\n 14444: a1 = a4 <u a1\n 14447: a2 = u64 [s1 + 0x58]\n 14450: a1 = 0 if a2 != 0\n 14452: a1 = 0 if a0 != 0\n 14454: jump @562 if a1 != 0\n      : @561 (gas: 1)\n 14457: jump @827\n      : @562 (gas: 2)\n 14460: a2 = u64 [s1 + 0xf8]\n 14464: t0 = 506, jump @1463\n      : @563 [@dyn 253] (gas: 7)\n 14470: u64 [a5 + 736] = 0\n 14474: a4 = a5 + 0x200\n 14478: u64 [a4 + 0xd8] = a1\n 14482: u64 [a4 + 0xd0] = a2\n 14486: a1 = s1 + 0x1b40\n 14490: u64 [a4 + 0xc8] = a3\n 14494: ra = 508, jump @9\n      : @564 [@dyn 254] (gas: 26)\n 14500: ecalli 11 // 'ref_time_left'\n 14502: a0 = u64 [s1 + 0x78]\n 14505: a0 = reverse a0\n 14507: a1 = a0 << 0x20\n 14510: a2 = u64 [s1 + 0x88]\n 14514: a2 = reverse a2\n 14516: a2 = a2 >> 0x20\n 14519: a1 = a1 | a2\n 14522: a2 = u64 [s1 + 0xa0]\n 14526: a2 = reverse a2\n 14528: a3 = a2 << 0x20\n 14531: a0 = a0 >> 0x20\n 14534: a0 = a0 | a3\n 14537: a2 = a2 >> 0x20\n 14540: a3 = u64 [s1 + 0xf8]\n 14544: u64 [a3 + 0x8] = a0\n 14547: u64 [a3] = a1\n 14549: u32 [a3 + 0x10] = a2\n 14552: a0 = s1 + 0x2878\n 14556: u64 [a0 + 1024] = 0\n 14560: u64 [a0 + 1016] = 0\n 14564: u64 [a0 + 1008] = 0\n 14568: u64 [a0 + 1000] = 0\n 14572: a1 = 0x24\n 14575: a0 = u64 [s1 + 0xa8]\n 14579: ra = 510, jump @20\n      : @565 [@dyn 255] (gas: 4)\n 14585: u64 [s1 + 0xa0] = a0\n 14589: a1 = 0x20\n 14592: a0 = u64 [s1 + 0xa8]\n 14596: ra = 512, jump @20\n      : @566 [@dyn 256] (gas: 31)\n 14602: a2 = s1 + 0x2878\n 14606: a3 = a2 + 0x400\n 14610: u32 [a3 + 8] = 0x20\n 14614: u64 [a3 + 64] = 0xffffffffffffffff\n 14618: u64 [a3 + 56] = 0xffffffffffffffff\n 14622: u64 [a3 + 48] = 0xffffffffffffffff\n 14626: u64 [a3 + 40] = 0xffffffffffffffff\n 14630: a1 = 0x800000000\n 14640: a2 = u64 [s1 + 0x70]\n 14643: t0 = a2 | a1\n 14646: a1 = s1 + 0x2c60\n 14650: a1 = a1 << 0x20\n 14653: a1 = a1 >> 0x20\n 14656: a2 = s1 + 0x2ca0\n 14660: a2 = a2 << 0x20\n 14663: a3 = a2 | a1\n 14666: a1 = u64 [s1 + 0xa0]\n 14670: a1 = a1 << 0x20\n 14673: a1 = a1 >> 0x20\n 14676: a4 = u64 [s1 + 0x80]\n 14680: a4 = a4 | a1\n 14683: a0 = a0 << 0x20\n 14686: a0 = a0 >> 0x20\n 14689: a1 = s1 + 0x2c80\n 14693: a1 = a1 << 0x20\n 14696: a5 = a1 | a0\n 14699: a1 = 0xffffffffffffffff\n 14702: a2 = 0xffffffffffffffff\n 14705: a0 = t0\n 14707: ecalli 0 // 'call'\n 14708: fallthrough\n      : @567 (gas: 1)\n 14709: jump @569 if a0 == 0\n      : @568 (gas: 1)\n 14712: jump @813\n      : @569 (gas: 2)\n 14715: ecalli 13 // 'return_data_size'\n 14717: fallthrough\n      : @570 (gas: 2)\n 14718: a4 = 0x20\n 14721: jump @572 if a0 >=u a4\n      : @571 (gas: 4)\n 14724: ecalli 13 // 'return_data_size'\n 14726: a4 = a0\n 14728: a2 = s1 + 0x1878\n 14732: jump @573\n      : @572 (gas: 2)\n 14734: a2 = s1 + 0x1878\n 14738: fallthrough\n      : @573 (gas: 18)\n 14739: a3 = u64 [s1 + 0xa8]\n 14743: a0 = u64 [s1 + 0x60]\n 14746: a1 = u64 [s1 + 0x58]\n 14749: u64 [s1 + 136] = 0\n 14753: u64 [s1 + 0xa0] = a4\n 14757: a5 = a2 + 0x200\n 14761: u64 [a5 + 0x68] = a4\n 14764: u64 [a5 + 0x88] = a3\n 14768: u64 [a2 + 624] = 0\n 14772: u64 [a5 + 0x90] = a1\n 14776: u64 [a2 + 632] = 0\n 14780: u64 [a5 + 0x98] = a0\n 14784: u64 [a2 + 640] = 0\n 14788: a0 = s1 + 0x1b00\n 14792: a1 = s1 + 0x1ae0\n 14796: a4 = u64 [s1 + 0x68]\n 14799: u64 [a5 + 0xa0] = a4\n 14803: ra = 514, jump @1246\n      : @574 [@dyn 257] (gas: 4)\n 14809: a3 = u64 [s1 + 0x88]\n 14813: a0 = a3 >u 0\n 14815: a1 = u64 [s1 + 0xa0]\n 14819: t0 = 516, jump @1458\n      : @575 [@dyn 258] (gas: 1)\n 14825: jump @577 if a2 != 0\n      : @576 (gas: 1)\n 14828: jump @923\n      : @577 (gas: 3)\n 14831: a0 = s1 + 0x1ac0\n 14835: a1 = u64 [s1 + 0xa8]\n 14839: ra = 518, jump @7\n      : @578 [@dyn 259] (gas: 23)\n 14845: a4 = s1 + 0x1878\n 14849: a5 = a4 + 0x200\n 14853: a0 = u64 [a5 + 0x48]\n 14856: a1 = u64 [a5 + 0x50]\n 14859: a2 = u64 [a5 + 0x58]\n 14862: a3 = u64 [a5 + 0x60]\n 14865: u64 [a5] = a3\n 14867: a3 = a4 + 0x100\n 14871: u64 [a3 + 0xf8] = a2\n 14875: u64 [a3 + 0xf0] = a1\n 14879: u64 [a3 + 0xe8] = a0\n 14883: a0 = u64 [s1 + 0x90]\n 14887: u64 [a5 + 0x20] = a0\n 14890: a0 = u64 [s1 + 0x98]\n 14894: u64 [a5 + 0x18] = a0\n 14897: a0 = u64 [s1 + 0xb0]\n 14901: u64 [a5 + 0x10] = a0\n 14904: a0 = s1 + 0x1aa0\n 14908: a1 = s1 + 0x1a80\n 14912: a2 = s1 + 0x1a60\n 14916: a3 = u64 [s1 + 0xb8]\n 14920: u64 [a5 + 0x8] = a3\n 14923: ra = 520, jump @1238\n      : @579 [@dyn 260] (gas: 11)\n 14929: a1 = s1 + 0x1878\n 14933: a2 = a1 + 0x200\n 14937: a0 = u64 [a2 + 0x40]\n 14940: u64 [s1 + 0xb8] = a0\n 14944: a0 = u64 [a2 + 0x38]\n 14947: u64 [s1 + 0xb0] = a0\n 14951: a0 = u64 [a2 + 0x30]\n 14954: u64 [s1 + 0xa8] = a0\n 14958: a0 = u64 [a2 + 0x28]\n 14961: u64 [s1 + 0xc0] = a0\n 14965: jump @179\n      : @580 (gas: 18)\n 14968: a0 = sp + 0xffffffffffffffe0\n 14971: a1 = a0 & 0xffffffffffffffe0\n 14974: sp = a1\n 14976: a0 = t1 <u a2\n 14979: t0 = a5 + a0\n 14982: a2 = t0 <u a5\n 14985: a2 = a0 if a0 == 0\n 14988: a2 = a2 + a4\n 14991: a0 = a2 <u a4\n 14994: a0 = a0 + a3\n 14997: u64 [a1 + 0x8] = t0\n 15000: u64 [a1] = t1\n 15002: u64 [a1 + 0x10] = a2\n 15005: u64 [a1 + 0x18] = a0\n 15008: a0 = s1 + 0x7ff\n 15012: a0 = a0 + 0x461\n 15016: u64 [s1 + 0x70] = a1\n 15019: ra = 522, jump @11\n      : @581 [@dyn 261] (gas: 29)\n 15025: a0 = s1 + 0x7ff\n 15029: a0 = a0 + 0x79\n 15032: a5 = u64 [a0 + 0x400]\n 15036: a4 = a0 + 0x300\n 15040: a3 = u64 [a4 + 0xf8]\n 15044: a2 = u64 [a4 + 0xf0]\n 15048: a1 = u64 [a4 + 0xe8]\n 15052: a4 = u64 [s1 + 0xe0]\n 15056: ra = a5 ^ a4\n 15059: u64 [s1 + 0x58] = a5\n 15062: a5 = a5 <u a4\n 15065: t1 = u64 [s1 + 0xd8]\n 15069: a0 = a3 <u t1\n 15072: u64 [s1 + 0x50] = a0\n 15075: a5 = a0 if ra == 0\n 15078: t2 = u64 [s1 + 0xd0]\n 15082: a0 = a2 ^ t2\n 15085: u64 [s1 + 0x48] = a0\n 15088: u64 [s1 + 0x60] = a2\n 15091: a0 = a2 <u t2\n 15094: u64 [s1 + 0x68] = a1\n 15097: t0 = u64 [s1 + 0xf8]\n 15101: t0 = a1 <u t0\n 15104: a1 = u64 [s1 + 0x48]\n 15107: a0 = t0 if a1 == 0\n 15110: a1 = a3 ^ t1\n 15113: a1 = a1 | ra\n 15116: a5 = a0 if a1 == 0\n 15119: jump @583 if a5 == 0\n      : @582 (gas: 1)\n 15122: jump @902\n      : @583 (gas: 23)\n 15125: a1 = a3 - t1\n 15128: a2 = u64 [s1 + 0x58]\n 15131: a2 = a2 - a4\n 15134: a3 = u64 [s1 + 0x50]\n 15137: a2 = a2 - a3\n 15140: a3 = a1 <u a0\n 15143: a2 = a2 - a3\n 15146: a1 = a1 - a0\n 15149: a0 = u64 [s1 + 0x60]\n 15152: a0 = a0 - t2\n 15155: a0 = a0 - t0\n 15158: a3 = u64 [s1 + 0x68]\n 15161: a4 = u64 [s1 + 0xf8]\n 15165: a3 = a3 - a4\n 15168: a4 = s1 + 0x2078\n 15172: a5 = a4 + 0x700\n 15176: u64 [a5 + 0x88] = a3\n 15180: u64 [a5 + 0x90] = a0\n 15184: u64 [a5 + 0x98] = a1\n 15188: u64 [a5 + 0xa0] = a2\n 15192: a1 = s1 + 0x2800\n 15196: a0 = u64 [s1 + 0x70]\n 15199: ra = 524, jump @12\n      : @584 [@dyn 262] (gas: 6)\n 15205: a0 = u64 [s1 + 0xe8]\n 15209: a0 = a0 & 0x3\n 15212: a3 = u64 [s1 + 0xb8]\n 15216: a2 = u64 [s1 + 0xb0]\n 15220: a5 = u64 [s1 + 0xa8]\n 15224: jump @588 if a0 == 0\n      : @585 (gas: 1)\n 15228: jump @592 if a0 != 1\n      : @586 (gas: 20)\n 15233: a0 = sp + 0xffffffffffffffe0\n 15236: a1 = a0 & 0xffffffffffffffe0\n 15239: sp = a1\n 15241: a4 = u64 [s1 + 0x90]\n 15245: a0 = a4 <u a5\n 15248: a5 = a2 + a0\n 15251: a2 = a5 <u a2\n 15254: a2 = a0 if a0 == 0\n 15257: a2 = a2 + a3\n 15260: a0 = a2 <u a3\n 15263: a3 = u64 [s1 + 0x98]\n 15267: a0 = a0 + a3\n 15270: u64 [s1 + 0xf0] = a1\n 15274: u64 [a1 + 0x8] = a5\n 15277: u64 [a1] = a4\n 15279: u64 [a1 + 0x10] = a2\n 15282: u64 [a1 + 0x18] = a0\n 15285: a0 = s1 + 0x7ff\n 15289: a0 = a0 + 0x401\n 15293: ra = 526, jump @11\n      : @587 [@dyn 263] (gas: 33)\n 15299: a2 = s1 + 0x7ff\n 15303: a2 = a2 + 0x79\n 15306: a4 = a2 + 0x300\n 15310: a0 = u64 [a4 + 0x90]\n 15314: a1 = u64 [a4 + 0x88]\n 15318: t0 = u64 [a2 + 0x3a0]\n 15322: a3 = u64 [a4 + 0x98]\n 15326: a4 = u64 [s1 + 0xd0]\n 15330: a4 = a4 + a0\n 15333: a5 = u64 [s1 + 0xf8]\n 15337: a5 = a5 + a1\n 15340: a1 = a5 <u a1\n 15343: a4 = a4 + a1\n 15346: a2 = a4 ^ a0\n 15349: a0 = a4 <u a0\n 15352: a0 = a1 if a2 == 0\n 15355: a1 = u64 [s1 + 0xd8]\n 15359: a1 = a1 + a3\n 15362: a2 = u64 [s1 + 0xe0]\n 15366: t0 = t0 + a2\n 15369: a2 = a1 <u a3\n 15372: a2 = a2 + t0\n 15375: a0 = a0 + a1\n 15378: a1 = a0 <u a1\n 15381: a1 = a1 + a2\n 15384: a2 = s1 + 0x2078\n 15388: a3 = a2 + 0x700\n 15392: u64 [a3 + 0xc8] = a5\n 15396: u64 [a3 + 0xd0] = a4\n 15400: u64 [a3 + 0xd8] = a0\n 15404: u64 [a3 + 0xe0] = a1\n 15408: a0 = 0x2840\n 15412: jump @590\n      : @588 (gas: 4)\n 15415: a0 = s1 + 0x7ff\n 15419: a0 = a0 + 0x3e1\n 15423: a1 = u64 [s1 + 0xf0]\n 15427: ra = 528, jump @11\n      : @589 [@dyn 264] (gas: 32)\n 15433: a5 = s1 + 0x7ff\n 15437: a5 = a5 + 0x79\n 15440: a0 = u64 [a5 + 0x370]\n 15444: a1 = u64 [a5 + 0x368]\n 15448: a2 = u64 [s1 + 0xd0]\n 15452: a2 = a2 + a0\n 15455: a3 = u64 [s1 + 0xf8]\n 15459: a3 = a3 + a1\n 15462: a1 = a3 <u a1\n 15465: a2 = a2 + a1\n 15468: a4 = a2 ^ a0\n 15471: a0 = a2 <u a0\n 15474: a0 = a1 if a4 == 0\n 15477: a1 = u64 [a5 + 0x378]\n 15481: a4 = u64 [a5 + 0x380]\n 15485: a5 = s1 + 0x2078\n 15489: u64 [a5 + 0x7e8] = a3\n 15493: u64 [a5 + 0x7f0] = a2\n 15497: a2 = u64 [s1 + 0xd8]\n 15501: a2 = a2 + a1\n 15504: a0 = a0 + a2\n 15507: u64 [a5 + 0x7f8] = a0\n 15511: a0 = a0 <u a2\n 15514: a1 = a2 <u a1\n 15517: a2 = u64 [s1 + 0xe0]\n 15521: a4 = a4 + a2\n 15524: a1 = a1 + a4\n 15527: a0 = a0 + a1\n 15530: a1 = s1 + 0x2878\n 15534: u64 [a1] = a0\n 15536: a0 = 0x2860\n 15540: fallthrough\n      : @590 (gas: 3)\n 15541: a1 = s1 + a0\n 15544: a0 = u64 [s1 + 0xf0]\n 15548: ra = 530, jump @12\n      : @591 [@dyn 265] (gas: 1)\n 15554: jump @595\n      : @592 (gas: 6)\n 15556: a0 = u64 [s1 + 0xa0]\n 15560: ra = 0x214\n 15564: ecalli 4 // 'caller'\n 15566: a2 = u64 [s1 + 0xc8]\n 15570: t0 = 0x216\n 15574: jump @1470\n      : @593 [@dyn 266] (gas: 2)\n 15577: a2 = u64 [s1 + 0xc8]\n 15581: t0 = 534, jump @1470\n      : @594 [@dyn 267] (gas: 20)\n 15587: a4 = s1 + 0x7ff\n 15591: a4 = a4 + 0x79\n 15594: a2 = u64 [s1 + 0xe0]\n 15598: a5 = a4 + 0x300\n 15602: u64 [a5 + 0x40] = a2\n 15605: a2 = u64 [s1 + 0xd8]\n 15609: u64 [a5 + 0x38] = a2\n 15612: a2 = u64 [s1 + 0xd0]\n 15616: u64 [a5 + 0x30] = a2\n 15619: a2 = u64 [s1 + 0xf8]\n 15623: u64 [a5 + 0x28] = a2\n 15626: u64 [a4 + 864] = 0\n 15630: u64 [a5 + 0x58] = a1\n 15633: u64 [a5 + 0x50] = a0\n 15636: a0 = s1 + 0x7ff\n 15640: a0 = a0 + 0x3c1\n 15644: a1 = s1 + 0x7ff\n 15648: a1 = a1 + 0x3a1\n 15652: u64 [a5 + 0x48] = a3\n 15655: ra = 536, jump @1264\n      : @595 [@dyn 268] (gas: 4)\n 15661: a0 = s1 + 0x7ff\n 15665: a0 = a0 + 0x381\n 15669: a1 = 0x40\n 15672: ra = 538, jump @7\n      : @596 [@dyn 269] (gas: 8)\n 15678: a3 = s1 + 0x7ff\n 15682: a3 = a3 + 0x79\n 15685: a4 = a3 + 0x300\n 15689: a0 = u64 [a4 + 0x20]\n 15692: a1 = u64 [a4 + 0x18]\n 15695: a2 = u64 [a4 + 0x10]\n 15698: a3 = u64 [a4 + 0x8]\n 15701: t0 = 540, jump @1459\n      : @597 [@dyn 270] (gas: 1)\n 15707: jump @599 if a0 == 0\n      : @598 (gas: 1)\n 15710: jump @827\n      : @599 (gas: 16)\n 15713: a0 = u64 [s1 + 0xf8]\n 15717: a2 = s1 + 0x7ff\n 15721: a2 = a2 + 0x79\n 15724: a1 = a2 + 0x200\n 15728: u64 [a1 + 0xe8] = a0\n 15732: a0 = u64 [s1 + 0xd0]\n 15736: u64 [a1 + 0xf0] = a0\n 15740: a0 = u64 [s1 + 0xd8]\n 15744: u64 [a1 + 0xf8] = a0\n 15748: a1 = s1 + 0x7ff\n 15752: a1 = a1 + 0x361\n 15756: a0 = u64 [s1 + 0xe0]\n 15760: u64 [a2 + 0x300] = a0\n 15764: a0 = a3\n 15766: u64 [s1 + 0xf8] = a3\n 15770: ra = 542, jump @9\n      : @600 [@dyn 271] (gas: 6)\n 15776: a0 = u64 [s1 + 0xa0]\n 15780: ra = 0x220\n 15784: ecalli 4 // 'caller'\n 15786: a2 = u64 [s1 + 0xc8]\n 15790: t0 = 0x222\n 15794: jump @1453\n      : @601 [@dyn 272] (gas: 2)\n 15797: a2 = u64 [s1 + 0xc8]\n 15801: t0 = 546, jump @1453\n      : @602 [@dyn 273] (gas: 37)\n 15807: a5 = s1 + 0x7ff\n 15811: a5 = a5 + 0x79\n 15814: u64 [a5 + 640] = 0\n 15818: u64 [a5 + 632] = 0\n 15822: a3 = u64 [s1 + 0x80]\n 15826: u64 [a5 + 0x268] = a3\n 15830: a3 = u64 [s1 + 0xc0]\n 15834: u64 [a5 + 0x288] = a3\n 15838: a3 = u64 [0x20020]\n 15843: a4 = u64 [0x20028]\n 15848: u64 [a5 + 624] = 0\n 15852: u64 [a5 + 672] = 0\n 15856: u64 [a5 + 0x2e0] = a3\n 15860: u64 [a5 + 0x2d8] = a4\n 15864: a3 = u64 [0x20030]\n 15869: a4 = u64 [0x20038]\n 15874: u64 [a5 + 664] = 0\n 15878: u64 [a5 + 656] = 0\n 15882: u64 [a5 + 0x2d0] = a3\n 15886: a3 = a5 + 0x200\n 15890: u64 [a3 + 0xc8] = a4\n 15894: u64 [a3 + 0xb8] = a2\n 15898: u64 [a3 + 0xb0] = a1\n 15902: u64 [a3 + 0xa8] = a0\n 15906: a0 = a5\n 15908: a1 = 0x20\n 15911: a2 = s1 + 0x7ff\n 15915: a2 = a2 + 0x341\n 15919: a3 = s1 + 0x7ff\n 15923: a3 = a3 + 0x321\n 15927: a4 = s1 + 0x7ff\n 15931: a4 = a4 + 0x301\n 15935: a5 = s1 + 0x7ff\n 15939: a5 = a5 + 0x2e1\n 15943: u64 [a0 + 704] = 0\n 15947: a0 = u64 [s1 + 0xf8]\n 15951: ra = 548, jump @17\n      : @603 [@dyn 274] (gas: 8)\n 15957: a0 = 0\n 15959: a1 = u64 [s1 + 0x88]\n 15963: a2 = 0\n 15965: ecalli 14 // 'seal_return'\n 15967: a1 = 0x20160\n 15972: i32 a1 = a1 + 0\n 15974: a0 = 0\n 15976: jump @1183\n      : @604 (gas: 19)\n 15979: a0 = u64 [s1 + 0xf8]\n 15983: a2 = u64 [s1 + 0x88]\n 15987: a0 = a0 | a2\n 15990: a2 = u64 [s1 + 0x78]\n 15993: a0 = a2 if a4 == 0\n 15996: t1 = u64 [s1 + 0xa0]\n 16000: a3 = t1\n 16002: t0 = u64 [s1 + 0xc8]\n 16006: a3 = a0 if t0 != 0\n 16009: u64 [s1 + 0xf8] = a3\n 16013: a0 = u64 [s1 + 0xc0]\n 16017: a2 = u64 [s1 + 0x90]\n 16021: a0 = a0 | a2\n 16024: a2 = u64 [s1 + 0x80]\n 16028: a0 = a2 if a4 == 0\n 16031: a5 = u64 [s1 + 0xb0]\n 16035: a3 = a5\n 16037: a3 = a0 if t0 != 0\n 16040: t0 = 550, jump @1487\n      : @605 [@dyn 275] (gas: 1)\n 16046: ra = 552, jump @1504\n      : @606 [@dyn 276] (gas: 6)\n 16052: u64 [s1 + 0x90] = a0\n 16056: u64 [s1 + 0x80] = a1\n 16060: a0 = u64 [s1 + 0xa8]\n 16064: a1 = u64 [s1 + 0xb8]\n 16068: a2 = u64 [s1 + 0xf0]\n 16072: ra = 554, jump @1504\n      : @607 [@dyn 277] (gas: 7)\n 16078: u64 [s1 + 0x78] = a0\n 16081: u64 [s1 + 0x88] = a1\n 16085: a1 = u64 [s1 + 0xf0]\n 16089: a2 = 0x80 - a1\n 16093: a0 = u64 [s1 + 0xb0]\n 16097: a1 = u64 [s1 + 0xa0]\n 16101: ra = 556, jump @1509\n      : @608 [@dyn 278] (gas: 21)\n 16107: a2 = u64 [s1 + 0x88]\n 16111: a1 = a1 | a2\n 16114: a3 = u64 [s1 + 0xf0]\n 16118: a4 = a3 <u 0x80\n 16122: u64 [s1 + 0x88] = a4\n 16126: a2 = u64 [s1 + 0x80]\n 16130: a1 = a2 if a4 == 0\n 16133: a2 = u64 [s1 + 0xb8]\n 16137: a2 = a1 if a3 != 0\n 16140: u64 [s1 + 0xb8] = a2\n 16144: a1 = u64 [s1 + 0x78]\n 16147: a0 = a0 | a1\n 16150: a1 = u64 [s1 + 0x90]\n 16154: a0 = a1 if a4 == 0\n 16157: a1 = u64 [s1 + 0xa8]\n 16161: a1 = a0 if a3 != 0\n 16164: a2 = a3\n 16166: u64 [s1 + 0xa8] = a1\n 16170: a0 = u64 [s1 + 0xb0]\n 16174: a1 = u64 [s1 + 0xa0]\n 16178: ra = 558, jump @1504\n      : @609 [@dyn 279] (gas: 3)\n 16184: a4 = 0\n 16186: a5 = 0\n 16188: t0 = 560, jump @1485\n      : @610 [@dyn 280] (gas: 3)\n 16194: t1 = u64 [s1 + 0xb8]\n 16198: t2 = u64 [s1 + 0xa8]\n 16202: fallthrough\n      : @611 (gas: 89)\n 16203: u64 [s1 + 0xb8] = a4\n 16207: a2 = t2 >> 0x3f\n 16210: a3 = t1 << 0x1\n 16213: t0 = a3 | a2\n 16216: a3 = t2 << 0x1\n 16219: a4 = u64 [s1 + 0xf8]\n 16223: a4 = a4 >> 0x3f\n 16226: a3 = a3 | a4\n 16229: u64 [s1 + 0xa8] = a3\n 16233: a2 = u64 [s1 + 0x88]\n 16237: t2 = a1\n 16239: u64 [s1 + 0xb0] = t0\n 16243: a1 = a2 ^ t0\n 16246: ra = t1\n 16248: t1 = a2 <u t0\n 16251: a4 = u64 [s1 + 0x90]\n 16255: t0 = a4 <u a3\n 16258: t0 = t1 if a1 != 0\n 16261: a1 = t2 << 0x1\n 16264: a3 = a0 >> 0x3f\n 16267: a1 = a1 | a3\n 16270: u64 [s1 + 0xa0] = a1\n 16274: a3 = ra >> 0x3f\n 16277: a0 = a0 << 0x1\n 16280: a3 = a3 | a0\n 16283: a0 = u64 [s1 + 0xf8]\n 16287: a0 = a0 << 0x1\n 16290: a4 = u64 [s1 + 0xc0]\n 16294: a1 = a4 >> 0x3f\n 16297: ra = a0 | a1\n 16300: a1 = a4 << 0x1\n 16303: a4 = u64 [s1 + 0xc8]\n 16307: t1 = a4 >> 0x3f\n 16310: t1 = a1 | t1\n 16313: a1 = a4 << 0x1\n 16316: a4 = u64 [s1 + 0xe8]\n 16320: t2 = a4 >> 0x3f\n 16323: a1 = a1 | t2\n 16326: a4 = a4 << 0x1\n 16329: a0 = u64 [s1 + 0xb8]\n 16333: a4 = a4 | a0\n 16336: u64 [s1 + 0xe8] = a4\n 16340: a1 = a1 | a5\n 16343: u64 [s1 + 0xc8] = a1\n 16347: a1 = a5 | t1\n 16350: u64 [s1 + 0xc0] = a1\n 16354: a0 = a5 | ra\n 16357: u64 [s1 + 0xf8] = a0\n 16361: a0 = a2 - a3\n 16364: a0 = a0 <u t0\n 16367: a1 = a2 <u a3\n 16370: t0 = u64 [s1 + 0xa0]\n 16374: a4 = a2 - t0\n 16377: a4 = a4 - a1\n 16380: a4 = a4 - a0\n 16383: a5 = a4 >>a 0x3f\n 16386: a0 = u64 [s1 + 0x98]\n 16390: a0 = a0 & a5\n 16393: a1 = u64 [s1 + 0xa8]\n 16397: t2 = a1 - a0\n 16400: a1 = a1 <u a0\n 16403: a0 = u64 [s1 + 0xb0]\n 16407: t1 = a0 - a1\n 16410: a1 = 0 if a0 != 0\n 16412: a0 = a3 - a1\n 16415: a1 = a3 <u a1\n 16418: a1 = t0 - a1\n 16421: a3 = u64 [s1 + 0xf0]\n 16425: ra = u64 [s1 + 0xe0]\n 16429: a2 = a3 | ra\n 16432: a2 = a2 <u 0x1\n 16435: a4 = u64 [s1 + 0xd0]\n 16439: t0 = a4 <u a2\n 16442: a2 = a4 - a2\n 16445: a4 = a3 <u 0x1\n 16448: ra = ra - a4\n 16451: a4 = u64 [s1 + 0xd8]\n 16455: a4 = a4 - t0\n 16458: a3 = a3 + 0xffffffffffffffff\n 16461: u64 [s1 + 0xe0] = ra\n 16465: u64 [s1 + 0xd8] = a4\n 16469: t0 = ra | a4\n 16472: u64 [s1 + 0xf0] = a3\n 16476: a4 = a3 | a2\n 16479: a3 = a4 | t0\n 16482: a4 = a5 & 0x1\n 16485: u64 [s1 + 0xd0] = a2\n 16489: a5 = 0\n 16491: jump @611 if a3 != 0\n      : @612 (gas: 4)\n 16495: a0 = u64 [s1 + 0xe8]\n 16499: a0 = a0 << 0x1\n 16502: a4 = a4 | a0\n 16505: fallthrough\n      : @613 (gas: 3)\n 16506: a0 = a4 & 0xffffffffffffffff\n 16509: a1 = u64 [s1 + 0x38]\n 16512: jump @615 if a1 == a0\n      : @614 (gas: 1)\n 16515: jump @891\n      : @615 (gas: 9)\n 16518: a0 = 0x30160\n 16523: u64 [s1 + 0xb0] = a0\n 16527: i32 a0 = a0 + 0\n 16529: u64 [s1 + 0xa8] = a0\n 16533: ra = 0x232\n 16537: ecalli 4 // 'caller'\n 16539: a2 = u64 [s1 + 0xb0]\n 16543: t0 = 0x234\n 16547: jump @1445\n      : @616 [@dyn 281] (gas: 2)\n 16550: a2 = u64 [s1 + 0xb0]\n 16554: t0 = 564, jump @1445\n      : @617 [@dyn 282] (gas: 9)\n 16560: u64 [a2 + 320] = 0\n 16564: a4 = a2 + 0x100\n 16568: u64 [a4 + 0x38] = a1\n 16571: u64 [a4 + 0x30] = a0\n 16574: a1 = s1 + 0x7ff\n 16578: a1 = a1 + 0x1a1\n 16582: u64 [a4 + 0x28] = a3\n 16585: a0 = 0\n 16587: ra = 566, jump @9\n      : @618 [@dyn 283] (gas: 11)\n 16593: a1 = s1 + 0x7ff\n 16597: a1 = a1 + 0x79\n 16600: u64 [a1 + 288] = 0\n 16604: u64 [a1 + 280] = 0\n 16608: u64 [a1 + 264] = 0x2\n 16613: a2 = a1\n 16615: a0 = 0x20\n 16618: a1 = s1 + 0x7ff\n 16622: a1 = a1 + 0x181\n 16626: u64 [a2 + 272] = 0\n 16630: ra = 568, jump @9\n      : @619 [@dyn 284] (gas: 7)\n 16636: a0 = sp + 0xffffffffffffffe0\n 16639: a0 = a0 & 0xffffffffffffffe0\n 16642: u64 [s1 + 0x70] = a0\n 16645: sp = a0\n 16647: a1 = 0x20150\n 16652: a0 = i32 [0x20150]\n 16657: jump @621 if a0 >u 63\n      : @620 (gas: 2)\n 16661: u32 [0x20150] = 0x40\n 16667: fallthrough\n      : @621 (gas: 14)\n 16668: a0 = sp + 0xffffffffffffffe0\n 16671: a2 = a0 & 0xffffffffffffffe0\n 16674: u64 [s1 + 0xf8] = a2\n 16678: sp = a2\n 16680: a0 = 0x20160\n 16685: i32 a0 = a0 + 0\n 16687: i32 a2 = a2 + 0\n 16689: u64 [s1 + 0xe0] = a1\n 16693: a1 = 0x40\n 16696: u64 [s1 + 0xe8] = a0\n 16700: ra = 0x23a\n 16704: ecalli 9 // 'hash_keccak_256'\n 16706: t0 = 0x23c\n 16710: jump @1501\n      : @622 [@dyn 285] (gas: 1)\n 16713: t0 = 572, jump @1501\n      : @623 [@dyn 286] (gas: 18)\n 16719: a4 = reverse a1\n 16721: a1 = reverse a2\n 16723: a2 = reverse a3\n 16725: a0 = u64 [s1 + 0x70]\n 16728: u64 [s1 + 0xf0] = a2\n 16732: u64 [a0 + 0x18] = a2\n 16735: u64 [s1 + 0xf8] = a1\n 16739: u64 [a0 + 0x10] = a1\n 16742: u64 [s1 + 0xd8] = a4\n 16746: u64 [a0 + 0x8] = a4\n 16749: u64 [s1 + 0xd0] = a5\n 16753: u64 [a0] = a5\n 16755: a0 = u64 [s1 + 0xa8]\n 16759: ra = 0x23e\n 16763: ecalli 4 // 'caller'\n 16765: a2 = u64 [s1 + 0xb0]\n 16769: t0 = 0x240\n 16773: jump @1445\n      : @624 [@dyn 287] (gas: 2)\n 16776: a2 = u64 [s1 + 0xb0]\n 16780: t0 = 576, jump @1445\n      : @625 [@dyn 288] (gas: 8)\n 16786: u64 [a2 + 256] = 0\n 16790: u64 [a2 + 0xf8] = a1\n 16794: u64 [a2 + 0xf0] = a0\n 16798: a1 = s1 + 0x7ff\n 16802: a1 = a1 + 0x161\n 16806: u64 [a2 + 0xe8] = a3\n 16810: a0 = 0\n 16812: ra = 578, jump @9\n      : @626 [@dyn 289] (gas: 11)\n 16818: a1 = s1 + 0x7ff\n 16822: a1 = a1 + 0x79\n 16825: u64 [a1 + 224] = 0\n 16829: u64 [a1 + 216] = 0\n 16833: u64 [a1 + 200] = 0x4\n 16838: a2 = a1\n 16840: a0 = 0x20\n 16843: a1 = s1 + 0x7ff\n 16847: a1 = a1 + 0x141\n 16851: u64 [a2 + 208] = 0\n 16855: ra = 580, jump @9\n      : @627 [@dyn 290] (gas: 3)\n 16861: a1 = u64 [s1 + 0xe0]\n 16865: a0 = i32 [a1]\n 16867: jump @629 if a0 >u 63\n      : @628 (gas: 2)\n 16871: u32 [a1 + 0] = 0x40\n 16874: fallthrough\n      : @629 (gas: 4)\n 16875: a0 = sp + 0xffffffffffffffe0\n 16878: a0 = a0 & 0xffffffffffffffe0\n 16881: u64 [s1 + 0xc8] = a0\n 16885: t0 = 582, jump @1465\n      : @630 [@dyn 291] (gas: 5)\n 16891: ra = 0x248\n 16895: ecalli 9 // 'hash_keccak_256'\n 16897: a3 = u64 [s1 + 0xc8]\n 16901: t0 = 0x24a\n 16905: jump @1478\n      : @631 [@dyn 292] (gas: 2)\n 16908: a3 = u64 [s1 + 0xc8]\n 16912: t0 = 586, jump @1478\n      : @632 [@dyn 293] (gas: 9)\n 16918: a5 = a4 + 0x600\n 16922: u64 [a5 + 0x40] = a3\n 16925: u64 [a5 + 0x38] = a2\n 16928: u64 [a5 + 0x30] = a1\n 16931: u64 [a5 + 0x28] = a0\n 16934: a0 = s1 + 0x7ff\n 16938: a0 = a0 + 0x121\n 16942: a1 = s1 + 0x26a0\n 16946: ra = 588, jump @11\n      : @633 [@dyn 294] (gas: 10)\n 16952: a0 = s1 + 0x7ff\n 16956: a0 = a0 + 0x79\n 16959: a0 = u32 [a0 + 0xa8]\n 16963: u64 [s1 + 0xa0] = a0\n 16967: a0 = u64 [s1 + 0xa8]\n 16971: ra = 0x24e\n 16975: ecalli 4 // 'caller'\n 16977: a2 = u64 [s1 + 0xb0]\n 16981: t0 = 0x250\n 16985: jump @1445\n      : @634 [@dyn 295] (gas: 2)\n 16988: a2 = u64 [s1 + 0xb0]\n 16992: t0 = 592, jump @1445\n      : @635 [@dyn 296] (gas: 8)\n 16998: u64 [a2 + 160] = 0\n 17002: u64 [a2 + 0x98] = a1\n 17006: u64 [a2 + 0x90] = a0\n 17010: a1 = s1 + 0x7ff\n 17014: a1 = a1 + 0x101\n 17018: u64 [a2 + 0x88] = a3\n 17022: a0 = 0\n 17024: ra = 594, jump @9\n      : @636 [@dyn 297] (gas: 11)\n 17030: a1 = s1 + 0x7ff\n 17034: a1 = a1 + 0x79\n 17037: u64 [a1 + 128] = 0\n 17041: u64 [a1 + 120] = 0\n 17044: u64 [a1 + 104] = 0x5\n 17048: a2 = a1\n 17050: a0 = 0x20\n 17053: a1 = s1 + 0x7ff\n 17057: a1 = a1 + 0xe1\n 17061: u64 [a2 + 112] = 0\n 17064: ra = 596, jump @9\n      : @637 [@dyn 298] (gas: 3)\n 17070: a1 = u64 [s1 + 0xe0]\n 17074: a0 = i32 [a1]\n 17076: jump @639 if a0 >u 63\n      : @638 (gas: 2)\n 17080: u32 [a1 + 0] = 0x40\n 17083: fallthrough\n      : @639 (gas: 4)\n 17084: a0 = sp + 0xffffffffffffffe0\n 17087: a0 = a0 & 0xffffffffffffffe0\n 17090: u64 [s1 + 0xc8] = a0\n 17094: t0 = 598, jump @1465\n      : @640 [@dyn 299] (gas: 4)\n 17100: ra = 0x258\n 17104: ecalli 9 // 'hash_keccak_256'\n 17106: t0 = 0x25a\n 17110: jump @1486\n      : @641 [@dyn 300] (gas: 1)\n 17113: t0 = 602, jump @1486\n      : @642 [@dyn 301] (gas: 18)\n 17119: u64 [s1 + 0x98] = a0\n 17123: a0 = reverse a3\n 17125: u64 [s1 + 0x90] = a0\n 17129: a0 = sp + 0xffffffffffffffe0\n 17132: a0 = a0 & 0xffffffffffffffe0\n 17135: u64 [s1 + 0xc8] = a0\n 17139: sp = a0\n 17141: a2 = s1 + 0x7ff\n 17145: a2 = a2 + 0x79\n 17148: u64 [a2 + 96] = 0\n 17151: u64 [a2 + 88] = 0\n 17154: u64 [a2 + 80] = 0\n 17157: a1 = s1 + 0x7ff\n 17161: a1 = a1 + 0xc1\n 17165: a0 = u64 [s1 + 0x38]\n 17168: u64 [a2 + 0x48] = a0\n 17171: a0 = 0\n 17173: ra = 604, jump @9\n      : @643 [@dyn 302] (gas: 15)\n 17179: a0 = u64 [s1 + 0x90]\n 17183: a1 = s1 + 0x7ff\n 17187: a1 = a1 + 0x79\n 17190: u64 [a1 + 0x40] = a0\n 17193: a0 = u64 [s1 + 0x98]\n 17197: u64 [a1 + 0x38] = a0\n 17200: a0 = u64 [s1 + 0xb8]\n 17204: u64 [a1 + 0x30] = a0\n 17207: a3 = a1\n 17209: a0 = 0x20\n 17212: a1 = s1 + 0x7ff\n 17216: a1 = a1 + 0xa1\n 17220: a2 = u64 [s1 + 0xc0]\n 17224: u64 [a3 + 0x28] = a2\n 17227: ra = 606, jump @9\n      : @644 [@dyn 303] (gas: 3)\n 17233: a1 = u64 [s1 + 0xe0]\n 17237: a0 = i32 [a1]\n 17239: jump @646 if a0 >u 63\n      : @645 (gas: 2)\n 17243: u32 [a1 + 0] = 0x40\n 17246: fallthrough\n      : @646 (gas: 6)\n 17247: a0 = 0xffffffff\n 17257: u64 [s1 + 0x98] = a0\n 17261: a0 = sp + 0xffffffffffffffe0\n 17264: a0 = a0 & 0xffffffffffffffe0\n 17267: u64 [s1 + 0xc0] = a0\n 17271: t0 = 608, jump @1465\n      : @647 [@dyn 304] (gas: 5)\n 17277: ra = 0x262\n 17281: ecalli 9 // 'hash_keccak_256'\n 17283: a3 = u64 [s1 + 0xc0]\n 17287: t0 = 0x264\n 17291: jump @1469\n      : @648 [@dyn 305] (gas: 2)\n 17294: a3 = u64 [s1 + 0xc0]\n 17298: t0 = 612, jump @1469\n      : @649 [@dyn 306] (gas: 12)\n 17304: a1 = u64 [s1 + 0xc8]\n 17308: u64 [a1 + 0x18] = a3\n 17311: u64 [a1 + 0x10] = a2\n 17314: u64 [a1 + 0x8] = a4\n 17317: u64 [a1] = a0\n 17319: a0 = sp + 0xffffffffffffffe0\n 17322: a0 = a0 & 0xffffffffffffffe0\n 17325: u64 [s1 + 0x30] = a0\n 17328: sp = a0\n 17330: a0 = s1 + 0x7ff\n 17334: a0 = a0 + 0x81\n 17338: ra = 614, jump @11\n      : @650 [@dyn 307] (gas: 31)\n 17344: a3 = 0x1\n 17347: u64 [s1 + 96] = 0\n 17350: u64 [s1 + 104] = 0\n 17353: a5 = 0\n 17355: a1 = s1 + 0x7ff\n 17359: a1 = a1 + 0x79\n 17362: a0 = u64 [a1 + 0x20]\n 17365: u64 [s1 + 0x90] = a0\n 17369: a0 = u64 [a1 + 0x18]\n 17372: u64 [s1 + 0x88] = a0\n 17376: a2 = u64 [s1 + 0xd0]\n 17380: a2 = a2 + a3\n 17383: a0 = a2 <u a3\n 17386: a4 = u64 [s1 + 0xd8]\n 17390: a0 = a0 + a4\n 17393: u64 [s1 + 0x58] = a2\n 17396: u64 [s1 + 0x50] = a0\n 17399: a0 = a0 | a2\n 17402: a0 = a0 <u a3\n 17405: a2 = u64 [s1 + 0xf8]\n 17409: a0 = a0 + a2\n 17412: u64 [s1 + 0x48] = a0\n 17415: a0 = a0 <u a2\n 17418: a2 = u64 [s1 + 0xf0]\n 17422: a0 = a0 + a2\n 17425: u64 [s1 + 0x40] = a0\n 17428: a0 = u64 [a1 + 0x10]\n 17431: u64 [s1 + 0x80] = a0\n 17435: a0 = u64 [a1 + 0x8]\n 17438: u64 [s1 + 0x78] = a0\n 17441: fallthrough\n      : @651 (gas: 10)\n 17442: a1 = 0x1\n 17445: a1 = a1 if a5 == 0\n 17448: a0 = u64 [s1 + 0xa0]\n 17452: a0 = a0 <u a3\n 17455: a0 = a0 ^ 0x1\n 17458: a2 = 0x1\n 17461: a2 = a0 if a5 == 0\n 17464: a0 = 0\n 17466: a2 = a1 if a0 != 0\n 17469: jump @686 if a2 == 0\n      : @652 (gas: 9)\n 17473: u64 [s1 + 184] = 0\n 17477: u64 [s1 + 240] = 0\n 17481: u64 [s1 + 0xf8] = a3\n 17485: a0 = u64 [s1 + 0xa8]\n 17489: ra = 0x268\n 17493: ecalli 4 // 'caller'\n 17495: a2 = u64 [s1 + 0xb0]\n 17499: t0 = 0x26a\n 17503: jump @1445\n      : @653 [@dyn 308] (gas: 2)\n 17506: a2 = u64 [s1 + 0xb0]\n 17510: t0 = 618, jump @1445\n      : @654 [@dyn 309] (gas: 10)\n 17516: u64 [a2 + 0] = 0\n 17518: u64 [a2 + 0xfffffffffffffff8] = a1\n 17521: a1 = s1 + 0x1000\n 17525: u64 [a1 + 0xfffffffffffff868] = a0\n 17529: a1 = s1 + 0x7ff\n 17533: a1 = a1 + 0x61\n 17536: a0 = s1 + 0x1000\n 17540: u64 [a0 + 0xfffffffffffff860] = a3\n 17544: a0 = 0\n 17546: ra = 620, jump @9\n      : @655 [@dyn 310] (gas: 12)\n 17552: a0 = s1 + 0x1000\n 17556: u64 [a0 + 4294965336] = 0\n 17560: a0 = s1 + 0x1000\n 17564: u64 [a0 + 4294965328] = 0\n 17568: a0 = s1 + 0x1000\n 17572: u64 [a0 + 4294965320] = 0\n 17576: a0 = 0x20\n 17579: a1 = s1 + 0x7ff\n 17583: a1 = a1 + 0x41\n 17586: a3 = s1 + 0x1000\n 17590: u64 [a3 + 4294965312] = 0x3\n 17595: ra = 622, jump @9\n      : @656 [@dyn 311] (gas: 3)\n 17601: a1 = u64 [s1 + 0xe0]\n 17605: a0 = i32 [a1]\n 17607: jump @658 if a0 >u 63\n      : @657 (gas: 2)\n 17611: u32 [a1 + 0] = 0x40\n 17614: fallthrough\n      : @658 (gas: 4)\n 17615: a0 = sp + 0xffffffffffffffe0\n 17618: a0 = a0 & 0xffffffffffffffe0\n 17621: u64 [s1 + 0xd8] = a0\n 17625: t0 = 624, jump @1465\n      : @659 [@dyn 312] (gas: 4)\n 17631: ra = 0x272\n 17635: ecalli 9 // 'hash_keccak_256'\n 17637: t0 = 0x274\n 17641: jump @1473\n      : @660 [@dyn 313] (gas: 1)\n 17644: t0 = 628, jump @1473\n      : @661 [@dyn 314] (gas: 14)\n 17650: a0 = u64 [s1 + 0xf0]\n 17654: a1 = s1 + 0x1000\n 17658: u64 [a1 + 0xfffffffffffff838] = a0\n 17662: a1 = s1 + 0x1000\n 17666: u64 [a1 + 0xfffffffffffff830] = a0\n 17670: a1 = s1 + 0x1000\n 17674: u64 [a1 + 0xfffffffffffff828] = a0\n 17678: a1 = s1 + 0x7ff\n 17682: a1 = a1 + 0x21\n 17685: a0 = u64 [s1 + 0xf8]\n 17689: a2 = s1 + 0x1000\n 17693: u64 [a2 + 0xfffffffffffff820] = a0\n 17697: a0 = 0\n 17699: ra = 630, jump @9\n      : @662 [@dyn 315] (gas: 16)\n 17705: a0 = u64 [s1 + 0xc0]\n 17709: a1 = s1 + 0x1000\n 17713: u64 [a1 + 0xfffffffffffff818] = a0\n 17717: a0 = u64 [s1 + 0xc8]\n 17721: a1 = s1 + 0x1000\n 17725: u64 [a1 + 0xfffffffffffff810] = a0\n 17729: a0 = u64 [s1 + 0xd0]\n 17733: a1 = s1 + 0x1000\n 17737: u64 [a1 + 0xfffffffffffff808] = a0\n 17741: a0 = 0x20\n 17744: a1 = s1 + 0x7ff\n 17748: a1 = a1 + 0x1\n 17751: a2 = u64 [s1 + 0xd8]\n 17755: a3 = s1 + 0x1000\n 17759: u64 [a3 + 0xfffffffffffff800] = a2\n 17763: ra = 632, jump @9\n      : @663 [@dyn 316] (gas: 3)\n 17769: a1 = u64 [s1 + 0xe0]\n 17773: a0 = i32 [a1]\n 17775: jump @665 if a0 >u 63\n      : @664 (gas: 2)\n 17779: u32 [a1 + 0] = 0x40\n 17782: fallthrough\n      : @665 (gas: 4)\n 17783: a0 = sp + 0xffffffffffffffe0\n 17786: a0 = a0 & 0xffffffffffffffe0\n 17789: u64 [s1 + 0xd8] = a0\n 17793: t0 = 634, jump @1465\n      : @666 [@dyn 317] (gas: 5)\n 17799: ra = 0x27c\n 17803: ecalli 9 // 'hash_keccak_256'\n 17805: a3 = u64 [s1 + 0xd8]\n 17809: t0 = 0x27e\n 17813: jump @1448\n      : @667 [@dyn 318] (gas: 2)\n 17816: a3 = u64 [s1 + 0xd8]\n 17820: t0 = 638, jump @1448\n      : @668 [@dyn 319] (gas: 9)\n 17826: a1 = s1 + 0x2078\n 17830: a5 = a1 + 0x600\n 17834: u64 [a5 + 0x48] = a3\n 17837: u64 [a5 + 0x50] = a2\n 17840: u64 [a5 + 0x58] = a4\n 17843: u64 [a5 + 0x60] = a0\n 17846: a0 = s1 + 0x7e0\n 17850: a1 = s1 + 0x26c0\n 17854: ra = 640, jump @11\n      : @669 [@dyn 320] (gas: 3)\n 17860: a0 = u64 [s1 + 0x7e8]\n 17864: a0 = a0 & 0xff\n 17868: jump @676 if a0 != 0\n      : @670 (gas: 4)\n 17872: a0 = u64 [s1 + 0x7e0]\n 17876: a0 = a0 & 0xffffffffffffffff\n 17879: a3 = u64 [s1 + 0xf8]\n 17883: jump @677 if a0 == 0\n      : @671 (gas: 15)\n 17887: a2 = u64 [s1 + 0xf0]\n 17891: a0 = a2 >u 0\n 17893: a1 = a3 <u 0x100\n 17897: a1 = a1 ^ 0x1\n 17900: a1 = a0 if a2 != 0\n 17903: a0 = a2 >u 0\n 17905: a4 = a2 >u 0\n 17907: a4 = a0 if a2 == 0\n 17910: a0 = u64 [s1 + 0xb8]\n 17914: a4 = a1 if a0 == 0\n 17917: u64 [s1 + 0xd0] = a4\n 17921: i32 a2 = a3 + 0xffffffffffffff80\n 17924: a0 = 0x1\n 17927: a1 = 0\n 17929: ra = 642, jump @1509\n      : @672 [@dyn 321] (gas: 7)\n 17935: u64 [s1 + 0xf0] = a0\n 17939: u64 [s1 + 0xd8] = a1\n 17943: a1 = u64 [s1 + 0xf8]\n 17947: i32 a2 = 0x80 - a1\n 17951: a0 = 0x1\n 17954: a1 = 0\n 17956: ra = 644, jump @1504\n      : @673 [@dyn 322] (gas: 7)\n 17962: u64 [s1 + 0xb8] = a0\n 17966: u64 [s1 + 0xc0] = a1\n 17970: a2 = i32 [s1 + 0xf8]\n 17974: u64 [s1 + 0xc8] = a2\n 17978: a0 = 0\n 17980: a1 = 0\n 17982: ra = 646, jump @1509\n      : @674 [@dyn 323] (gas: 19)\n 17988: a4 = u64 [s1 + 0xb8]\n 17992: a4 = a4 | a0\n 17995: a0 = u64 [s1 + 0xf8]\n 17999: a3 = a0 <u 0x80\n 18003: u64 [s1 + 0xb8] = a3\n 18007: a2 = u64 [s1 + 0xf0]\n 18011: a4 = a2 if a3 == 0\n 18014: a4 = 0 if a0 == 0\n 18016: u64 [s1 + 0xf0] = a4\n 18020: a2 = u64 [s1 + 0xc0]\n 18024: a2 = a2 | a1\n 18027: a1 = u64 [s1 + 0xd8]\n 18031: a2 = a1 if a3 == 0\n 18034: a2 = 0 if a0 == 0\n 18036: u64 [s1 + 0xd8] = a2\n 18040: a0 = 0x1\n 18043: a1 = 0\n 18045: a2 = u64 [s1 + 0xc8]\n 18049: ra = 648, jump @1509\n      : @675 [@dyn 324] (gas: 24)\n 18055: a4 = u64 [s1 + 0xd8]\n 18059: t0 = u64 [s1 + 0xf0]\n 18063: a5 = a0\n 18065: a3 = a1\n 18067: a0 = u64 [s1 + 0xb8]\n 18071: a5 = 0 if a0 == 0\n 18073: a3 = 0 if a0 == 0\n 18075: a0 = u64 [s1 + 0xd0]\n 18079: a4 = 0 if a0 != 0\n 18081: t0 = 0 if a0 != 0\n 18083: a3 = 0 if a0 != 0\n 18085: a5 = 0 if a0 != 0\n 18087: a0 = u64 [s1 + 0x88]\n 18091: a0 = a0 & t0\n 18094: a1 = u64 [s1 + 0x90]\n 18098: a1 = a1 & a4\n 18101: a2 = u64 [s1 + 0x80]\n 18105: a2 = a2 & a3\n 18108: a1 = a1 | a2\n 18111: a2 = u64 [s1 + 0x78]\n 18114: a2 = a2 & a5\n 18117: a0 = a0 | a2\n 18120: a0 = a0 | a1\n 18123: jump @679 if a0 == 0\n      : @676 (gas: 3)\n 18126: a1 = u64 [s1 + 0x98]\n 18130: a3 = u64 [s1 + 0xf8]\n 18134: jump @678\n      : @677 (gas: 2)\n 18136: a1 = u64 [s1 + 0x98]\n 18140: fallthrough\n      : @678 (gas: 4)\n 18141: a5 = 0\n 18143: a0 = a3 + 0x1\n 18146: a3 = a0 & a1\n 18149: jump @651\n      : @679 (gas: 7)\n 18152: u64 [s1 + 0xc8] = a3\n 18156: u64 [s1 + 0xd0] = a5\n 18160: u64 [s1 + 0xd8] = a4\n 18164: u64 [s1 + 0xf0] = t0\n 18168: a0 = s1 + 0x7c0\n 18172: a1 = u64 [s1 + 0x70]\n 18175: ra = 650, jump @11\n      : @680 [@dyn 325] (gas: 15)\n 18181: a3 = s1 + 0x700\n 18185: a0 = u64 [a3 + 0xd8]\n 18189: a1 = u64 [a3 + 0xd0]\n 18193: a2 = u64 [a3 + 0xc8]\n 18197: t0 = u64 [s1 + 0x7c0]\n 18201: a4 = u64 [0x200a8]\n 18206: a5 = a0 >u 0\n 18208: a3 = a1 >u 0\n 18210: a3 = a5 if a0 != 0\n 18213: a4 = a4 <u t0\n 18216: a5 = a2 >u 0\n 18218: a5 = a4 if a2 == 0\n 18221: a4 = a1 | a0\n 18224: a5 = a3 if a4 != 0\n 18227: jump @682 if a5 != 0\n      : @681 (gas: 7)\n 18230: a0 = u64 [s1 + 0x60]\n 18233: a0 = a0 + 0x1\n 18236: a1 = u64 [s1 + 0x98]\n 18240: a0 = a0 & a1\n 18243: u64 [s1 + 0x60] = a0\n 18246: a3 = u64 [s1 + 0xf8]\n 18250: jump @678\n      : @682 (gas: 23)\n 18252: a3 = u64 [0x200b0]\n 18257: a3 = a3 + t0\n 18260: a4 = a3 <u t0\n 18263: a5 = a2 + a4\n 18266: a5 = a5 + 0xffffffffffffffff\n 18269: t0 = a5 ^ a2\n 18272: a2 = a5 <u a2\n 18275: a2 = a4 if t0 == 0\n 18278: a4 = a1 + 0xffffffffffffffff\n 18281: a2 = a2 + a4\n 18284: a4 = a2 <u a4\n 18287: a1 = a1 <u 0x1\n 18290: a0 = a0 - a1\n 18293: a0 = a0 + a4\n 18296: a1 = s1 + 0x2078\n 18300: a4 = a1 + 0x600\n 18304: u64 [a4 + 0x68] = a3\n 18307: u64 [a4 + 0x70] = a5\n 18310: u64 [a4 + 0x78] = a2\n 18313: u64 [a4 + 0x80] = a0\n 18317: a1 = s1 + 0x26e0\n 18321: a0 = u64 [s1 + 0x70]\n 18324: ra = 652, jump @12\n      : @683 [@dyn 326] (gas: 14)\n 18330: a0 = sp + 0xffffffffffffffe0\n 18333: a1 = a0 & 0xffffffffffffffe0\n 18336: u64 [s1 + 0xc0] = a1\n 18340: sp = a1\n 18342: a0 = u64 [s1 + 0x40]\n 18345: u64 [a1 + 0x18] = a0\n 18348: a0 = u64 [s1 + 0x48]\n 18351: u64 [a1 + 0x10] = a0\n 18354: a0 = u64 [s1 + 0x50]\n 18357: u64 [a1 + 0x8] = a0\n 18360: a0 = u64 [s1 + 0x58]\n 18363: u64 [a1] = a0\n 18365: a0 = s1 + 0x7a0\n 18369: ra = 654, jump @11\n      : @684 [@dyn 327] (gas: 23)\n 18375: a5 = s1 + 0x700\n 18379: a0 = u64 [a5 + 0xa0]\n 18383: a1 = u64 [0x200a0]\n 18388: a2 = u64 [a5 + 0xb8]\n 18392: a3 = u64 [a5 + 0xa8]\n 18396: a4 = u64 [a5 + 0xb0]\n 18400: a1 = a1 + a0\n 18403: a0 = a1 <u a0\n 18406: a5 = a3 + a0\n 18409: a3 = a5 <u a3\n 18412: a3 = a0 if a0 == 0\n 18415: a3 = a3 + a4\n 18418: a0 = a3 <u a4\n 18421: a0 = a0 + a2\n 18424: a2 = s1 + 0x2078\n 18428: a4 = a2 + 0x600\n 18432: u64 [a4 + 0x88] = a1\n 18436: u64 [a4 + 0x90] = a5\n 18440: u64 [a4 + 0x98] = a3\n 18444: u64 [a4 + 0xa0] = a0\n 18448: a1 = s1 + 0x2700\n 18452: a0 = u64 [s1 + 0xc0]\n 18456: ra = 656, jump @12\n      : @685 [@dyn 328] (gas: 23)\n 18462: a0 = u64 [s1 + 0x68]\n 18465: a0 = a0 + 0x1\n 18468: a1 = u64 [s1 + 0x98]\n 18472: a0 = a0 & a1\n 18475: u64 [s1 + 0x68] = a0\n 18478: a0 = u64 [s1 + 0x78]\n 18481: a2 = u64 [s1 + 0xd0]\n 18485: a0 = a0 | a2\n 18488: u64 [s1 + 0x78] = a0\n 18491: a0 = u64 [s1 + 0x80]\n 18495: a2 = u64 [s1 + 0xc8]\n 18499: a0 = a0 | a2\n 18502: u64 [s1 + 0x80] = a0\n 18506: a0 = u64 [s1 + 0x88]\n 18510: a2 = u64 [s1 + 0xf0]\n 18514: a0 = a0 | a2\n 18517: u64 [s1 + 0x88] = a0\n 18521: a0 = u64 [s1 + 0x90]\n 18525: a2 = u64 [s1 + 0xd8]\n 18529: a0 = a0 | a2\n 18532: u64 [s1 + 0x90] = a0\n 18536: a3 = u64 [s1 + 0xf8]\n 18540: jump @678\n      : @686 (gas: 15)\n 18543: a0 = u64 [s1 + 0x30]\n 18546: a1 = u64 [s1 + 0x78]\n 18549: u64 [a0] = a1\n 18551: a1 = u64 [s1 + 0x80]\n 18555: u64 [a0 + 0x8] = a1\n 18558: a1 = u64 [s1 + 0x88]\n 18562: u64 [a0 + 0x10] = a1\n 18565: a1 = u64 [s1 + 0x90]\n 18569: u64 [a0 + 0x18] = a1\n 18572: a0 = u64 [s1 + 0xa8]\n 18576: ra = 0x292\n 18580: ecalli 4 // 'caller'\n 18582: a2 = u64 [s1 + 0xb0]\n 18586: t0 = 0x294\n 18590: jump @1470\n      : @687 [@dyn 329] (gas: 2)\n 18593: a2 = u64 [s1 + 0xb0]\n 18597: t0 = 660, jump @1470\n      : @688 [@dyn 330] (gas: 7)\n 18603: u64 [s1 + 1944] = 0\n 18607: u64 [s1 + 0x790] = a1\n 18611: u64 [s1 + 0x788] = a0\n 18615: a1 = s1 + 0x780\n 18619: u64 [s1 + 0x780] = a3\n 18623: a0 = 0\n 18625: ra = 662, jump @9\n      : @689 [@dyn 331] (gas: 7)\n 18631: u64 [s1 + 1912] = 0\n 18635: u64 [s1 + 1904] = 0\n 18639: u64 [s1 + 1888] = 0x5\n 18644: a0 = 0x20\n 18647: a1 = s1 + 0x760\n 18651: u64 [s1 + 1896] = 0\n 18655: ra = 664, jump @9\n      : @690 [@dyn 332] (gas: 3)\n 18661: a1 = u64 [s1 + 0xe0]\n 18665: a0 = i32 [a1]\n 18667: jump @692 if a0 >u 63\n      : @691 (gas: 2)\n 18671: u32 [a1 + 0] = 0x40\n 18674: fallthrough\n      : @692 (gas: 4)\n 18675: a0 = sp + 0xffffffffffffffe0\n 18678: a0 = a0 & 0xffffffffffffffe0\n 18681: u64 [s1 + 0xf8] = a0\n 18685: t0 = 666, jump @1465\n      : @693 [@dyn 333] (gas: 5)\n 18691: ra = 0x29c\n 18695: ecalli 9 // 'hash_keccak_256'\n 18697: a3 = u64 [s1 + 0xf8]\n 18701: t0 = 0x29e\n 18705: jump @1489\n      : @694 [@dyn 334] (gas: 2)\n 18708: a3 = u64 [s1 + 0xf8]\n 18712: t0 = 670, jump @1489\n      : @695 [@dyn 335] (gas: 19)\n 18718: u64 [s1 + 0xf0] = a0\n 18722: a0 = reverse a1\n 18724: u64 [s1 + 0xd8] = a0\n 18728: a0 = reverse a2\n 18730: u64 [s1 + 0xd0] = a0\n 18734: a0 = reverse a3\n 18736: u64 [s1 + 0xc8] = a0\n 18740: a0 = sp + 0xffffffffffffffe0\n 18743: a0 = a0 & 0xffffffffffffffe0\n 18746: u64 [s1 + 0xf8] = a0\n 18750: sp = a0\n 18752: u64 [s1 + 1880] = 0\n 18756: u64 [s1 + 1872] = 0\n 18760: u64 [s1 + 1864] = 0\n 18764: a1 = s1 + 0x740\n 18768: a0 = u64 [s1 + 0x38]\n 18771: u64 [s1 + 0x740] = a0\n 18775: a0 = 0\n 18777: ra = 672, jump @9\n      : @696 [@dyn 336] (gas: 12)\n 18783: a0 = u64 [s1 + 0xc8]\n 18787: a3 = s1 + 0x700\n 18791: u64 [a3 + 0x38] = a0\n 18794: a0 = u64 [s1 + 0xd0]\n 18798: u64 [a3 + 0x30] = a0\n 18801: a0 = u64 [s1 + 0xd8]\n 18805: u64 [a3 + 0x28] = a0\n 18808: a0 = 0x20\n 18811: a1 = s1 + 0x720\n 18815: a2 = u64 [s1 + 0xf0]\n 18819: u64 [a3 + 0x20] = a2\n 18822: ra = 674, jump @9\n      : @697 [@dyn 337] (gas: 3)\n 18828: a1 = u64 [s1 + 0xe0]\n 18832: a0 = i32 [a1]\n 18834: jump @699 if a0 >u 63\n      : @698 (gas: 2)\n 18838: u32 [a1 + 0] = 0x40\n 18841: fallthrough\n      : @699 (gas: 4)\n 18842: a0 = sp + 0xffffffffffffffe0\n 18845: a0 = a0 & 0xffffffffffffffe0\n 18848: u64 [s1 + 0xf0] = a0\n 18852: t0 = 676, jump @1465\n      : @700 [@dyn 338] (gas: 17)\n 18858: ecalli 9 // 'hash_keccak_256'\n 18860: a3 = u64 [s1 + 0xf0]\n 18864: a0 = u64 [a3 + 0x18]\n 18867: a1 = u64 [a3 + 0x10]\n 18870: a2 = u64 [a3 + 0x8]\n 18873: a3 = u64 [a3]\n 18875: a4 = reverse a0\n 18877: a1 = reverse a1\n 18879: a2 = reverse a2\n 18881: a3 = reverse a3\n 18883: a0 = u64 [s1 + 0xf8]\n 18887: u64 [a0 + 0x18] = a3\n 18890: u64 [a0 + 0x10] = a2\n 18893: u64 [a0 + 0x8] = a1\n 18896: u64 [a0] = a4\n 18898: a1 = u64 [s1 + 0x30]\n 18901: ra = 678, jump @12\n      : @701 [@dyn 339] (gas: 3)\n 18907: a0 = s1 + 0x700\n 18911: a1 = 0x40\n 18914: ra = 680, jump @7\n      : @702 [@dyn 340] (gas: 13)\n 18920: a0 = s1 + 0x700\n 18924: a4 = u64 [a0 + 0x18]\n 18927: a5 = u64 [a0 + 0x10]\n 18930: a3 = u64 [a0 + 0x8]\n 18933: a2 = u64 [a0]\n 18935: a0 = a3 | a4\n 18938: a1 = a2 | a5\n 18941: a1 = a1 | a0\n 18944: a1 = a1 >> 0x20\n 18947: a0 = a0 | a5\n 18950: a0 = a0 << 0x20\n 18953: a0 = a0 | a1\n 18956: jump @704 if a0 == 0\n      : @703 (gas: 1)\n 18959: jump @827\n      : @704 (gas: 14)\n 18962: a0 = u64 [s1 + 0x68]\n 18965: a1 = u64 [s1 + 0x98]\n 18969: a0 = a0 & a1\n 18972: u64 [s1 + 1784] = 0\n 18976: u64 [s1 + 1776] = 0\n 18980: u64 [s1 + 1768] = 0\n 18984: a1 = s1 + 0x6e0\n 18988: u64 [s1 + 0x6e0] = a0\n 18992: a0 = a2\n 18994: u64 [s1 + 0xf8] = a2\n 18998: u64 [s1 + 0xf0] = a3\n 19002: u64 [s1 + 0xe0] = a4\n 19006: u64 [s1 + 0xd8] = a5\n 19010: ra = 682, jump @9\n      : @705 [@dyn 341] (gas: 10)\n 19016: a2 = u64 [s1 + 0xf8]\n 19020: a0 = u64 [s1 + 0xe0]\n 19024: a1 = u64 [s1 + 0xd8]\n 19028: a0 = a0 | a1\n 19031: a1 = 0xffffffe0\n 19041: a1 = a2 <u a1\n 19044: a3 = u64 [s1 + 0xf0]\n 19048: a1 = 0 if a3 != 0\n 19050: a1 = 0 if a0 != 0\n 19052: jump @827 if a1 == 0\n      : @706 (gas: 10)\n 19056: a0 = u64 [s1 + 0x60]\n 19059: a1 = u64 [s1 + 0x98]\n 19063: a1 = a1 & a0\n 19066: i32 a0 = a2 + 0x20\n 19069: u64 [s1 + 1752] = 0\n 19073: u64 [s1 + 1744] = 0\n 19077: u64 [s1 + 0x6c0] = a1\n 19081: a1 = s1 + 0x6c0\n 19085: u64 [s1 + 1736] = 0\n 19089: ra = 684, jump @9\n      : @707 [@dyn 342] (gas: 6)\n 19095: a0 = u64 [s1 + 0xa8]\n 19099: ra = 0x2ae\n 19103: ecalli 4 // 'caller'\n 19105: a2 = u64 [s1 + 0xb0]\n 19109: t0 = 0x2b0\n 19113: jump @1464\n      : @708 [@dyn 343] (gas: 2)\n 19116: a2 = u64 [s1 + 0xb0]\n 19120: t0 = 688, jump @1464\n      : @709 [@dyn 344] (gas: 30)\n 19126: t0 = a1 | a0\n 19129: a3 = a3 >> 0x20\n 19132: a2 = reverse a2\n 19134: a1 = a2 << 0x20\n 19137: a1 = a1 | a3\n 19140: a2 = a2 >> 0x20\n 19143: u64 [s1 + 1656] = 0\n 19147: u64 [s1 + 1648] = 0\n 19151: u64 [s1 + 1640] = 0\n 19155: a0 = u64 [s1 + 0x38]\n 19158: u64 [s1 + 0x660] = a0\n 19162: u64 [s1 + 1688] = 0\n 19166: a3 = u64 [0x200b8]\n 19171: a4 = u64 [0x200c0]\n 19176: a5 = u64 [0x200c8]\n 19181: a0 = u64 [0x200d0]\n 19186: u64 [s1 + 0x6b8] = a3\n 19190: a3 = s1 + 0x600\n 19194: u64 [a3 + 0xb0] = a4\n 19198: u64 [a3 + 0xa8] = a5\n 19202: u64 [a3 + 0xa0] = a0\n 19206: u64 [a3 + 0x90] = a2\n 19210: u64 [a3 + 0x88] = a1\n 19214: a1 = 0x40\n 19217: a2 = s1 + 0x6a0\n 19221: a3 = s1 + 0x680\n 19225: a4 = s1 + 0x660\n 19229: u64 [s1 + 0x680] = t0\n 19233: a0 = u64 [s1 + 0xf8]\n 19237: ra = 690, jump @14\n      : @710 [@dyn 345] (gas: 8)\n 19243: a0 = 0\n 19245: a1 = u64 [s1 + 0xe8]\n 19249: a2 = 0\n 19251: ecalli 14 // 'seal_return'\n 19253: a1 = 0x20160\n 19258: i32 a1 = a1 + 0\n 19260: a0 = 0\n 19262: jump @1183\n      : @711 (gas: 19)\n 19265: a0 = u64 [s1 + 0xf8]\n 19269: a2 = u64 [s1 + 0x88]\n 19273: a0 = a0 | a2\n 19276: a2 = u64 [s1 + 0x28]\n 19279: a0 = a2 if a4 == 0\n 19282: t1 = u64 [s1 + 0xa0]\n 19286: a3 = t1\n 19288: t0 = u64 [s1 + 0xc8]\n 19292: a3 = a0 if t0 != 0\n 19295: u64 [s1 + 0xf8] = a3\n 19299: a0 = u64 [s1 + 0xc0]\n 19303: a2 = u64 [s1 + 0x90]\n 19307: a0 = a0 | a2\n 19310: a2 = u64 [s1 + 0x30]\n 19313: a0 = a2 if a4 == 0\n 19316: a5 = u64 [s1 + 0xb8]\n 19320: a3 = a5\n 19322: a3 = a0 if t0 != 0\n 19325: t0 = 692, jump @1487\n      : @712 [@dyn 346] (gas: 1)\n 19331: ra = 694, jump @1504\n      : @713 [@dyn 347] (gas: 6)\n 19337: u64 [s1 + 0x90] = a0\n 19341: u64 [s1 + 0x30] = a1\n 19344: a0 = u64 [s1 + 0xb0]\n 19348: a1 = u64 [s1 + 0xa8]\n 19352: a2 = u64 [s1 + 0xf0]\n 19356: ra = 696, jump @1504\n      : @714 [@dyn 348] (gas: 7)\n 19362: u64 [s1 + 0x28] = a0\n 19365: u64 [s1 + 0x88] = a1\n 19369: a1 = u64 [s1 + 0xf0]\n 19373: a2 = 0x80 - a1\n 19377: a0 = u64 [s1 + 0xb8]\n 19381: a1 = u64 [s1 + 0xa0]\n 19385: ra = 698, jump @1509\n      : @715 [@dyn 349] (gas: 21)\n 19391: a2 = u64 [s1 + 0x88]\n 19395: a1 = a1 | a2\n 19398: a3 = u64 [s1 + 0xf0]\n 19402: a4 = a3 <u 0x80\n 19406: u64 [s1 + 0x88] = a4\n 19410: a2 = u64 [s1 + 0x30]\n 19413: a1 = a2 if a4 == 0\n 19416: a2 = u64 [s1 + 0xa8]\n 19420: a2 = a1 if a3 != 0\n 19423: u64 [s1 + 0xa8] = a2\n 19427: a1 = u64 [s1 + 0x28]\n 19430: a0 = a0 | a1\n 19433: a1 = u64 [s1 + 0x90]\n 19437: a0 = a1 if a4 == 0\n 19440: a1 = u64 [s1 + 0xb0]\n 19444: a1 = a0 if a3 != 0\n 19447: a2 = a3\n 19449: u64 [s1 + 0xb0] = a1\n 19453: a0 = u64 [s1 + 0xb8]\n 19457: a1 = u64 [s1 + 0xa0]\n 19461: ra = 700, jump @1504\n      : @716 [@dyn 350] (gas: 3)\n 19467: a5 = 0\n 19469: ra = 0\n 19471: t0 = 702, jump @1485\n      : @717 [@dyn 351] (gas: 3)\n 19477: t1 = u64 [s1 + 0xa8]\n 19481: t2 = u64 [s1 + 0xb0]\n 19485: fallthrough\n      : @718 (gas: 88)\n 19486: u64 [s1 + 0xb8] = a5\n 19490: a2 = t2 >> 0x3f\n 19493: a3 = t1 << 0x1\n 19496: a5 = a3 | a2\n 19499: a3 = t2 << 0x1\n 19502: a4 = u64 [s1 + 0xf8]\n 19506: a4 = a4 >> 0x3f\n 19509: a3 = a3 | a4\n 19512: u64 [s1 + 0xa8] = a3\n 19516: a2 = u64 [s1 + 0x88]\n 19520: u64 [s1 + 0xb0] = a5\n 19524: t2 = t1\n 19526: t1 = a2 ^ a5\n 19529: t0 = a2 <u a5\n 19532: a4 = u64 [s1 + 0x90]\n 19536: a5 = a4 <u a3\n 19539: a5 = t0 if t1 != 0\n 19542: a1 = a1 << 0x1\n 19545: a3 = a0 >> 0x3f\n 19548: a1 = a1 | a3\n 19551: u64 [s1 + 0xa0] = a1\n 19555: a3 = t2 >> 0x3f\n 19558: a0 = a0 << 0x1\n 19561: a3 = a3 | a0\n 19564: a0 = u64 [s1 + 0xf8]\n 19568: a0 = a0 << 0x1\n 19571: a4 = u64 [s1 + 0xc0]\n 19575: a1 = a4 >> 0x3f\n 19578: t0 = a0 | a1\n 19581: a1 = a4 << 0x1\n 19584: a4 = u64 [s1 + 0xc8]\n 19588: t1 = a4 >> 0x3f\n 19591: t1 = a1 | t1\n 19594: a1 = a4 << 0x1\n 19597: a4 = u64 [s1 + 0xe8]\n 19601: t2 = a4 >> 0x3f\n 19604: a1 = a1 | t2\n 19607: a4 = a4 << 0x1\n 19610: a0 = u64 [s1 + 0xb8]\n 19614: a4 = a4 | a0\n 19617: u64 [s1 + 0xe8] = a4\n 19621: a1 = ra | a1\n 19624: u64 [s1 + 0xc8] = a1\n 19628: a1 = ra | t1\n 19631: u64 [s1 + 0xc0] = a1\n 19635: a0 = ra | t0\n 19638: u64 [s1 + 0xf8] = a0\n 19642: a0 = a2 - a3\n 19645: a0 = a0 <u a5\n 19648: a1 = a2 <u a3\n 19651: t0 = u64 [s1 + 0xa0]\n 19655: a4 = a2 - t0\n 19658: a4 = a4 - a1\n 19661: a4 = a4 - a0\n 19664: a5 = a4 >>a 0x3f\n 19667: a0 = u64 [s1 + 0x98]\n 19671: a0 = a0 & a5\n 19674: a1 = u64 [s1 + 0xa8]\n 19678: t2 = a1 - a0\n 19681: a1 = a1 <u a0\n 19684: a0 = u64 [s1 + 0xb0]\n 19688: t1 = a0 - a1\n 19691: a1 = 0 if a0 != 0\n 19693: a0 = a3 - a1\n 19696: a1 = a3 <u a1\n 19699: a1 = t0 - a1\n 19702: a3 = u64 [s1 + 0xf0]\n 19706: ra = u64 [s1 + 0xe0]\n 19710: a2 = a3 | ra\n 19713: a2 = a2 <u 0x1\n 19716: a4 = u64 [s1 + 0xd0]\n 19720: t0 = a4 <u a2\n 19723: a2 = a4 - a2\n 19726: a4 = a3 <u 0x1\n 19729: ra = ra - a4\n 19732: a4 = u64 [s1 + 0xd8]\n 19736: a4 = a4 - t0\n 19739: a3 = a3 + 0xffffffffffffffff\n 19742: u64 [s1 + 0xe0] = ra\n 19746: u64 [s1 + 0xd8] = a4\n 19750: t0 = ra | a4\n 19753: u64 [s1 + 0xf0] = a3\n 19757: a4 = a3 | a2\n 19760: a3 = a4 | t0\n 19763: a5 = a5 & 0x1\n 19766: u64 [s1 + 0xd0] = a2\n 19770: ra = 0\n 19772: jump @718 if a3 != 0\n      : @719 (gas: 4)\n 19776: a0 = u64 [s1 + 0xe8]\n 19780: a0 = a0 << 0x1\n 19783: ra = a5 | a0\n 19786: fallthrough\n      : @720 (gas: 4)\n 19787: u64 [s1 + 0xd0] = ra\n 19791: a0 = s1 + 0x2340\n 19795: a1 = 0x40\n 19798: ra = 704, jump @7\n      : @721 [@dyn 352] (gas: 18)\n 19804: t0 = s1 + 0x2078\n 19808: t1 = u64 [t0 + 0x2e0]\n 19812: a0 = t0 + 0x200\n 19816: a5 = u64 [a0 + 0xd8]\n 19820: a4 = u64 [a0 + 0xd0]\n 19824: a3 = u64 [a0 + 0xc8]\n 19828: a0 = t1 >u 0\n 19830: a1 = a5 >u 0\n 19832: a1 = a0 if t1 != 0\n 19835: a0 = a4 >u 0\n 19837: a2 = a3 <u 0xffffffffffffffa0\n 19840: a2 = a2 ^ 0x1\n 19843: u64 [s1 + 0xf8] = a4\n 19847: a2 = a0 if a4 != 0\n 19850: a0 = a5 | t1\n 19853: u64 [s1 + 0xd8] = a0\n 19857: a2 = a1 if a0 != 0\n 19860: jump @723 if a2 == 0\n      : @722 (gas: 1)\n 19863: jump @896\n      : @723 (gas: 19)\n 19866: a0 = a3 + 0x60\n 19869: a1 = a0 <u a3\n 19872: a4 = u64 [s1 + 0xf8]\n 19876: a2 = a4 + a1\n 19879: u64 [s1 + 0xf0] = a3\n 19883: a3 = a2 <u a4\n 19886: a3 = a1 if a1 == 0\n 19889: a3 = a3 + a5\n 19892: a1 = a3 <u a5\n 19895: a4 = t1 + a1\n 19898: u64 [t0 + 0x2a8] = a0\n 19902: u64 [t0 + 0x2b0] = a2\n 19906: u64 [t0 + 0x2b8] = a3\n 19910: a0 = 0x40\n 19913: a1 = s1 + 0x2320\n 19917: u64 [t0 + 0x2c0] = a4\n 19921: u64 [s1 + 0xe0] = a5\n 19925: u64 [s1 + 0xe8] = t1\n 19929: ra = 706, jump @9\n      : @724 [@dyn 353] (gas: 12)\n 19935: a2 = u64 [s1 + 0xf0]\n 19939: a3 = u64 [s1 + 0xe0]\n 19943: a0 = a2 | a3\n 19946: a1 = u64 [s1 + 0xf8]\n 19950: a4 = u64 [s1 + 0xe8]\n 19954: a1 = a1 | a4\n 19957: a0 = a0 | a1\n 19960: a0 = a0 >> 0x20\n 19963: a1 = a1 | a3\n 19966: a1 = a1 << 0x20\n 19969: a0 = a0 | a1\n 19972: jump @827 if a0 != 0\n      : @725 (gas: 13)\n 19976: a0 = u64 [s1 + 0x40]\n 19979: a3 = s1 + 0x2078\n 19983: a4 = a3 + 0x200\n 19987: u64 [a4 + 0x88] = a0\n 19991: a0 = u64 [s1 + 0x48]\n 19994: u64 [a4 + 0x90] = a0\n 19998: a0 = u64 [s1 + 0x50]\n 20001: u64 [a4 + 0x98] = a0\n 20005: a1 = s1 + 0x2300\n 20009: a0 = u64 [s1 + 0x58]\n 20012: u64 [a4 + 0xa0] = a0\n 20016: a0 = a2\n 20018: ra = 708, jump @9\n      : @726 [@dyn 354] (gas: 9)\n 20024: a1 = u64 [s1 + 0xf0]\n 20028: a3 = 0x100000000\n 20038: a0 = 0xffffffe0\n 20048: a0 = a1 <u a0\n 20051: a2 = u64 [s1 + 0xf8]\n 20055: a0 = 0 if a2 != 0\n 20057: a2 = u64 [s1 + 0xd8]\n 20061: a0 = 0 if a2 != 0\n 20063: jump @827 if a0 == 0\n      : @727 (gas: 11)\n 20067: i32 a0 = a1 + 0x20\n 20070: a2 = s1 + 0x2078\n 20074: u64 [a2 + 640] = 0\n 20078: u64 [a2 + 632] = 0\n 20082: u64 [a2 + 624] = 0\n 20086: a1 = s1 + 0x22e0\n 20090: u64 [s1 + 0xe8] = a3\n 20094: a3 = u64 [s1 + 0xd0]\n 20098: u64 [a2 + 0x268] = a3\n 20102: u64 [s1 + 0xe0] = a0\n 20106: ra = 710, jump @9\n      : @728 [@dyn 355] (gas: 9)\n 20112: a1 = u64 [s1 + 0xf0]\n 20116: a0 = u64 [s1 + 0xe8]\n 20120: a0 = a0 + 0xffffffffffffffc0\n 20123: a0 = a1 <u a0\n 20126: a2 = u64 [s1 + 0xf8]\n 20130: a0 = 0 if a2 != 0\n 20132: a2 = u64 [s1 + 0xd8]\n 20136: a0 = 0 if a2 != 0\n 20138: jump @827 if a0 == 0\n      : @729 (gas: 11)\n 20142: a0 = 0xffffffff00000000\n 20152: u64 [s1 + 0xe8] = a0\n 20156: i32 a0 = a1 + 0x40\n 20159: a2 = s1 + 0x2078\n 20163: u64 [a2 + 608] = 0\n 20167: u64 [a2 + 600] = 0\n 20171: u64 [a2 + 592] = 0\n 20175: a1 = s1 + 0x22c0\n 20179: u64 [a2 + 584] = 0\n 20183: u64 [s1 + 0xd8] = a0\n 20187: ra = 712, jump @9\n      : @730 [@dyn 356] (gas: 5)\n 20193: a0 = u64 [s1 + 0x38]\n 20196: ra = 0x2ca\n 20200: ecalli 4 // 'caller'\n 20202: t0 = 0x2cc\n 20206: jump @1449\n      : @731 [@dyn 357] (gas: 1)\n 20209: t0 = 716, jump @1449\n      : @732 [@dyn 358] (gas: 8)\n 20215: u64 [a2 + 576] = 0\n 20219: a4 = a2 + 0x200\n 20223: u64 [a4 + 0x38] = a1\n 20226: u64 [a4 + 0x30] = a0\n 20229: a1 = s1 + 0x22a0\n 20233: u64 [a4 + 0x28] = a3\n 20236: a0 = 0\n 20238: ra = 718, jump @9\n      : @733 [@dyn 359] (gas: 3)\n 20244: t0 = 0x2d0\n 20248: a2 = s1 + 0x2078\n 20252: fallthrough\n      : @734 [@dyn 360] (gas: 7)\n 20253: u64 [a2 + 544] = 0\n 20257: u64 [a2 + 536] = 0\n 20261: u64 [a2 + 520] = 0x3\n 20266: a0 = 0x20\n 20269: a1 = s1 + 0x2280\n 20273: u64 [a2 + 528] = 0\n 20277: ra = 722, jump @9\n      : @735 [@dyn 361] (gas: 3)\n 20283: a1 = 0x40\n 20286: a0 = 0\n 20288: ra = 724, jump @20\n      : @736 [@dyn 362] (gas: 12)\n 20294: a1 = sp + 0xffffffffffffffe0\n 20297: a1 = a1 & 0xffffffffffffffe0\n 20300: u64 [s1 + 0xf8] = a1\n 20304: sp = a1\n 20306: i32 a0 = a0 + 0\n 20308: i32 a2 = a1 + 0\n 20310: a1 = 0x40\n 20313: ra = 0x2d6\n 20317: ecalli 9 // 'hash_keccak_256'\n 20319: a3 = u64 [s1 + 0xf8]\n 20323: t0 = 0x2d8\n 20327: jump @1489\n      : @737 [@dyn 363] (gas: 2)\n 20330: a3 = u64 [s1 + 0xf8]\n 20334: t0 = 728, jump @1489\n      : @738 [@dyn 364] (gas: 14)\n 20340: u64 [s1 + 0xd0] = a0\n 20344: a0 = reverse a1\n 20346: u64 [s1 + 0xc8] = a0\n 20350: a0 = reverse a2\n 20352: u64 [s1 + 0xc0] = a0\n 20356: a0 = reverse a3\n 20358: u64 [s1 + 0xb8] = a0\n 20362: a0 = sp + 0xffffffffffffffe0\n 20365: a0 = a0 & 0xffffffffffffffe0\n 20368: u64 [s1 + 0xf8] = a0\n 20372: sp = a0\n 20374: t0 = 0x2da\n 20378: a2 = s1 + 0x2078\n 20382: fallthrough\n      : @739 [@dyn 365] (gas: 11)\n 20383: u64 [a2 + 512] = 0\n 20387: a0 = u64 [s1 + 0x78]\n 20390: a3 = a2 + 0x100\n 20394: u64 [a3 + 0xf8] = a0\n 20398: a0 = u64 [s1 + 0x68]\n 20401: u64 [a3 + 0xf0] = a0\n 20405: a1 = s1 + 0x2260\n 20409: a0 = u64 [s1 + 0x70]\n 20412: u64 [a3 + 0xe8] = a0\n 20416: a0 = 0\n 20418: ra = 732, jump @9\n      : @740 [@dyn 366] (gas: 14)\n 20424: a0 = u64 [s1 + 0xb8]\n 20428: a1 = s1 + 0x2078\n 20432: a2 = a1 + 0x100\n 20436: u64 [a2 + 0xe0] = a0\n 20440: a0 = u64 [s1 + 0xc0]\n 20444: u64 [a2 + 0xd8] = a0\n 20448: a0 = u64 [s1 + 0xc8]\n 20452: u64 [a2 + 0xd0] = a0\n 20456: a3 = a1\n 20458: a0 = 0x20\n 20461: a1 = s1 + 0x2240\n 20465: a2 = u64 [s1 + 0xd0]\n 20469: u64 [a3 + 0x1c8] = a2\n 20473: ra = 734, jump @9\n      : @741 [@dyn 367] (gas: 2)\n 20479: a1 = i32 [0x20150]\n 20484: jump @743 if a1 >=u 64\n      : @742 (gas: 2)\n 20488: u32 [0x20150] = 0x40\n 20494: fallthrough\n      : @743 (gas: 30)\n 20495: a0 = sp + 0xffffffffffffffe0\n 20498: a2 = a0 & 0xffffffffffffffe0\n 20501: u64 [s1 + 0xd0] = a2\n 20505: sp = a2\n 20507: a0 = 0x20160\n 20512: i32 a0 = a0 + 0\n 20514: i32 a2 = a2 + 0\n 20516: a1 = 0x40\n 20519: ecalli 9 // 'hash_keccak_256'\n 20521: a3 = u64 [s1 + 0xd0]\n 20525: a0 = u64 [a3 + 0x18]\n 20528: a1 = u64 [a3 + 0x10]\n 20531: a2 = u64 [a3 + 0x8]\n 20534: a3 = u64 [a3]\n 20536: a5 = reverse a0\n 20538: u64 [s1 + 0xb8] = a5\n 20542: a4 = reverse a1\n 20544: u64 [s1 + 0xc0] = a4\n 20548: a1 = reverse a2\n 20550: u64 [s1 + 0xc8] = a1\n 20554: a0 = reverse a3\n 20556: u64 [s1 + 0xd0] = a0\n 20560: a2 = u64 [s1 + 0xf8]\n 20564: u64 [a2 + 0x18] = a0\n 20567: u64 [a2 + 0x10] = a1\n 20570: u64 [a2 + 0x8] = a4\n 20573: u64 [a2] = a5\n 20575: a0 = s1 + 0x2220\n 20579: a1 = u64 [s1 + 0xf0]\n 20583: ra = 736, jump @7\n      : @744 [@dyn 368] (gas: 2)\n 20589: a0 = 0x2000\n 20593: t0 = 738, jump @1495\n      : @745 [@dyn 369] (gas: 13)\n 20599: a0 = u64 [a4 + 0xc0]\n 20603: a1 = u64 [a4 + 0xb8]\n 20607: a2 = u64 [a4 + 0xb0]\n 20611: a3 = u64 [a4 + 0xa8]\n 20615: a4 = s1 + 0x2878\n 20619: a5 = a4 + 0x500\n 20623: u64 [a5 + 0xa0] = a0\n 20627: u64 [a5 + 0x98] = a1\n 20631: u64 [a5 + 0x90] = a2\n 20635: u64 [a5 + 0x88] = a3\n 20639: a1 = s1 + 0x2e00\n 20643: a0 = u64 [s1 + 0xf8]\n 20647: ra = 740, jump @12\n      : @746 [@dyn 370] (gas: 23)\n 20653: a0 = sp + 0xffffffffffffffe0\n 20656: a4 = a0 & 0xffffffffffffffe0\n 20659: u64 [s1 + 0xf8] = a4\n 20663: sp = a4\n 20665: a0 = u64 [s1 + 0xb8]\n 20669: a0 = a0 + 0x1\n 20672: a1 = a0 <u 0x1\n 20675: a2 = u64 [s1 + 0xc0]\n 20679: a1 = a1 + a2\n 20682: a2 = a0 | a1\n 20685: a2 = a2 <u 0x1\n 20688: a3 = u64 [s1 + 0xc8]\n 20692: a2 = a2 + a3\n 20695: a3 = a2 <u a3\n 20698: a5 = u64 [s1 + 0xd0]\n 20702: a3 = a3 + a5\n 20705: u64 [a4 + 0x18] = a3\n 20708: u64 [a4 + 0x10] = a2\n 20711: u64 [a4 + 0x8] = a1\n 20714: u64 [a4] = a0\n 20716: a0 = s1 + 0x2200\n 20720: a1 = u64 [s1 + 0xe0]\n 20724: ra = 742, jump @7\n      : @747 [@dyn 371] (gas: 7)\n 20730: a0 = s1 + 0x2078\n 20734: a0 = u64 [a0 + 0x188]\n 20738: a0 = a0 & 0xffffffffffffffff\n 20741: u64 [s1 + 0xf0] = a0\n 20745: a0 = s1 + 0x21e0\n 20749: a1 = u64 [s1 + 0xf8]\n 20753: ra = 744, jump @11\n      : @748 [@dyn 372] (gas: 15)\n 20759: a2 = s1 + 0x2078\n 20763: a3 = a2 + 0x100\n 20767: a0 = u64 [a3 + 0x80]\n 20771: a1 = u64 [a3 + 0x78]\n 20774: a2 = u64 [a3 + 0x70]\n 20777: a3 = s1 + 0x2878\n 20781: a4 = u64 [s1 + 0xf0]\n 20785: a5 = a3 + 0x500\n 20789: u64 [a5 + 0xa8] = a4\n 20793: u64 [a5 + 0xc0] = a0\n 20797: u64 [a5 + 0xb8] = a1\n 20801: u64 [a5 + 0xb0] = a2\n 20805: a1 = s1 + 0x2e20\n 20809: a0 = u64 [s1 + 0xf8]\n 20813: ra = 746, jump @12\n      : @749 [@dyn 373] (gas: 3)\n 20819: a0 = s1 + 0x21c0\n 20823: a1 = u64 [s1 + 0xd8]\n 20827: ra = 748, jump @7\n      : @750 [@dyn 374] (gas: 2)\n 20833: a0 = 0x2000\n 20837: t0 = 750, jump @1495\n      : @751 [@dyn 375] (gas: 12)\n 20843: a0 = u64 [a4 + 0x60]\n 20846: a1 = u64 [a4 + 0x50]\n 20849: a2 = u64 [a4 + 0x58]\n 20852: a3 = u64 [a4 + 0x48]\n 20855: a0 = a0 | a1\n 20858: a2 = a2 | a3\n 20861: a0 = a0 | a2\n 20864: a0 = a0 >u 0\n 20866: u64 [s1 + 0xf0] = a0\n 20870: a0 = s1 + 0x21a0\n 20874: a1 = u64 [s1 + 0xf8]\n 20878: ra = 752, jump @11\n      : @752 [@dyn 376] (gas: 2)\n 20884: a0 = 0x2000\n 20888: t0 = 754, jump @1495\n      : @753 [@dyn 377] (gas: 16)\n 20894: a0 = u64 [a4 + 0x30]\n 20897: a1 = u64 [a4 + 0x28]\n 20900: a2 = u64 [a4 + 0x40]\n 20903: a3 = u64 [a4 + 0x38]\n 20906: a0 = a0 & 0xffffffffffffff00\n 20910: a4 = u64 [s1 + 0xf0]\n 20914: a0 = a0 | a4\n 20917: a4 = s1 + 0x2878\n 20921: a5 = a4 + 0x500\n 20925: u64 [a5 + 0xe0] = a2\n 20929: u64 [a5 + 0xd8] = a3\n 20933: u64 [a5 + 0xc8] = a1\n 20937: u64 [a5 + 0xd0] = a0\n 20941: a1 = s1 + 0x2e40\n 20945: a0 = u64 [s1 + 0xf8]\n 20949: ra = 756, jump @12\n      : @754 [@dyn 378] (gas: 5)\n 20955: a0 = u64 [s1 + 0x38]\n 20958: ra = 0x2f6\n 20962: ecalli 4 // 'caller'\n 20964: t0 = 0x2f8\n 20968: jump @1449\n      : @755 [@dyn 379] (gas: 1)\n 20971: t0 = 760, jump @1449\n      : @756 [@dyn 380] (gas: 8)\n 20977: u64 [a2 + 288] = 0\n 20981: a4 = a2 + 0x100\n 20985: u64 [a4 + 0x18] = a1\n 20988: u64 [a4 + 0x10] = a0\n 20991: a1 = s1 + 0x2180\n 20995: u64 [a4 + 0x8] = a3\n 20998: a0 = 0\n 21000: ra = 762, jump @9\n      : @757 [@dyn 381] (gas: 3)\n 21006: t0 = 0x2fc\n 21010: a2 = s1 + 0x2078\n 21014: fallthrough\n      : @758 [@dyn 382] (gas: 7)\n 21015: u64 [a2 + 256] = 0\n 21019: u64 [a2 + 248] = 0\n 21023: u64 [a2 + 232] = 0x2\n 21028: a0 = 0x20\n 21031: a1 = s1 + 0x2160\n 21035: u64 [a2 + 240] = 0\n 21039: ra = 766, jump @9\n      : @759 [@dyn 383] (gas: 7)\n 21045: a0 = sp + 0xffffffffffffffe0\n 21048: a0 = a0 & 0xffffffffffffffe0\n 21051: u64 [s1 + 0xf8] = a0\n 21055: sp = a0\n 21057: a1 = 0x40\n 21060: a0 = 0\n 21062: ra = 768, jump @20\n      : @760 [@dyn 384] (gas: 1)\n 21068: t0 = 770, jump @1502\n      : @761 [@dyn 385] (gas: 5)\n 21074: ra = 0x304\n 21078: ecalli 9 // 'hash_keccak_256'\n 21080: a3 = u64 [s1 + 0xf0]\n 21084: t0 = 0x306\n 21088: jump @1461\n      : @762 [@dyn 386] (gas: 2)\n 21091: a3 = u64 [s1 + 0xf0]\n 21095: t0 = 774, jump @1461\n      : @763 [@dyn 387] (gas: 7)\n 21101: a1 = u64 [s1 + 0xf8]\n 21105: u64 [a1] = a4\n 21107: u64 [a1 + 0x8] = a5\n 21110: u64 [a1 + 0x10] = a2\n 21113: u64 [a1 + 0x18] = a0\n 21116: a0 = s1 + 0x2140\n 21120: ra = 776, jump @11\n      : @764 [@dyn 388] (gas: 9)\n 21126: a0 = s1 + 0x2078\n 21130: a0 = u64 [a0 + 0xc8]\n 21134: a0 = a0 + 0x1\n 21137: a1 = u64 [s1 + 0x60]\n 21140: a0 = a0 & a1\n 21143: u64 [s1 + 0xf0] = a0\n 21147: a0 = s1 + 0x2120\n 21151: a1 = u64 [s1 + 0xf8]\n 21155: ra = 778, jump @11\n      : @765 [@dyn 389] (gas: 21)\n 21161: a3 = s1 + 0x2078\n 21165: a0 = u64 [a3 + 0xb0]\n 21169: a1 = u64 [a3 + 0xb8]\n 21173: a2 = u64 [a3 + 0xc0]\n 21177: a3 = u64 [a3 + 0xa8]\n 21181: a0 = a0 & 0xffffffffffffffff\n 21184: a1 = a1 & 0xffffffffffffffff\n 21187: a2 = a2 & 0xffffffffffffffff\n 21190: a4 = u64 [s1 + 0xe8]\n 21194: a3 = a3 & a4\n 21197: a4 = u64 [s1 + 0xf0]\n 21201: a3 = a3 | a4\n 21204: a4 = s1 + 0x2878\n 21208: u64 [a4 + 0x600] = a2\n 21212: a2 = a4 + 0x500\n 21216: u64 [a2 + 0xf8] = a1\n 21220: u64 [a2 + 0xf0] = a0\n 21224: u64 [a2 + 0xe8] = a3\n 21228: a1 = s1 + 0x2e60\n 21232: a0 = u64 [s1 + 0xf8]\n 21236: ra = 780, jump @12\n      : @766 [@dyn 390] (gas: 3)\n 21242: a0 = s1 + 0x2100\n 21246: a1 = 0x40\n 21249: ra = 782, jump @7\n      : @767 [@dyn 391] (gas: 6)\n 21255: a3 = s1 + 0x2078\n 21259: a0 = u64 [a3 + 0xa0]\n 21263: a1 = u64 [a3 + 0x98]\n 21267: a2 = u64 [a3 + 0x90]\n 21271: a4 = u64 [a3 + 0x88]\n 21275: t0 = 784, jump @1479\n      : @768 [@dyn 392] (gas: 1)\n 21281: jump @827 if a0 != 0\n      : @769 (gas: 12)\n 21285: a0 = u64 [s1 + 0x40]\n 21288: u64 [a3 + 0x68] = a0\n 21291: a0 = u64 [s1 + 0x48]\n 21294: u64 [a3 + 0x70] = a0\n 21297: a0 = u64 [s1 + 0x50]\n 21300: u64 [a3 + 0x78] = a0\n 21303: a1 = s1 + 0x20e0\n 21307: a0 = u64 [s1 + 0x58]\n 21310: u64 [a3 + 0x80] = a0\n 21314: a0 = a4\n 21316: u64 [s1 + 0xf8] = a4\n 21320: ra = 786, jump @9\n      : @770 [@dyn 393] (gas: 6)\n 21326: a0 = u64 [s1 + 0x38]\n 21329: ra = 0x314\n 21333: ecalli 4 // 'caller'\n 21335: a2 = u64 [s1 + 0x80]\n 21339: t0 = 0x316\n 21343: jump @1464\n      : @771 [@dyn 394] (gas: 2)\n 21346: a2 = u64 [s1 + 0x80]\n 21350: t0 = 790, jump @1464\n      : @772 [@dyn 395] (gas: 32)\n 21356: t0 = a1 | a0\n 21359: a3 = a3 >> 0x20\n 21362: a2 = reverse a2\n 21364: a1 = a2 << 0x20\n 21367: a1 = a1 | a3\n 21370: a2 = a2 >> 0x20\n 21373: a3 = u64 [0x20000]\n 21378: a4 = u64 [0x20008]\n 21383: a5 = u64 [0x20010]\n 21388: a0 = s1 + 0x2078\n 21392: u64 [a0 + 0x60] = a3\n 21395: u64 [a0 + 0x58] = a4\n 21398: u64 [a0 + 32] = 0\n 21401: u64 [a0 + 0x50] = a5\n 21404: a3 = u64 [0x20018]\n 21409: a4 = u64 [s1 + 0x78]\n 21412: u64 [a0 + 0x18] = a4\n 21415: a4 = u64 [s1 + 0x68]\n 21418: u64 [a0 + 0x10] = a4\n 21421: a4 = u64 [s1 + 0x70]\n 21424: u64 [a0 + 0x8] = a4\n 21427: u64 [a0 + 0x48] = a3\n 21430: u64 [a0 + 0x38] = a2\n 21433: u64 [a0 + 0x30] = a1\n 21436: u64 [a0 + 0x28] = t0\n 21439: a1 = 0x20\n 21442: a2 = s1 + 0x20c0\n 21446: a3 = s1 + 0x20a0\n 21450: a4 = s1 + 0x2080\n 21454: u64 [a0 + 64] = 0\n 21457: a0 = u64 [s1 + 0xf8]\n 21461: ra = 792, jump @14\n      : @773 [@dyn 396] (gas: 3)\n 21467: a0 = s1 + 0x2060\n 21471: a1 = 0x40\n 21474: ra = 794, jump @7\n      : @774 [@dyn 397] (gas: 7)\n 21480: a3 = s1 + 0x2078\n 21484: a0 = u64 [a3]\n 21486: a4 = a3 + 0xffffffffffffff00\n 21490: a1 = u64 [a4 + 0xf8]\n 21494: a2 = u64 [a4 + 0xf0]\n 21498: a3 = u64 [a4 + 0xe8]\n 21502: t0 = 796, jump @1459\n      : @775 [@dyn 398] (gas: 1)\n 21508: jump @827 if a0 != 0\n      : @776 (gas: 14)\n 21512: a0 = s1 + 0x1878\n 21516: u64 [a0 + 2016] = 0\n 21520: a1 = u64 [s1 + 0x70]\n 21523: a4 = a0 + 0x700\n 21527: u64 [a4 + 0xc8] = a1\n 21531: a1 = u64 [s1 + 0x68]\n 21534: u64 [a4 + 0xd0] = a1\n 21538: a1 = s1 + 0x2040\n 21542: a2 = u64 [s1 + 0x78]\n 21545: u64 [a4 + 0xd8] = a2\n 21549: a0 = a3\n 21551: u64 [s1 + 0xf8] = a3\n 21555: ra = 0x196\n 21559: jump @9\n      : @777 (gas: 3)\n 21562: a0 = s1 + 0x1ee0\n 21566: a1 = 0x40\n 21569: ra = 798, jump @7\n      : @778 [@dyn 399] (gas: 14)\n 21575: a0 = s1 + 0x1878\n 21579: a2 = a0 + 0x600\n 21583: a1 = u64 [a2 + 0x80]\n 21587: u64 [s1 + 0xf0] = a1\n 21591: a1 = u64 [a2 + 0x78]\n 21594: u64 [s1 + 0xe8] = a1\n 21598: a1 = u64 [a2 + 0x70]\n 21601: u64 [s1 + 0xe0] = a1\n 21605: a0 = u64 [a2 + 0x68]\n 21608: u64 [s1 + 0xf8] = a0\n 21612: ra = 0x320\n 21616: ecalli 13 // 'return_data_size'\n 21618: t0 = 0x322\n 21622: jump @1462\n      : @779 [@dyn 400] (gas: 1)\n 21625: t0 = 802, jump @1462\n      : @780 [@dyn 401] (gas: 1)\n 21631: jump @827 if a1 != 0\n      : @781 (gas: 3)\n 21635: a2 = a0\n 21637: a0 = a0 >> 0x20\n 21640: jump @827 if a0 != 0\n      : @782 (gas: 6)\n 21644: i32 a0 = a2 + 0\n 21646: u64 [s1 + 0xf0] = a0\n 21650: a0 = u64 [s1 + 0xf8]\n 21654: a1 = a2\n 21656: u64 [s1 + 0xe8] = a2\n 21660: ra = 804, jump @20\n      : @783 [@dyn 402] (gas: 11)\n 21666: a1 = s1 + 0x2878\n 21670: a2 = u64 [s1 + 0xe8]\n 21674: u32 [a1 + 0x4e8] = a2\n 21678: i32 a0 = a0 + 0\n 21680: a1 = s1 + 0x3000\n 21684: i32 a1 = a1 + 0xfffffffffffffd60\n 21688: a2 = 0\n 21690: ecalli 12 // 'return_data_copy'\n 21692: a0 = s1 + 0x2878\n 21696: a0 = i32 [a0 + 0x4e8]\n 21700: jump @791\n      : @784 (gas: 3)\n 21703: a0 = s1 + 0x1d00\n 21707: a1 = 0x40\n 21710: ra = 806, jump @7\n      : @785 [@dyn 403] (gas: 14)\n 21716: a0 = s1 + 0x1878\n 21720: a2 = a0 + 0x400\n 21724: a1 = u64 [a2 + 0xa0]\n 21728: u64 [s1 + 0xf0] = a1\n 21732: a1 = u64 [a2 + 0x98]\n 21736: u64 [s1 + 0xe8] = a1\n 21740: a1 = u64 [a2 + 0x90]\n 21744: u64 [s1 + 0xe0] = a1\n 21748: a0 = u64 [a2 + 0x88]\n 21752: u64 [s1 + 0xf8] = a0\n 21756: ra = 0x328\n 21760: ecalli 13 // 'return_data_size'\n 21762: t0 = 0x32a\n 21766: jump @1462\n      : @786 [@dyn 404] (gas: 1)\n 21769: t0 = 810, jump @1462\n      : @787 [@dyn 405] (gas: 1)\n 21775: jump @827 if a1 != 0\n      : @788 (gas: 3)\n 21779: a2 = a0\n 21781: a0 = a0 >> 0x20\n 21784: jump @827 if a0 != 0\n      : @789 (gas: 6)\n 21788: i32 a0 = a2 + 0\n 21790: u64 [s1 + 0xf0] = a0\n 21794: a0 = u64 [s1 + 0xf8]\n 21798: a1 = a2\n 21800: u64 [s1 + 0xe8] = a2\n 21804: ra = 812, jump @20\n      : @790 [@dyn 406] (gas: 11)\n 21810: a1 = s1 + 0x2878\n 21814: a2 = u64 [s1 + 0xe8]\n 21818: u32 [a1 + 0x348] = a2\n 21822: i32 a0 = a0 + 0\n 21824: a1 = s1 + 0x3000\n 21828: i32 a1 = a1 + 0xfffffffffffffbc0\n 21832: a2 = 0\n 21834: ecalli 12 // 'return_data_copy'\n 21836: a0 = s1 + 0x2878\n 21840: a0 = i32 [a0 + 0x348]\n 21844: fallthrough\n      : @791 (gas: 2)\n 21845: a1 = u64 [s1 + 0xf0]\n 21849: jump @827 if a0 <u a1\n      : @792 (gas: 2)\n 21853: ecalli 13 // 'return_data_size'\n 21855: fallthrough\n      : @793 (gas: 3)\n 21856: a1 = a0\n 21858: a0 = a0 >> 0x20\n 21861: jump @827 if a0 != 0\n      : @794 (gas: 3)\n 21865: a0 = u64 [s1 + 0xf8]\n 21869: u64 [s1 + 0xf0] = a1\n 21873: ra = 814, jump @20\n      : @795 [@dyn 407] (gas: 5)\n 21879: i32 a1 = a0 + 0\n 21881: a2 = i32 [s1 + 0xf0]\n 21885: a0 = 0x1\n 21888: ecalli 14 // 'seal_return'\n 21890: jump @923\n      : @796 (gas: 10)\n 21893: a0 = u64 [s1 + 0xf8]\n 21897: a1 = u64 [s1 + 0xa8]\n 21901: u64 [a0] = a1\n 21903: a1 = u64 [s1 + 0x78]\n 21906: u64 [a0 + 0x8] = a1\n 21909: a1 = u64 [s1 + 0xa0]\n 21913: u32 [a0 + 0x10] = a1\n 21916: a0 = u64 [s1 + 0xe0]\n 21920: ecalli 5 // 'code_size'\n 21922: fallthrough\n      : @797 (gas: 1)\n 21923: jump @924 if a0 == 0\n      : @798 (gas: 3)\n 21927: a0 = s1 + 0x1c80\n 21931: a1 = 0x40\n 21934: ra = 816, jump @7\n      : @799 [@dyn 408] (gas: 2)\n 21940: a2 = s1 + 0x1878\n 21944: fallthrough\n      : @800 (gas: 13)\n 21945: t0 = u64 [a2 + 0x420]\n 21949: a1 = a2 + 0x400\n 21953: a4 = u64 [a1 + 0x18]\n 21956: a5 = u64 [a1 + 0x10]\n 21959: a0 = u64 [a1 + 0x8]\n 21962: a3 = a5 | t0\n 21965: a1 = a0 | a4\n 21968: a1 = a1 | a3\n 21971: a1 = a1 >> 0x20\n 21974: a3 = a3 | a4\n 21977: a3 = a3 << 0x20\n 21980: a1 = a1 | a3\n 21983: jump @827 if a1 != 0\n      : @801 (gas: 11)\n 21987: u64 [a2 + 1016] = 0\n 21991: u64 [a2 + 1008] = 0\n 21995: u64 [a2 + 1000] = 0\n 21999: a3 = 0xc2a672e000000000\n 22009: a1 = s1 + 0x1c60\n 22013: u64 [a2 + 0x400] = a3\n 22017: u64 [s1 + 0x60] = t0\n 22020: u64 [s1 + 0x58] = a4\n 22023: u64 [s1 + 0x68] = a5\n 22026: u64 [s1 + 0x88] = a0\n 22030: ra = 818, jump @9\n      : @802 [@dyn 409] (gas: 3)\n 22036: a0 = u64 [s1 + 0xe0]\n 22040: ecalli 4 // 'caller'\n 22042: fallthrough\n      : @803 (gas: 11)\n 22043: a4 = u64 [s1 + 0x88]\n 22047: a0 = u64 [s1 + 0x60]\n 22050: a1 = u64 [s1 + 0x58]\n 22053: a2 = a1 | a0\n 22056: a3 = 0x100000000\n 22066: a0 = 0xfffffffc\n 22076: a0 = a4 <u a0\n 22079: a1 = u64 [s1 + 0x68]\n 22082: a0 = 0 if a1 != 0\n 22084: a0 = 0 if a2 != 0\n 22086: jump @827 if a0 == 0\n      : @804 (gas: 25)\n 22090: u64 [s1 + 0x50] = a2\n 22093: a2 = u64 [s1 + 0xf8]\n 22097: a0 = u64 [a2 + 0x8]\n 22100: a1 = i32 [a2 + 0x10]\n 22103: a2 = u64 [a2]\n 22105: a0 = reverse a0\n 22107: u64 [s1 + 0x48] = a3\n 22110: a3 = a0 << 0x20\n 22113: a1 = reverse a1\n 22115: a1 = a1 >> 0x20\n 22118: a3 = a3 | a1\n 22121: a0 = a0 >> 0x20\n 22124: a1 = reverse a2\n 22126: a2 = a1 << 0x20\n 22129: a2 = a2 | a0\n 22132: a1 = a1 >> 0x20\n 22135: i32 a0 = a4 + 0x4\n 22138: a4 = s1 + 0x1878\n 22142: u64 [a4 + 992] = 0\n 22146: a5 = a4 + 0x300\n 22150: u64 [a5 + 0xd8] = a1\n 22154: u64 [a5 + 0xd0] = a2\n 22158: a1 = s1 + 0x1c40\n 22162: u64 [a5 + 0xc8] = a3\n 22166: ra = 820, jump @9\n      : @805 [@dyn 410] (gas: 9)\n 22172: a4 = u64 [s1 + 0x88]\n 22176: a0 = u64 [s1 + 0x48]\n 22179: a0 = a0 + 0xffffffffffffffdc\n 22182: a0 = a4 <u a0\n 22185: a1 = u64 [s1 + 0x68]\n 22188: a0 = 0 if a1 != 0\n 22190: a1 = u64 [s1 + 0x50]\n 22193: a0 = 0 if a1 != 0\n 22195: jump @827 if a0 == 0\n      : @806 (gas: 13)\n 22199: i32 a0 = a4 + 0x24\n 22202: a1 = u64 [s1 + 0xb8]\n 22206: a3 = s1 + 0x1878\n 22210: a4 = a3 + 0x300\n 22214: u64 [a4 + 0xa8] = a1\n 22218: a1 = u64 [s1 + 0xb0]\n 22222: u64 [a4 + 0xb0] = a1\n 22226: a1 = u64 [s1 + 0x98]\n 22230: u64 [a4 + 0xb8] = a1\n 22234: a1 = s1 + 0x1c20\n 22238: a2 = u64 [s1 + 0x90]\n 22242: u64 [a4 + 0xc0] = a2\n 22246: ra = 822, jump @9\n      : @807 [@dyn 411] (gas: 16)\n 22252: ecalli 11 // 'ref_time_left'\n 22254: a0 = u64 [s1 + 0x78]\n 22257: a1 = u64 [s1 + 0xf8]\n 22261: u64 [a1 + 0x8] = a0\n 22264: a0 = u64 [s1 + 0xa8]\n 22268: u64 [a1] = a0\n 22270: a0 = u64 [s1 + 0xa0]\n 22274: u32 [a1 + 0x10] = a0\n 22277: a0 = s1 + 0x2878\n 22281: u64 [a0 + 896] = 0\n 22285: u64 [a0 + 888] = 0\n 22289: u64 [a0 + 880] = 0\n 22293: u64 [a0 + 872] = 0\n 22297: a1 = 0x44\n 22300: a0 = u64 [s1 + 0x88]\n 22304: ra = 824, jump @20\n      : @808 [@dyn 412] (gas: 4)\n 22310: u64 [s1 + 0xa8] = a0\n 22314: a0 = u64 [s1 + 0x88]\n 22318: a1 = 0\n 22320: ra = 826, jump @20\n      : @809 [@dyn 413] (gas: 31)\n 22326: a2 = s1 + 0x2878\n 22330: u32 [a2 + 904] = 0\n 22334: a3 = a2 + 0x300\n 22338: u64 [a3 + 192] = 0xffffffffffffffff\n 22343: u64 [a3 + 184] = 0xffffffffffffffff\n 22348: u64 [a3 + 176] = 0xffffffffffffffff\n 22353: u64 [a3 + 168] = 0xffffffffffffffff\n 22358: a1 = 0x800000000\n 22368: a2 = u64 [s1 + 0x70]\n 22371: t0 = a2 | a1\n 22374: a1 = s1 + 0x2be0\n 22378: a1 = a1 << 0x20\n 22381: a1 = a1 >> 0x20\n 22384: a2 = s1 + 0x2c20\n 22388: a2 = a2 << 0x20\n 22391: a3 = a2 | a1\n 22394: a1 = u64 [s1 + 0xa8]\n 22398: a1 = a1 << 0x20\n 22401: a1 = a1 >> 0x20\n 22404: a2 = 0x4400000000\n 22414: a4 = a1 | a2\n 22417: a0 = a0 << 0x20\n 22420: a0 = a0 >> 0x20\n 22423: a1 = s1 + 0x2c00\n 22427: a1 = a1 << 0x20\n 22430: a5 = a1 | a0\n 22433: a1 = 0xffffffffffffffff\n 22436: a2 = 0xffffffffffffffff\n 22439: a0 = t0\n 22441: ecalli 0 // 'call'\n 22442: fallthrough\n      : @810 (gas: 1)\n 22443: jump @820 if a0 != 0\n      : @811 (gas: 17)\n 22447: a2 = s1 + 0x1878\n 22451: u64 [a2 + 864] = 0\n 22455: u64 [a2 + 856] = 0\n 22459: u64 [a2 + 848] = 0\n 22463: u64 [a2 + 840] = 0\n 22467: a0 = u64 [s1 + 0x88]\n 22471: a4 = a2 + 0x300\n 22475: u64 [a4 + 0x68] = a0\n 22478: a0 = u64 [s1 + 0x68]\n 22481: u64 [a4 + 0x70] = a0\n 22484: a0 = u64 [s1 + 0x58]\n 22487: u64 [a4 + 0x78] = a0\n 22490: a0 = s1 + 0x1be0\n 22494: a1 = s1 + 0x1bc0\n 22498: a3 = u64 [s1 + 0x60]\n 22501: u64 [a4 + 0x80] = a3\n 22505: ra = 828, jump @1246\n      : @812 [@dyn 414] (gas: 6)\n 22511: a0 = u64 [s1 + 0xf0]\n 22515: u64 [a0 + 24] = 0\n 22518: u64 [a0 + 16] = 0\n 22521: u64 [a0 + 8] = 0\n 22524: u64 [a0 + 0] = 0\n 22526: jump @553\n      : @813 (gas: 3)\n 22529: a0 = s1 + 0x1b20\n 22533: a1 = 0x40\n 22536: ra = 830, jump @7\n      : @814 [@dyn 415] (gas: 14)\n 22542: a0 = s1 + 0x1878\n 22546: a2 = a0 + 0x200\n 22550: a1 = u64 [a2 + 0xc0]\n 22554: u64 [s1 + 0xf0] = a1\n 22558: a1 = u64 [a2 + 0xb8]\n 22562: u64 [s1 + 0xe8] = a1\n 22566: a1 = u64 [a2 + 0xb0]\n 22570: u64 [s1 + 0xe0] = a1\n 22574: a0 = u64 [a2 + 0xa8]\n 22578: u64 [s1 + 0xf8] = a0\n 22582: ra = 0x340\n 22586: ecalli 13 // 'return_data_size'\n 22588: t0 = 0x342\n 22592: jump @1462\n      : @815 [@dyn 416] (gas: 1)\n 22595: t0 = 834, jump @1462\n      : @816 [@dyn 417] (gas: 1)\n 22601: jump @827 if a1 != 0\n      : @817 (gas: 3)\n 22605: a2 = a0\n 22607: a0 = a0 >> 0x20\n 22610: jump @827 if a0 != 0\n      : @818 (gas: 6)\n 22614: i32 a0 = a2 + 0\n 22616: u64 [s1 + 0xf0] = a0\n 22620: a0 = u64 [s1 + 0xf8]\n 22624: a1 = a2\n 22626: u64 [s1 + 0xe8] = a2\n 22630: ra = 836, jump @20\n      : @819 [@dyn 418] (gas: 11)\n 22636: a1 = s1 + 0x2878\n 22640: a2 = u64 [s1 + 0xe8]\n 22644: u32 [a1 + 0x448] = a2\n 22648: i32 a0 = a0 + 0\n 22650: a1 = s1 + 0x3000\n 22654: i32 a1 = a1 + 0xfffffffffffffcc0\n 22658: a2 = 0\n 22660: ecalli 12 // 'return_data_copy'\n 22662: a0 = s1 + 0x2878\n 22666: a0 = i32 [a0 + 0x448]\n 22670: jump @791\n      : @820 (gas: 3)\n 22673: a0 = s1 + 0x1c00\n 22677: a1 = 0x40\n 22680: ra = 838, jump @7\n      : @821 [@dyn 419] (gas: 14)\n 22686: a0 = s1 + 0x1878\n 22690: a2 = a0 + 0x300\n 22694: a1 = u64 [a2 + 0xa0]\n 22698: u64 [s1 + 0xf0] = a1\n 22702: a1 = u64 [a2 + 0x98]\n 22706: u64 [s1 + 0xe8] = a1\n 22710: a1 = u64 [a2 + 0x90]\n 22714: u64 [s1 + 0xe0] = a1\n 22718: a0 = u64 [a2 + 0x88]\n 22722: u64 [s1 + 0xf8] = a0\n 22726: ra = 0x348\n 22730: ecalli 13 // 'return_data_size'\n 22732: t0 = 0x34a\n 22736: jump @1462\n      : @822 [@dyn 420] (gas: 1)\n 22739: t0 = 842, jump @1462\n      : @823 [@dyn 421] (gas: 1)\n 22745: jump @827 if a1 != 0\n      : @824 (gas: 3)\n 22748: a1 = a0\n 22750: a0 = a0 >> 0x20\n 22753: jump @827 if a0 != 0\n      : @825 (gas: 5)\n 22756: u64 [s1 + 0xe8] = a1\n 22760: i32 a0 = a1 + 0\n 22762: u64 [s1 + 0xf0] = a0\n 22766: a0 = u64 [s1 + 0xf8]\n 22770: ra = 844, jump @20\n      : @826 [@dyn 422] (gas: 11)\n 22776: a1 = s1 + 0x2878\n 22780: a2 = u64 [s1 + 0xe8]\n 22784: u32 [a1 + 0x3c8] = a2\n 22788: i32 a0 = a0 + 0\n 22790: a1 = s1 + 0x3000\n 22794: i32 a1 = a1 + 0xfffffffffffffc40\n 22798: a2 = 0\n 22800: ecalli 12 // 'return_data_copy'\n 22802: a0 = s1 + 0x2878\n 22806: a0 = i32 [a0 + 0x3c8]\n 22810: jump @791\n      : @827 (gas: 1)\n 22813: trap\n      : @828 (gas: 11)\n 22814: a2 = s1 + 0x7ff\n 22818: a2 = a2 + 0x79\n 22821: u64 [a2 + 1112] = 0\n 22825: u64 [a2 + 1104] = 0\n 22829: a0 = 0xfcb63a2200000000\n 22839: u64 [a2 + 0x460] = a0\n 22843: a1 = s1 + 0x7ff\n 22847: a1 = a1 + 0x4c1\n 22851: u64 [a2 + 1096] = 0\n 22855: a0 = 0\n 22857: ra = 846, jump @9\n      : @829 [@dyn 423] (gas: 2)\n 22863: a1 = i32 [0x20150]\n 22868: jump @831 if a1 >u 31\n      : @830 (gas: 4)\n 22872: u32 [0x20150] = 0x20\n 22878: a1 = 0x20160\n 22883: i32 a1 = a1 + 0\n 22885: jump @895\n      : @831 (gas: 3)\n 22888: a1 = 0x20160\n 22893: i32 a1 = a1 + 0\n 22895: jump @895\n      : @832 (gas: 3)\n 22898: a1 = 0x20160\n 22903: i32 a1 = a1 + 0\n 22905: jump @1182\n      : @833 (gas: 3)\n 22908: a1 = 0x20160\n 22913: i32 a1 = a1 + 0\n 22915: jump @1182\n      : @834 (gas: 3)\n 22918: a1 = 0x20160\n 22923: i32 a1 = a1 + 0\n 22925: jump @1182\n      : @835 (gas: 3)\n 22928: a1 = 0x20160\n 22933: i32 a1 = a1 + 0\n 22935: jump @1182\n      : @836 (gas: 11)\n 22938: a2 = s1 + 0x7ff\n 22942: a2 = a2 + 0x79\n 22945: u64 [a2 + 536] = 0\n 22949: u64 [a2 + 528] = 0\n 22953: a0 = 0x2c5211c600000000\n 22963: u64 [a2 + 0x220] = a0\n 22967: a1 = s1 + 0x7ff\n 22971: a1 = a1 + 0x281\n 22975: u64 [a2 + 520] = 0\n 22979: a0 = 0\n 22981: ra = 848, jump @9\n      : @837 [@dyn 424] (gas: 2)\n 22987: a1 = i32 [0x20150]\n 22992: jump @839 if a1 >u 31\n      : @838 (gas: 4)\n 22996: u32 [0x20150] = 0x20\n 23002: a1 = 0x20160\n 23007: i32 a1 = a1 + 0\n 23009: jump @895\n      : @839 (gas: 3)\n 23012: a1 = 0x20160\n 23017: i32 a1 = a1 + 0\n 23019: jump @895\n      : @840 (gas: 11)\n 23022: a2 = s1 + 0x7ff\n 23026: a2 = a2 + 0x79\n 23029: u64 [a2 + 568] = 0\n 23033: u64 [a2 + 560] = 0\n 23037: a0 = 0xfcb63a2200000000\n 23047: u64 [a2 + 0x240] = a0\n 23051: a1 = s1 + 0x7ff\n 23055: a1 = a1 + 0x2a1\n 23059: u64 [a2 + 552] = 0\n 23063: a0 = 0\n 23065: ra = 850, jump @9\n      : @841 [@dyn 425] (gas: 2)\n 23071: a1 = i32 [0x20150]\n 23076: jump @843 if a1 >u 31\n      : @842 (gas: 4)\n 23080: u32 [0x20150] = 0x20\n 23086: a1 = 0x20160\n 23091: i32 a1 = a1 + 0\n 23093: jump @895\n      : @843 (gas: 3)\n 23096: a1 = 0x20160\n 23101: i32 a1 = a1 + 0\n 23103: jump @895\n      : @844 (gas: 3)\n 23106: a1 = 0x20160\n 23111: i32 a1 = a1 + 0\n 23113: jump @1182\n      : @845 (gas: 3)\n 23116: a1 = 0x20160\n 23121: i32 a1 = a1 + 0\n 23123: jump @1182\n      : @846 (gas: 3)\n 23126: a1 = 0x20160\n 23131: i32 a1 = a1 + 0\n 23133: jump @1182\n      : @847 (gas: 3)\n 23136: a1 = 0x20160\n 23141: i32 a1 = a1 + 0\n 23143: jump @1182\n      : @848 (gas: 3)\n 23146: a1 = 0x20160\n 23151: i32 a1 = a1 + 0\n 23153: jump @1182\n      : @849 (gas: 3)\n 23156: a1 = 0x20160\n 23161: i32 a1 = a1 + 0\n 23163: jump @1182\n      : @850 (gas: 3)\n 23166: a1 = 0x20160\n 23171: i32 a1 = a1 + 0\n 23173: jump @1182\n      : @851 (gas: 3)\n 23176: a1 = 0x20160\n 23181: i32 a1 = a1 + 0\n 23183: jump @1182\n      : @852 (gas: 3)\n 23186: a1 = 0x20160\n 23191: i32 a1 = a1 + 0\n 23193: jump @1182\n      : @853 (gas: 3)\n 23196: t0 = 0x354\n 23200: a2 = s1 + 0x1078\n 23204: fallthrough\n      : @854 [@dyn 426] (gas: 8)\n 23205: u64 [a2 + 1752] = 0\n 23209: u64 [a2 + 1744] = 0\n 23213: a0 = 0x2c5211c600000000\n 23223: u64 [a2 + 0x6e0] = a0\n 23227: a1 = s1 + 0x1740\n 23231: u64 [a2 + 1736] = 0\n 23235: a0 = 0\n 23237: ra = 854, jump @9\n      : @855 [@dyn 427] (gas: 2)\n 23243: a1 = i32 [0x20150]\n 23248: jump @857 if a1 >u 31\n      : @856 (gas: 4)\n 23252: u32 [0x20150] = 0x20\n 23258: a1 = 0x20160\n 23263: i32 a1 = a1 + 0\n 23265: jump @895\n      : @857 (gas: 3)\n 23268: a1 = 0x20160\n 23273: i32 a1 = a1 + 0\n 23275: jump @895\n      : @858 (gas: 3)\n 23278: t0 = 0x358\n 23282: a2 = s1 + 0x1878\n 23286: fallthrough\n      : @859 [@dyn 428] (gas: 9)\n 23287: u64 [a2 + 1816] = 0\n 23291: u64 [a2 + 1808] = 0\n 23295: a0 = 0xcc67c13b00000000\n 23305: u64 [a2 + 0x720] = a0\n 23309: a1 = s1 + 0x1f80\n 23313: u64 [a2 + 1800] = 0\n 23317: a0 = 0\n 23319: ra = 0x362\n 23323: jump @9\n      : @860 (gas: 10)\n 23326: a0 = s1 + 0x1878\n 23330: u64 [a0 + 1880] = 0\n 23334: u64 [a0 + 1872] = 0\n 23338: u64 [a0 + 1864] = 0\n 23342: a2 = a0\n 23344: a0 = 0x4e487b7100000000\n 23354: a1 = s1 + 0x1fc0\n 23358: u64 [a2 + 0x760] = a0\n 23362: a0 = 0\n 23364: ra = 858, jump @9\n      : @861 [@dyn 429] (gas: 3)\n 23370: t0 = 0x35c\n 23374: a1 = s1 + 0x1878\n 23378: fallthrough\n      : @862 [@dyn 430] (gas: 9)\n 23379: u64 [a1 + 1856] = 0\n 23383: u64 [a1 + 1848] = 0\n 23387: u64 [a1 + 1832] = 0x11\n 23392: a2 = a1\n 23394: a0 = 0x4\n 23397: a1 = s1 + 0x1fa0\n 23401: u64 [a2 + 1840] = 0\n 23405: ra = 0x36c\n 23409: jump @9\n      : @863 (gas: 3)\n 23412: t0 = 0x35e\n 23416: a2 = s1 + 0x1878\n 23420: fallthrough\n      : @864 [@dyn 431] (gas: 9)\n 23421: u64 [a2 + 1912] = 0\n 23425: u64 [a2 + 1904] = 0\n 23429: a0 = 0xe9987cdd00000000\n 23439: u64 [a2 + 0x780] = a0\n 23443: a1 = s1 + 0x1fe0\n 23447: u64 [a2 + 1896] = 0\n 23451: a0 = 0\n 23453: ra = 0x362\n 23457: jump @9\n      : @865 (gas: 3)\n 23460: a1 = 0x20160\n 23465: i32 a1 = a1 + 0\n 23467: jump @1182\n      : @866 (gas: 3)\n 23470: a1 = 0x20160\n 23475: i32 a1 = a1 + 0\n 23477: jump @1182\n      : @867 (gas: 3)\n 23480: a1 = 0x20160\n 23485: i32 a1 = a1 + 0\n 23487: jump @1182\n      : @868 (gas: 3)\n 23490: a1 = 0x20160\n 23495: i32 a1 = a1 + 0\n 23497: jump @1182\n      : @869 (gas: 3)\n 23500: a1 = 0x20160\n 23505: i32 a1 = a1 + 0\n 23507: jump @1182\n      : @870 (gas: 3)\n 23510: a1 = 0x20160\n 23515: i32 a1 = a1 + 0\n 23517: jump @1182\n      : @871 (gas: 3)\n 23520: a1 = 0x20160\n 23525: i32 a1 = a1 + 0\n 23527: jump @1182\n      : @872 (gas: 3)\n 23530: a1 = 0x20160\n 23535: i32 a1 = a1 + 0\n 23537: jump @1182\n      : @873 (gas: 1)\n 23540: jump @906 if a0 != 2618616686\n      : @874 (gas: 10)\n 23548: a0 = s1 + 0x2878\n 23552: u64 [a0 + 256] = 0\n 23556: u64 [a0 + 248] = 0\n 23560: u64 [a0 + 240] = 0\n 23564: u64 [a0 + 232] = 0\n 23568: a0 = s1 + 0x3000\n 23572: i32 a0 = a0 + 0xfffffffffffff960\n 23576: ecalli 17 // 'value_transferred'\n 23578: a3 = s1 + 0x2878\n 23582: fallthrough\n      : @875 (gas: 8)\n 23583: a0 = u64 [a3 + 0xf8]\n 23587: a1 = u64 [a3 + 0x100]\n 23591: a2 = u64 [a3 + 0xf0]\n 23595: a3 = u64 [a3 + 0xe8]\n 23599: a1 = a1 | a2\n 23602: a0 = a0 | a3\n 23605: a0 = a0 | a1\n 23608: jump @925 if a0 == 0\n      : @876 (gas: 3)\n 23612: a1 = 0x20160\n 23617: i32 a1 = a1 + 0\n 23619: jump @1182\n      : @877 (gas: 3)\n 23622: a1 = 0x20160\n 23627: i32 a1 = a1 + 0\n 23629: jump @1182\n      : @878 (gas: 3)\n 23632: a1 = 0x20160\n 23637: i32 a1 = a1 + 0\n 23639: jump @1182\n      : @879 (gas: 3)\n 23642: a1 = 0x20160\n 23647: i32 a1 = a1 + 0\n 23649: jump @1182\n      : @880 (gas: 3)\n 23652: a1 = 0x20160\n 23657: i32 a1 = a1 + 0\n 23659: jump @1182\n      : @881 (gas: 3)\n 23662: a1 = 0x20160\n 23667: i32 a1 = a1 + 0\n 23669: jump @1182\n      : @882 (gas: 3)\n 23672: a1 = 0x20160\n 23677: i32 a1 = a1 + 0\n 23679: jump @1182\n      : @883 (gas: 3)\n 23682: a1 = 0x20160\n 23687: i32 a1 = a1 + 0\n 23689: jump @1182\n      : @884 (gas: 3)\n 23692: a1 = 0x20160\n 23697: i32 a1 = a1 + 0\n 23699: jump @1182\n      : @885 (gas: 3)\n 23702: t0 = 0x360\n 23706: a2 = s1 + 0x1878\n 23710: fallthrough\n      : @886 [@dyn 432] (gas: 8)\n 23711: u64 [a2 + 1400] = 0\n 23715: u64 [a2 + 1392] = 0\n 23719: a0 = 0xdd75059200000000\n 23729: u64 [a2 + 0x580] = a0\n 23733: a1 = s1 + 0x1de0\n 23737: u64 [a2 + 1384] = 0\n 23741: a0 = 0\n 23743: ra = 866, jump @9\n      : @887 [@dyn 433] (gas: 3)\n 23749: a1 = 0x4\n 23752: a0 = 0\n 23754: ra = 868, jump @20\n      : @888 [@dyn 434] (gas: 2)\n 23760: i32 a1 = a0 + 0\n 23762: jump @895\n      : @889 (gas: 3)\n 23764: a1 = 0x20160\n 23769: i32 a1 = a1 + 0\n 23771: jump @1182\n      : @890 (gas: 3)\n 23774: a1 = 0x20160\n 23779: i32 a1 = a1 + 0\n 23781: jump @1182\n      : @891 (gas: 11)\n 23784: a2 = s1 + 0x7ff\n 23788: a2 = a2 + 0x79\n 23791: u64 [a2 + 344] = 0\n 23795: u64 [a2 + 336] = 0\n 23799: a0 = 0xd5b25b6300000000\n 23809: u64 [a2 + 0x160] = a0\n 23813: a1 = s1 + 0x7ff\n 23817: a1 = a1 + 0x1c1\n 23821: u64 [a2 + 328] = 0\n 23825: a0 = 0\n 23827: ra = 870, jump @9\n      : @892 [@dyn 435] (gas: 2)\n 23833: a1 = i32 [0x20150]\n 23838: jump @894 if a1 >u 31\n      : @893 (gas: 4)\n 23842: u32 [0x20150] = 0x20\n 23848: a1 = 0x20160\n 23853: i32 a1 = a1 + 0\n 23855: jump @895\n      : @894 (gas: 3)\n 23857: a1 = 0x20160\n 23862: i32 a1 = a1 + 0\n 23864: fallthrough\n      : @895 (gas: 4)\n 23865: a0 = 0x1\n 23868: a2 = 0x4\n 23871: ecalli 14 // 'seal_return'\n 23873: fallthrough\n      : @896 (gas: 10)\n 23874: a0 = s1 + 0x1878\n 23878: u64 [a0 + 1976] = 0\n 23882: u64 [a0 + 1968] = 0\n 23886: u64 [a0 + 1960] = 0\n 23890: a2 = a0\n 23892: a0 = 0x4e487b7100000000\n 23902: a1 = s1 + 0x2020\n 23906: u64 [a2 + 0x7c0] = a0\n 23910: a0 = 0\n 23912: ra = 872, jump @9\n      : @897 [@dyn 436] (gas: 3)\n 23918: t0 = 0x36a\n 23922: a1 = s1 + 0x1878\n 23926: fallthrough\n      : @898 [@dyn 437] (gas: 8)\n 23927: u64 [a1 + 1952] = 0\n 23931: u64 [a1 + 1944] = 0\n 23935: u64 [a1 + 1928] = 0x41\n 23940: a2 = a1\n 23942: a0 = 0x4\n 23945: a1 = s1 + 0x2000\n 23949: u64 [a2 + 1936] = 0\n 23953: ra = 876, jump @9\n      : @899 [@dyn 438] (gas: 3)\n 23959: a1 = 0x24\n 23962: a0 = 0\n 23964: ra = 878, jump @20\n      : @900 [@dyn 439] (gas: 5)\n 23970: i32 a1 = a0 + 0\n 23972: a0 = 0x1\n 23975: a2 = 0x24\n 23978: ecalli 14 // 'seal_return'\n 23980: fallthrough\n      : @901 (gas: 12)\n 23981: a2 = s1 + 0x7ff\n 23985: a2 = a2 + 0x79\n 23988: u64 [a2 + 600] = 0\n 23992: u64 [a2 + 592] = 0\n 23996: a0 = 0xf4d678b800000000\n 24006: u64 [a2 + 0x260] = a0\n 24010: a1 = s1 + 0x7ff\n 24014: a1 = a1 + 0x2c1\n 24018: u64 [a2 + 584] = 0\n 24022: a0 = 0\n 24024: ra = 0x370\n 24028: jump @9\n      : @902 (gas: 11)\n 24031: a2 = s1 + 0x7ff\n 24035: a2 = a2 + 0x79\n 24038: u64 [a2 + 984] = 0\n 24042: u64 [a2 + 976] = 0\n 24046: a0 = 0xf4d678b800000000\n 24056: u64 [a2 + 0x3e0] = a0\n 24060: a1 = s1 + 0x7ff\n 24064: a1 = a1 + 0x441\n 24068: u64 [a2 + 968] = 0\n 24072: a0 = 0\n 24074: ra = 880, jump @9\n      : @903 [@dyn 440] (gas: 3)\n 24080: a0 = u64 [s1 + 0x78]\n 24083: a0 = i32 [a0]\n 24085: jump @905 if a0 >u 31\n      : @904 (gas: 3)\n 24089: a1 = u64 [s1 + 0x78]\n 24092: u32 [a1 + 0] = 0x20\n 24095: fallthrough\n      : @905 (gas: 6)\n 24096: a0 = 0x1\n 24099: a2 = 0x4\n 24102: a1 = u64 [s1 + 0x88]\n 24106: ra = 0x372\n 24110: ecalli 14 // 'seal_return'\n 24112: fallthrough\n      : @906 [@dyn 441] (gas: 1)\n 24113: jump @912 if a0 != 2685688103\n      : @907 (gas: 11)\n 24120: a0 = s1 + 0x2878\n 24124: u64 [a0 + 320] = 0\n 24128: u64 [a0 + 312] = 0\n 24132: u64 [a0 + 304] = 0\n 24136: u64 [a0 + 296] = 0\n 24140: a0 = s1 + 0x3000\n 24144: i32 a0 = a0 + 0xfffffffffffff9a0\n 24148: ra = 0x374\n 24152: ecalli 17 // 'value_transferred'\n 24154: t0 = 0x376\n 24158: jump @1497\n      : @908 [@dyn 442] (gas: 1)\n 24161: t0 = 886, jump @1497\n      : @909 [@dyn 443] (gas: 1)\n 24167: t0 = 888, jump @1494\n      : @910 [@dyn 444] (gas: 1)\n 24173: jump @927 if a0 == 0\n      : @911 (gas: 3)\n 24177: a1 = 0x20160\n 24182: i32 a1 = a1 + 0\n 24184: jump @1182\n      : @912 (gas: 1)\n 24187: jump @929 if a0 != 3058722618\n      : @913 (gas: 11)\n 24195: a0 = s1 + 0x2878\n 24199: u64 [a0 + 480] = 0\n 24203: u64 [a0 + 472] = 0\n 24207: u64 [a0 + 464] = 0\n 24211: u64 [a0 + 456] = 0\n 24215: a0 = s1 + 0x3000\n 24219: i32 a0 = a0 + 0xfffffffffffffa40\n 24223: ra = 0x37a\n 24227: ecalli 17 // 'value_transferred'\n 24229: t0 = 0x37c\n 24233: jump @1497\n      : @914 [@dyn 445] (gas: 1)\n 24236: t0 = 892, jump @1497\n      : @915 [@dyn 446] (gas: 1)\n 24242: t0 = 894, jump @1482\n      : @916 [@dyn 447] (gas: 1)\n 24248: jump @936 if a0 == 0\n      : @917 (gas: 3)\n 24252: a1 = 0x20160\n 24257: i32 a1 = a1 + 0\n 24259: jump @1182\n      : @918 (gas: 2)\n 24262: u64 [s1 + 184] = 0\n 24266: fallthrough\n      : @919 (gas: 5)\n 24267: a0 = u64 [s1 + 0xc8]\n 24271: a0 = a0 << 0x1\n 24274: a4 = u64 [s1 + 0xb8]\n 24278: a4 = a4 | a0\n 24281: fallthrough\n      : @920 (gas: 7)\n 24282: u64 [s1 + 824] = 0\n 24286: u64 [s1 + 816] = 0\n 24290: u64 [s1 + 808] = 0\n 24294: a1 = s1 + 0x320\n 24298: u64 [s1 + 0x320] = a4\n 24302: a0 = u64 [s1 + 0x78]\n 24305: ra = 896, jump @9\n      : @921 [@dyn 448] (gas: 4)\n 24311: a1 = 0x20\n 24314: a0 = u64 [s1 + 0x78]\n 24317: ra = 0x198\n 24321: jump @20\n      : @922 (gas: 5)\n 24324: a1 = 0x20160\n 24329: i32 a1 = a1 + 0\n 24331: a0 = 0x1\n 24334: ecalli 14 // 'seal_return'\n 24336: fallthrough\n      : @923 (gas: 4)\n 24337: a0 = 0x1\n 24340: a1 = u64 [s1 + 0xc0]\n 24344: ecalli 14 // 'seal_return'\n 24346: fallthrough\n      : @924 (gas: 8)\n 24347: a0 = 0x1\n 24350: a1 = u64 [s1 + 0xc0]\n 24354: a2 = 0\n 24356: ecalli 14 // 'seal_return'\n 24358: a1 = 0x20160\n 24363: i32 a1 = a1 + 0\n 24365: a0 = 0\n 24367: jump @1183\n      : @925 (gas: 3)\n 24370: a0 = u64 [s1 + 0xf8]\n 24374: a0 = i32 [a0]\n 24376: jump @938 if a0 >u 99\n      : @926 (gas: 3)\n 24381: a1 = 0x20160\n 24386: i32 a1 = a1 + 0\n 24388: jump @1182\n      : @927 (gas: 3)\n 24391: a0 = u64 [s1 + 0xf8]\n 24395: a0 = i32 [a0]\n 24397: jump @963 if a0 >u 67\n      : @928 (gas: 3)\n 24402: a1 = 0x20160\n 24407: i32 a1 = a1 + 0\n 24409: jump @1182\n      : @929 (gas: 1)\n 24412: jump @987 if a0 != 4076725131\n      : @930 (gas: 13)\n 24420: a0 = s1 + 0x2878\n 24424: u64 [a0 + 1568] = 0\n 24428: u64 [a0 + 1560] = 0\n 24432: u64 [a0 + 1552] = 0\n 24436: u64 [a0 + 1544] = 0\n 24440: a0 = s1 + 0x3000\n 24444: i32 a0 = a0 + 0xfffffffffffffe80\n 24448: ra = 0x382\n 24452: ecalli 17 // 'value_transferred'\n 24454: a3 = s1 + 0x2878\n 24458: a4 = a3 + 0x600\n 24462: t0 = 0x384\n 24466: jump @1475\n      : @931 [@dyn 449] (gas: 3)\n 24469: a3 = s1 + 0x2878\n 24473: a4 = a3 + 0x600\n 24477: t0 = 900, jump @1475\n      : @932 [@dyn 450] (gas: 1)\n 24483: jump @934 if a0 != 0\n      : @933 (gas: 3)\n 24486: a0 = u64 [s1 + 0xf8]\n 24490: a0 = i32 [a0]\n 24492: jump @993 if a0 >u 35\n      : @934 (gas: 3)\n 24497: a0 = 0\n 24499: a1 = 0\n 24501: ra = 902, jump @20\n      : @935 [@dyn 451] (gas: 3)\n 24507: i32 a1 = a0 + 0\n 24509: a0 = 0x1\n 24512: jump @1183\n      : @936 (gas: 3)\n 24515: a0 = u64 [s1 + 0xf8]\n 24519: a0 = i32 [a0]\n 24521: jump @1000 if a0 >u 35\n      : @937 (gas: 3)\n 24526: a1 = 0x20160\n 24531: i32 a1 = a1 + 0\n 24533: jump @1182\n      : @938 (gas: 4)\n 24536: a0 = s1 + 0x1060\n 24540: ra = 0x388\n 24544: t0 = 0x4de\n 24548: jump @1493\n      : @939 [@dyn 452] (gas: 14)\n 24551: a0 = s1 + 0x1078\n 24555: a1 = u64 [a0]\n 24557: u64 [s1 + 0x70] = a1\n 24560: a2 = a0 + 0xffffffffffffff00\n 24564: a1 = u64 [a2 + 0xf8]\n 24568: u64 [s1 + 0x68] = a1\n 24571: a1 = u64 [a2 + 0xf0]\n 24575: u64 [s1 + 0x60] = a1\n 24578: a0 = u64 [a2 + 0xe8]\n 24582: u64 [s1 + 0x50] = a0\n 24585: a0 = s1 + 0x1040\n 24589: ra = 0x38a\n 24593: t0 = 0x4e8\n 24597: jump @1499\n      : @940 [@dyn 453] (gas: 15)\n 24600: a1 = s1 + 0x7ff\n 24604: a1 = a1 + 0x79\n 24607: a2 = a1 + 0x700\n 24611: a0 = u64 [a2 + 0xe0]\n 24615: u64 [s1 + 0x58] = a0\n 24618: a0 = u64 [a2 + 0xd8]\n 24622: u64 [s1 + 0x48] = a0\n 24625: a0 = u64 [a2 + 0xd0]\n 24629: u64 [s1 + 0x40] = a0\n 24632: a0 = u64 [a2 + 0xc8]\n 24636: u64 [s1 + 0x78] = a0\n 24639: a0 = s1 + 0x1020\n 24643: ra = 0x38c\n 24647: t0 = 0x4ee\n 24651: jump @1499\n      : @941 [@dyn 454] (gas: 15)\n 24654: a1 = s1 + 0x7ff\n 24658: a1 = a1 + 0x79\n 24661: a2 = a1 + 0x700\n 24665: a0 = u64 [a2 + 0xc0]\n 24669: u64 [s1 + 0x38] = a0\n 24672: a0 = u64 [a2 + 0xb8]\n 24676: u64 [s1 + 0x30] = a0\n 24679: a0 = u64 [a2 + 0xb0]\n 24683: u64 [s1 + 0x28] = a0\n 24686: a0 = u64 [a2 + 0xa8]\n 24690: u64 [s1 + 0x20] = a0\n 24693: a0 = s1 + 0x3000\n 24697: i32 a0 = a0 + 0xfffffffffffff980\n 24701: ecalli 10 // 'now'\n 24703: fallthrough\n      : @942 (gas: 49)\n 24704: a0 = s1 + 0x2878\n 24708: t0 = u64 [a0 + 0x120]\n 24712: a4 = u64 [a0 + 0x118]\n 24716: u64 [s1 + 0xb8] = a4\n 24720: t2 = u64 [a0 + 0x110]\n 24724: a3 = u64 [a0 + 0x108]\n 24728: u64 [s1 + 0xa0] = a3\n 24732: a0 = clz t0\n 24734: a1 = clz a4\n 24736: a2 = a1 + 0x40\n 24739: a2 = a0 if t0 != 0\n 24742: a0 = clz t2\n 24744: a1 = clz a3\n 24746: a1 = a1 + 0x40\n 24749: a1 = a0 if t2 != 0\n 24752: a0 = a1 + 0x80\n 24756: a3 = a4 | t0\n 24759: a2 = a0 if a3 == 0\n 24762: a5 = a0 <u a1\n 24765: a5 = 0 if a3 != 0\n 24767: a4 = a5 >u 0\n 24769: a0 = a2 <u 0xf0\n 24773: a3 = a0 ^ 0x1\n 24776: a4 = a3 if a5 == 0\n 24779: a0 = a4 <u 0x1\n 24782: ra = a0 + 0xffffffffffffffff\n 24785: t1 = -a4\n 24787: a5 = -a5\n 24789: a3 = a5 - a3\n 24792: a2 = 0xef - a2\n 24796: a5 = t1 >u 0\n 24798: a0 = ra >u 0\n 24800: a0 = a5 if ra == 0\n 24803: a5 = a2 <u 0x100\n 24807: a5 = a5 ^ 0x1\n 24810: a1 = a3 >u 0\n 24812: a5 = a1 if a3 != 0\n 24815: a5 = a0 if a4 != 0\n 24818: u64 [s1 + 0x98] = t2\n 24822: u64 [s1 + 0xb0] = t0\n 24826: a0 = t2 | t0\n 24829: a4 = u64 [s1 + 0xa0]\n 24833: a1 = u64 [s1 + 0xb8]\n 24837: a1 = a1 | a4\n 24840: a0 = a0 | a1\n 24843: a0 = a0 <u 0x1\n 24846: a0 = a0 | a5\n 24849: a4 = 0 if a0 != 0\n 24851: jump @1022 if a0 != 0\n      : @943 (gas: 5)\n 24855: a0 = a2 ^ 0xff\n 24859: a0 = a0 | t1\n 24862: a1 = a3 | ra\n 24865: a0 = a0 | a1\n 24868: jump @1022 if a0 == 0\n      : @944 (gas: 1)\n 24872: t0 = 910, jump @1460\n      : @945 [@dyn 455] (gas: 1)\n 24878: ra = 912, jump @1504\n      : @946 [@dyn 456] (gas: 6)\n 24884: u64 [s1 + 0xa8] = a0\n 24888: u64 [s1 + 0xc8] = a1\n 24892: a0 = u64 [s1 + 0xb8]\n 24896: a1 = u64 [s1 + 0xb0]\n 24900: a2 = u64 [s1 + 0xc0]\n 24904: ra = 914, jump @1509\n      : @947 [@dyn 457] (gas: 7)\n 24910: u64 [s1 + 0x90] = a0\n 24914: u64 [s1 + 0x88] = a1\n 24918: a0 = u64 [s1 + 0xc0]\n 24922: a2 = a0 + 0xffffffffffffff80\n 24925: a0 = u64 [s1 + 0xa0]\n 24929: a1 = u64 [s1 + 0x98]\n 24933: ra = 916, jump @1509\n      : @948 [@dyn 458] (gas: 8)\n 24939: u64 [s1 + 0x80] = a0\n 24943: u64 [s1 + 0x18] = a1\n 24946: a2 = u64 [s1 + 0xc0]\n 24950: a0 = a2 <u 0x80\n 24954: u64 [s1 + 0x10] = a0\n 24957: a0 = u64 [s1 + 0xa0]\n 24961: a1 = u64 [s1 + 0x98]\n 24965: ra = 918, jump @1509\n      : @949 [@dyn 459] (gas: 12)\n 24971: u64 [s1 + 0xd0] = a1\n 24975: a1 = u64 [s1 + 0xf0]\n 24979: a2 = u64 [s1 + 0xe8]\n 24983: a2 = a2 | a1\n 24986: a1 = u64 [s1 + 0xf8]\n 24990: a3 = u64 [s1 + 0xe0]\n 24994: a1 = a1 | a3\n 24997: a1 = a1 | a2\n 25000: a3 = u64 [s1 + 0x10]\n 25003: a0 = 0 if a3 == 0\n 25005: u64 [s1 + 0xd8] = a0\n 25009: jump @1020 if a1 == 0\n      : @950 (gas: 7)\n 25013: a2 = a3\n 25015: a0 = u64 [s1 + 0xc8]\n 25019: a1 = u64 [s1 + 0x88]\n 25023: a0 = a0 | a1\n 25026: a5 = a3\n 25028: a1 = u64 [s1 + 0x18]\n 25031: t0 = 920, jump @1456\n      : @951 [@dyn 460] (gas: 1)\n 25037: ra = 922, jump @1504\n      : @952 [@dyn 461] (gas: 6)\n 25043: u64 [s1 + 0xa8] = a0\n 25047: u64 [s1 + 0x80] = a1\n 25051: a0 = u64 [s1 + 0xa0]\n 25055: a1 = u64 [s1 + 0x98]\n 25059: a2 = u64 [s1 + 0xf8]\n 25063: ra = 924, jump @1504\n      : @953 [@dyn 462] (gas: 7)\n 25069: u64 [s1 + 0x18] = a0\n 25072: u64 [s1 + 0x88] = a1\n 25076: a1 = u64 [s1 + 0xf8]\n 25080: a2 = 0x80 - a1\n 25084: a0 = u64 [s1 + 0xb8]\n 25088: a1 = u64 [s1 + 0xb0]\n 25092: ra = 926, jump @1509\n      : @954 [@dyn 463] (gas: 1)\n 25098: t0 = 928, jump @1484\n      : @955 [@dyn 464] (gas: 2)\n 25104: a1 = u64 [s1 + 0x18]\n 25107: t0 = 930, jump @1503\n      : @956 [@dyn 465] (gas: 1)\n 25113: ra = 932, jump @1504\n      : @957 [@dyn 466] (gas: 1)\n 25119: t0 = 934, jump @1467\n      : @958 [@dyn 467] (gas: 1)\n 25125: t0 = 936, jump @1472\n      : @959 [@dyn 468] (gas: 5)\n 25131: t0 = ra <u a2\n 25134: a4 = u64 [s1 + 0x88]\n 25138: a5 = a4 <u a3\n 25141: a5 = t0 if t1 != 0\n 25144: t0 = 938, jump @1477\n      : @960 [@dyn 469] (gas: 20)\n 25150: t0 = a0 | a1\n 25153: a1 = a4 << 0x1\n 25156: a4 = u64 [s1 + 0xd0]\n 25160: t1 = a4 >> 0x3f\n 25163: t1 = a1 | t1\n 25166: a1 = a4 << 0x1\n 25169: a4 = u64 [s1 + 0xd8]\n 25173: t2 = a4 >> 0x3f\n 25176: a1 = a1 | t2\n 25179: a4 = a4 << 0x1\n 25182: a0 = u64 [s1 + 0xb8]\n 25186: a4 = a4 | a0\n 25189: u64 [s1 + 0xd8] = a4\n 25193: a0 = u64 [s1 + 0xb0]\n 25197: a1 = a1 | a0\n 25200: u64 [s1 + 0xd0] = a1\n 25204: a1 = a0 | t1\n 25207: u64 [s1 + 0xc0] = a1\n 25211: a0 = a0 | t0\n 25214: t0 = 940, jump @1450\n      : @961 [@dyn 470] (gas: 18)\n 25220: t0 = a4 <u a2\n 25223: a2 = a4 - a2\n 25226: a4 = a3 <u 0x1\n 25229: a5 = a5 - a4\n 25232: a4 = u64 [s1 + 0xe8]\n 25236: a4 = a4 - t0\n 25239: a3 = a3 + 0xffffffffffffffff\n 25242: u64 [s1 + 0xf0] = a5\n 25246: u64 [s1 + 0xe8] = a4\n 25250: t0 = a5 | a4\n 25253: u64 [s1 + 0xf8] = a3\n 25257: a4 = a3 | a2\n 25260: a3 = a4 | t0\n 25263: a4 = ra & 0x1\n 25266: u64 [s1 + 0xb8] = a4\n 25270: u64 [s1 + 0xe0] = a2\n 25274: u64 [s1 + 176] = 0\n 25278: jump @958 if a3 != 0\n      : @962 (gas: 1)\n 25282: jump @1021\n      : @963 (gas: 4)\n 25285: a0 = s1 + 0x1420\n 25289: ra = 0x3ae\n 25293: t0 = 0x4f8\n 25297: jump @1493\n      : @964 [@dyn 471] (gas: 7)\n 25300: a0 = s1 + 0x1078\n 25304: a0 = u64 [a0 + 0x3a8]\n 25308: u64 [s1 + 0x78] = a0\n 25311: a0 = s1 + 0x1400\n 25315: ra = 0x3b0\n 25319: t0 = 0x4e8\n 25323: jump @1499\n      : @965 [@dyn 472] (gas: 7)\n 25326: a0 = s1 + 0x1078\n 25330: a0 = u64 [a0 + 0x388]\n 25334: u64 [s1 + 0x70] = a0\n 25337: a0 = s1 + 0x3000\n 25341: i32 a0 = a0 + 0xfffffffffffff9c0\n 25345: ecalli 10 // 'now'\n 25347: fallthrough\n      : @966 (gas: 51)\n 25348: a0 = s1 + 0x2878\n 25352: t0 = u64 [a0 + 0x160]\n 25356: a4 = u64 [a0 + 0x158]\n 25360: u64 [s1 + 0xb8] = a4\n 25364: t2 = u64 [a0 + 0x150]\n 25368: a3 = u64 [a0 + 0x148]\n 25372: u64 [s1 + 0xa0] = a3\n 25376: a0 = clz t0\n 25378: a1 = clz a4\n 25380: a2 = a1 + 0x40\n 25383: a2 = a0 if t0 != 0\n 25386: a0 = clz t2\n 25388: a1 = clz a3\n 25390: a1 = a1 + 0x40\n 25393: a1 = a0 if t2 != 0\n 25396: a0 = a1 + 0x80\n 25400: a3 = a4 | t0\n 25403: a2 = a0 if a3 == 0\n 25406: a5 = a0 <u a1\n 25409: a5 = 0 if a3 != 0\n 25411: a4 = a5 >u 0\n 25413: a0 = a2 <u 0xf0\n 25417: a3 = a0 ^ 0x1\n 25420: a4 = a3 if a5 == 0\n 25423: a0 = a4 <u 0x1\n 25426: ra = a0 + 0xffffffffffffffff\n 25429: t1 = -a4\n 25431: a5 = -a5\n 25433: a3 = a5 - a3\n 25436: a2 = 0xef - a2\n 25440: a5 = t1 >u 0\n 25442: a0 = ra >u 0\n 25444: a0 = a5 if ra == 0\n 25447: a5 = a2 <u 0x100\n 25451: a5 = a5 ^ 0x1\n 25454: a1 = a3 >u 0\n 25456: a5 = a1 if a3 != 0\n 25459: a5 = a0 if a4 != 0\n 25462: u64 [s1 + 0x98] = t2\n 25466: u64 [s1 + 0xb0] = t0\n 25470: a0 = t2 | t0\n 25473: a4 = u64 [s1 + 0xa0]\n 25477: a1 = u64 [s1 + 0xb8]\n 25481: a1 = a1 | a4\n 25484: a0 = a0 | a1\n 25487: a0 = a0 <u 0x1\n 25490: a0 = a0 | a5\n 25493: a1 = a4\n 25495: a1 = 0 if a0 != 0\n 25497: u64 [s1 + 0xe8] = a1\n 25501: jump @1027 if a0 != 0\n      : @967 (gas: 5)\n 25505: a0 = a2 ^ 0xff\n 25509: a0 = a0 | t1\n 25512: a1 = a3 | ra\n 25515: a0 = a0 | a1\n 25518: jump @1027 if a0 == 0\n      : @968 (gas: 1)\n 25522: t0 = 946, jump @1460\n      : @969 [@dyn 473] (gas: 1)\n 25528: ra = 948, jump @1504\n      : @970 [@dyn 474] (gas: 6)\n 25534: u64 [s1 + 0xa8] = a0\n 25538: u64 [s1 + 0xc8] = a1\n 25542: a0 = u64 [s1 + 0xb8]\n 25546: a1 = u64 [s1 + 0xb0]\n 25550: a2 = u64 [s1 + 0xc0]\n 25554: ra = 950, jump @1509\n      : @971 [@dyn 475] (gas: 7)\n 25560: u64 [s1 + 0x90] = a0\n 25564: u64 [s1 + 0x88] = a1\n 25568: a0 = u64 [s1 + 0xc0]\n 25572: a2 = a0 + 0xffffffffffffff80\n 25575: a0 = u64 [s1 + 0xa0]\n 25579: a1 = u64 [s1 + 0x98]\n 25583: ra = 952, jump @1509\n      : @972 [@dyn 476] (gas: 8)\n 25589: u64 [s1 + 0x80] = a0\n 25593: u64 [s1 + 0x68] = a1\n 25596: a2 = u64 [s1 + 0xc0]\n 25600: a0 = a2 <u 0x80\n 25604: u64 [s1 + 0x60] = a0\n 25607: a0 = u64 [s1 + 0xa0]\n 25611: a1 = u64 [s1 + 0x98]\n 25615: ra = 954, jump @1509\n      : @973 [@dyn 477] (gas: 12)\n 25621: u64 [s1 + 0xd0] = a1\n 25625: a1 = u64 [s1 + 0xf0]\n 25629: a2 = u64 [s1 + 0xe8]\n 25633: a2 = a2 | a1\n 25636: a1 = u64 [s1 + 0xf8]\n 25640: a3 = u64 [s1 + 0xe0]\n 25644: a1 = a1 | a3\n 25647: a1 = a1 | a2\n 25650: a3 = u64 [s1 + 0x60]\n 25653: a0 = 0 if a3 == 0\n 25655: u64 [s1 + 0xd8] = a0\n 25659: jump @1025 if a1 == 0\n      : @974 (gas: 7)\n 25663: a2 = a3\n 25665: a0 = u64 [s1 + 0xc8]\n 25669: a1 = u64 [s1 + 0x88]\n 25673: a0 = a0 | a1\n 25676: a5 = a3\n 25678: a1 = u64 [s1 + 0x68]\n 25681: t0 = 956, jump @1456\n      : @975 [@dyn 478] (gas: 1)\n 25687: ra = 958, jump @1504\n      : @976 [@dyn 479] (gas: 6)\n 25693: u64 [s1 + 0xa8] = a0\n 25697: u64 [s1 + 0x80] = a1\n 25701: a0 = u64 [s1 + 0xa0]\n 25705: a1 = u64 [s1 + 0x98]\n 25709: a2 = u64 [s1 + 0xf8]\n 25713: ra = 960, jump @1504\n      : @977 [@dyn 480] (gas: 7)\n 25719: u64 [s1 + 0x68] = a0\n 25722: u64 [s1 + 0x88] = a1\n 25726: a1 = u64 [s1 + 0xf8]\n 25730: a2 = 0x80 - a1\n 25734: a0 = u64 [s1 + 0xb8]\n 25738: a1 = u64 [s1 + 0xb0]\n 25742: ra = 962, jump @1509\n      : @978 [@dyn 481] (gas: 1)\n 25748: t0 = 964, jump @1484\n      : @979 [@dyn 482] (gas: 2)\n 25754: a1 = u64 [s1 + 0x68]\n 25757: t0 = 966, jump @1503\n      : @980 [@dyn 483] (gas: 1)\n 25763: ra = 968, jump @1504\n      : @981 [@dyn 484] (gas: 1)\n 25769: t0 = 970, jump @1467\n      : @982 [@dyn 485] (gas: 1)\n 25775: t0 = 972, jump @1472\n      : @983 [@dyn 486] (gas: 5)\n 25781: t0 = ra <u a2\n 25784: a4 = u64 [s1 + 0x88]\n 25788: a5 = a4 <u a3\n 25791: a5 = t0 if t1 != 0\n 25794: t0 = 974, jump @1477\n      : @984 [@dyn 487] (gas: 20)\n 25800: t0 = a0 | a1\n 25803: a1 = a4 << 0x1\n 25806: a4 = u64 [s1 + 0xd0]\n 25810: t1 = a4 >> 0x3f\n 25813: t1 = a1 | t1\n 25816: a1 = a4 << 0x1\n 25819: a4 = u64 [s1 + 0xd8]\n 25823: t2 = a4 >> 0x3f\n 25826: a1 = a1 | t2\n 25829: a4 = a4 << 0x1\n 25832: a0 = u64 [s1 + 0xb8]\n 25836: a4 = a4 | a0\n 25839: u64 [s1 + 0xd8] = a4\n 25843: a0 = u64 [s1 + 0xb0]\n 25847: a1 = a1 | a0\n 25850: u64 [s1 + 0xd0] = a1\n 25854: a1 = a0 | t1\n 25857: u64 [s1 + 0xc0] = a1\n 25861: a0 = a0 | t0\n 25864: t0 = 976, jump @1450\n      : @985 [@dyn 488] (gas: 18)\n 25870: t0 = a4 <u a2\n 25873: a2 = a4 - a2\n 25876: a4 = a3 <u 0x1\n 25879: a5 = a5 - a4\n 25882: a4 = u64 [s1 + 0xe8]\n 25886: a4 = a4 - t0\n 25889: a3 = a3 + 0xffffffffffffffff\n 25892: u64 [s1 + 0xf0] = a5\n 25896: u64 [s1 + 0xe8] = a4\n 25900: t0 = a5 | a4\n 25903: u64 [s1 + 0xf8] = a3\n 25907: a4 = a3 | a2\n 25910: a3 = a4 | t0\n 25913: a4 = ra & 0x1\n 25916: u64 [s1 + 0xb8] = a4\n 25920: u64 [s1 + 0xe0] = a2\n 25924: u64 [s1 + 176] = 0\n 25928: jump @982 if a3 != 0\n      : @986 (gas: 1)\n 25932: jump @1026\n      : @987 (gas: 1)\n 25935: jump @1093 if a0 != 235423050\n      : @988 (gas: 11)\n 25943: a0 = s1 + 0x2078\n 25947: u64 [a0 + 1056] = 0\n 25951: u64 [a0 + 1048] = 0\n 25955: u64 [a0 + 1040] = 0\n 25959: u64 [a0 + 1032] = 0\n 25963: a0 = s1 + 0x2000\n 25967: i32 a0 = a0 + 0x480\n 25971: ra = 0x3d2\n 25975: ecalli 17 // 'value_transferred'\n 25977: t0 = 0x3d4\n 25981: jump @1496\n      : @989 [@dyn 489] (gas: 1)\n 25984: t0 = 980, jump @1496\n      : @990 [@dyn 490] (gas: 1)\n 25990: t0 = 982, jump @1475\n      : @991 [@dyn 491] (gas: 1)\n 25996: jump @1098 if a0 == 0\n      : @992 (gas: 3)\n 26000: a1 = 0x20160\n 26005: i32 a1 = a1 + 0\n 26007: jump @1182\n      : @993 (gas: 4)\n 26010: a0 = s1 + 0x2420\n 26014: ra = 0x3d8\n 26018: t0 = 0x4de\n 26022: jump @1493\n      : @994 [@dyn 492] (gas: 8)\n 26025: a0 = s1 + 0x2078\n 26029: a1 = u64 [a0 + 0x3b0]\n 26033: u64 [s1 + 0xf0] = a1\n 26037: a1 = u64 [a0 + 0x3a8]\n 26041: u64 [s1 + 0xf8] = a1\n 26045: a0 = u32 [a0 + 0x3b8]\n 26049: u64 [s1 + 0xe8] = a0\n 26053: ra = 986, jump @1256\n      : @995 [@dyn 493] (gas: 6)\n 26059: a0 = u64 [s1 + 0xf8]\n 26063: a1 = u64 [s1 + 0xe8]\n 26067: a0 = a0 | a1\n 26070: a1 = u64 [s1 + 0xf0]\n 26074: a0 = a0 | a1\n 26077: jump @1100 if a0 == 0\n      : @996 (gas: 8)\n 26081: a1 = s1 + 0x2878\n 26085: u64 [a1 + 1600] = 0\n 26089: u64 [a1 + 1592] = 0\n 26093: u64 [a1 + 1584] = 0\n 26097: u64 [a1 + 1576] = 0x1\n 26102: a0 = s1 + 0x2400\n 26106: a1 = s1 + 0x2ea0\n 26110: ra = 988, jump @11\n      : @997 [@dyn 494] (gas: 21)\n 26116: a1 = s1 + 0x2078\n 26120: a0 = u32 [a1 + 0x39c]\n 26124: a0 = a0 << 0x20\n 26127: a1 = u64 [a1 + 0x3a0]\n 26131: a2 = u64 [s1 + 0xe8]\n 26135: a0 = a0 | a2\n 26138: a3 = s1 + 0x2878\n 26142: u64 [a3 + 1632] = 0\n 26146: u64 [a3 + 1624] = 0\n 26150: u64 [a3 + 1616] = 0\n 26154: a4 = a3 + 0x600\n 26158: u64 [a4 + 72] = 0x1\n 26162: a2 = u64 [s1 + 0xf0]\n 26166: u64 [a4 + 0x70] = a2\n 26169: a2 = u64 [s1 + 0xf8]\n 26173: u64 [a4 + 0x68] = a2\n 26176: u64 [a4 + 0x80] = a1\n 26180: u64 [a4 + 0x78] = a0\n 26183: a0 = s1 + 0x2ec0\n 26187: a1 = s1 + 0x2ee0\n 26191: ra = 990, jump @12\n      : @998 [@dyn 495] (gas: 3)\n 26197: a0 = 0\n 26199: a1 = 0\n 26201: ra = 992, jump @20\n      : @999 [@dyn 496] (gas: 3)\n 26207: i32 a1 = a0 + 0\n 26209: a0 = 0\n 26211: jump @1183\n      : @1000 (gas: 4)\n 26214: a0 = s1 + 0x1720\n 26218: ra = 0x3e2\n 26222: t0 = 0x4f8\n 26226: jump @1493\n      : @1001 [@dyn 497] (gas: 12)\n 26229: a0 = s1 + 0x1078\n 26233: a0 = u64 [a0 + 0x6a8]\n 26237: u64 [s1 + 0xe0] = a0\n 26241: a0 = 0x30160\n 26246: u64 [s1 + 0xe8] = a0\n 26250: i32 a0 = a0 + 0\n 26252: u64 [s1 + 0xd8] = a0\n 26256: ra = 0x3e4\n 26260: ecalli 4 // 'caller'\n 26262: a2 = u64 [s1 + 0xe8]\n 26266: t0 = 0x3e6\n 26270: jump @1444\n      : @1002 [@dyn 498] (gas: 2)\n 26273: a2 = u64 [s1 + 0xe8]\n 26277: t0 = 998, jump @1444\n      : @1003 [@dyn 499] (gas: 8)\n 26283: u64 [a2 + 1696] = 0\n 26287: a4 = a2 + 0x600\n 26291: u64 [a4 + 0x98] = a1\n 26295: u64 [a4 + 0x90] = a0\n 26299: a1 = s1 + 0x1700\n 26303: u64 [a4 + 0x88] = a3\n 26307: a0 = 0\n 26309: ra = 1000, jump @9\n      : @1004 [@dyn 500] (gas: 3)\n 26315: t0 = 0x3ea\n 26319: a1 = s1 + 0x1078\n 26323: fallthrough\n      : @1005 [@dyn 501] (gas: 8)\n 26324: u64 [a1 + 1664] = 0\n 26328: u64 [a1 + 1656] = 0\n 26332: u64 [a1 + 1640] = 0x3\n 26337: a2 = a1\n 26339: a0 = 0x20\n 26342: a1 = s1 + 0x16e0\n 26346: u64 [a2 + 1648] = 0\n 26350: ra = 1004, jump @9\n      : @1006 [@dyn 502] (gas: 4)\n 26356: a0 = 0x20150\n 26361: u64 [s1 + 0xf8] = a0\n 26365: a0 = i32 [0x20150]\n 26370: jump @1008 if a0 >u 63\n      : @1007 (gas: 3)\n 26374: a1 = u64 [s1 + 0xf8]\n 26378: u32 [a1 + 0] = 0x40\n 26381: fallthrough\n      : @1008 (gas: 14)\n 26382: a0 = sp + 0xffffffffffffffe0\n 26385: a2 = a0 & 0xffffffffffffffe0\n 26388: u64 [s1 + 0xd0] = a2\n 26392: sp = a2\n 26394: a0 = 0x20160\n 26399: i32 a0 = a0 + 0\n 26401: i32 a2 = a2 + 0\n 26403: a1 = 0x40\n 26406: u64 [s1 + 0xf0] = a0\n 26410: ra = 0x3ee\n 26414: ecalli 9 // 'hash_keccak_256'\n 26416: a3 = u64 [s1 + 0xd0]\n 26420: t0 = 0x3f0\n 26424: jump @1489\n      : @1009 [@dyn 503] (gas: 2)\n 26427: a3 = u64 [s1 + 0xd0]\n 26431: t0 = 1008, jump @1489\n      : @1010 [@dyn 504] (gas: 19)\n 26437: u64 [s1 + 0xc8] = a0\n 26441: a0 = reverse a1\n 26443: u64 [s1 + 0xc0] = a0\n 26447: a0 = reverse a2\n 26449: u64 [s1 + 0xb8] = a0\n 26453: a0 = reverse a3\n 26455: u64 [s1 + 0xb0] = a0\n 26459: a0 = u64 [s1 + 0xe0]\n 26463: a0 = a0 << 0x20\n 26466: a2 = a0 >> 0x20\n 26469: a0 = s1 + 0x1078\n 26473: u64 [a0 + 1632] = 0\n 26477: u64 [a0 + 1624] = 0\n 26481: u64 [a0 + 1616] = 0\n 26485: a1 = s1 + 0x16c0\n 26489: u64 [s1 + 0xd0] = a2\n 26493: u64 [a0 + 0x648] = a2\n 26497: a0 = 0\n 26499: ra = 1010, jump @9\n      : @1011 [@dyn 505] (gas: 14)\n 26505: a0 = u64 [s1 + 0xb0]\n 26509: a1 = s1 + 0x1078\n 26513: a2 = a1 + 0x600\n 26517: u64 [a2 + 0x40] = a0\n 26520: a0 = u64 [s1 + 0xb8]\n 26524: u64 [a2 + 0x38] = a0\n 26527: a0 = u64 [s1 + 0xc0]\n 26531: u64 [a2 + 0x30] = a0\n 26534: a3 = a1\n 26536: a0 = 0x20\n 26539: a1 = s1 + 0x16a0\n 26543: a2 = u64 [s1 + 0xc8]\n 26547: u64 [a3 + 0x628] = a2\n 26551: ra = 1012, jump @9\n      : @1012 [@dyn 506] (gas: 3)\n 26557: a0 = u64 [s1 + 0xf8]\n 26561: a0 = i32 [a0]\n 26563: jump @1014 if a0 >u 63\n      : @1013 (gas: 3)\n 26567: a0 = u64 [s1 + 0xf8]\n 26571: u32 [a0 + 0] = 0x40\n 26574: fallthrough\n      : @1014 (gas: 4)\n 26575: a0 = sp + 0xffffffffffffffe0\n 26578: a0 = a0 & 0xffffffffffffffe0\n 26581: u64 [s1 + 0xe0] = a0\n 26585: t0 = 1014, jump @1468\n      : @1015 [@dyn 507] (gas: 28)\n 26591: ecalli 9 // 'hash_keccak_256'\n 26593: a3 = u64 [s1 + 0xe0]\n 26597: a0 = u64 [a3]\n 26599: a1 = u64 [a3 + 0x8]\n 26602: a2 = u64 [a3 + 0x10]\n 26605: a3 = u64 [a3 + 0x18]\n 26608: a0 = reverse a0\n 26610: a5 = reverse a1\n 26612: a2 = reverse a2\n 26614: a3 = reverse a3\n 26616: a4 = sp + 0xffffffffffffffe0\n 26619: a1 = a4 & 0xffffffffffffffe0\n 26622: sp = a1\n 26624: a3 = a3 + 0x1\n 26627: a4 = a3 <u 0x1\n 26630: a2 = a2 + a4\n 26633: a4 = a3 | a2\n 26636: a4 = a4 <u 0x1\n 26639: a4 = a4 + a5\n 26642: a5 = a4 <u a5\n 26645: a0 = a0 + a5\n 26648: u64 [a1 + 0x8] = a2\n 26651: u64 [a1] = a3\n 26653: u64 [a1 + 0x10] = a4\n 26656: u64 [a1 + 0x18] = a0\n 26659: a0 = s1 + 0x1680\n 26663: u64 [s1 + 0xe0] = a1\n 26667: ra = 1016, jump @11\n      : @1016 [@dyn 508] (gas: 3)\n 26673: a0 = s1 + 0x1078\n 26677: a0 = u64 [a0 + 0x608]\n 26681: jump @1102 if a0 == 0\n      : @1017 (gas: 4)\n 26685: a1 = s1 + 0x1078\n 26689: a1 = u64 [a1 + 0x610]\n 26693: a2 = a1 & 0xff\n 26697: jump @1104 if a2 == 0\n      : @1018 (gas: 3)\n 26701: t0 = 0x3fa\n 26705: a2 = s1 + 0x1078\n 26709: fallthrough\n      : @1019 [@dyn 509] (gas: 9)\n 26710: u64 [a2 + 1528] = 0\n 26714: u64 [a2 + 1520] = 0\n 26718: a0 = 0xc1c184c800000000\n 26728: u64 [a2 + 0x600] = a0\n 26732: a1 = s1 + 0x1660\n 26736: u64 [a2 + 1512] = 0\n 26740: a0 = 0\n 26742: ra = 0x48e\n 26746: jump @9\n      : @1020 (gas: 2)\n 26749: u64 [s1 + 184] = 0\n 26753: fallthrough\n      : @1021 (gas: 5)\n 26754: a0 = u64 [s1 + 0xd8]\n 26758: a0 = a0 << 0x1\n 26761: a4 = u64 [s1 + 0xb8]\n 26765: a4 = a4 | a0\n 26768: fallthrough\n      : @1022 (gas: 2)\n 26769: a0 = u64 [s1 + 0x78]\n 26772: jump @1122 if a0 >=u a4\n      : @1023 (gas: 34)\n 26776: a3 = s1 + 0x7ff\n 26780: a3 = a3 + 0x79\n 26783: a0 = u64 [s1 + 0x20]\n 26786: a5 = a3 + 0x700\n 26790: u64 [a5 + 0x28] = a0\n 26793: a0 = u64 [s1 + 0x78]\n 26796: u64 [a5 + 0x48] = a0\n 26799: a0 = u64 [s1 + 0x50]\n 26802: u64 [a5 + 0x68] = a0\n 26805: a0 = u64 [s1 + 0x28]\n 26808: u64 [a5 + 0x30] = a0\n 26811: a0 = u64 [s1 + 0x40]\n 26814: u64 [a5 + 0x50] = a0\n 26817: a0 = u64 [s1 + 0x60]\n 26820: u64 [a5 + 0x70] = a0\n 26823: a0 = u64 [s1 + 0x30]\n 26826: u64 [a5 + 0x38] = a0\n 26829: a0 = u64 [s1 + 0x48]\n 26832: u64 [a5 + 0x58] = a0\n 26835: a0 = u64 [s1 + 0x68]\n 26838: u64 [a5 + 0x78] = a0\n 26841: a0 = u64 [s1 + 0x38]\n 26844: u64 [a5 + 0x40] = a0\n 26847: a0 = u64 [s1 + 0x58]\n 26850: u64 [a5 + 0x60] = a0\n 26853: a0 = s1 + 0x7ff\n 26857: a0 = a0 + 0x7e1\n 26861: a1 = s1 + 0x7ff\n 26865: a1 = a1 + 0x7c1\n 26869: a2 = s1 + 0x7ff\n 26873: a2 = a2 + 0x7a1\n 26877: a4 = u64 [s1 + 0x70]\n 26880: u64 [a5 + 0x80] = a4\n 26884: ra = 1020, jump @1283\n      : @1024 [@dyn 510] (gas: 4)\n 26890: a1 = 0x20160\n 26895: i32 a1 = a1 + 0\n 26897: a0 = 0\n 26899: jump @1183\n      : @1025 (gas: 2)\n 26902: u64 [s1 + 184] = 0\n 26906: fallthrough\n      : @1026 (gas: 6)\n 26907: a0 = u64 [s1 + 0xd8]\n 26911: a0 = a0 << 0x1\n 26914: a1 = u64 [s1 + 0xb8]\n 26918: a0 = a0 | a1\n 26921: u64 [s1 + 0xe8] = a0\n 26925: fallthrough\n      : @1027 (gas: 3)\n 26926: a0 = u64 [s1 + 0xe8]\n 26930: a1 = u64 [s1 + 0x70]\n 26933: jump @1126 if a1 != a0\n      : @1028 (gas: 9)\n 26937: a0 = 0x30160\n 26942: u64 [s1 + 0xe0] = a0\n 26946: i32 a0 = a0 + 0\n 26948: u64 [s1 + 0xb8] = a0\n 26952: ra = 0x3fe\n 26956: ecalli 4 // 'caller'\n 26958: a2 = u64 [s1 + 0xe0]\n 26962: t0 = 0x400\n 26966: jump @1444\n      : @1029 [@dyn 511] (gas: 2)\n 26969: a2 = u64 [s1 + 0xe0]\n 26973: t0 = 1024, jump @1444\n      : @1030 [@dyn 512] (gas: 8)\n 26979: u64 [a2 + 864] = 0\n 26983: a4 = a2 + 0x300\n 26987: u64 [a4 + 0x58] = a1\n 26990: u64 [a4 + 0x50] = a0\n 26993: a1 = s1 + 0x13c0\n 26997: u64 [a4 + 0x48] = a3\n 27000: a0 = 0\n 27002: ra = 1026, jump @9\n      : @1031 [@dyn 513] (gas: 3)\n 27008: t0 = 0x404\n 27012: a1 = s1 + 0x1078\n 27016: fallthrough\n      : @1032 [@dyn 514] (gas: 8)\n 27017: u64 [a1 + 832] = 0\n 27021: u64 [a1 + 824] = 0\n 27025: u64 [a1 + 808] = 0x3\n 27030: a2 = a1\n 27032: a0 = 0x20\n 27035: a1 = s1 + 0x13a0\n 27039: u64 [a2 + 816] = 0\n 27043: ra = 1030, jump @9\n      : @1033 [@dyn 515] (gas: 4)\n 27049: a0 = 0x20150\n 27054: u64 [s1 + 0xf8] = a0\n 27058: a0 = i32 [0x20150]\n 27063: jump @1035 if a0 >u 63\n      : @1034 (gas: 3)\n 27067: a1 = u64 [s1 + 0xf8]\n 27071: u32 [a1 + 0] = 0x40\n 27074: fallthrough\n      : @1035 (gas: 13)\n 27075: a0 = sp + 0xffffffffffffffe0\n 27078: a2 = a0 & 0xffffffffffffffe0\n 27081: u64 [s1 + 0xd8] = a2\n 27085: sp = a2\n 27087: a0 = 0x20160\n 27092: i32 a0 = a0 + 0\n 27094: i32 a2 = a2 + 0\n 27096: a1 = 0x40\n 27099: u64 [s1 + 0xf0] = a0\n 27103: ra = 0x408\n 27107: ecalli 9 // 'hash_keccak_256'\n 27109: t0 = 0x40a\n 27113: jump @1473\n      : @1036 [@dyn 516] (gas: 1)\n 27116: t0 = 1034, jump @1473\n      : @1037 [@dyn 517] (gas: 12)\n 27122: a0 = u64 [s1 + 0x78]\n 27125: a0 = a0 << 0x20\n 27128: a2 = a0 >> 0x20\n 27131: a0 = s1 + 0x1078\n 27135: u64 [a0 + 800] = 0\n 27139: u64 [a0 + 792] = 0\n 27143: u64 [a0 + 784] = 0\n 27147: a1 = s1 + 0x1380\n 27151: u64 [s1 + 0xb0] = a2\n 27155: u64 [a0 + 0x308] = a2\n 27159: a0 = 0\n 27161: ra = 1036, jump @9\n      : @1038 [@dyn 518] (gas: 13)\n 27167: a0 = u64 [s1 + 0xc0]\n 27171: a1 = s1 + 0x1078\n 27175: u64 [a1 + 0x300] = a0\n 27179: a0 = u64 [s1 + 0xc8]\n 27183: u64 [a1 + 0x2f8] = a0\n 27187: a0 = u64 [s1 + 0xd0]\n 27191: u64 [a1 + 0x2f0] = a0\n 27195: a3 = a1\n 27197: a0 = 0x20\n 27200: a1 = s1 + 0x1360\n 27204: a2 = u64 [s1 + 0xd8]\n 27208: u64 [a3 + 0x2e8] = a2\n 27212: ra = 1038, jump @9\n      : @1039 [@dyn 519] (gas: 3)\n 27218: a0 = u64 [s1 + 0xf8]\n 27222: a0 = i32 [a0]\n 27224: jump @1041 if a0 >u 63\n      : @1040 (gas: 3)\n 27228: a0 = u64 [s1 + 0xf8]\n 27232: u32 [a0 + 0] = 0x40\n 27235: fallthrough\n      : @1041 (gas: 4)\n 27236: a0 = sp + 0xffffffffffffffe0\n 27239: a0 = a0 & 0xffffffffffffffe0\n 27242: u64 [s1 + 0xd8] = a0\n 27246: t0 = 1040, jump @1468\n      : @1042 [@dyn 520] (gas: 5)\n 27252: ra = 0x412\n 27256: ecalli 9 // 'hash_keccak_256'\n 27258: a3 = u64 [s1 + 0xd8]\n 27262: t0 = 0x414\n 27266: jump @1448\n      : @1043 [@dyn 521] (gas: 2)\n 27269: a3 = u64 [s1 + 0xd8]\n 27273: t0 = 1044, jump @1448\n      : @1044 [@dyn 522] (gas: 9)\n 27279: a1 = s1 + 0x2878\n 27283: a5 = a1 + 0x100\n 27287: u64 [a5 + 0x68] = a3\n 27290: u64 [a5 + 0x70] = a2\n 27293: u64 [a5 + 0x78] = a4\n 27296: u64 [a5 + 0x80] = a0\n 27300: a0 = s1 + 0x1340\n 27304: a1 = s1 + 0x29e0\n 27308: ra = 1046, jump @11\n      : @1045 [@dyn 523] (gas: 4)\n 27314: a0 = s1 + 0x1078\n 27318: a0 = u64 [a0 + 0x2c8]\n 27322: a0 = a0 & 0xffffffffffffffff\n 27325: jump @1131 if a0 == 0\n      : @1046 (gas: 3)\n 27329: a0 = s1 + 0x1078\n 27333: a0 = u8 [a0 + 0x2d0]\n 27337: jump @1131 if a0 != 0\n      : @1047 (gas: 7)\n 27341: a1 = u64 [s1 + 0xb0]\n 27345: a0 = a1 <u 0x100\n 27349: u64 [s1 + 0xa8] = a0\n 27353: i32 a2 = a1 + 0xffffffffffffff80\n 27356: a0 = 0x1\n 27359: a1 = 0\n 27361: ra = 1048, jump @1509\n      : @1048 [@dyn 524] (gas: 7)\n 27367: u64 [s1 + 0xd8] = a0\n 27371: u64 [s1 + 0xd0] = a1\n 27375: a1 = u64 [s1 + 0xb0]\n 27379: i32 a2 = 0x80 - a1\n 27383: a0 = 0x1\n 27386: a1 = 0\n 27388: ra = 1050, jump @1504\n      : @1049 [@dyn 525] (gas: 15)\n 27394: a2 = u64 [s1 + 0xb0]\n 27398: a3 = a2 <u 0x80\n 27402: u64 [s1 + 0xc0] = a3\n 27406: a4 = u64 [s1 + 0xd8]\n 27410: a0 = a4 if a3 == 0\n 27413: a0 = 0 if a2 == 0\n 27415: u64 [s1 + 0xd8] = a0\n 27419: a0 = u64 [s1 + 0xd0]\n 27423: a1 = a0 if a3 == 0\n 27426: a1 = 0 if a2 == 0\n 27428: u64 [s1 + 0xd0] = a1\n 27432: i32 a2 = a2 + 0\n 27434: a0 = 0x1\n 27437: a1 = 0\n 27439: ra = 1052, jump @1509\n      : @1050 [@dyn 526] (gas: 11)\n 27445: a2 = u64 [s1 + 0xc0]\n 27449: a0 = 0 if a2 == 0\n 27451: u64 [s1 + 0xc8] = a0\n 27455: a1 = 0 if a2 == 0\n 27457: u64 [s1 + 0xc0] = a1\n 27461: a0 = u64 [s1 + 0xb8]\n 27465: ra = 0x41e\n 27469: ecalli 4 // 'caller'\n 27471: a2 = u64 [s1 + 0xe0]\n 27475: t0 = 0x420\n 27479: jump @1444\n      : @1051 [@dyn 527] (gas: 2)\n 27482: a2 = u64 [s1 + 0xe0]\n 27486: t0 = 1056, jump @1444\n      : @1052 [@dyn 528] (gas: 8)\n 27492: u64 [a2 + 672] = 0\n 27496: a4 = a2 + 0x200\n 27500: u64 [a4 + 0x98] = a1\n 27504: u64 [a4 + 0x90] = a0\n 27508: a1 = s1 + 0x1300\n 27512: u64 [a4 + 0x88] = a3\n 27516: a0 = 0\n 27518: ra = 1058, jump @9\n      : @1053 [@dyn 529] (gas: 3)\n 27524: t0 = 0x424\n 27528: a1 = s1 + 0x1078\n 27532: fallthrough\n      : @1054 [@dyn 530] (gas: 8)\n 27533: u64 [a1 + 640] = 0\n 27537: u64 [a1 + 632] = 0\n 27541: u64 [a1 + 616] = 0x5\n 27546: a2 = a1\n 27548: a0 = 0x20\n 27551: a1 = s1 + 0x12e0\n 27555: u64 [a2 + 624] = 0\n 27559: ra = 1062, jump @9\n      : @1055 [@dyn 531] (gas: 3)\n 27565: a0 = u64 [s1 + 0xf8]\n 27569: a0 = i32 [a0]\n 27571: jump @1057 if a0 >u 63\n      : @1056 (gas: 3)\n 27575: a1 = u64 [s1 + 0xf8]\n 27579: u32 [a1 + 0] = 0x40\n 27582: fallthrough\n      : @1057 (gas: 17)\n 27583: a0 = u64 [s1 + 0xc0]\n 27587: a1 = u64 [s1 + 0xa8]\n 27591: a0 = 0 if a1 == 0\n 27593: u64 [s1 + 0xc0] = a0\n 27597: a0 = u64 [s1 + 0xc8]\n 27601: a0 = 0 if a1 == 0\n 27603: u64 [s1 + 0xc8] = a0\n 27607: a0 = u64 [s1 + 0xd0]\n 27611: a0 = 0 if a1 == 0\n 27613: u64 [s1 + 0xd0] = a0\n 27617: a0 = u64 [s1 + 0xd8]\n 27621: a0 = 0 if a1 == 0\n 27623: u64 [s1 + 0xd8] = a0\n 27627: a0 = sp + 0xffffffffffffffe0\n 27630: a0 = a0 & 0xffffffffffffffe0\n 27633: u64 [s1 + 0xa8] = a0\n 27637: t0 = 1064, jump @1468\n      : @1058 [@dyn 532] (gas: 4)\n 27643: ra = 0x42a\n 27647: ecalli 9 // 'hash_keccak_256'\n 27649: t0 = 0x42c\n 27653: jump @1447\n      : @1059 [@dyn 533] (gas: 1)\n 27656: t0 = 1068, jump @1447\n      : @1060 [@dyn 534] (gas: 8)\n 27662: u64 [a2 + 608] = 0\n 27666: u64 [a2 + 600] = 0\n 27670: u64 [a2 + 592] = 0\n 27674: a1 = s1 + 0x12c0\n 27678: a0 = u64 [s1 + 0xe8]\n 27682: u64 [a2 + 0x248] = a0\n 27686: a0 = 0\n 27688: ra = 1070, jump @9\n      : @1061 [@dyn 535] (gas: 14)\n 27694: a0 = u64 [s1 + 0x88]\n 27698: a1 = s1 + 0x1078\n 27702: a2 = a1 + 0x200\n 27706: u64 [a2 + 0x40] = a0\n 27709: a0 = u64 [s1 + 0x90]\n 27713: u64 [a2 + 0x38] = a0\n 27716: a0 = u64 [s1 + 0x98]\n 27720: u64 [a2 + 0x30] = a0\n 27723: a3 = a1\n 27725: a0 = 0x20\n 27728: a1 = s1 + 0x12a0\n 27732: a2 = u64 [s1 + 0xa0]\n 27736: u64 [a3 + 0x228] = a2\n 27740: ra = 1072, jump @9\n      : @1062 [@dyn 536] (gas: 3)\n 27746: a0 = u64 [s1 + 0xf8]\n 27750: a0 = i32 [a0]\n 27752: jump @1064 if a0 >u 63\n      : @1063 (gas: 3)\n 27756: a0 = u64 [s1 + 0xf8]\n 27760: u32 [a0 + 0] = 0x40\n 27763: fallthrough\n      : @1064 (gas: 4)\n 27764: a0 = sp + 0xffffffffffffffe0\n 27767: a0 = a0 & 0xffffffffffffffe0\n 27770: u64 [s1 + 0xa0] = a0\n 27774: t0 = 1074, jump @1468\n      : @1065 [@dyn 537] (gas: 5)\n 27780: ra = 0x434\n 27784: ecalli 9 // 'hash_keccak_256'\n 27786: a3 = u64 [s1 + 0xa0]\n 27790: t0 = 0x436\n 27794: jump @1455\n      : @1066 [@dyn 538] (gas: 2)\n 27797: a3 = u64 [s1 + 0xa0]\n 27801: t0 = 1078, jump @1455\n      : @1067 [@dyn 539] (gas: 3)\n 27807: i32 a0 = a0 + 0x280\n 27811: a0 = a0 + s1\n 27814: ra = 1080, jump @11\n      : @1068 [@dyn 540] (gas: 7)\n 27820: a3 = s1 + 0x1078\n 27824: a4 = a3 + 0x200\n 27828: a0 = u64 [a4 + 0x18]\n 27831: a1 = u64 [a4 + 0x8]\n 27834: a2 = u64 [a4 + 0x20]\n 27837: a3 = u64 [a4 + 0x10]\n 27840: t0 = 1082, jump @1491\n      : @1069 [@dyn 541] (gas: 1)\n 27846: jump @1133 if a0 == 0\n      : @1070 (gas: 6)\n 27850: a0 = u64 [s1 + 0xb8]\n 27854: ra = 0x43c\n 27858: ecalli 4 // 'caller'\n 27860: a2 = u64 [s1 + 0xe0]\n 27864: t0 = 0x43e\n 27868: jump @1444\n      : @1071 [@dyn 542] (gas: 2)\n 27871: a2 = u64 [s1 + 0xe0]\n 27875: t0 = 1086, jump @1444\n      : @1072 [@dyn 543] (gas: 8)\n 27881: u64 [a2 + 512] = 0\n 27885: a4 = a2 + 0x100\n 27889: u64 [a4 + 0xf8] = a1\n 27893: u64 [a4 + 0xf0] = a0\n 27897: a1 = s1 + 0x1260\n 27901: u64 [a4 + 0xe8] = a3\n 27905: a0 = 0\n 27907: ra = 1088, jump @9\n      : @1073 [@dyn 544] (gas: 3)\n 27913: t0 = 0x442\n 27917: a1 = s1 + 0x1078\n 27921: fallthrough\n      : @1074 [@dyn 545] (gas: 8)\n 27922: u64 [a1 + 480] = 0\n 27926: u64 [a1 + 472] = 0\n 27930: u64 [a1 + 456] = 0x6\n 27935: a2 = a1\n 27937: a0 = 0x20\n 27940: a1 = s1 + 0x1240\n 27944: u64 [a2 + 464] = 0\n 27948: ra = 1092, jump @9\n      : @1075 [@dyn 546] (gas: 3)\n 27954: a0 = u64 [s1 + 0xf8]\n 27958: a0 = i32 [a0]\n 27960: jump @1077 if a0 >u 63\n      : @1076 (gas: 3)\n 27964: a1 = u64 [s1 + 0xf8]\n 27968: u32 [a1 + 0] = 0x40\n 27971: fallthrough\n      : @1077 (gas: 4)\n 27972: a0 = sp + 0xffffffffffffffe0\n 27975: a0 = a0 & 0xffffffffffffffe0\n 27978: u64 [s1 + 0xa8] = a0\n 27982: t0 = 1094, jump @1468\n      : @1078 [@dyn 547] (gas: 4)\n 27988: ra = 0x448\n 27992: ecalli 9 // 'hash_keccak_256'\n 27994: t0 = 0x44a\n 27998: jump @1447\n      : @1079 [@dyn 548] (gas: 1)\n 28001: t0 = 1098, jump @1447\n      : @1080 [@dyn 549] (gas: 8)\n 28007: u64 [a2 + 448] = 0\n 28011: u64 [a2 + 440] = 0\n 28015: u64 [a2 + 432] = 0\n 28019: a1 = s1 + 0x1220\n 28023: a0 = u64 [s1 + 0xe8]\n 28027: u64 [a2 + 0x1a8] = a0\n 28031: a0 = 0\n 28033: ra = 1100, jump @9\n      : @1081 [@dyn 550] (gas: 14)\n 28039: a0 = u64 [s1 + 0x88]\n 28043: a1 = s1 + 0x1078\n 28047: a2 = a1 + 0x100\n 28051: u64 [a2 + 0xa0] = a0\n 28055: a0 = u64 [s1 + 0x90]\n 28059: u64 [a2 + 0x98] = a0\n 28063: a0 = u64 [s1 + 0x98]\n 28067: u64 [a2 + 0x90] = a0\n 28071: a3 = a1\n 28073: a0 = 0x20\n 28076: a1 = s1 + 0x1200\n 28080: a2 = u64 [s1 + 0xa0]\n 28084: u64 [a3 + 0x188] = a2\n 28088: ra = 1102, jump @9\n      : @1082 [@dyn 551] (gas: 3)\n 28094: a0 = u64 [s1 + 0xf8]\n 28098: a0 = i32 [a0]\n 28100: jump @1084 if a0 >u 63\n      : @1083 (gas: 3)\n 28104: a0 = u64 [s1 + 0xf8]\n 28108: u32 [a0 + 0] = 0x40\n 28111: fallthrough\n      : @1084 (gas: 4)\n 28112: a0 = sp + 0xffffffffffffffe0\n 28115: a0 = a0 & 0xffffffffffffffe0\n 28118: u64 [s1 + 0xa0] = a0\n 28122: t0 = 1104, jump @1468\n      : @1085 [@dyn 552] (gas: 5)\n 28128: ra = 0x452\n 28132: ecalli 9 // 'hash_keccak_256'\n 28134: a3 = u64 [s1 + 0xa0]\n 28138: t0 = 0x454\n 28142: jump @1455\n      : @1086 [@dyn 553] (gas: 2)\n 28145: a3 = u64 [s1 + 0xa0]\n 28149: t0 = 1108, jump @1455\n      : @1087 [@dyn 554] (gas: 3)\n 28155: i32 a0 = a0 + 0x1e0\n 28159: a0 = a0 + s1\n 28162: ra = 1110, jump @11\n      : @1088 [@dyn 555] (gas: 2)\n 28168: a0 = 0x1000\n 28172: t0 = 1112, jump @1495\n      : @1089 [@dyn 556] (gas: 5)\n 28178: a0 = u64 [a4 + 0x78]\n 28181: a1 = u64 [a4 + 0x68]\n 28184: a2 = u64 [a4 + 0x80]\n 28188: a3 = u64 [a4 + 0x70]\n 28191: t0 = 1114, jump @1491\n      : @1090 [@dyn 557] (gas: 1)\n 28197: jump @1138 if a0 == 0\n      : @1091 (gas: 3)\n 28201: t0 = 0x45c\n 28205: a2 = s1 + 0x1078\n 28209: fallthrough\n      : @1092 [@dyn 558] (gas: 9)\n 28210: u64 [a2 + 344] = 0\n 28214: u64 [a2 + 336] = 0\n 28218: a0 = 0xc98289f000000000\n 28228: u64 [a2 + 0x160] = a0\n 28232: a1 = s1 + 0x11c0\n 28236: u64 [a2 + 328] = 0\n 28240: a0 = 0\n 28242: ra = 0x48e\n 28246: jump @9\n      : @1093 (gas: 1)\n 28249: jump @1161 if a0 != 1081252952\n      : @1094 (gas: 11)\n 28257: a0 = s1 + 0x2078\n 28261: u64 [a0 + 1376] = 0\n 28265: u64 [a0 + 1368] = 0\n 28269: u64 [a0 + 1360] = 0\n 28273: u64 [a0 + 1352] = 0\n 28277: a0 = s1 + 0x2000\n 28281: i32 a0 = a0 + 0x5c0\n 28285: ra = 0x45e\n 28289: ecalli 17 // 'value_transferred'\n 28291: t0 = 0x460\n 28295: jump @1483\n      : @1095 [@dyn 559] (gas: 1)\n 28298: t0 = 1120, jump @1483\n      : @1096 [@dyn 560] (gas: 8)\n 28304: a0 = u64 [a4 + 0x58]\n 28307: a1 = u64 [a4 + 0x60]\n 28310: a2 = u64 [a4 + 0x50]\n 28313: a3 = u64 [a4 + 0x48]\n 28316: a1 = a1 | a2\n 28319: a0 = a0 | a3\n 28322: a0 = a0 | a1\n 28325: jump @1165 if a0 == 0\n      : @1097 (gas: 3)\n 28329: a1 = 0x20160\n 28334: i32 a1 = a1 + 0\n 28336: jump @1182\n      : @1098 (gas: 3)\n 28339: a0 = u64 [s1 + 0xf8]\n 28343: a0 = i32 [a0]\n 28345: jump @1167 if a0 >u 35\n      : @1099 (gas: 3)\n 28350: a1 = 0x20160\n 28355: i32 a1 = a1 + 0\n 28357: jump @1182\n      : @1100 (gas: 3)\n 28360: t0 = 0x462\n 28364: a2 = s1 + 0x2078\n 28368: fallthrough\n      : @1101 [@dyn 561] (gas: 9)\n 28369: u64 [a2 + 888] = 0\n 28373: u64 [a2 + 880] = 0\n 28377: a0 = 0x14bcf5c800000000\n 28387: u64 [a2 + 0x380] = a0\n 28391: a1 = s1 + 0x23e0\n 28395: u64 [a2 + 872] = 0\n 28399: a0 = 0\n 28401: ra = 0x362\n 28405: jump @9\n      : @1102 (gas: 3)\n 28408: t0 = 0x464\n 28412: a2 = s1 + 0x1078\n 28416: fallthrough\n      : @1103 [@dyn 562] (gas: 9)\n 28417: u64 [a2 + 1272] = 0\n 28421: u64 [a2 + 1264] = 0\n 28425: a0 = 0xa7a9536d00000000\n 28435: u64 [a2 + 0x500] = a0\n 28439: a1 = s1 + 0x1560\n 28443: u64 [a2 + 1256] = 0\n 28447: a0 = 0\n 28449: ra = 0x48e\n 28453: jump @9\n      : @1104 (gas: 15)\n 28456: a2 = 0xffffffff\n 28466: u64 [s1 + 0xc8] = a2\n 28470: a3 = s1 + 0x1078\n 28474: a2 = u64 [a3 + 0x618]\n 28478: a3 = u64 [a3 + 0x620]\n 28482: a1 = a1 | 0x1\n 28485: a4 = s1 + 0x2878\n 28489: a5 = a4 + 0x100\n 28493: u64 [a5 + 0xe8] = a0\n 28497: u64 [a5 + 0xf8] = a2\n 28501: u64 [a5 + 0xf0] = a1\n 28505: u64 [a4 + 0x200] = a3\n 28509: a1 = s1 + 0x2a60\n 28513: a0 = u64 [s1 + 0xe0]\n 28517: ra = 1126, jump @12\n      : @1105 [@dyn 563] (gas: 6)\n 28523: a0 = u64 [s1 + 0xd8]\n 28527: ra = 0x468\n 28531: ecalli 4 // 'caller'\n 28533: a2 = u64 [s1 + 0xe8]\n 28537: t0 = 0x46a\n 28541: jump @1444\n      : @1106 [@dyn 564] (gas: 2)\n 28544: a2 = u64 [s1 + 0xe8]\n 28548: t0 = 1130, jump @1444\n      : @1107 [@dyn 565] (gas: 8)\n 28554: u64 [a2 + 1504] = 0\n 28558: a4 = a2 + 0x500\n 28562: u64 [a4 + 0xd8] = a1\n 28566: u64 [a4 + 0xd0] = a0\n 28570: a1 = s1 + 0x1640\n 28574: u64 [a4 + 0xc8] = a3\n 28578: a0 = 0\n 28580: ra = 1132, jump @9\n      : @1108 [@dyn 566] (gas: 3)\n 28586: t0 = 0x46e\n 28590: a1 = s1 + 0x1078\n 28594: fallthrough\n      : @1109 [@dyn 567] (gas: 8)\n 28595: u64 [a1 + 1472] = 0\n 28599: u64 [a1 + 1464] = 0\n 28603: u64 [a1 + 1448] = 0x2\n 28608: a2 = a1\n 28610: a0 = 0x20\n 28613: a1 = s1 + 0x1620\n 28617: u64 [a2 + 1456] = 0\n 28621: ra = 1136, jump @9\n      : @1110 [@dyn 568] (gas: 7)\n 28627: a0 = sp + 0xffffffffffffffe0\n 28630: a0 = a0 & 0xffffffffffffffe0\n 28633: u64 [s1 + 0xe0] = a0\n 28637: sp = a0\n 28639: a0 = u64 [s1 + 0xf8]\n 28643: a0 = i32 [a0]\n 28645: jump @1112 if a0 >u 63\n      : @1111 (gas: 3)\n 28649: a1 = u64 [s1 + 0xf8]\n 28653: u32 [a1 + 0] = 0x40\n 28656: fallthrough\n      : @1112 (gas: 4)\n 28657: a0 = sp + 0xffffffffffffffe0\n 28660: a0 = a0 & 0xffffffffffffffe0\n 28663: u64 [s1 + 0xf8] = a0\n 28667: t0 = 1138, jump @1468\n      : @1113 [@dyn 569] (gas: 5)\n 28673: ra = 0x474\n 28677: ecalli 9 // 'hash_keccak_256'\n 28679: a3 = u64 [s1 + 0xf8]\n 28683: t0 = 0x476\n 28687: jump @1461\n      : @1114 [@dyn 570] (gas: 2)\n 28690: a3 = u64 [s1 + 0xf8]\n 28694: t0 = 1142, jump @1461\n      : @1115 [@dyn 571] (gas: 7)\n 28700: a1 = u64 [s1 + 0xe0]\n 28704: u64 [a1] = a4\n 28706: u64 [a1 + 0x8] = a5\n 28709: u64 [a1 + 0x10] = a2\n 28712: u64 [a1 + 0x18] = a0\n 28715: a0 = s1 + 0x1600\n 28719: ra = 1144, jump @11\n      : @1116 [@dyn 572] (gas: 9)\n 28725: a0 = s1 + 0x1078\n 28729: a0 = u64 [a0 + 0x588]\n 28733: a1 = u64 [s1 + 0xc8]\n 28737: a0 = a0 + a1\n 28740: a0 = a0 & a1\n 28743: u64 [s1 + 0xf8] = a0\n 28747: a0 = s1 + 0x15e0\n 28751: a1 = u64 [s1 + 0xe0]\n 28755: ra = 1146, jump @11\n      : @1117 [@dyn 573] (gas: 18)\n 28761: a3 = s1 + 0x1078\n 28765: a0 = u32 [a3 + 0x56c]\n 28769: a0 = a0 << 0x20\n 28772: a4 = a3 + 0x500\n 28776: a1 = u64 [a4 + 0x80]\n 28780: a2 = u64 [a4 + 0x78]\n 28783: a3 = u64 [a4 + 0x70]\n 28786: a4 = u64 [s1 + 0xf8]\n 28790: a0 = a0 | a4\n 28793: a4 = s1 + 0x2878\n 28797: a5 = a4 + 0x200\n 28801: u64 [a5 + 0x20] = a1\n 28804: u64 [a5 + 0x18] = a2\n 28807: u64 [a5 + 0x10] = a3\n 28810: u64 [a5 + 0x8] = a0\n 28813: a1 = s1 + 0x2a80\n 28817: a0 = u64 [s1 + 0xe0]\n 28821: ra = 1148, jump @12\n      : @1118 [@dyn 574] (gas: 6)\n 28827: a0 = u64 [s1 + 0xd8]\n 28831: ra = 0x47e\n 28835: ecalli 4 // 'caller'\n 28837: a2 = u64 [s1 + 0xe8]\n 28841: t0 = 0x480\n 28845: jump @1464\n      : @1119 [@dyn 575] (gas: 2)\n 28848: a2 = u64 [s1 + 0xe8]\n 28852: t0 = 1152, jump @1464\n      : @1120 [@dyn 576] (gas: 31)\n 28858: t0 = a1 | a0\n 28861: a3 = a3 >> 0x20\n 28864: a2 = reverse a2\n 28866: a1 = a2 << 0x20\n 28869: a1 = a1 | a3\n 28872: a2 = a2 >> 0x20\n 28875: a3 = u64 [s1 + 0xd0]\n 28879: a0 = s1 + 0x1078\n 28883: u64 [a0 + 0x508] = a3\n 28887: a3 = u64 [0x20060]\n 28892: a4 = u64 [0x20068]\n 28897: a5 = u64 [0x20070]\n 28902: u64 [a0 + 0x560] = a3\n 28906: u64 [a0 + 0x558] = a4\n 28910: u64 [a0 + 1312] = 0\n 28914: a4 = a0 + 0x500\n 28918: u64 [a4 + 0x50] = a5\n 28921: a3 = u64 [0x20078]\n 28926: u64 [a0 + 1304] = 0\n 28930: u64 [a0 + 1296] = 0\n 28934: u64 [a0 + 1344] = 0\n 28938: u64 [a4 + 0x48] = a3\n 28941: u64 [a4 + 0x38] = a2\n 28944: u64 [a4 + 0x30] = a1\n 28947: a2 = s1 + 0x15c0\n 28951: a3 = s1 + 0x15a0\n 28955: a4 = s1 + 0x1580\n 28959: u64 [a0 + 0x528] = t0\n 28963: a0 = 0\n 28965: a1 = 0\n 28967: ra = 1154, jump @14\n      : @1121 [@dyn 577] (gas: 1)\n 28973: jump @1160\n      : @1122 (gas: 10)\n 28976: a2 = s1 + 0x7ff\n 28980: a2 = a2 + 0x79\n 28983: u64 [a2 + 1944] = 0\n 28987: u64 [a2 + 1936] = 0\n 28991: a0 = 0xcf114bd900000000\n 29001: u64 [a2 + 0x7a0] = a0\n 29005: a1 = s1 + 0x1000\n 29009: u64 [a2 + 1928] = 0\n 29013: a0 = 0\n 29015: ra = 1156, jump @9\n      : @1123 [@dyn 578] (gas: 2)\n 29021: a1 = i32 [0x20150]\n 29026: jump @1125 if a1 >u 31\n      : @1124 (gas: 4)\n 29030: u32 [0x20150] = 0x20\n 29036: a1 = 0x20160\n 29041: i32 a1 = a1 + 0\n 29043: jump @895\n      : @1125 (gas: 3)\n 29046: a1 = 0x20160\n 29051: i32 a1 = a1 + 0\n 29053: jump @895\n      : @1126 (gas: 3)\n 29056: t0 = 0x486\n 29060: a2 = s1 + 0x1078\n 29064: fallthrough\n      : @1127 [@dyn 579] (gas: 8)\n 29065: u64 [a2 + 888] = 0\n 29069: u64 [a2 + 880] = 0\n 29073: a0 = 0xd5b25b6300000000\n 29083: u64 [a2 + 0x380] = a0\n 29087: a1 = s1 + 0x13e0\n 29091: u64 [a2 + 872] = 0\n 29095: a0 = 0\n 29097: ra = 1160, jump @9\n      : @1128 [@dyn 580] (gas: 2)\n 29103: a1 = i32 [0x20150]\n 29108: jump @1130 if a1 >u 31\n      : @1129 (gas: 4)\n 29112: u32 [0x20150] = 0x20\n 29118: a1 = 0x20160\n 29123: i32 a1 = a1 + 0\n 29125: jump @895\n      : @1130 (gas: 3)\n 29128: a1 = 0x20160\n 29133: i32 a1 = a1 + 0\n 29135: jump @895\n      : @1131 (gas: 3)\n 29138: t0 = 0x48a\n 29142: a2 = s1 + 0x1078\n 29146: fallthrough\n      : @1132 [@dyn 581] (gas: 9)\n 29147: u64 [a2 + 696] = 0\n 29151: u64 [a2 + 688] = 0\n 29155: a0 = 0xa7a9536d00000000\n 29165: u64 [a2 + 0x2c0] = a0\n 29169: a1 = s1 + 0x1320\n 29173: u64 [a2 + 680] = 0\n 29177: a0 = 0\n 29179: ra = 0x48e\n 29183: jump @9\n      : @1133 (gas: 3)\n 29186: t0 = 0x48c\n 29190: a2 = s1 + 0x1078\n 29194: fallthrough\n      : @1134 [@dyn 582] (gas: 8)\n 29195: u64 [a2 + 24] = 0\n 29198: u64 [a2 + 16] = 0\n 29201: a0 = 0xafa4e2b600000000\n 29211: u64 [a2 + 0x20] = a0\n 29214: a1 = s1 + 0x1080\n 29218: u64 [a2 + 8] = 0\n 29221: a0 = 0\n 29223: ra = 1166, jump @9\n      : @1135 [@dyn 583] (gas: 3)\n 29229: a0 = u64 [s1 + 0xf8]\n 29233: a0 = i32 [a0]\n 29235: jump @1137 if a0 >u 31\n      : @1136 (gas: 3)\n 29239: a1 = u64 [s1 + 0xf8]\n 29243: u32 [a1 + 0] = 0x20\n 29246: fallthrough\n      : @1137 (gas: 5)\n 29247: a0 = 0x1\n 29250: a2 = 0x4\n 29253: a1 = u64 [s1 + 0xf0]\n 29257: ecalli 14 // 'seal_return'\n 29259: fallthrough\n      : @1138 (gas: 6)\n 29260: a0 = u64 [s1 + 0xb8]\n 29264: ra = 0x490\n 29268: ecalli 4 // 'caller'\n 29270: a2 = u64 [s1 + 0xe0]\n 29274: t0 = 0x492\n 29278: jump @1444\n      : @1139 [@dyn 584] (gas: 2)\n 29281: a2 = u64 [s1 + 0xe0]\n 29285: t0 = 1170, jump @1444\n      : @1140 [@dyn 585] (gas: 8)\n 29291: u64 [a2 + 320] = 0\n 29295: a4 = a2 + 0x100\n 29299: u64 [a4 + 0x38] = a1\n 29302: u64 [a4 + 0x30] = a0\n 29305: a1 = s1 + 0x11a0\n 29309: u64 [a4 + 0x28] = a3\n 29312: a0 = 0\n 29314: ra = 1172, jump @9\n      : @1141 [@dyn 586] (gas: 3)\n 29320: t0 = 0x496\n 29324: a1 = s1 + 0x1078\n 29328: fallthrough\n      : @1142 [@dyn 587] (gas: 8)\n 29329: u64 [a1 + 288] = 0\n 29333: u64 [a1 + 280] = 0\n 29337: u64 [a1 + 264] = 0x6\n 29342: a2 = a1\n 29344: a0 = 0x20\n 29347: a1 = s1 + 0x1180\n 29351: u64 [a2 + 272] = 0\n 29355: ra = 1176, jump @9\n      : @1143 [@dyn 588] (gas: 3)\n 29361: a0 = u64 [s1 + 0xf8]\n 29365: a0 = i32 [a0]\n 29367: jump @1145 if a0 >u 63\n      : @1144 (gas: 3)\n 29371: a1 = u64 [s1 + 0xf8]\n 29375: u32 [a1 + 0] = 0x40\n 29378: fallthrough\n      : @1145 (gas: 4)\n 29379: a0 = sp + 0xffffffffffffffe0\n 29382: a0 = a0 & 0xffffffffffffffe0\n 29385: u64 [s1 + 0xa8] = a0\n 29389: t0 = 1178, jump @1468\n      : @1146 [@dyn 589] (gas: 4)\n 29395: ra = 0x49c\n 29399: ecalli 9 // 'hash_keccak_256'\n 29401: t0 = 0x49e\n 29405: jump @1447\n      : @1147 [@dyn 590] (gas: 1)\n 29408: t0 = 1182, jump @1447\n      : @1148 [@dyn 591] (gas: 8)\n 29414: u64 [a2 + 256] = 0\n 29418: u64 [a2 + 248] = 0\n 29422: u64 [a2 + 240] = 0\n 29426: a1 = s1 + 0x1160\n 29430: a0 = u64 [s1 + 0xe8]\n 29434: u64 [a2 + 0xe8] = a0\n 29438: a0 = 0\n 29440: ra = 1184, jump @9\n      : @1149 [@dyn 592] (gas: 13)\n 29446: a0 = u64 [s1 + 0x88]\n 29450: a1 = s1 + 0x1078\n 29454: u64 [a1 + 0xe0] = a0\n 29458: a0 = u64 [s1 + 0x90]\n 29462: u64 [a1 + 0xd8] = a0\n 29466: a0 = u64 [s1 + 0x98]\n 29470: u64 [a1 + 0xd0] = a0\n 29474: a3 = a1\n 29476: a0 = 0x20\n 29479: a1 = s1 + 0x1140\n 29483: a2 = u64 [s1 + 0xa0]\n 29487: u64 [a3 + 0xc8] = a2\n 29491: ra = 1186, jump @9\n      : @1150 [@dyn 593] (gas: 3)\n 29497: a0 = u64 [s1 + 0xf8]\n 29501: a0 = i32 [a0]\n 29503: jump @1152 if a0 >u 63\n      : @1151 (gas: 3)\n 29507: a0 = u64 [s1 + 0xf8]\n 29511: u32 [a0 + 0] = 0x40\n 29514: fallthrough\n      : @1152 (gas: 4)\n 29515: a0 = sp + 0xffffffffffffffe0\n 29518: a0 = a0 & 0xffffffffffffffe0\n 29521: u64 [s1 + 0xf8] = a0\n 29525: t0 = 1188, jump @1468\n      : @1153 [@dyn 594] (gas: 5)\n 29531: ra = 0x4a6\n 29535: ecalli 9 // 'hash_keccak_256'\n 29537: a3 = u64 [s1 + 0xf8]\n 29541: t0 = 0x4a8\n 29545: jump @1455\n      : @1154 [@dyn 595] (gas: 2)\n 29548: a3 = u64 [s1 + 0xf8]\n 29552: t0 = 1192, jump @1455\n      : @1155 [@dyn 596] (gas: 3)\n 29558: i32 a0 = a0 + 0x120\n 29562: a0 = a0 + s1\n 29565: ra = 1194, jump @11\n      : @1156 [@dyn 597] (gas: 22)\n 29571: a3 = s1 + 0x1078\n 29575: a0 = u64 [a3 + 0xa8]\n 29579: a1 = u64 [a3 + 0xb0]\n 29583: a2 = u64 [a3 + 0xb8]\n 29587: a3 = u64 [a3 + 0xc0]\n 29591: a4 = u64 [s1 + 0xc8]\n 29595: a0 = a0 | a4\n 29598: a4 = u64 [s1 + 0xc0]\n 29602: a1 = a1 | a4\n 29605: a4 = u64 [s1 + 0xd8]\n 29609: a2 = a2 | a4\n 29612: a4 = u64 [s1 + 0xd0]\n 29616: a3 = a3 | a4\n 29619: a4 = s1 + 0x2878\n 29623: a5 = a4 + 0x100\n 29627: u64 [a5 + 0xa0] = a3\n 29631: u64 [a5 + 0x98] = a2\n 29635: u64 [a5 + 0x90] = a1\n 29639: u64 [a5 + 0x88] = a0\n 29643: a1 = s1 + 0x2a00\n 29647: a0 = u64 [s1 + 0xa8]\n 29651: ra = 1196, jump @12\n      : @1157 [@dyn 598] (gas: 6)\n 29657: a0 = u64 [s1 + 0xb8]\n 29661: ra = 0x4ae\n 29665: ecalli 4 // 'caller'\n 29667: a2 = u64 [s1 + 0xe0]\n 29671: t0 = 0x4b0\n 29675: jump @1453\n      : @1158 [@dyn 599] (gas: 2)\n 29678: a2 = u64 [s1 + 0xe0]\n 29682: t0 = 1200, jump @1453\n      : @1159 [@dyn 600] (gas: 31)\n 29688: a5 = s1 + 0x1078\n 29692: u64 [a5 + 64] = 0\n 29695: u64 [a5 + 56] = 0\n 29698: u64 [a5 + 48] = 0\n 29701: a3 = u64 [s1 + 0xe8]\n 29705: u64 [a5 + 0x28] = a3\n 29708: a3 = u64 [s1 + 0xb0]\n 29712: u64 [a5 + 0x48] = a3\n 29715: a3 = u64 [0x20080]\n 29720: a4 = u64 [0x20088]\n 29725: u64 [a5 + 96] = 0\n 29728: u64 [a5 + 88] = 0\n 29731: u64 [a5 + 0xa0] = a3\n 29735: u64 [a5 + 0x98] = a4\n 29739: a3 = u64 [0x20090]\n 29744: a4 = u64 [0x20098]\n 29749: u64 [a5 + 80] = 0\n 29752: u64 [a5 + 128] = 0\n 29756: u64 [a5 + 0x90] = a3\n 29760: u64 [a5 + 0x88] = a4\n 29764: u64 [a5 + 0x78] = a2\n 29767: u64 [a5 + 0x70] = a1\n 29770: a1 = a5\n 29772: a2 = s1 + 0x1100\n 29776: a3 = s1 + 0x10e0\n 29780: a4 = s1 + 0x10c0\n 29784: a5 = s1 + 0x10a0\n 29788: u64 [a1 + 0x68] = a0\n 29791: a0 = 0\n 29793: a1 = 0\n 29795: ra = 1202, jump @17\n      : @1160 [@dyn 601] (gas: 8)\n 29801: a0 = 0\n 29803: a1 = u64 [s1 + 0xf0]\n 29807: a2 = 0\n 29809: ecalli 14 // 'seal_return'\n 29811: a1 = 0x20160\n 29816: i32 a1 = a1 + 0\n 29818: a0 = 0\n 29820: jump @1183\n      : @1161 (gas: 1)\n 29823: jump @1179 if a0 != 1746437986\n      : @1162 (gas: 10)\n 29831: a0 = s1 + 0x2878\n 29835: u64 [a0 + 64] = 0\n 29838: u64 [a0 + 56] = 0\n 29841: u64 [a0 + 48] = 0\n 29844: u64 [a0 + 40] = 0\n 29847: a0 = s1 + 0x3000\n 29851: i32 a0 = a0 + 0xfffffffffffff8a0\n 29855: ecalli 17 // 'value_transferred'\n 29857: a3 = s1 + 0x2878\n 29861: fallthrough\n      : @1163 (gas: 8)\n 29862: a0 = u64 [a3 + 0x38]\n 29865: a1 = u64 [a3 + 0x40]\n 29868: a2 = u64 [a3 + 0x30]\n 29871: a3 = u64 [a3 + 0x28]\n 29874: a1 = a1 | a2\n 29877: a0 = a0 | a3\n 29880: a0 = a0 | a1\n 29883: jump @1185 if a0 == 0\n      : @1164 (gas: 3)\n 29887: a1 = 0x20160\n 29892: i32 a1 = a1 + 0\n 29894: jump @1182\n      : @1165 (gas: 3)\n 29897: a0 = u64 [s1 + 0xf8]\n 29901: a0 = i32 [a0]\n 29903: jump @1187 if a0 >u 35\n      : @1166 (gas: 3)\n 29908: a1 = 0x20160\n 29913: i32 a1 = a1 + 0\n 29915: jump @1182\n      : @1167 (gas: 4)\n 29918: a0 = s1 + 0x180\n 29922: ra = 0x4b4\n 29926: t0 = 0x4de\n 29930: jump @1493\n      : @1168 [@dyn 602] (gas: 10)\n 29933: a0 = u64 [s1 + 0x180]\n 29937: a1 = u64 [s1 + 0x188]\n 29941: a2 = u32 [s1 + 0x190]\n 29945: u64 [s1 + 376] = 0\n 29949: u64 [s1 + 0x170] = a2\n 29953: u64 [s1 + 0x168] = a1\n 29957: a1 = s1 + 0x160\n 29961: u64 [s1 + 0x160] = a0\n 29965: a0 = 0\n 29967: ra = 1206, jump @9\n      : @1169 [@dyn 603] (gas: 7)\n 29973: u64 [s1 + 344] = 0\n 29977: u64 [s1 + 336] = 0\n 29981: u64 [s1 + 320] = 0x4\n 29986: a0 = 0x20\n 29989: a1 = s1 + 0x140\n 29993: u64 [s1 + 328] = 0\n 29997: ra = 1208, jump @9\n      : @1170 [@dyn 604] (gas: 4)\n 30003: a0 = 0x20150\n 30008: u64 [s1 + 0xf8] = a0\n 30012: a0 = i32 [0x20150]\n 30017: jump @1172 if a0 >u 63\n      : @1171 (gas: 3)\n 30021: a1 = u64 [s1 + 0xf8]\n 30025: u32 [a1 + 0] = 0x40\n 30028: fallthrough\n      : @1172 (gas: 14)\n 30029: a0 = sp + 0xffffffffffffffe0\n 30032: a2 = a0 & 0xffffffffffffffe0\n 30035: u64 [s1 + 0xe8] = a2\n 30039: sp = a2\n 30041: a0 = 0x20160\n 30046: u64 [s1 + 0xf0] = a0\n 30050: i32 a0 = a0 + 0\n 30052: i32 a2 = a2 + 0\n 30054: a1 = 0x40\n 30057: ra = 0x4ba\n 30061: ecalli 9 // 'hash_keccak_256'\n 30063: a3 = u64 [s1 + 0xe8]\n 30067: t0 = 0x4bc\n 30071: jump @1478\n      : @1173 [@dyn 605] (gas: 2)\n 30074: a3 = u64 [s1 + 0xe8]\n 30078: t0 = 1212, jump @1478\n      : @1174 [@dyn 606] (gas: 8)\n 30084: a5 = a4 + 0x400\n 30088: u64 [a5 + 0x40] = a3\n 30091: u64 [a5 + 0x38] = a2\n 30094: u64 [a5 + 0x30] = a1\n 30097: u64 [a5 + 0x28] = a0\n 30100: a0 = s1 + 0x120\n 30104: a1 = s1 + 0x24a0\n 30108: ra = 1214, jump @11\n      : @1175 [@dyn 607] (gas: 8)\n 30114: a0 = u32 [s1 + 0x120]\n 30118: u64 [s1 + 280] = 0\n 30122: u64 [s1 + 272] = 0\n 30126: u64 [s1 + 0x100] = a0\n 30130: a0 = 0x80\n 30134: a1 = s1 + 0x100\n 30138: u64 [s1 + 264] = 0\n 30142: ra = 1216, jump @9\n      : @1176 [@dyn 608] (gas: 3)\n 30148: a0 = u64 [s1 + 0xf8]\n 30152: a0 = i32 [a0]\n 30154: jump @1178 if a0 >u 159\n      : @1177 (gas: 5)\n 30159: a1 = u64 [s1 + 0xf8]\n 30163: u32 [a1 + 0] = 0xa0\n 30167: a0 = u64 [s1 + 0xf0]\n 30171: i32 a1 = a0 + 0x80\n 30175: jump @453\n      : @1178 (gas: 3)\n 30178: a0 = u64 [s1 + 0xf0]\n 30182: i32 a1 = a0 + 0x80\n 30186: jump @453\n      : @1179 (gas: 3)\n 30189: a0 = u64 [s1 + 0xf8]\n 30193: a0 = i32 [a0]\n 30195: fallthrough\n      : @1180 (gas: 1)\n 30196: jump @1184 if a0 == 0\n      : @1181 (gas: 3)\n 30199: a1 = 0x20160\n 30204: i32 a1 = a1 + 0\n 30206: fallthrough\n      : @1182 (gas: 7)\n 30207: a0 = 0x1\n 30210: a2 = 0\n 30212: ecalli 14 // 'seal_return'\n 30214: a1 = 0x20160\n 30219: i32 a1 = a1 + 0\n 30221: a0 = 0\n 30223: fallthrough\n      : @1183 (gas: 6)\n 30224: a2 = 0\n 30226: ecalli 14 // 'seal_return'\n 30228: a1 = 0x20160\n 30233: i32 a1 = a1 + 0\n 30235: a0 = 0\n 30237: jump @1183\n      : @1184 (gas: 4)\n 30239: a1 = 0x20160\n 30244: i32 a1 = a1 + 0\n 30246: a0 = 0\n 30248: jump @1183\n      : @1185 (gas: 3)\n 30250: a0 = u64 [s1 + 0xf8]\n 30254: a0 = i32 [a0]\n 30256: jump @1194 if a0 >u 99\n      : @1186 (gas: 4)\n 30261: a1 = 0x20160\n 30266: i32 a1 = a1 + 0\n 30268: a0 = 0x1\n 30271: jump @1183\n      : @1187 (gas: 4)\n 30273: a0 = s1 + 0x640\n 30277: ra = 0x4c2\n 30281: t0 = 0x4de\n 30285: jump @1493\n      : @1188 [@dyn 609] (gas: 7)\n 30288: a0 = u64 [s1 + 0x648]\n 30292: u64 [s1 + 0xf0] = a0\n 30296: a0 = u64 [s1 + 0x640]\n 30300: u64 [s1 + 0xf8] = a0\n 30304: a0 = u32 [s1 + 0x650]\n 30308: u64 [s1 + 0xe8] = a0\n 30312: ra = 1220, jump @1256\n      : @1189 [@dyn 610] (gas: 6)\n 30318: a0 = u64 [s1 + 0xf8]\n 30322: a1 = u64 [s1 + 0xe8]\n 30326: a0 = a0 | a1\n 30329: a1 = u64 [s1 + 0xf0]\n 30333: a0 = a0 | a1\n 30336: jump @1199 if a0 == 0\n      : @1190 (gas: 10)\n 30340: a0 = 0xffffffff\n 30350: u64 [s1 + 0xe0] = a0\n 30354: a0 = s1 + 0x2078\n 30358: u64 [a0 + 1408] = 0\n 30362: u64 [a0 + 1400] = 0\n 30366: u64 [a0 + 1392] = 0\n 30370: u64 [a0 + 1384] = 0\n 30374: a0 = s1 + 0x620\n 30378: a1 = s1 + 0x25e0\n 30382: ra = 1222, jump @11\n      : @1191 [@dyn 611] (gas: 26)\n 30388: a1 = u64 [s1 + 0x630]\n 30392: u64 [s1 + 0xc8] = a1\n 30396: a0 = u64 [s1 + 0x628]\n 30400: u64 [s1 + 0xd8] = a0\n 30404: a0 = u64 [s1 + 0x620]\n 30408: u64 [s1 + 0xd0] = a0\n 30412: a0 = u64 [s1 + 0x638]\n 30416: a1 = a1 >> 0x20\n 30419: a1 = a1 << 0x20\n 30422: a2 = u64 [s1 + 0xe8]\n 30426: a1 = a1 | a2\n 30429: a2 = s1 + 0x2078\n 30433: u64 [a2 + 1440] = 0\n 30437: u64 [a2 + 1432] = 0\n 30441: u64 [a2 + 1424] = 0\n 30445: u64 [a2 + 1416] = 0\n 30449: a3 = u64 [s1 + 0xf0]\n 30453: a4 = a2 + 0x500\n 30457: u64 [a4 + 0xb0] = a3\n 30461: a3 = u64 [s1 + 0xf8]\n 30465: u64 [a4 + 0xa8] = a3\n 30469: u64 [a4 + 0xc0] = a0\n 30473: u64 [a4 + 0xb8] = a1\n 30477: a0 = s1 + 0x2600\n 30481: a1 = s1 + 0x2620\n 30485: ra = 1224, jump @12\n      : @1192 [@dyn 612] (gas: 34)\n 30491: a0 = u64 [s1 + 0xd0]\n 30495: a0 = a0 & 0xffffffffffffffff\n 30498: a2 = u64 [s1 + 0xd8]\n 30502: a1 = a2 & 0xffffffffffffffff\n 30505: a2 = u64 [s1 + 0xe0]\n 30509: a3 = u64 [s1 + 0xc8]\n 30513: a2 = a2 & a3\n 30516: u64 [s1 + 1496] = 0\n 30520: a3 = u64 [s1 + 0xe8]\n 30524: a4 = s1 + 0x500\n 30528: u64 [a4 + 0xd0] = a3\n 30532: a3 = u64 [s1 + 0xf0]\n 30536: u64 [a4 + 0xc8] = a3\n 30540: a3 = u64 [s1 + 0xf8]\n 30544: u64 [a4 + 0xc0] = a3\n 30548: u64 [s1 + 1528] = 0\n 30552: u64 [a4 + 0xf0] = a2\n 30556: u64 [a4 + 0xe8] = a1\n 30560: a1 = u64 [0x200d8]\n 30565: a2 = u64 [0x200e0]\n 30570: a3 = u64 [0x200e8]\n 30575: u64 [a4 + 0xe0] = a0\n 30579: a5 = s1 + 0x600\n 30583: u64 [a5 + 0x18] = a1\n 30586: u64 [a5 + 0x10] = a2\n 30589: u64 [a5 + 0x8] = a3\n 30592: a0 = u64 [0x200f0]\n 30597: a2 = s1 + 0x600\n 30601: a3 = s1 + 0x5e0\n 30605: a4 = s1 + 0x5c0\n 30609: u64 [a5] = a0\n 30611: a0 = 0\n 30613: a1 = 0\n 30615: ra = 1226, jump @14\n      : @1193 [@dyn 613] (gas: 4)\n 30621: a1 = 0x20160\n 30626: i32 a1 = a1 + 0\n 30628: a0 = 0\n 30630: jump @1183\n      : @1194 (gas: 5)\n 30633: a0 = s1 + 0x7ff\n 30637: a0 = a0 + 0x5c1\n 30641: ra = 0x4cc\n 30645: t0 = 0x4de\n 30649: jump @1493\n      : @1195 [@dyn 614] (gas: 16)\n 30652: a1 = s1 + 0x7ff\n 30656: a1 = a1 + 0x79\n 30659: a2 = a1 + 0x500\n 30663: a0 = u64 [a2 + 0x48]\n 30666: u64 [s1 + 0xf8] = a0\n 30670: a0 = u64 [a2 + 0x50]\n 30673: u64 [s1 + 0xf0] = a0\n 30677: a0 = u64 [a2 + 0x58]\n 30680: u64 [s1 + 0xe8] = a0\n 30684: a0 = u64 [a2 + 0x60]\n 30687: u64 [s1 + 0xe0] = a0\n 30691: a0 = s1 + 0x7ff\n 30695: a0 = a0 + 0x5a1\n 30699: ra = 0x4ce\n 30703: t0 = 0x4e8\n 30707: jump @1499\n      : @1196 [@dyn 615] (gas: 16)\n 30710: a1 = s1 + 0x7ff\n 30714: a1 = a1 + 0x79\n 30717: a2 = a1 + 0x500\n 30721: a0 = u64 [a2 + 0x28]\n 30724: u64 [s1 + 0xd8] = a0\n 30728: a0 = u64 [a2 + 0x30]\n 30731: u64 [s1 + 0xd0] = a0\n 30735: a0 = u64 [a2 + 0x38]\n 30738: u64 [s1 + 0xc8] = a0\n 30742: a0 = u64 [a2 + 0x40]\n 30745: u64 [s1 + 0xc0] = a0\n 30749: a0 = s1 + 0x7ff\n 30753: a0 = a0 + 0x581\n 30757: ra = 0x4d0\n 30761: t0 = 0x4ee\n 30765: jump @1499\n      : @1197 [@dyn 616] (gas: 35)\n 30768: a4 = s1 + 0x7ff\n 30772: a4 = a4 + 0x79\n 30775: a5 = a4 + 0x500\n 30779: a0 = u64 [a5 + 0x8]\n 30782: a1 = u64 [a5 + 0x10]\n 30785: a2 = u64 [a5 + 0x18]\n 30788: a3 = u64 [a5 + 0x20]\n 30791: u64 [a4 + 0x4c0] = a3\n 30795: u64 [a4 + 0x4b8] = a2\n 30799: u64 [a4 + 0x4b0] = a1\n 30803: u64 [a4 + 0x4a8] = a0\n 30807: a0 = u64 [s1 + 0xc0]\n 30811: u64 [a4 + 0x4e0] = a0\n 30815: a0 = u64 [s1 + 0xc8]\n 30819: u64 [a4 + 0x4d8] = a0\n 30823: a0 = u64 [s1 + 0xd0]\n 30827: u64 [a4 + 0x4d0] = a0\n 30831: a0 = u64 [s1 + 0xd8]\n 30835: u64 [a4 + 0x4c8] = a0\n 30839: a0 = u64 [s1 + 0xe0]\n 30843: u64 [a5] = a0\n 30845: a0 = u64 [s1 + 0xe8]\n 30849: a5 = a4 + 0x400\n 30853: u64 [a5 + 0xf8] = a0\n 30857: a0 = u64 [s1 + 0xf0]\n 30861: u64 [a5 + 0xf0] = a0\n 30865: a0 = s1 + 0x7ff\n 30869: a0 = a0 + 0x561\n 30873: a1 = s1 + 0x7ff\n 30877: a1 = a1 + 0x541\n 30881: a2 = s1 + 0x7ff\n 30885: a2 = a2 + 0x521\n 30889: a3 = u64 [s1 + 0xf8]\n 30893: u64 [a5 + 0xe8] = a3\n 30897: ra = 1234, jump @1283\n      : @1198 [@dyn 617] (gas: 4)\n 30903: a1 = 0x20160\n 30908: i32 a1 = a1 + 0\n 30910: a0 = 0\n 30912: jump @1183\n      : @1199 (gas: 8)\n 30915: u64 [s1 + 1456] = 0\n 30919: u64 [s1 + 1448] = 0\n 30923: u64 [s1 + 1440] = 0\n 30927: a0 = 0xdd75059200000000\n 30937: a1 = s1 + 0x5a0\n 30941: u64 [s1 + 0x5b8] = a0\n 30945: a0 = 0\n 30947: ra = 1236, jump @9\n      : @1200 [@dyn 618] (gas: 2)\n 30953: a1 = i32 [0x20150]\n 30958: jump @1202 if a1 >u 31\n      : @1201 (gas: 4)\n 30962: u32 [0x20150] = 0x20\n 30968: a1 = 0x20160\n 30973: i32 a1 = a1 + 0\n 30975: jump @895\n      : @1202 (gas: 3)\n 30978: a1 = 0x20160\n 30983: i32 a1 = a1 + 0\n 30985: jump @895\n      : @1203 (gas: 18)\n 30988: sp = sp + 0xffffffffffffffc0\n 30991: u64 [sp + 0x38] = ra\n 30994: u64 [sp + 0x30] = s0\n 30997: u64 [sp + 0x28] = s1\n 31000: s0 = sp + 0x40\n 31003: sp = sp & 0xfffffffffffffff0\n 31006: a2 = u64 [a1 + 0x10]\n 31009: a3 = u64 [a1 + 0x18]\n 31012: a4 = u64 [a1 + 0x8]\n 31015: a1 = u64 [a1]\n 31017: a3 = a3 | a4\n 31020: a4 = a1 | a2\n 31023: a4 = a4 | a3\n 31026: a4 = a4 >> 0x20\n 31029: a2 = a2 | a3\n 31032: a2 = a2 << 0x20\n 31035: a2 = a2 | a4\n 31038: jump @1209 if a2 != 0\n      : @1204 (gas: 3)\n 31041: s1 = a0\n 31043: a0 = sp\n 31045: ra = 1238, jump @7\n      : @1205 [@dyn 619] (gas: 1)\n 31051: t0 = 1240, jump @1481\n      : @1206 [@dyn 620] (gas: 1)\n 31057: jump @1210 if a3 == 0\n      : @1207 (gas: 1)\n 31060: t0 = 1242, jump @1490\n      : @1208 [@dyn 621] (gas: 1)\n 31066: ret\n      : @1209 (gas: 1)\n 31068: trap\n      : @1210 (gas: 8)\n 31069: a1 = 0x20160\n 31074: i32 a1 = a1 + 0\n 31076: a0 = 0x1\n 31079: a2 = 0\n 31081: ra = 0x4dc\n 31085: ecalli 14 // 'seal_return'\n 31087: t0 = 0x4de\n 31091: jump @1493\n      : @1211 [@dyn 622] (gas: 1)\n 31094: t0 = 1246, jump @1493\n      : @1212 [@dyn 623] (gas: 4)\n 31100: ra = 0x4e0\n 31104: ecalli 2 // 'call_data_load'\n 31106: t0 = 0x4e2\n 31110: jump @1481\n      : @1213 [@dyn 624] (gas: 1)\n 31113: t0 = 1250, jump @1481\n      : @1214 [@dyn 625] (gas: 1)\n 31119: jump @1217 if a3 == 0\n      : @1215 (gas: 1)\n 31122: t0 = 1252, jump @1490\n      : @1216 [@dyn 626] (gas: 1)\n 31128: ret\n      : @1217 (gas: 8)\n 31130: a1 = 0x20160\n 31135: i32 a1 = a1 + 0\n 31137: a0 = 0x1\n 31140: a2 = 0\n 31142: ra = 0x4e6\n 31146: ecalli 14 // 'seal_return'\n 31148: t0 = 0x4e8\n 31152: jump @1499\n      : @1218 [@dyn 627] (gas: 1)\n 31155: t0 = 1256, jump @1499\n      : @1219 [@dyn 628] (gas: 3)\n 31161: a1 = 0x24\n 31164: ecalli 2 // 'call_data_load'\n 31166: fallthrough\n      : @1220 (gas: 7)\n 31167: a0 = u64 [sp + 0x18]\n 31170: a1 = u64 [sp + 0x10]\n 31173: a2 = u64 [sp + 0x8]\n 31176: a3 = a1 | a0\n 31179: a4 = a2 <u 0x1\n 31182: a4 = 0 if a3 != 0\n 31184: jump @1223 if a4 == 0\n      : @1221 (gas: 2)\n 31187: a3 = u64 [sp]\n 31189: t0 = 1258, jump @1474\n      : @1222 [@dyn 629] (gas: 1)\n 31195: ret\n      : @1223 (gas: 8)\n 31197: a1 = 0x20160\n 31202: i32 a1 = a1 + 0\n 31204: a0 = 0x1\n 31207: a2 = 0\n 31209: ra = 0x4ec\n 31213: ecalli 14 // 'seal_return'\n 31215: t0 = 0x4ee\n 31219: jump @1499\n      : @1224 [@dyn 630] (gas: 1)\n 31222: t0 = 1262, jump @1499\n      : @1225 [@dyn 631] (gas: 5)\n 31228: a1 = 0x44\n 31231: ra = 0x4f0\n 31235: ecalli 2 // 'call_data_load'\n 31237: t0 = 0x4f2\n 31241: jump @1488\n      : @1226 [@dyn 632] (gas: 1)\n 31244: t0 = 1266, jump @1488\n      : @1227 [@dyn 633] (gas: 1)\n 31250: jump @1230 if a4 != 0\n      : @1228 (gas: 1)\n 31253: t0 = 1268, jump @1474\n      : @1229 [@dyn 634] (gas: 1)\n 31259: ret\n      : @1230 (gas: 8)\n 31261: a1 = 0x20160\n 31266: i32 a1 = a1 + 0\n 31268: a0 = 0x1\n 31271: a2 = 0\n 31273: ra = 0x4f6\n 31277: ecalli 14 // 'seal_return'\n 31279: t0 = 0x4f8\n 31283: jump @1493\n      : @1231 [@dyn 635] (gas: 1)\n 31286: t0 = 1272, jump @1493\n      : @1232 [@dyn 636] (gas: 4)\n 31292: ra = 0x4fa\n 31296: ecalli 2 // 'call_data_load'\n 31298: t0 = 0x4fc\n 31302: jump @1488\n      : @1233 [@dyn 637] (gas: 1)\n 31305: t0 = 1276, jump @1488\n      : @1234 [@dyn 638] (gas: 1)\n 31311: jump @1237 if a4 != 0\n      : @1235 (gas: 1)\n 31314: t0 = 1278, jump @1474\n      : @1236 [@dyn 639] (gas: 1)\n 31320: ret\n      : @1237 (gas: 7)\n 31322: a1 = 0x20160\n 31327: i32 a1 = a1 + 0\n 31329: a0 = 0x1\n 31332: a2 = 0\n 31334: ra = 0x500\n 31338: ecalli 14 // 'seal_return'\n 31340: fallthrough\n      : @1238 [@dyn 640] (gas: 45)\n 31341: sp = sp + 0xffffffffffffff90\n 31344: u64 [sp + 0x68] = ra\n 31347: u64 [sp + 0x60] = s0\n 31350: u64 [sp + 0x58] = s1\n 31353: s0 = sp + 0x70\n 31356: sp = sp & 0xfffffffffffffff0\n 31359: a3 = u64 [a1 + 0x18]\n 31362: u64 [sp + 0x8] = a3\n 31365: a4 = u64 [a2 + 0x18]\n 31368: t2 = u64 [a1]\n 31370: u64 [sp] = t2\n 31372: a3 = u64 [a1 + 0x8]\n 31375: s1 = u64 [a2 + 0x8]\n 31378: a5 = u64 [a2]\n 31380: t1 = u64 [a1 + 0x10]\n 31383: t0 = u64 [a2 + 0x10]\n 31386: a2 = s1 + a3\n 31389: t2 = t2 + a5\n 31392: a5 = t2 <u a5\n 31395: a2 = a2 + a5\n 31398: ra = a2 ^ s1\n 31401: s1 = a2 <u s1\n 31404: s1 = a5 if ra == 0\n 31407: a1 = t0 + t1\n 31410: a5 = u64 [sp + 0x8]\n 31413: a5 = a5 + a4\n 31416: a4 = a1 <u t0\n 31419: a4 = a4 + a5\n 31422: a5 = a1 + s1\n 31425: a1 = a5 <u a1\n 31428: ra = a4 + a1\n 31431: a4 = a2 ^ a3\n 31434: a3 = a2 <u a3\n 31437: a1 = u64 [sp]\n 31439: s1 = t2 <u a1\n 31442: s1 = a3 if a4 != 0\n 31445: t0 = a5 <u t1\n 31448: a1 = u64 [sp + 0x8]\n 31451: a4 = ra ^ a1\n 31454: a3 = ra <u a1\n 31457: a3 = t0 if a4 == 0\n 31460: a1 = a5 ^ t1\n 31463: a1 = a1 | a4\n 31466: s1 = a3 if a1 != 0\n 31469: jump @1240 if s1 != 0\n      : @1239 (gas: 10)\n 31472: u64 [a0] = t2\n 31474: u64 [a0 + 0x8] = a2\n 31477: u64 [a0 + 0x10] = a5\n 31480: u64 [a0 + 0x18] = ra\n 31483: sp = s0 + 0xffffffffffffff90\n 31486: ra = u64 [sp + 0x68]\n 31489: s0 = u64 [sp + 0x60]\n 31492: s1 = u64 [sp + 0x58]\n 31495: sp = sp + 0x70\n 31498: ret\n      : @1240 (gas: 1)\n 31500: t0 = 1282, jump @1492\n      : @1241 [@dyn 641] (gas: 1)\n 31506: ra = 1284, jump @9\n      : @1242 [@dyn 642] (gas: 7)\n 31512: u64 [sp + 40] = 0\n 31515: u64 [sp + 32] = 0\n 31518: u64 [sp + 16] = 0x11\n 31522: a0 = 0x4\n 31525: a1 = sp + 0x10\n 31528: u64 [sp + 24] = 0\n 31531: ra = 1286, jump @9\n      : @1243 [@dyn 643] (gas: 2)\n 31537: a1 = i32 [0x20150]\n 31542: jump @1245 if a1 >u 63\n      : @1244 (gas: 2)\n 31546: u32 [0x20150] = 0x40\n 31552: fallthrough\n      : @1245 (gas: 7)\n 31553: a1 = 0x20160\n 31558: i32 a1 = a1 + 0\n 31560: a0 = 0x1\n 31563: a2 = 0x24\n 31566: ra = 0x508\n 31570: ecalli 14 // 'seal_return'\n 31572: fallthrough\n      : @1246 [@dyn 644] (gas: 46)\n 31573: sp = sp + 0xffffffffffffff70\n 31577: u64 [sp + 0x88] = ra\n 31581: u64 [sp + 0x80] = s0\n 31585: u64 [sp + 0x78] = s1\n 31588: s0 = sp + 0x90\n 31592: sp = sp & 0xfffffffffffffff0\n 31595: t0 = a0\n 31597: a2 = u64 [a1]\n 31599: t2 = u64 [a0 + 0x8]\n 31602: a5 = u64 [a1 + 0x8]\n 31605: t1 = u64 [a0]\n 31607: a3 = a2 + 0x1f\n 31610: ra = a3 <u a2\n 31613: a2 = a5 + ra\n 31616: a3 = a3 & 0xffffffffffffffe0\n 31619: u64 [sp + 0x8] = t1\n 31622: t1 = t1 + a3\n 31625: a4 = t1 <u a3\n 31628: a3 = a2 + t2\n 31631: a3 = a3 + a4\n 31634: s1 = a3 ^ a2\n 31637: a0 = a3 <u a2\n 31640: a0 = a4 if s1 == 0\n 31643: a4 = u64 [t0 + 0x18]\n 31646: a5 = a2 <u a5\n 31649: s1 = u64 [a1 + 0x10]\n 31652: t0 = u64 [t0 + 0x10]\n 31655: a1 = u64 [a1 + 0x18]\n 31658: a5 = ra if ra == 0\n 31661: a5 = a5 + s1\n 31664: s1 = a5 <u s1\n 31667: a2 = a5 + t0\n 31670: a0 = a0 + a2\n 31673: a5 = a2 <u a5\n 31676: a2 = a0 <u a2\n 31679: a1 = a1 + a4\n 31682: a1 = a1 + s1\n 31685: a1 = a1 + a5\n 31688: a5 = a1 + a2\n 31691: a1 = a5 >u 0\n 31693: a2 = a0 >u 0\n 31695: a2 = a1 if a5 != 0\n 31698: a1 = a0 | a5\n 31701: s1 = a3 >u 0\n 31703: s1 = a2 if a1 != 0\n 31706: jump @1250 if s1 != 0\n      : @1247 (gas: 13)\n 31709: a1 = u64 [sp + 0x8]\n 31712: a1 = t1 <u a1\n 31715: a2 = a3 ^ t2\n 31718: s1 = a3 <u t2\n 31721: s1 = a1 if a2 == 0\n 31724: a1 = a0 <u t0\n 31727: a2 = a5 ^ a4\n 31730: a4 = a5 <u a4\n 31733: a4 = a1 if a2 == 0\n 31736: a1 = a0 ^ t0\n 31739: a1 = a1 | a2\n 31742: a4 = s1 if a1 == 0\n 31745: jump @1250 if a4 != 0\n      : @1248 (gas: 7)\n 31748: u64 [sp + 0x50] = t1\n 31751: u64 [sp + 0x58] = a3\n 31754: u64 [sp + 0x60] = a0\n 31757: a0 = 0x40\n 31760: a1 = sp + 0x50\n 31763: u64 [sp + 0x68] = a5\n 31766: ra = 1290, jump @9\n      : @1249 [@dyn 645] (gas: 6)\n 31772: sp = s0 + 0xffffffffffffff70\n 31776: ra = u64 [sp + 0x88]\n 31780: s0 = u64 [sp + 0x80]\n 31784: s1 = u64 [sp + 0x78]\n 31787: sp = sp + 0x90\n 31791: ret\n      : @1250 (gas: 1)\n 31793: t0 = 1292, jump @1492\n      : @1251 [@dyn 646] (gas: 1)\n 31799: ra = 1294, jump @9\n      : @1252 [@dyn 647] (gas: 7)\n 31805: u64 [sp + 40] = 0\n 31808: u64 [sp + 32] = 0\n 31811: u64 [sp + 16] = 0x41\n 31815: a0 = 0x4\n 31818: a1 = sp + 0x10\n 31821: u64 [sp + 24] = 0\n 31824: ra = 1296, jump @9\n      : @1253 [@dyn 648] (gas: 2)\n 31830: a1 = i32 [0x20150]\n 31835: jump @1255 if a1 >u 63\n      : @1254 (gas: 2)\n 31839: u32 [0x20150] = 0x40\n 31845: fallthrough\n      : @1255 (gas: 7)\n 31846: a1 = 0x20160\n 31851: i32 a1 = a1 + 0\n 31853: a0 = 0x1\n 31856: a2 = 0x24\n 31859: ra = 0x512\n 31863: ecalli 14 // 'seal_return'\n 31865: fallthrough\n      : @1256 [@dyn 649] (gas: 13)\n 31866: sp = sp + 0xffffffffffffff60\n 31870: u64 [sp + 0x98] = ra\n 31874: u64 [sp + 0x90] = s0\n 31878: u64 [sp + 0x88] = s1\n 31882: s0 = sp + 0xa0\n 31886: sp = sp & 0xffffffffffffffe0\n 31889: u64 [sp + 120] = 0\n 31892: u64 [sp + 112] = 0\n 31895: u64 [sp + 104] = 0\n 31898: u64 [sp + 96] = 0x1\n 31902: a0 = sp + 0x40\n 31905: a1 = sp + 0x60\n 31908: ra = 1300, jump @11\n      : @1257 [@dyn 650] (gas: 10)\n 31914: a0 = u64 [sp + 0x48]\n 31917: u64 [sp + 0x18] = a0\n 31920: a0 = u64 [sp + 0x40]\n 31923: u64 [sp + 0x10] = a0\n 31926: a0 = u32 [sp + 0x50]\n 31929: u64 [sp + 0x8] = a0\n 31932: s1 = 0x30160\n 31937: i32 a0 = s1 + 0\n 31939: ecalli 4 // 'caller'\n 31941: fallthrough\n      : @1258 (gas: 22)\n 31942: a0 = u64 [0x30168]\n 31947: a1 = u64 [0x30160]\n 31952: a2 = i32 [0x30170]\n 31957: a0 = reverse a0\n 31959: a3 = a0 >> 0x20\n 31962: a1 = reverse a1\n 31964: a4 = a1 << 0x20\n 31967: a3 = a3 | a4\n 31970: a0 = a0 << 0x20\n 31973: a2 = reverse a2\n 31975: a2 = a2 >> 0x20\n 31978: a0 = a0 | a2\n 31981: a1 = a1 >> 0x20\n 31984: a2 = u64 [sp + 0x8]\n 31987: a1 = a1 ^ a2\n 31990: a2 = u64 [sp + 0x10]\n 31993: a0 = a0 ^ a2\n 31996: a0 = a0 | a1\n 31999: a1 = u64 [sp + 0x18]\n 32002: a1 = a1 ^ a3\n 32005: a0 = a0 | a1\n 32008: jump @1260 if a0 != 0\n      : @1259 (gas: 6)\n 32011: sp = s0 + 0xffffffffffffff60\n 32015: ra = u64 [sp + 0x98]\n 32019: s0 = u64 [sp + 0x90]\n 32023: s1 = u64 [sp + 0x88]\n 32027: sp = sp + 0xa0\n 32031: ret\n      : @1260 (gas: 8)\n 32033: u64 [sp + 48] = 0\n 32036: u64 [sp + 40] = 0\n 32039: u64 [sp + 32] = 0\n 32042: a0 = 0x5fc483c500000000\n 32052: a1 = sp + 0x20\n 32055: u64 [sp + 0x38] = a0\n 32058: a0 = 0\n 32060: ra = 1302, jump @9\n      : @1261 [@dyn 651] (gas: 2)\n 32066: a1 = i32 [0x20150]\n 32071: jump @1263 if a1 >u 31\n      : @1262 (gas: 2)\n 32075: u32 [0x20150] = 0x20\n 32081: fallthrough\n      : @1263 (gas: 7)\n 32082: a1 = 0x20160\n 32087: i32 a1 = a1 + 0\n 32089: a0 = 0x1\n 32092: a2 = 0x4\n 32095: ra = 0x518\n 32099: ecalli 14 // 'seal_return'\n 32101: fallthrough\n      : @1264 [@dyn 652] (gas: 74)\n 32102: sp = sp + 0xfffffffffffffea0\n 32106: u64 [sp + 0x158] = ra\n 32110: u64 [sp + 0x150] = s0\n 32114: u64 [sp + 0x148] = s1\n 32118: s0 = sp + 0x160\n 32122: sp = sp & 0xffffffffffffffe0\n 32125: a2 = u64 [a1]\n 32127: u64 [sp + 0x38] = a2\n 32130: a2 = u64 [a1 + 0x8]\n 32133: u64 [sp + 0x30] = a2\n 32136: a2 = u64 [a1 + 0x10]\n 32139: u64 [sp + 0x28] = a2\n 32142: a1 = u64 [a1 + 0x18]\n 32145: u64 [sp + 0x20] = a1\n 32148: a1 = u64 [a0]\n 32150: u64 [sp + 0x18] = a1\n 32153: a1 = u64 [a0 + 0x10]\n 32156: u64 [sp + 0x10] = a1\n 32159: s1 = u64 [a0 + 0x8]\n 32162: ecalli 11 // 'ref_time_left'\n 32164: a1 = reverse s1\n 32166: a2 = a1 << 0x20\n 32169: a3 = u64 [sp + 0x10]\n 32172: a3 = reverse a3\n 32174: a3 = a3 >> 0x20\n 32177: a2 = a2 | a3\n 32180: a1 = a1 >> 0x20\n 32183: a3 = u64 [sp + 0x18]\n 32186: a3 = reverse a3\n 32188: a4 = 0x30160\n 32193: a5 = a3 << 0x20\n 32196: a1 = a1 | a5\n 32199: a3 = a3 >> 0x20\n 32202: u32 [0x30170] = a3\n 32207: u64 [0x30168] = a1\n 32212: u64 [0x30160] = a2\n 32217: a1 = u64 [sp + 0x20]\n 32220: u64 [sp + 0xf8] = a1\n 32224: a1 = u64 [sp + 0x28]\n 32227: u64 [sp + 0xf0] = a1\n 32231: a1 = u64 [sp + 0x30]\n 32234: u64 [sp + 0xe8] = a1\n 32238: a1 = u64 [sp + 0x38]\n 32241: u64 [sp + 0xe0] = a1\n 32245: u32 [sp + 256] = 0\n 32249: a0 = a0 >u 0x8fc\n 32253: a1 = -a0\n 32255: u64 [sp + 0x138] = a1\n 32259: u64 [sp + 0x130] = a1\n 32263: u64 [sp + 0x128] = a1\n 32267: u64 [sp + 0x120] = a1\n 32271: a4 = a4 << 0x20\n 32274: a4 = a4 >> 0x20\n 32277: a0 = a0 << 0x23\n 32280: a0 = a0 | a4\n 32283: a1 = sp + 0xe0\n 32287: a1 = a1 << 0x20\n 32290: a1 = a1 >> 0x20\n 32293: a4 = 0x20160\n 32298: a2 = sp + 0x120\n 32302: a2 = a2 << 0x20\n 32305: a3 = a2 | a1\n 32308: u64 [sp + 0x8] = a4\n 32311: a4 = a4 << 0x20\n 32314: a4 = a4 >> 0x20\n 32317: a1 = sp + 0x100\n 32321: a1 = a1 << 0x20\n 32324: a5 = a1 | a4\n 32327: a1 = 0xffffffffffffffff\n 32330: a2 = 0xffffffffffffffff\n 32333: ecalli 0 // 'call'\n 32334: s1 = a0\n 32336: ecalli 13 // 'return_data_size'\n 32338: fallthrough\n      : @1265 (gas: 1)\n 32339: jump @1276 if a0 == 0\n      : @1266 (gas: 6)\n 32343: u64 [sp + 0x10] = s1\n 32346: ecalli 13 // 'return_data_size'\n 32348: s1 = a0\n 32350: a0 = sp + 0xc0\n 32354: a1 = 0x40\n 32357: ra = 1306, jump @7\n      : @1267 [@dyn 653] (gas: 28)\n 32363: t0 = u64 [sp + 0xd8]\n 32367: a5 = u64 [sp + 0xd0]\n 32371: u64 [sp + 0x30] = a5\n 32374: t1 = u64 [sp + 0xc8]\n 32378: u64 [sp + 0x38] = t1\n 32381: t2 = u64 [sp + 0xc0]\n 32385: u64 [sp + 0x28] = t2\n 32388: a0 = s1 + 0x1f\n 32391: u64 [sp + 0x18] = s1\n 32394: a1 = a0 <u s1\n 32397: a0 = a0 & 0xffffffffffffffe0\n 32400: a2 = a0 + 0x20\n 32403: a0 = a2 <u a0\n 32406: a3 = a1 + a0\n 32409: a4 = a3 <u a1\n 32412: a4 = a0 if a0 == 0\n 32415: u64 [sp + 152] = 0\n 32419: u64 [sp + 0x80] = a2\n 32423: s1 = t0\n 32425: u64 [sp + 0xb8] = t0\n 32429: u64 [sp + 0xb0] = a5\n 32433: u64 [sp + 0xa8] = t1\n 32437: u64 [sp + 0xa0] = t2\n 32441: u64 [sp + 0x88] = a3\n 32445: a0 = sp + 0xa0\n 32449: a1 = sp + 0x80\n 32453: u64 [sp + 0x90] = a4\n 32457: ra = 1308, jump @1246\n      : @1268 [@dyn 654] (gas: 12)\n 32463: a0 = u64 [sp + 0x28]\n 32466: u64 [sp + 0x20] = s1\n 32469: a2 = u64 [sp + 0x38]\n 32472: a2 = a2 | s1\n 32475: a3 = u64 [sp + 0x30]\n 32478: a1 = a0 | a3\n 32481: a1 = a1 | a2\n 32484: a1 = a1 >> 0x20\n 32487: a2 = a2 | a3\n 32490: a2 = a2 << 0x20\n 32493: a1 = a1 | a2\n 32496: jump @1278 if a1 != 0\n      : @1269 (gas: 8)\n 32500: u64 [sp + 120] = 0\n 32503: u64 [sp + 112] = 0\n 32506: u64 [sp + 104] = 0\n 32509: a1 = sp + 0x60\n 32512: a2 = u64 [sp + 0x18]\n 32515: u64 [sp + 0x60] = a2\n 32518: s1 = a0\n 32520: ra = 1310, jump @9\n      : @1270 [@dyn 655] (gas: 2)\n 32526: ecalli 13 // 'return_data_size'\n 32528: fallthrough\n      : @1271 (gas: 9)\n 32529: a1 = u64 [sp + 0x20]\n 32532: a2 = u64 [sp + 0x30]\n 32535: a1 = a1 | a2\n 32538: a2 = 0xffffffe0\n 32548: a2 = s1 <u a2\n 32551: a4 = u64 [sp + 0x38]\n 32554: a2 = 0 if a4 != 0\n 32556: a2 = 0 if a1 != 0\n 32558: jump @1278 if a2 == 0\n      : @1272 (gas: 4)\n 32561: a3 = s1\n 32563: s1 = a0\n 32565: a0 = a0 >> 0x20\n 32568: jump @1278 if a0 != 0\n      : @1273 (gas: 5)\n 32571: i32 a0 = a3 + 0x20\n 32574: i32 a1 = s1 + 0\n 32576: u64 [sp + 0x38] = a1\n 32579: a1 = s1\n 32581: ra = 1312, jump @20\n      : @1274 [@dyn 656] (gas: 6)\n 32587: u32 [sp + 0x140] = s1\n 32591: i32 a0 = a0 + 0\n 32593: i32 a1 = sp + 0x140\n 32597: a2 = 0\n 32599: ecalli 12 // 'return_data_copy'\n 32601: fallthrough\n      : @1275 (gas: 4)\n 32602: a0 = i32 [sp + 0x140]\n 32606: s1 = u64 [sp + 0x10]\n 32609: a1 = u64 [sp + 0x38]\n 32612: jump @1278 if a0 <u a1\n      : @1276 (gas: 1)\n 32615: jump @1279 if s1 != 0\n      : @1277 (gas: 6)\n 32618: sp = s0 + 0xfffffffffffffea0\n 32622: ra = u64 [sp + 0x158]\n 32626: s0 = u64 [sp + 0x150]\n 32630: s1 = u64 [sp + 0x148]\n 32634: sp = sp + 0x160\n 32638: ret\n      : @1278 (gas: 1)\n 32640: trap\n      : @1279 (gas: 8)\n 32641: u64 [sp + 80] = 0\n 32644: u64 [sp + 72] = 0\n 32647: u64 [sp + 64] = 0\n 32650: a0 = 0x90b8ec1800000000\n 32660: a1 = sp + 0x40\n 32663: u64 [sp + 0x58] = a0\n 32666: a0 = 0\n 32668: ra = 1314, jump @9\n      : @1280 [@dyn 657] (gas: 2)\n 32674: a1 = i32 [0x20150]\n 32679: jump @1282 if a1 >u 31\n      : @1281 (gas: 2)\n 32683: u32 [0x20150] = 0x20\n 32689: fallthrough\n      : @1282 (gas: 6)\n 32690: a1 = i32 [sp + 0x8]\n 32693: a0 = 0x1\n 32696: a2 = 0x4\n 32699: ra = 0x524\n 32703: ecalli 14 // 'seal_return'\n 32705: fallthrough\n      : @1283 [@dyn 658] (gas: 31)\n 32706: sp = sp + 0xfffffffffffff808\n 32710: a3 = sp + 0x700\n 32714: u64 [a3 + 0xf0] = ra\n 32718: u64 [a3 + 0xe8] = s0\n 32722: u64 [a3 + 0xe0] = s1\n 32726: s0 = sp + 0x7f8\n 32730: sp = sp + 0xfffffffffffffdf8\n 32734: sp = sp & 0xffffffffffffffe0\n 32737: s1 = sp\n 32739: a2 = u64 [a2]\n 32741: u64 [s1 + 0x90] = a2\n 32745: a1 = u64 [a1]\n 32747: u64 [s1 + 0x68] = a1\n 32750: a2 = u64 [a0]\n 32752: a1 = u64 [a0 + 0x8]\n 32755: a0 = u32 [a0 + 0x10]\n 32758: a3 = s1 + 0x1000\n 32762: u64 [a3 + 4294965272] = 0\n 32766: u64 [s1 + 0x98] = a0\n 32770: a3 = s1 + 0x1000\n 32774: u64 [a3 + 0xfffffffffffff810] = a0\n 32778: u64 [s1 + 0xa0] = a1\n 32782: a0 = s1 + 0x1000\n 32786: u64 [a0 + 0xfffffffffffff808] = a1\n 32790: a1 = s1 + 0x7ff\n 32794: a1 = a1 + 0x1\n 32797: u64 [s1 + 0xa8] = a2\n 32801: a0 = s1 + 0x1000\n 32805: u64 [a0 + 0xfffffffffffff800] = a2\n 32809: a0 = 0\n 32811: ra = 1318, jump @9\n      : @1284 [@dyn 659] (gas: 7)\n 32817: u64 [s1 + 2040] = 0\n 32821: u64 [s1 + 2032] = 0\n 32825: u64 [s1 + 2016] = 0x3\n 32830: a0 = 0x20\n 32833: a1 = s1 + 0x7e0\n 32837: u64 [s1 + 2024] = 0\n 32841: ra = 1320, jump @9\n      : @1285 [@dyn 660] (gas: 3)\n 32847: a1 = 0x20150\n 32852: a0 = i32 [0x20150]\n 32857: jump @1287 if a0 >u 63\n      : @1286 (gas: 2)\n 32861: u32 [0x20150] = 0x40\n 32867: fallthrough\n      : @1287 (gas: 16)\n 32868: a0 = sp + 0xffffffffffffffe0\n 32871: a2 = a0 & 0xffffffffffffffe0\n 32874: u64 [s1 + 0x88] = a2\n 32878: sp = a2\n 32880: a0 = 0x20160\n 32885: u64 [s1 + 0x30] = a0\n 32888: i32 a0 = a0 + 0\n 32890: i32 a2 = a2 + 0\n 32892: u64 [s1 + 0xb0] = a1\n 32896: a1 = 0x40\n 32899: u64 [s1 + 0xb8] = a0\n 32903: ra = 0x52a\n 32907: ecalli 9 // 'hash_keccak_256'\n 32909: a3 = u64 [s1 + 0x88]\n 32913: t0 = 0x52c\n 32917: jump @1489\n      : @1288 [@dyn 661] (gas: 2)\n 32920: a3 = u64 [s1 + 0x88]\n 32924: t0 = 1324, jump @1489\n      : @1289 [@dyn 662] (gas: 18)\n 32930: u64 [s1 + 0x88] = a0\n 32934: a0 = reverse a1\n 32936: u64 [s1 + 0x80] = a0\n 32940: a0 = reverse a2\n 32942: u64 [s1 + 0x78] = a0\n 32945: a0 = reverse a3\n 32947: u64 [s1 + 0x60] = a0\n 32950: a0 = u64 [s1 + 0x90]\n 32954: a0 = a0 << 0x20\n 32957: a0 = a0 >> 0x20\n 32960: u64 [s1 + 2008] = 0\n 32964: u64 [s1 + 2000] = 0\n 32968: u64 [s1 + 1992] = 0\n 32972: a1 = s1 + 0x7c0\n 32976: u64 [s1 + 0x70] = a0\n 32979: u64 [s1 + 0x7c0] = a0\n 32983: a0 = 0\n 32985: ra = 1326, jump @9\n      : @1290 [@dyn 663] (gas: 12)\n 32991: a0 = u64 [s1 + 0x60]\n 32994: a3 = s1 + 0x700\n 32998: u64 [a3 + 0xb8] = a0\n 33002: a0 = u64 [s1 + 0x78]\n 33005: u64 [a3 + 0xb0] = a0\n 33009: a0 = u64 [s1 + 0x80]\n 33013: u64 [a3 + 0xa8] = a0\n 33017: a0 = 0x20\n 33020: a1 = s1 + 0x7a0\n 33024: a2 = u64 [s1 + 0x88]\n 33028: u64 [a3 + 0xa0] = a2\n 33032: ra = 1328, jump @9\n      : @1291 [@dyn 664] (gas: 3)\n 33038: a1 = u64 [s1 + 0xb0]\n 33042: a0 = i32 [a1]\n 33044: jump @1293 if a0 >u 63\n      : @1292 (gas: 2)\n 33048: u32 [a1 + 0] = 0x40\n 33051: fallthrough\n      : @1293 (gas: 4)\n 33052: a0 = sp + 0xffffffffffffffe0\n 33055: a0 = a0 & 0xffffffffffffffe0\n 33058: u64 [s1 + 0x90] = a0\n 33062: t0 = 1330, jump @1466\n      : @1294 [@dyn 665] (gas: 5)\n 33068: ra = 0x534\n 33072: ecalli 9 // 'hash_keccak_256'\n 33074: a3 = u64 [s1 + 0x90]\n 33078: t0 = 0x536\n 33082: jump @1448\n      : @1295 [@dyn 666] (gas: 2)\n 33085: a3 = u64 [s1 + 0x90]\n 33089: t0 = 1334, jump @1448\n      : @1296 [@dyn 667] (gas: 12)\n 33095: a1 = s1 + 0x1000\n 33099: u64 [a1 + 0xfffffffffffff820] = a3\n 33103: a1 = s1 + 0x1000\n 33107: u64 [a1 + 0xfffffffffffff828] = a2\n 33111: a1 = s1 + 0x7ff\n 33115: a1 = a1 + 0x31\n 33118: u64 [a1] = a4\n 33120: u64 [a1 + 0x8] = a0\n 33123: a0 = s1 + 0x780\n 33127: a1 = s1 + 0x7ff\n 33131: a1 = a1 + 0x21\n 33134: ra = 1336, jump @11\n      : @1297 [@dyn 668] (gas: 2)\n 33140: a0 = u64 [s1 + 0x780]\n 33144: jump @1431 if a0 == 0\n      : @1298 (gas: 7)\n 33148: a1 = u64 [s1 + 0x70]\n 33151: a0 = a1 <u 0x100\n 33155: u64 [s1 + 0x60] = a0\n 33158: i32 a2 = a1 + 0xffffffffffffff80\n 33161: a0 = 0x1\n 33164: a1 = 0\n 33166: ra = 1338, jump @1509\n      : @1299 [@dyn 669] (gas: 7)\n 33172: u64 [s1 + 0x88] = a0\n 33176: u64 [s1 + 0x90] = a1\n 33180: a1 = u64 [s1 + 0x70]\n 33183: i32 a2 = 0x80 - a1\n 33187: a0 = 0x1\n 33190: a1 = 0\n 33192: ra = 1340, jump @1504\n      : @1300 [@dyn 670] (gas: 15)\n 33198: a2 = u64 [s1 + 0x70]\n 33201: a3 = a2 <u 0x80\n 33205: u64 [s1 + 0x80] = a3\n 33209: a4 = u64 [s1 + 0x88]\n 33213: a0 = a4 if a3 == 0\n 33216: a0 = 0 if a2 == 0\n 33218: u64 [s1 + 0x88] = a0\n 33222: a0 = u64 [s1 + 0x90]\n 33226: a1 = a0 if a3 == 0\n 33229: a1 = 0 if a2 == 0\n 33231: u64 [s1 + 0x90] = a1\n 33235: i32 a2 = a2 + 0\n 33237: a0 = 0x1\n 33240: a1 = 0\n 33242: ra = 1342, jump @1509\n      : @1301 [@dyn 671] (gas: 15)\n 33248: a2 = u64 [s1 + 0x80]\n 33252: a0 = 0 if a2 == 0\n 33254: u64 [s1 + 0x78] = a0\n 33257: a1 = 0 if a2 == 0\n 33259: u64 [s1 + 0x80] = a1\n 33263: u64 [s1 + 1912] = 0\n 33267: a0 = u64 [s1 + 0xa8]\n 33271: u64 [s1 + 0x760] = a0\n 33275: a0 = u64 [s1 + 0xa0]\n 33279: u64 [s1 + 0x768] = a0\n 33283: a1 = s1 + 0x760\n 33287: a0 = u64 [s1 + 0x98]\n 33291: u64 [s1 + 0x770] = a0\n 33295: a0 = 0\n 33297: ra = 1344, jump @9\n      : @1302 [@dyn 672] (gas: 7)\n 33304: u64 [s1 + 1880] = 0\n 33308: u64 [s1 + 1872] = 0\n 33312: u64 [s1 + 1856] = 0x5\n 33317: a0 = 0x20\n 33320: a1 = s1 + 0x740\n 33324: u64 [s1 + 1864] = 0\n 33328: ra = 1346, jump @9\n      : @1303 [@dyn 673] (gas: 3)\n 33335: a1 = u64 [s1 + 0xb0]\n 33339: a0 = i32 [a1]\n 33341: jump @1305 if a0 >u 63\n      : @1304 (gas: 2)\n 33345: u32 [a1 + 0] = 0x40\n 33348: fallthrough\n      : @1305 (gas: 17)\n 33349: a0 = u64 [s1 + 0x80]\n 33353: a1 = u64 [s1 + 0x60]\n 33356: a0 = 0 if a1 == 0\n 33358: u64 [s1 + 0x80] = a0\n 33362: a0 = u64 [s1 + 0x78]\n 33365: a0 = 0 if a1 == 0\n 33367: u64 [s1 + 0x78] = a0\n 33370: a0 = u64 [s1 + 0x90]\n 33374: a0 = 0 if a1 == 0\n 33376: u64 [s1 + 0x90] = a0\n 33380: a0 = u64 [s1 + 0x88]\n 33384: a0 = 0 if a1 == 0\n 33386: u64 [s1 + 0x88] = a0\n 33390: a0 = sp + 0xffffffffffffffe0\n 33393: a0 = a0 & 0xffffffffffffffe0\n 33396: u64 [s1 + 0x60] = a0\n 33399: t0 = 1348, jump @1466\n      : @1306 [@dyn 674] (gas: 4)\n 33405: ra = 0x546\n 33409: ecalli 9 // 'hash_keccak_256'\n 33411: t0 = 0x548\n 33415: jump @1452\n      : @1307 [@dyn 675] (gas: 1)\n 33418: t0 = 1352, jump @1452\n      : @1308 [@dyn 676] (gas: 10)\n 33424: a0 = u64 [s1 + 0x68]\n 33427: a0 = a0 & 0xffffffffffffffff\n 33430: u64 [s1 + 1848] = 0\n 33434: u64 [s1 + 1840] = 0\n 33438: u64 [s1 + 1832] = 0\n 33442: a1 = s1 + 0x720\n 33446: u64 [s1 + 0x68] = a0\n 33449: u64 [s1 + 0x720] = a0\n 33453: a0 = 0\n 33455: ra = 1354, jump @9\n      : @1309 [@dyn 677] (gas: 12)\n 33462: a0 = u64 [s1 + 0x40]\n 33465: a3 = s1 + 0x700\n 33469: u64 [a3 + 0x18] = a0\n 33472: a0 = u64 [s1 + 0x48]\n 33475: u64 [a3 + 0x10] = a0\n 33478: a0 = u64 [s1 + 0x50]\n 33481: u64 [a3 + 0x8] = a0\n 33484: a0 = 0x20\n 33487: a1 = s1 + 0x700\n 33491: a2 = u64 [s1 + 0x58]\n 33494: u64 [a3] = a2\n 33496: ra = 1356, jump @9\n      : @1310 [@dyn 678] (gas: 3)\n 33503: a1 = u64 [s1 + 0xb0]\n 33507: a0 = i32 [a1]\n 33509: jump @1312 if a0 >u 63\n      : @1311 (gas: 2)\n 33513: u32 [a1 + 0] = 0x40\n 33516: fallthrough\n      : @1312 (gas: 4)\n 33517: a0 = sp + 0xffffffffffffffe0\n 33520: a0 = a0 & 0xffffffffffffffe0\n 33523: u64 [s1 + 0x58] = a0\n 33526: t0 = 1358, jump @1466\n      : @1313 [@dyn 679] (gas: 4)\n 33532: ra = 0x550\n 33536: ecalli 9 // 'hash_keccak_256'\n 33538: t0 = 0x552\n 33542: jump @1457\n      : @1314 [@dyn 680] (gas: 1)\n 33545: t0 = 1362, jump @1457\n      : @1315 [@dyn 681] (gas: 2)\n 33551: a0 = s1 + 0x6e0\n 33555: ra = 1364, jump @11\n      : @1316 [@dyn 682] (gas: 6)\n 33562: a4 = s1 + 0x600\n 33566: a0 = u64 [a4 + 0xf0]\n 33570: a1 = u64 [a4 + 0xe0]\n 33574: a2 = u64 [a4 + 0xf8]\n 33578: a3 = u64 [a4 + 0xe8]\n 33582: t0 = 1366, jump @1471\n      : @1317 [@dyn 683] (gas: 1)\n 33588: jump @1432 if a0 == 0\n      : @1318 (gas: 10)\n 33592: u64 [s1 + 1752] = 0\n 33596: a0 = u64 [s1 + 0xa8]\n 33600: u64 [s1 + 0x6c0] = a0\n 33604: a0 = u64 [s1 + 0xa0]\n 33608: u64 [s1 + 0x6c8] = a0\n 33612: a1 = s1 + 0x6c0\n 33616: a0 = u64 [s1 + 0x98]\n 33620: u64 [s1 + 0x6d0] = a0\n 33624: a0 = 0\n 33626: ra = 1368, jump @9\n      : @1319 [@dyn 684] (gas: 7)\n 33633: u64 [s1 + 1720] = 0\n 33637: u64 [s1 + 1712] = 0\n 33641: u64 [s1 + 1696] = 0x7\n 33646: a0 = 0x20\n 33649: a1 = s1 + 0x6a0\n 33653: u64 [s1 + 1704] = 0\n 33657: ra = 1370, jump @9\n      : @1320 [@dyn 685] (gas: 3)\n 33664: a1 = u64 [s1 + 0xb0]\n 33668: a0 = i32 [a1]\n 33670: jump @1322 if a0 >u 63\n      : @1321 (gas: 2)\n 33674: u32 [a1 + 0] = 0x40\n 33677: fallthrough\n      : @1322 (gas: 4)\n 33678: a0 = sp + 0xffffffffffffffe0\n 33681: a0 = a0 & 0xffffffffffffffe0\n 33684: u64 [s1 + 0x60] = a0\n 33687: t0 = 1372, jump @1466\n      : @1323 [@dyn 686] (gas: 4)\n 33693: ra = 0x55e\n 33697: ecalli 9 // 'hash_keccak_256'\n 33699: t0 = 0x560\n 33703: jump @1452\n      : @1324 [@dyn 687] (gas: 1)\n 33706: t0 = 1376, jump @1452\n      : @1325 [@dyn 688] (gas: 8)\n 33712: u64 [s1 + 1688] = 0\n 33716: u64 [s1 + 1680] = 0\n 33720: u64 [s1 + 1672] = 0\n 33724: a1 = s1 + 0x680\n 33728: a0 = u64 [s1 + 0x68]\n 33731: u64 [s1 + 0x680] = a0\n 33735: a0 = 0\n 33737: ra = 1378, jump @9\n      : @1326 [@dyn 689] (gas: 12)\n 33744: a0 = u64 [s1 + 0x40]\n 33747: a3 = s1 + 0x600\n 33751: u64 [a3 + 0x78] = a0\n 33754: a0 = u64 [s1 + 0x48]\n 33757: u64 [a3 + 0x70] = a0\n 33760: a0 = u64 [s1 + 0x50]\n 33763: u64 [a3 + 0x68] = a0\n 33766: a0 = 0x20\n 33769: a1 = s1 + 0x660\n 33773: a2 = u64 [s1 + 0x58]\n 33776: u64 [a3 + 0x60] = a2\n 33779: ra = 1380, jump @9\n      : @1327 [@dyn 690] (gas: 3)\n 33786: a1 = u64 [s1 + 0xb0]\n 33790: a0 = i32 [a1]\n 33792: jump @1329 if a0 >u 63\n      : @1328 (gas: 2)\n 33796: u32 [a1 + 0] = 0x40\n 33799: fallthrough\n      : @1329 (gas: 4)\n 33800: a0 = sp + 0xffffffffffffffe0\n 33803: a0 = a0 & 0xffffffffffffffe0\n 33806: u64 [s1 + 0x58] = a0\n 33809: t0 = 1382, jump @1466\n      : @1330 [@dyn 691] (gas: 4)\n 33815: ra = 0x568\n 33819: ecalli 9 // 'hash_keccak_256'\n 33821: t0 = 0x56a\n 33825: jump @1457\n      : @1331 [@dyn 692] (gas: 1)\n 33828: t0 = 1386, jump @1457\n      : @1332 [@dyn 693] (gas: 2)\n 33834: a0 = s1 + 0x640\n 33838: ra = 1388, jump @11\n      : @1333 [@dyn 694] (gas: 6)\n 33845: a4 = s1 + 0x600\n 33849: a0 = u64 [a4 + 0x50]\n 33852: a1 = u64 [a4 + 0x40]\n 33855: a2 = u64 [a4 + 0x58]\n 33858: a3 = u64 [a4 + 0x48]\n 33861: t0 = 1390, jump @1471\n      : @1334 [@dyn 695] (gas: 1)\n 33867: jump @1433 if a0 != 0\n      : @1335 (gas: 11)\n 33871: u64 [s1 + 1560] = 0\n 33875: a0 = u64 [s1 + 0xa8]\n 33879: a2 = s1 + 0x600\n 33883: u64 [a2] = a0\n 33885: a0 = u64 [s1 + 0xa0]\n 33889: u64 [a2 + 0x8] = a0\n 33892: a1 = s1 + 0x600\n 33896: a0 = u64 [s1 + 0x98]\n 33900: u64 [a2 + 0x10] = a0\n 33903: a0 = 0\n 33905: ra = 1392, jump @9\n      : @1336 [@dyn 696] (gas: 7)\n 33912: u64 [s1 + 1528] = 0\n 33916: u64 [s1 + 1520] = 0\n 33920: u64 [s1 + 1504] = 0x7\n 33925: a0 = 0x20\n 33928: a1 = s1 + 0x5e0\n 33932: u64 [s1 + 1512] = 0\n 33936: ra = 1394, jump @9\n      : @1337 [@dyn 697] (gas: 3)\n 33943: a1 = u64 [s1 + 0xb0]\n 33947: a0 = i32 [a1]\n 33949: jump @1339 if a0 >u 63\n      : @1338 (gas: 2)\n 33953: u32 [a1 + 0] = 0x40\n 33956: fallthrough\n      : @1339 (gas: 4)\n 33957: a0 = sp + 0xffffffffffffffe0\n 33960: a0 = a0 & 0xffffffffffffffe0\n 33963: u64 [s1 + 0x60] = a0\n 33966: t0 = 1396, jump @1466\n      : @1340 [@dyn 698] (gas: 4)\n 33972: ra = 0x576\n 33976: ecalli 9 // 'hash_keccak_256'\n 33978: t0 = 0x578\n 33982: jump @1452\n      : @1341 [@dyn 699] (gas: 1)\n 33985: t0 = 1400, jump @1452\n      : @1342 [@dyn 700] (gas: 8)\n 33991: u64 [s1 + 1496] = 0\n 33995: u64 [s1 + 1488] = 0\n 33999: u64 [s1 + 1480] = 0\n 34003: a1 = s1 + 0x5c0\n 34007: a0 = u64 [s1 + 0x68]\n 34010: u64 [s1 + 0x5c0] = a0\n 34014: a0 = 0\n 34016: ra = 1402, jump @9\n      : @1343 [@dyn 701] (gas: 12)\n 34023: a0 = u64 [s1 + 0x40]\n 34026: a3 = s1 + 0x500\n 34030: u64 [a3 + 0xb8] = a0\n 34034: a0 = u64 [s1 + 0x48]\n 34037: u64 [a3 + 0xb0] = a0\n 34041: a0 = u64 [s1 + 0x50]\n 34044: u64 [a3 + 0xa8] = a0\n 34048: a0 = 0x20\n 34051: a1 = s1 + 0x5a0\n 34055: a2 = u64 [s1 + 0x58]\n 34058: u64 [a3 + 0xa0] = a2\n 34062: ra = 1404, jump @9\n      : @1344 [@dyn 702] (gas: 3)\n 34069: a1 = u64 [s1 + 0xb0]\n 34073: a0 = i32 [a1]\n 34075: jump @1346 if a0 >u 63\n      : @1345 (gas: 2)\n 34079: u32 [a1 + 0] = 0x40\n 34082: fallthrough\n      : @1346 (gas: 4)\n 34083: a0 = sp + 0xffffffffffffffe0\n 34086: a0 = a0 & 0xffffffffffffffe0\n 34089: u64 [s1 + 0x58] = a0\n 34092: t0 = 1406, jump @1466\n      : @1347 [@dyn 703] (gas: 4)\n 34098: ra = 0x580\n 34102: ecalli 9 // 'hash_keccak_256'\n 34104: t0 = 0x582\n 34108: jump @1457\n      : @1348 [@dyn 704] (gas: 1)\n 34111: t0 = 1410, jump @1457\n      : @1349 [@dyn 705] (gas: 2)\n 34117: a0 = s1 + 0x580\n 34121: ra = 1412, jump @11\n      : @1350 [@dyn 706] (gas: 22)\n 34128: a0 = u64 [s1 + 0x580]\n 34132: a1 = u64 [s1 + 0x588]\n 34136: a2 = u64 [s1 + 0x590]\n 34140: a3 = u64 [s1 + 0x598]\n 34144: a4 = u64 [s1 + 0x78]\n 34147: a0 = a0 | a4\n 34150: a4 = u64 [s1 + 0x80]\n 34154: a1 = a1 | a4\n 34157: a4 = u64 [s1 + 0x88]\n 34161: a2 = a2 | a4\n 34164: a4 = u64 [s1 + 0x90]\n 34168: a3 = a3 | a4\n 34171: a4 = s1 + 0x7ff\n 34175: a4 = a4 + 0x31\n 34178: u64 [a4 + 0x28] = a3\n 34181: u64 [a4 + 0x20] = a2\n 34184: u64 [a4 + 0x18] = a1\n 34187: u64 [a4 + 0x10] = a0\n 34190: a1 = s1 + 0x7ff\n 34194: a1 = a1 + 0x41\n 34197: a0 = u64 [s1 + 0x60]\n 34200: ra = 1414, jump @12\n      : @1351 [@dyn 707] (gas: 10)\n 34207: u64 [s1 + 1400] = 0\n 34211: a0 = u64 [s1 + 0x98]\n 34215: u64 [s1 + 0x570] = a0\n 34219: a0 = u64 [s1 + 0xa0]\n 34223: u64 [s1 + 0x568] = a0\n 34227: a1 = s1 + 0x560\n 34231: a0 = u64 [s1 + 0xa8]\n 34235: u64 [s1 + 0x560] = a0\n 34239: a0 = 0\n 34241: ra = 1416, jump @9\n      : @1352 [@dyn 708] (gas: 7)\n 34248: u64 [s1 + 1368] = 0\n 34252: u64 [s1 + 1360] = 0\n 34256: u64 [s1 + 1344] = 0x2\n 34261: a0 = 0x20\n 34264: a1 = s1 + 0x540\n 34268: u64 [s1 + 1352] = 0\n 34272: ra = 1418, jump @9\n      : @1353 [@dyn 709] (gas: 3)\n 34279: a1 = u64 [s1 + 0xb0]\n 34283: a0 = i32 [a1]\n 34285: jump @1355 if a0 >=u 64\n      : @1354 (gas: 2)\n 34289: u32 [a1 + 0] = 0x40\n 34292: fallthrough\n      : @1355 (gas: 4)\n 34293: a0 = sp + 0xffffffffffffffe0\n 34296: a0 = a0 & 0xffffffffffffffe0\n 34299: u64 [s1 + 0x60] = a0\n 34302: t0 = 1420, jump @1466\n      : @1356 [@dyn 710] (gas: 32)\n 34308: ecalli 9 // 'hash_keccak_256'\n 34310: a3 = u64 [s1 + 0x60]\n 34313: a0 = u64 [a3]\n 34315: a1 = u64 [a3 + 0x8]\n 34318: a2 = u64 [a3 + 0x10]\n 34321: a3 = u64 [a3 + 0x18]\n 34324: t0 = reverse a0\n 34326: a5 = reverse a1\n 34328: a2 = reverse a2\n 34330: a3 = reverse a3\n 34332: a0 = sp + 0xffffffffffffffe0\n 34335: a1 = a0 & 0xffffffffffffffe0\n 34338: sp = a1\n 34340: u64 [s1 + 0x10] = a3\n 34343: a0 = a3 + 0x1\n 34346: a3 = a0 <u 0x1\n 34349: u64 [s1 + 0x18] = a2\n 34352: a4 = a2 + a3\n 34355: a2 = a0 | a4\n 34358: a2 = a2 <u 0x1\n 34361: a2 = a2 + a5\n 34364: u64 [s1 + 0x20] = a5\n 34367: a3 = a2 <u a5\n 34370: u64 [s1 + 0x28] = t0\n 34373: a3 = a3 + t0\n 34376: u64 [a1 + 0x8] = a4\n 34379: u64 [a1] = a0\n 34381: u64 [a1 + 0x10] = a2\n 34384: u64 [a1 + 0x18] = a3\n 34387: a0 = s1 + 0x520\n 34391: u64 [s1 + 0x58] = a1\n 34394: ra = 1422, jump @11\n      : @1357 [@dyn 711] (gas: 12)\n 34401: t0 = u64 [s1 + 0x538]\n 34405: a4 = s1 + 0x500\n 34409: a1 = u64 [a4 + 0x30]\n 34412: a2 = u64 [a4 + 0x20]\n 34415: a0 = u64 [0x200f8]\n 34420: a3 = u64 [a4 + 0x28]\n 34423: a4 = a1 | t0\n 34426: u64 [s1 + 0x60] = a0\n 34429: a5 = a2 <u a0\n 34432: a5 = 0 if a3 != 0\n 34434: a5 = 0 if a4 != 0\n 34436: jump @1434 if a5 != 0\n      : @1358 (gas: 24)\n 34440: a4 = u64 [0x20100]\n 34445: a4 = a4 + a2\n 34448: a2 = a4 <u a2\n 34451: a5 = a3 + a2\n 34454: a5 = a5 + 0xffffffffffffffff\n 34457: a0 = a5 ^ a3\n 34460: a3 = a5 <u a3\n 34463: a3 = a2 if a0 == 0\n 34466: a0 = a1 + 0xffffffffffffffff\n 34469: a3 = a3 + a0\n 34472: a0 = a3 <u a0\n 34475: a1 = a1 <u 0x1\n 34478: a1 = t0 - a1\n 34481: a0 = a0 + a1\n 34484: a1 = s1 + 0x7ff\n 34488: a1 = a1 + 0x31\n 34491: u64 [a1 + 0x30] = a4\n 34494: u64 [a1 + 0x38] = a5\n 34497: u64 [a1 + 0x40] = a3\n 34500: u64 [a1 + 0x48] = a0\n 34503: a1 = s1 + 0x7ff\n 34507: a1 = a1 + 0x61\n 34510: a0 = u64 [s1 + 0x58]\n 34513: ra = 1424, jump @12\n      : @1359 [@dyn 712] (gas: 11)\n 34520: u64 [s1 + 1304] = 0\n 34524: a0 = u64 [s1 + 0x98]\n 34528: a2 = s1 + 0x500\n 34532: u64 [a2 + 0x10] = a0\n 34535: a0 = u64 [s1 + 0xa0]\n 34539: u64 [a2 + 0x8] = a0\n 34542: a1 = s1 + 0x500\n 34546: a0 = u64 [s1 + 0xa8]\n 34550: u64 [a2] = a0\n 34552: a0 = 0\n 34554: ra = 1426, jump @9\n      : @1360 [@dyn 713] (gas: 7)\n 34561: u64 [s1 + 1272] = 0\n 34565: u64 [s1 + 1264] = 0\n 34569: u64 [s1 + 1248] = 0x6\n 34574: a0 = 0x20\n 34577: a1 = s1 + 0x4e0\n 34581: u64 [s1 + 1256] = 0\n 34585: ra = 1428, jump @9\n      : @1361 [@dyn 714] (gas: 3)\n 34592: a1 = u64 [s1 + 0xb0]\n 34596: a0 = i32 [a1]\n 34598: jump @1363 if a0 >u 63\n      : @1362 (gas: 2)\n 34602: u32 [a1 + 0] = 0x40\n 34605: fallthrough\n      : @1363 (gas: 4)\n 34606: a0 = sp + 0xffffffffffffffe0\n 34609: a0 = a0 & 0xffffffffffffffe0\n 34612: u64 [s1 + 0x58] = a0\n 34615: t0 = 1430, jump @1466\n      : @1364 [@dyn 715] (gas: 5)\n 34621: ra = 0x598\n 34625: ecalli 9 // 'hash_keccak_256'\n 34627: a3 = u64 [s1 + 0x58]\n 34630: t0 = 0x59a\n 34634: jump @1489\n      : @1365 [@dyn 716] (gas: 2)\n 34637: a3 = u64 [s1 + 0x58]\n 34640: t0 = 1434, jump @1489\n      : @1366 [@dyn 717] (gas: 19)\n 34646: u64 [s1 + 0x50] = a0\n 34649: a0 = reverse a1\n 34651: u64 [s1 + 0x48] = a0\n 34654: a0 = reverse a2\n 34656: u64 [s1 + 0x40] = a0\n 34659: a0 = reverse a3\n 34661: u64 [s1 + 0x38] = a0\n 34664: a0 = sp + 0xffffffffffffffe0\n 34667: a0 = a0 & 0xffffffffffffffe0\n 34670: u64 [s1 + 0x58] = a0\n 34673: sp = a0\n 34675: u64 [s1 + 1240] = 0\n 34679: u64 [s1 + 1232] = 0\n 34683: u64 [s1 + 1224] = 0\n 34687: a1 = s1 + 0x4c0\n 34691: a0 = u64 [s1 + 0x68]\n 34694: u64 [s1 + 0x4c0] = a0\n 34698: a0 = 0\n 34700: ra = 1436, jump @9\n      : @1367 [@dyn 718] (gas: 12)\n 34707: a0 = u64 [s1 + 0x38]\n 34710: a3 = s1 + 0x400\n 34714: u64 [a3 + 0xb8] = a0\n 34718: a0 = u64 [s1 + 0x40]\n 34721: u64 [a3 + 0xb0] = a0\n 34725: a0 = u64 [s1 + 0x48]\n 34728: u64 [a3 + 0xa8] = a0\n 34732: a0 = 0x20\n 34735: a1 = s1 + 0x4a0\n 34739: a2 = u64 [s1 + 0x50]\n 34742: u64 [a3 + 0xa0] = a2\n 34746: ra = 1438, jump @9\n      : @1368 [@dyn 719] (gas: 3)\n 34753: a1 = u64 [s1 + 0xb0]\n 34757: a0 = i32 [a1]\n 34759: jump @1370 if a0 >u 63\n      : @1369 (gas: 2)\n 34763: u32 [a1 + 0] = 0x40\n 34766: fallthrough\n      : @1370 (gas: 4)\n 34767: a0 = sp + 0xffffffffffffffe0\n 34770: a0 = a0 & 0xffffffffffffffe0\n 34773: u64 [s1 + 0x50] = a0\n 34776: t0 = 1440, jump @1466\n      : @1371 [@dyn 720] (gas: 5)\n 34782: ra = 0x5a2\n 34786: ecalli 9 // 'hash_keccak_256'\n 34788: a3 = u64 [s1 + 0x50]\n 34791: t0 = 0x5a4\n 34795: jump @1469\n      : @1372 [@dyn 721] (gas: 2)\n 34798: a3 = u64 [s1 + 0x50]\n 34801: t0 = 1444, jump @1469\n      : @1373 [@dyn 722] (gas: 7)\n 34807: a1 = u64 [s1 + 0x58]\n 34810: u64 [a1 + 0x18] = a3\n 34813: u64 [a1 + 0x10] = a2\n 34816: u64 [a1 + 0x8] = a4\n 34819: u64 [a1] = a0\n 34821: a0 = s1 + 0x480\n 34825: ra = 1446, jump @11\n      : @1374 [@dyn 723] (gas: 6)\n 34832: a4 = s1 + 0x400\n 34836: a0 = u64 [a4 + 0x90]\n 34840: a1 = u64 [a4 + 0x80]\n 34844: a2 = u64 [a4 + 0x98]\n 34848: a3 = u64 [a4 + 0x88]\n 34852: t0 = 1448, jump @1471\n      : @1375 [@dyn 724] (gas: 1)\n 34858: jump @1394 if a0 == 0\n      : @1376 (gas: 12)\n 34862: a0 = 0xffffffff\n 34872: u64 [s1 + 0xb0] = a0\n 34876: a0 = s1 + 0x7ff\n 34880: a0 = a0 + 0x31\n 34883: u64 [a0 + 232] = 0\n 34887: u64 [a0 + 224] = 0\n 34891: u64 [a0 + 216] = 0\n 34895: u64 [a0 + 208] = 0\n 34899: a0 = s1 + 0x460\n 34903: a1 = s1 + 0x7ff\n 34907: a1 = a1 + 0x101\n 34911: ra = 1450, jump @11\n      : @1377 [@dyn 725] (gas: 11)\n 34918: a3 = s1 + 0x400\n 34922: a0 = u64 [a3 + 0x68]\n 34925: a1 = u64 [a3 + 0x70]\n 34928: a2 = u64 [a3 + 0x60]\n 34931: a0 = a0 & 0xffffffffffffffff\n 34934: a4 = u64 [s1 + 0xb0]\n 34938: a1 = a1 & a4\n 34941: a2 = a2 & 0xffffffffffffffff\n 34944: a1 = a1 | a2\n 34947: a0 = a0 | a1\n 34950: jump @1413 if a0 == 0\n      : @1378 (gas: 10)\n 34954: a0 = s1 + 0x7ff\n 34958: a0 = a0 + 0x31\n 34961: u64 [a0 + 296] = 0\n 34965: u64 [a0 + 288] = 0\n 34969: u64 [a0 + 280] = 0\n 34973: u64 [a0 + 272] = 0\n 34977: a0 = s1 + 0x440\n 34981: a1 = s1 + 0x7ff\n 34985: a1 = a1 + 0x141\n 34989: ra = 1452, jump @11\n      : @1379 [@dyn 726] (gas: 25)\n 34996: a3 = s1 + 0x400\n 35000: a0 = u64 [a3 + 0x48]\n 35003: a1 = u64 [a3 + 0x50]\n 35006: a2 = u64 [a3 + 0x40]\n 35009: a0 = reverse a0\n 35011: a3 = a0 << 0x20\n 35014: a1 = reverse a1\n 35016: a1 = a1 >> 0x20\n 35019: a4 = a1 | a3\n 35022: a0 = a0 >> 0x20\n 35025: a1 = reverse a2\n 35027: a3 = 0x30160\n 35032: a2 = a1 << 0x20\n 35035: a0 = a0 | a2\n 35038: a1 = a1 >> 0x20\n 35041: u64 [s1 + 0x58] = a1\n 35044: u32 [0x30170] = a1\n 35049: u64 [s1 + 0x50] = a0\n 35052: u64 [0x30168] = a0\n 35057: u64 [s1 + 0x78] = a4\n 35060: u64 [0x30160] = a4\n 35065: u64 [s1 + 0x80] = a3\n 35069: i32 a0 = a3 + 0\n 35071: ecalli 5 // 'code_size'\n 35073: fallthrough\n      : @1380 (gas: 1)\n 35074: jump @1435 if a0 == 0\n      : @1381 (gas: 3)\n 35078: a0 = s1 + 0x420\n 35082: a1 = 0x40\n 35085: ra = 1454, jump @7\n      : @1382 [@dyn 727] (gas: 17)\n 35092: a4 = s1 + 0x400\n 35096: a2 = u64 [a4 + 0x38]\n 35099: a3 = u64 [a4 + 0x30]\n 35102: a0 = u64 [a4 + 0x28]\n 35105: a1 = u64 [a4 + 0x20]\n 35108: u64 [s1 + 0xb0] = a0\n 35112: u64 [s1 + 0x90] = a2\n 35116: a0 = a0 | a2\n 35119: u64 [s1 + 0xb8] = a1\n 35123: a1 = a1 | a3\n 35126: a1 = a1 | a0\n 35129: a1 = a1 >> 0x20\n 35132: u64 [s1 + 0x88] = a3\n 35136: a0 = a0 | a3\n 35139: a0 = a0 << 0x20\n 35142: a0 = a0 | a1\n 35145: jump @1430 if a0 != 0\n      : @1383 (gas: 8)\n 35149: u64 [s1 + 1040] = 0\n 35153: u64 [s1 + 1032] = 0\n 35157: u64 [s1 + 1024] = 0\n 35161: a0 = 0xadc9772e00000000\n 35171: a1 = s1 + 0x400\n 35175: u64 [s1 + 0x418] = a0\n 35179: a0 = u64 [s1 + 0xb8]\n 35183: ra = 1456, jump @9\n      : @1384 [@dyn 728] (gas: 13)\n 35190: a0 = u64 [s1 + 0x90]\n 35194: a2 = u64 [s1 + 0x88]\n 35198: a2 = a2 | a0\n 35201: a0 = 0x100000000\n 35211: u64 [s1 + 0x40] = a0\n 35214: a0 = 0xfffffffc\n 35224: a1 = u64 [s1 + 0xb8]\n 35228: a0 = a1 <u a0\n 35231: a1 = u64 [s1 + 0xb0]\n 35235: a0 = 0 if a1 != 0\n 35237: u64 [s1 + 0x48] = a2\n 35240: a0 = 0 if a2 != 0\n 35242: jump @1430 if a0 == 0\n      : @1385 (gas: 12)\n 35246: a0 = u64 [s1 + 0xb8]\n 35250: i32 a0 = a0 + 0x4\n 35253: u64 [s1 + 1016] = 0\n 35257: a1 = u64 [s1 + 0xa8]\n 35261: a3 = s1 + 0x300\n 35265: u64 [a3 + 0xe0] = a1\n 35269: a1 = u64 [s1 + 0xa0]\n 35273: u64 [a3 + 0xe8] = a1\n 35277: a1 = s1 + 0x3e0\n 35281: a2 = u64 [s1 + 0x98]\n 35285: u64 [a3 + 0xf0] = a2\n 35289: ra = 1458, jump @9\n      : @1386 [@dyn 729] (gas: 9)\n 35296: a0 = u64 [s1 + 0x40]\n 35299: a0 = a0 + 0xffffffffffffffdc\n 35302: a1 = u64 [s1 + 0xb8]\n 35306: a0 = a1 <u a0\n 35309: a1 = u64 [s1 + 0xb0]\n 35313: a0 = 0 if a1 != 0\n 35315: a1 = u64 [s1 + 0x48]\n 35318: a0 = 0 if a1 != 0\n 35320: jump @1430 if a0 == 0\n      : @1387 (gas: 9)\n 35324: a0 = u64 [s1 + 0xb8]\n 35328: i32 a0 = a0 + 0x24\n 35331: u64 [s1 + 984] = 0\n 35335: u64 [s1 + 976] = 0\n 35339: u64 [s1 + 968] = 0\n 35343: a1 = s1 + 0x3c0\n 35347: a2 = u64 [s1 + 0x60]\n 35350: u64 [s1 + 0x3c0] = a2\n 35354: ra = 1460, jump @9\n      : @1388 [@dyn 730] (gas: 18)\n 35361: ecalli 11 // 'ref_time_left'\n 35363: a1 = u64 [s1 + 0x80]\n 35367: a0 = u64 [s1 + 0x50]\n 35370: u64 [a1 + 0x8] = a0\n 35373: a0 = u64 [s1 + 0x78]\n 35376: u64 [a1] = a0\n 35378: a0 = u64 [s1 + 0x58]\n 35381: u32 [a1 + 0x10] = a0\n 35384: a0 = s1 + 0x7ff\n 35388: a0 = a0 + 0x31\n 35391: u64 [a0 + 328] = 0\n 35395: u64 [a0 + 320] = 0\n 35399: u64 [a0 + 312] = 0\n 35403: a1 = u64 [s1 + 0x60]\n 35406: u64 [a0 + 0x130] = a1\n 35410: a1 = 0x44\n 35413: a0 = u64 [s1 + 0xb8]\n 35417: ra = 1462, jump @20\n      : @1389 [@dyn 731] (gas: 4)\n 35424: u64 [s1 + 0x78] = a0\n 35427: a0 = u64 [s1 + 0xb8]\n 35431: a1 = 0\n 35433: ra = 1464, jump @20\n      : @1390 [@dyn 732] (gas: 37)\n 35440: a2 = s1 + 0x7ff\n 35444: a2 = a2 + 0x31\n 35447: u32 [a2 + 336] = 0\n 35451: a3 = a2 + 0x100\n 35455: u64 [a3 + 136] = 0xffffffffffffffff\n 35460: u64 [a3 + 128] = 0xffffffffffffffff\n 35465: u64 [a3 + 120] = 0xffffffffffffffff\n 35469: u64 [a3 + 112] = 0xffffffffffffffff\n 35473: a1 = u64 [s1 + 0x80]\n 35477: a1 = a1 << 0x20\n 35480: a1 = a1 >> 0x20\n 35483: a2 = 0x800000000\n 35493: t0 = a1 | a2\n 35496: a1 = s1 + 0x7ff\n 35500: a1 = a1 + 0x161\n 35504: a1 = a1 << 0x20\n 35507: a1 = a1 >> 0x20\n 35510: a2 = s1 + 0x7ff\n 35514: a2 = a2 + 0x1a1\n 35518: a2 = a2 << 0x20\n 35521: a3 = a2 | a1\n 35524: a1 = u64 [s1 + 0x78]\n 35527: a1 = a1 << 0x20\n 35530: a1 = a1 >> 0x20\n 35533: a2 = 0x4400000000\n 35543: a4 = a1 | a2\n 35546: a0 = a0 << 0x20\n 35549: a0 = a0 >> 0x20\n 35552: a1 = s1 + 0x7ff\n 35556: a1 = a1 + 0x181\n 35560: a1 = a1 << 0x20\n 35563: a5 = a1 | a0\n 35566: a1 = 0xffffffffffffffff\n 35569: a2 = 0xffffffffffffffff\n 35572: a0 = t0\n 35574: ecalli 0 // 'call'\n 35575: fallthrough\n      : @1391 (gas: 1)\n 35576: jump @1421 if a0 != 0\n      : @1392 (gas: 16)\n 35580: u64 [s1 + 888] = 0\n 35584: u64 [s1 + 880] = 0\n 35588: u64 [s1 + 872] = 0\n 35592: u64 [s1 + 864] = 0\n 35596: a0 = u64 [s1 + 0xb8]\n 35600: a3 = s1 + 0x300\n 35604: u64 [a3 + 0x80] = a0\n 35608: a0 = u64 [s1 + 0xb0]\n 35612: u64 [a3 + 0x88] = a0\n 35616: a0 = u64 [s1 + 0x88]\n 35620: u64 [a3 + 0x90] = a0\n 35624: a0 = s1 + 0x380\n 35628: a1 = s1 + 0x360\n 35632: a2 = u64 [s1 + 0x90]\n 35636: u64 [a3 + 0x98] = a2\n 35640: ra = 1466, jump @1246\n      : @1393 [@dyn 733] (gas: 1)\n 35646: jump @1415\n      : @1394 (gas: 1)\n 35649: ra = 1468, jump @0\n      : @1395 [@dyn 734] (gas: 63)\n 35656: a1 = u64 [0x30180]\n 35661: u64 [s1 + 0x90] = a1\n 35665: a1 = u64 [0x30190]\n 35670: u64 [s1 + 0x88] = a1\n 35674: a0 = u64 [0x30188]\n 35679: u64 [s1 + 0x80] = a0\n 35683: ecalli 11 // 'ref_time_left'\n 35685: a1 = u64 [s1 + 0x80]\n 35689: a1 = reverse a1\n 35691: a2 = a1 << 0x20\n 35694: a3 = u64 [s1 + 0x88]\n 35698: a3 = reverse a3\n 35700: a3 = a3 >> 0x20\n 35703: a2 = a2 | a3\n 35706: a3 = a1 >> 0x20\n 35709: a1 = u64 [s1 + 0x90]\n 35713: a4 = reverse a1\n 35715: a1 = 0x30160\n 35720: a5 = a4 << 0x20\n 35723: a3 = a3 | a5\n 35726: a4 = a4 >> 0x20\n 35729: u32 [0x30170] = a4\n 35734: u64 [0x30168] = a3\n 35739: u64 [0x30160] = a2\n 35744: a3 = s1 + 0x7ff\n 35748: a3 = a3 + 0x31\n 35751: u64 [a3 + 104] = 0\n 35754: u64 [a3 + 96] = 0\n 35757: u64 [a3 + 88] = 0\n 35760: a2 = u64 [s1 + 0x60]\n 35763: u64 [a3 + 0x50] = a2\n 35766: u32 [a3 + 112] = 0\n 35769: a0 = a0 >u 0x8fc\n 35773: a2 = -a0\n 35775: u64 [a3 + 0xa8] = a2\n 35779: u64 [a3 + 0xa0] = a2\n 35783: u64 [a3 + 0x98] = a2\n 35787: u64 [a3 + 0x90] = a2\n 35791: a1 = a1 << 0x20\n 35794: a1 = a1 >> 0x20\n 35797: a0 = a0 << 0x23\n 35800: a0 = a0 | a1\n 35803: a1 = s1 + 0x7ff\n 35807: a1 = a1 + 0x81\n 35811: a1 = a1 << 0x20\n 35814: a1 = a1 >> 0x20\n 35817: a2 = s1 + 0x7ff\n 35821: a2 = a2 + 0xc1\n 35825: a2 = a2 << 0x20\n 35828: a3 = a2 | a1\n 35831: a4 = u64 [s1 + 0x30]\n 35834: a4 = a4 << 0x20\n 35837: a4 = a4 >> 0x20\n 35840: a1 = s1 + 0x7ff\n 35844: a1 = a1 + 0xa1\n 35848: a1 = a1 << 0x20\n 35851: a5 = a1 | a4\n 35854: a1 = 0xffffffffffffffff\n 35857: a2 = 0xffffffffffffffff\n 35860: ecalli 0 // 'call'\n 35861: u64 [s1 + 0x90] = a0\n 35865: ecalli 13 // 'return_data_size'\n 35867: fallthrough\n      : @1396 (gas: 1)\n 35868: jump @1407 if a0 == 0\n      : @1397 (gas: 5)\n 35872: ecalli 13 // 'return_data_size'\n 35874: u64 [s1 + 0x58] = a0\n 35877: a0 = s1 + 0x260\n 35881: a1 = 0x40\n 35884: ra = 1470, jump @7\n      : @1398 [@dyn 735] (gas: 29)\n 35891: a5 = u64 [s1 + 0x278]\n 35895: u64 [s1 + 0x78] = a5\n 35898: t0 = u64 [s1 + 0x270]\n 35902: u64 [s1 + 0x50] = t0\n 35905: t1 = u64 [s1 + 0x268]\n 35909: u64 [s1 + 0x80] = t1\n 35913: t2 = u64 [s1 + 0x260]\n 35917: u64 [s1 + 0x88] = t2\n 35921: a1 = u64 [s1 + 0x58]\n 35924: a0 = a1 + 0x1f\n 35927: a1 = a0 <u a1\n 35930: a0 = a0 & 0xffffffffffffffe0\n 35933: a2 = a0 + 0x20\n 35936: a0 = a2 <u a0\n 35939: a3 = a1 + a0\n 35942: a4 = a3 <u a1\n 35945: a4 = a0 if a0 == 0\n 35948: u64 [s1 + 568] = 0\n 35952: u64 [s1 + 0x220] = a2\n 35956: a2 = s1 + 0x200\n 35960: u64 [a2 + 0x58] = a5\n 35963: u64 [s1 + 0x250] = t0\n 35967: u64 [s1 + 0x248] = t1\n 35971: u64 [s1 + 0x240] = t2\n 35975: u64 [a2 + 0x28] = a3\n 35978: a0 = s1 + 0x240\n 35982: a1 = s1 + 0x220\n 35986: u64 [a2 + 0x30] = a4\n 35989: ra = 1472, jump @1246\n      : @1399 [@dyn 736] (gas: 12)\n 35995: a0 = u64 [s1 + 0x88]\n 35999: a1 = u64 [s1 + 0x78]\n 36002: a2 = u64 [s1 + 0x80]\n 36006: a2 = a2 | a1\n 36009: a3 = u64 [s1 + 0x50]\n 36012: a1 = a0 | a3\n 36015: a1 = a1 | a2\n 36018: a1 = a1 >> 0x20\n 36021: a2 = a2 | a3\n 36024: a2 = a2 << 0x20\n 36027: a1 = a1 | a2\n 36030: jump @1430 if a1 != 0\n      : @1400 (gas: 7)\n 36034: u64 [s1 + 536] = 0\n 36038: u64 [s1 + 528] = 0\n 36042: u64 [s1 + 520] = 0\n 36046: a1 = s1 + 0x200\n 36050: a2 = u64 [s1 + 0x58]\n 36053: u64 [s1 + 0x200] = a2\n 36057: ra = 1474, jump @9\n      : @1401 [@dyn 737] (gas: 2)\n 36064: ecalli 13 // 'return_data_size'\n 36066: fallthrough\n      : @1402 (gas: 10)\n 36067: a3 = u64 [s1 + 0x88]\n 36071: a1 = u64 [s1 + 0x78]\n 36074: a2 = u64 [s1 + 0x50]\n 36077: a1 = a1 | a2\n 36080: a2 = 0xffffffe0\n 36090: a2 = a3 <u a2\n 36093: a4 = u64 [s1 + 0x80]\n 36097: a2 = 0 if a4 != 0\n 36099: a2 = 0 if a1 != 0\n 36101: jump @1430 if a2 == 0\n      : @1403 (gas: 3)\n 36105: a1 = a0\n 36107: a0 = a0 >> 0x20\n 36110: jump @1430 if a0 != 0\n      : @1404 (gas: 7)\n 36114: i32 a0 = a3 + 0x20\n 36117: a2 = a1\n 36119: u64 [s1 + 0x80] = a1\n 36123: i32 a1 = a1 + 0\n 36125: u64 [s1 + 0x88] = a1\n 36129: a1 = a2\n 36131: ra = 1476, jump @20\n      : @1405 [@dyn 738] (gas: 10)\n 36138: a1 = s1 + 0x7ff\n 36142: a1 = a1 + 0x31\n 36145: a2 = u64 [s1 + 0x80]\n 36149: u32 [a1 + 0xb0] = a2\n 36153: i32 a0 = a0 + 0\n 36155: a1 = s1 + 0x1000\n 36159: i32 a1 = a1 + 0xfffffffffffff8e0\n 36163: a2 = 0\n 36165: ecalli 12 // 'return_data_copy'\n 36167: fallthrough\n      : @1406 (gas: 5)\n 36168: a0 = s1 + 0x7ff\n 36172: a0 = a0 + 0x31\n 36175: a0 = i32 [a0 + 0xb0]\n 36179: a1 = u64 [s1 + 0x88]\n 36183: jump @1430 if a0 <u a1\n      : @1407 (gas: 2)\n 36187: a0 = u64 [s1 + 0x90]\n 36191: jump @1436 if a0 != 0\n      : @1408 (gas: 3)\n 36195: a0 = s1 + 0x1c0\n 36199: a1 = 0x40\n 36202: ra = 1478, jump @7\n      : @1409 [@dyn 739] (gas: 6)\n 36209: a4 = s1 + 0x100\n 36213: a0 = u64 [a4 + 0xd8]\n 36217: a1 = u64 [a4 + 0xd0]\n 36221: a2 = u64 [a4 + 0xc8]\n 36225: a3 = u64 [a4 + 0xc0]\n 36229: t0 = 1480, jump @1459\n      : @1410 [@dyn 740] (gas: 1)\n 36235: jump @1430 if a0 != 0\n      : @1411 (gas: 9)\n 36239: u64 [s1 + 440] = 0\n 36243: u64 [s1 + 432] = 0\n 36247: u64 [s1 + 424] = 0\n 36251: a1 = s1 + 0x1a0\n 36255: a0 = u64 [s1 + 0x60]\n 36258: u64 [s1 + 0x1a0] = a0\n 36262: a0 = a3\n 36264: u64 [s1 + 0xb8] = a3\n 36268: ra = 1482, jump @9\n      : @1412 [@dyn 741] (gas: 33)\n 36275: u64 [s1 + 312] = 0\n 36279: u64 [s1 + 304] = 0\n 36283: u64 [s1 + 296] = 0\n 36287: a0 = u64 [s1 + 0x68]\n 36290: u64 [s1 + 0x120] = a0\n 36294: u64 [s1 + 344] = 0\n 36298: u64 [s1 + 336] = 0\n 36302: u64 [s1 + 328] = 0\n 36306: a0 = u64 [s1 + 0x70]\n 36309: u64 [s1 + 0x140] = a0\n 36313: u64 [s1 + 376] = 0\n 36317: a0 = u64 [s1 + 0x98]\n 36321: u64 [s1 + 0x170] = a0\n 36325: a0 = u64 [s1 + 0xa0]\n 36329: u64 [s1 + 0x168] = a0\n 36333: a0 = u64 [0x20128]\n 36338: a1 = u64 [0x20130]\n 36343: a2 = u64 [0x20138]\n 36348: a3 = u64 [s1 + 0xa8]\n 36352: u64 [s1 + 0x160] = a3\n 36356: u64 [s1 + 0x198] = a0\n 36360: u64 [s1 + 0x190] = a1\n 36364: u64 [s1 + 0x188] = a2\n 36368: a0 = u64 [0x20140]\n 36373: a1 = 0x20\n 36376: a2 = s1 + 0x180\n 36380: a3 = s1 + 0x160\n 36384: a4 = s1 + 0x140\n 36388: a5 = s1 + 0x120\n 36392: u64 [s1 + 0x180] = a0\n 36396: a0 = u64 [s1 + 0xb8]\n 36400: ra = 0x5d6\n 36404: jump @17\n      : @1413 (gas: 23)\n 36408: a0 = sp + 0xffffffffffffffe0\n 36411: a5 = a0 & 0xffffffffffffffe0\n 36414: sp = a5\n 36416: a1 = u64 [s1 + 0x10]\n 36419: a0 = a1 + 0x2\n 36422: a1 = a0 <u a1\n 36425: a3 = u64 [s1 + 0x18]\n 36428: a2 = a3 + a1\n 36431: a3 = a2 <u a3\n 36434: a3 = a1 if a1 == 0\n 36437: a1 = u64 [s1 + 0x20]\n 36440: a3 = a3 + a1\n 36443: a1 = a3 <u a1\n 36446: a4 = u64 [s1 + 0x28]\n 36449: a4 = a4 + a1\n 36452: a1 = a5\n 36454: u64 [s1 + 0xb8] = a5\n 36458: u64 [a5 + 0x8] = a2\n 36461: u64 [a5] = a0\n 36463: u64 [a5 + 0x10] = a3\n 36466: u64 [a5 + 0x18] = a4\n 36469: a0 = s1 + 0x340\n 36473: ra = 1484, jump @11\n      : @1414 [@dyn 742] (gas: 24)\n 36480: a4 = s1 + 0x300\n 36484: a0 = u64 [a4 + 0x40]\n 36487: a1 = u64 [a4 + 0x58]\n 36490: a2 = u64 [a4 + 0x48]\n 36493: a3 = u64 [a4 + 0x50]\n 36496: a4 = u64 [s1 + 0x60]\n 36499: a4 = a4 + a0\n 36502: a0 = a4 <u a0\n 36505: a5 = a2 + a0\n 36508: a2 = a5 <u a2\n 36511: a2 = a0 if a0 == 0\n 36514: a2 = a2 + a3\n 36517: a0 = a2 <u a3\n 36520: a0 = a0 + a1\n 36523: a1 = s1 + 0x7ff\n 36527: a1 = a1 + 0x31\n 36530: u64 [a1 + 0xf0] = a4\n 36534: u64 [a1 + 0xf8] = a5\n 36538: u64 [a1 + 0x100] = a2\n 36542: u64 [a1 + 0x108] = a0\n 36546: a1 = s1 + 0x7ff\n 36550: a1 = a1 + 0x121\n 36554: a0 = u64 [s1 + 0xb8]\n 36558: ra = 1486, jump @12\n      : @1415 [@dyn 743] (gas: 3)\n 36565: a0 = s1 + 0x320\n 36569: a1 = 0x40\n 36572: ra = 1488, jump @7\n      : @1416 [@dyn 744] (gas: 6)\n 36579: a4 = s1 + 0x300\n 36583: a0 = u64 [a4 + 0x38]\n 36586: a1 = u64 [a4 + 0x30]\n 36589: a2 = u64 [a4 + 0x28]\n 36592: a3 = u64 [a4 + 0x20]\n 36595: t0 = 1490, jump @1459\n      : @1417 [@dyn 745] (gas: 1)\n 36601: jump @1430 if a0 != 0\n      : @1418 (gas: 9)\n 36605: u64 [s1 + 792] = 0\n 36609: u64 [s1 + 784] = 0\n 36613: u64 [s1 + 776] = 0\n 36617: a1 = s1 + 0x300\n 36621: a0 = u64 [s1 + 0x60]\n 36624: u64 [s1 + 0x300] = a0\n 36628: a0 = a3\n 36630: u64 [s1 + 0xb8] = a3\n 36634: ra = 1492, jump @9\n      : @1419 [@dyn 746] (gas: 32)\n 36641: u64 [s1 + 664] = 0\n 36645: u64 [s1 + 656] = 0\n 36649: u64 [s1 + 648] = 0\n 36653: a0 = u64 [s1 + 0x68]\n 36656: u64 [s1 + 0x280] = a0\n 36660: u64 [s1 + 696] = 0\n 36664: u64 [s1 + 688] = 0\n 36668: u64 [s1 + 680] = 0\n 36672: a0 = u64 [s1 + 0x70]\n 36675: u64 [s1 + 0x2a0] = a0\n 36679: u64 [s1 + 728] = 0\n 36683: a0 = u64 [s1 + 0x98]\n 36687: u64 [s1 + 0x2d0] = a0\n 36691: a0 = u64 [s1 + 0xa0]\n 36695: u64 [s1 + 0x2c8] = a0\n 36699: a0 = u64 [0x20108]\n 36704: a1 = u64 [0x20110]\n 36709: a2 = u64 [0x20118]\n 36714: a3 = u64 [s1 + 0xa8]\n 36718: u64 [s1 + 0x2c0] = a3\n 36722: u64 [s1 + 0x2f8] = a0\n 36726: u64 [s1 + 0x2f0] = a1\n 36730: u64 [s1 + 0x2e8] = a2\n 36734: a0 = u64 [0x20120]\n 36739: a1 = 0x20\n 36742: a2 = s1 + 0x2e0\n 36746: a3 = s1 + 0x2c0\n 36750: a4 = s1 + 0x2a0\n 36754: a5 = s1 + 0x280\n 36758: u64 [s1 + 0x2e0] = a0\n 36762: a0 = u64 [s1 + 0xb8]\n 36766: ra = 1494, jump @17\n      : @1420 [@dyn 747] (gas: 9)\n 36773: sp = s0 + 0xfffffffffffff800\n 36777: sp = sp + 0xfffffffffffffe00\n 36781: sp = sp + 0x208\n 36785: a0 = sp + 0x700\n 36789: ra = u64 [a0 + 0xf0]\n 36793: s0 = u64 [a0 + 0xe8]\n 36797: s1 = u64 [a0 + 0xe0]\n 36801: sp = sp + 0x7f8\n 36805: ret\n      : @1421 (gas: 3)\n 36807: a0 = s1 + 0x3a0\n 36811: a1 = 0x40\n 36814: ra = 1496, jump @7\n      : @1422 [@dyn 748] (gas: 11)\n 36821: a1 = s1 + 0x300\n 36825: a0 = u64 [a1 + 0xb8]\n 36829: u64 [s1 + 0xb0] = a0\n 36833: a0 = u64 [a1 + 0xb0]\n 36837: u64 [s1 + 0xa8] = a0\n 36841: a0 = u64 [a1 + 0xa8]\n 36845: u64 [s1 + 0xa0] = a0\n 36849: a0 = u64 [a1 + 0xa0]\n 36853: u64 [s1 + 0xb8] = a0\n 36857: ecalli 13 // 'return_data_size'\n 36859: fallthrough\n      : @1423 (gas: 12)\n 36860: a1 = u64 [s1 + 0xb0]\n 36864: a2 = u64 [s1 + 0xa0]\n 36868: a1 = a1 | a2\n 36871: a3 = u64 [s1 + 0xa8]\n 36875: a2 = u64 [s1 + 0xb8]\n 36879: a2 = a2 | a3\n 36882: a2 = a2 | a1\n 36885: a2 = a2 >> 0x20\n 36888: a1 = a1 | a3\n 36891: a1 = a1 << 0x20\n 36894: a1 = a1 | a2\n 36897: jump @1430 if a1 != 0\n      : @1424 (gas: 2)\n 36900: a1 = a0 >> 0x20\n 36903: jump @1430 if a1 != 0\n      : @1425 (gas: 6)\n 36906: a1 = a0\n 36908: u64 [s1 + 0xa8] = a0\n 36912: i32 a0 = a0 + 0\n 36914: u64 [s1 + 0xb0] = a0\n 36918: a0 = u64 [s1 + 0xb8]\n 36922: ra = 1498, jump @20\n      : @1426 [@dyn 749] (gas: 10)\n 36929: a1 = s1 + 0x7ff\n 36933: a1 = a1 + 0x31\n 36936: a2 = u64 [s1 + 0xa8]\n 36940: u32 [a1 + 0x190] = a2\n 36944: i32 a0 = a0 + 0\n 36946: a1 = s1 + 0x1000\n 36950: i32 a1 = a1 + 0xfffffffffffff9c0\n 36954: a2 = 0\n 36956: ecalli 12 // 'return_data_copy'\n 36958: fallthrough\n      : @1427 (gas: 5)\n 36959: a0 = s1 + 0x7ff\n 36963: a0 = a0 + 0x31\n 36966: a0 = i32 [a0 + 0x190]\n 36970: a1 = u64 [s1 + 0xb0]\n 36974: jump @1430 if a0 <u a1\n      : @1428 (gas: 2)\n 36977: ecalli 13 // 'return_data_size'\n 36979: fallthrough\n      : @1429 (gas: 3)\n 36980: a1 = a0\n 36982: a0 = a0 >> 0x20\n 36985: jump @1440 if a0 == 0\n      : @1430 (gas: 1)\n 36989: trap\n      : @1431 (gas: 9)\n 36990: u64 [s1 + 208] = 0\n 36994: u64 [s1 + 200] = 0\n 36998: u64 [s1 + 192] = 0\n 37002: a0 = 0xa7a9536d00000000\n 37012: a1 = s1 + 0xc0\n 37016: u64 [s1 + 0xd8] = a0\n 37020: a0 = 0\n 37022: ra = 0x5dc\n 37026: jump @9\n      : @1432 (gas: 9)\n 37030: u64 [s1 + 240] = 0\n 37034: u64 [s1 + 232] = 0\n 37038: u64 [s1 + 224] = 0\n 37042: a0 = 0xafa4e2b600000000\n 37052: a1 = s1 + 0xe0\n 37056: u64 [s1 + 0xf8] = a0\n 37060: a0 = 0\n 37062: ra = 0x5dc\n 37066: jump @9\n      : @1433 (gas: 9)\n 37070: u64 [s1 + 1584] = 0\n 37074: u64 [s1 + 1576] = 0\n 37078: u64 [s1 + 1568] = 0\n 37082: a0 = 0x560ff90000000000\n 37092: a1 = s1 + 0x620\n 37096: u64 [s1 + 0x638] = a0\n 37100: a0 = 0\n 37102: ra = 0x5dc\n 37106: jump @9\n      : @1434 (gas: 9)\n 37110: u64 [s1 + 272] = 0\n 37114: u64 [s1 + 264] = 0\n 37118: u64 [s1 + 256] = 0\n 37122: a0 = 0xf4d678b800000000\n 37132: a1 = s1 + 0x100\n 37136: u64 [s1 + 0x118] = a0\n 37140: a0 = 0\n 37142: ra = 0x5dc\n 37146: jump @9\n      : @1435 (gas: 5)\n 37150: a0 = 0x1\n 37153: a1 = u64 [s1 + 0xb8]\n 37157: a2 = 0\n 37159: ecalli 14 // 'seal_return'\n 37161: fallthrough\n      : @1436 (gas: 8)\n 37162: u64 [s1 + 496] = 0\n 37166: u64 [s1 + 488] = 0\n 37170: u64 [s1 + 480] = 0\n 37174: a0 = 0x90b8ec1800000000\n 37184: a1 = s1 + 0x1e0\n 37188: u64 [s1 + 0x1f8] = a0\n 37192: a0 = 0\n 37194: ra = 1500, jump @9\n      : @1437 [@dyn 750] (gas: 3)\n 37201: a0 = u64 [s1 + 0xb0]\n 37205: a0 = i32 [a0]\n 37207: jump @1439 if a0 >u 31\n      : @1438 (gas: 3)\n 37211: a1 = u64 [s1 + 0xb0]\n 37215: u32 [a1 + 0] = 0x20\n 37218: fallthrough\n      : @1439 (gas: 5)\n 37219: a0 = 0x1\n 37222: a2 = 0x4\n 37225: a1 = u64 [s1 + 0xb8]\n 37229: ecalli 14 // 'seal_return'\n 37231: fallthrough\n      : @1440 (gas: 3)\n 37232: a0 = u64 [s1 + 0xb8]\n 37236: u64 [s1 + 0xb0] = a1\n 37240: ra = 1502, jump @20\n      : @1441 [@dyn 751] (gas: 7)\n 37247: i32 a1 = a0 + 0\n 37249: a2 = i32 [s1 + 0xb0]\n 37253: a0 = 0x1\n 37256: ecalli 14 // 'seal_return'\n 37258: a0 = 0\n 37260: ra = 0x5e0\n 37264: jump @26\n      : @1442 [export #0: 'call'] (gas: 2)\n 37268: a0 = 0\n 37270: ra = 1504, jump @26\n      : @1443 [@dyn 752] [export #1: 'deploy'] (gas: 2)\n 37277: a0 = 0x1\n 37280: ra = 1506, jump @26\n      : @1444 [@dyn 753] (gas: 15)\n 37287: a0 = u64 [a2 + 0x8]\n 37290: a1 = i32 [a2 + 0x10]\n 37293: a2 = u64 [a2]\n 37295: a0 = reverse a0\n 37297: a3 = a0 << 0x20\n 37300: a1 = reverse a1\n 37302: a1 = a1 >> 0x20\n 37305: a3 = a3 | a1\n 37308: a0 = a0 >> 0x20\n 37311: a1 = reverse a2\n 37313: a2 = a1 << 0x20\n 37316: a0 = a0 | a2\n 37319: a1 = a1 >> 0x20\n 37322: a2 = s1 + 0x1078\n 37326: jump [t0]\n      : @1445 (gas: 16)\n 37328: a0 = u64 [a2 + 0x8]\n 37331: a1 = i32 [a2 + 0x10]\n 37334: a2 = u64 [a2]\n 37336: a0 = reverse a0\n 37338: a3 = a0 << 0x20\n 37341: a1 = reverse a1\n 37343: a1 = a1 >> 0x20\n 37346: a3 = a3 | a1\n 37349: a0 = a0 >> 0x20\n 37352: a1 = reverse a2\n 37354: a2 = a1 << 0x20\n 37357: a0 = a0 | a2\n 37360: a1 = a1 >> 0x20\n 37363: a2 = s1 + 0x7ff\n 37367: a2 = a2 + 0x79\n 37370: jump [t0]\n      : @1446 (gas: 15)\n 37372: a0 = u64 [a2 + 0x8]\n 37375: a1 = i32 [a2 + 0x10]\n 37378: a2 = u64 [a2]\n 37380: a0 = reverse a0\n 37382: a3 = a0 << 0x20\n 37385: a1 = reverse a1\n 37387: a1 = a1 >> 0x20\n 37390: a3 = a3 | a1\n 37393: a0 = a0 >> 0x20\n 37396: a1 = reverse a2\n 37398: a2 = a1 << 0x20\n 37401: a0 = a0 | a2\n 37404: a1 = a1 >> 0x20\n 37407: a2 = s1 + 0x1878\n 37411: jump [t0]\n      : @1447 (gas: 20)\n 37413: a3 = u64 [s1 + 0xa8]\n 37417: a0 = u64 [a3 + 0x18]\n 37420: a1 = u64 [a3 + 0x10]\n 37423: a2 = u64 [a3 + 0x8]\n 37426: a3 = u64 [a3]\n 37428: a0 = reverse a0\n 37430: u64 [s1 + 0xa0] = a0\n 37434: a0 = reverse a1\n 37436: u64 [s1 + 0x98] = a0\n 37440: a0 = reverse a2\n 37442: u64 [s1 + 0x90] = a0\n 37446: a0 = reverse a3\n 37448: u64 [s1 + 0x88] = a0\n 37452: a0 = sp + 0xffffffffffffffe0\n 37455: a0 = a0 & 0xffffffffffffffe0\n 37458: u64 [s1 + 0xa8] = a0\n 37462: sp = a0\n 37464: a0 = 0x1078\n 37468: a2 = s1 + a0\n 37471: jump [t0]\n      : @1448 (gas: 17)\n 37473: a0 = u64 [a3]\n 37475: a1 = u64 [a3 + 0x8]\n 37478: a2 = u64 [a3 + 0x10]\n 37481: a3 = u64 [a3 + 0x18]\n 37484: a0 = reverse a0\n 37486: a1 = reverse a1\n 37488: a2 = reverse a2\n 37490: a3 = reverse a3\n 37492: a3 = a3 + 0x1\n 37495: a4 = a3 <u 0x1\n 37498: a2 = a2 + a4\n 37501: a4 = a3 | a2\n 37504: a4 = a4 <u 0x1\n 37507: a4 = a4 + a1\n 37510: a1 = a4 <u a1\n 37513: a0 = a0 + a1\n 37516: jump [t0]\n      : @1449 (gas: 16)\n 37518: a2 = u64 [s1 + 0x80]\n 37522: a0 = u64 [a2 + 0x8]\n 37525: a1 = i32 [a2 + 0x10]\n 37528: a2 = u64 [a2]\n 37530: a0 = reverse a0\n 37532: a3 = a0 << 0x20\n 37535: a1 = reverse a1\n 37537: a1 = a1 >> 0x20\n 37540: a3 = a3 | a1\n 37543: a0 = a0 >> 0x20\n 37546: a1 = reverse a2\n 37548: a2 = a1 << 0x20\n 37551: a0 = a0 | a2\n 37554: a1 = a1 >> 0x20\n 37557: a2 = s1 + 0x2078\n 37561: jump [t0]\n      : @1450 (gas: 26)\n 37563: u64 [s1 + 0xc8] = a0\n 37567: a0 = ra - a3\n 37570: a0 = a0 <u a5\n 37573: a1 = ra <u a3\n 37576: a5 = u64 [s1 + 0x98]\n 37580: a4 = ra - a5\n 37583: a4 = a4 - a1\n 37586: a4 = a4 - a0\n 37589: ra = a4 >>a 0x3f\n 37592: a0 = u64 [s1 + 0x90]\n 37596: a0 = ra & a0\n 37599: a1 = u64 [s1 + 0xa0]\n 37603: t2 = a1 - a0\n 37606: a1 = a1 <u a0\n 37609: t1 = a2 - a1\n 37612: a1 = 0 if a2 != 0\n 37614: a0 = a3 - a1\n 37617: u64 [s1 + 0xa8] = a0\n 37621: a1 = a3 <u a1\n 37624: a1 = a5 - a1\n 37627: a3 = u64 [s1 + 0xf8]\n 37631: a5 = u64 [s1 + 0xf0]\n 37635: a2 = a3 | a5\n 37638: a2 = a2 <u 0x1\n 37641: a4 = u64 [s1 + 0xe0]\n 37645: jump [t0]\n      : @1451 (gas: 18)\n 37647: a3 = u64 [s1 + 0xe0]\n 37651: a0 = u64 [a3 + 0x18]\n 37654: a1 = u64 [a3 + 0x10]\n 37657: a2 = u64 [a3 + 0x8]\n 37660: a3 = u64 [a3]\n 37662: a0 = reverse a0\n 37664: u64 [s1 + 0xd8] = a0\n 37668: a0 = reverse a1\n 37670: u64 [s1 + 0xd0] = a0\n 37674: a0 = reverse a2\n 37676: u64 [s1 + 0xc8] = a0\n 37680: a0 = reverse a3\n 37682: u64 [s1 + 0xc0] = a0\n 37686: a0 = sp + 0xffffffffffffffe0\n 37689: a0 = a0 & 0xffffffffffffffe0\n 37692: u64 [s1 + 0xe0] = a0\n 37696: sp = a0\n 37698: jump [t0]\n      : @1452 (gas: 18)\n 37700: a3 = u64 [s1 + 0x60]\n 37703: a0 = u64 [a3 + 0x18]\n 37706: a1 = u64 [a3 + 0x10]\n 37709: a2 = u64 [a3 + 0x8]\n 37712: a3 = u64 [a3]\n 37714: a0 = reverse a0\n 37716: u64 [s1 + 0x58] = a0\n 37719: a0 = reverse a1\n 37721: u64 [s1 + 0x50] = a0\n 37724: a0 = reverse a2\n 37726: u64 [s1 + 0x48] = a0\n 37729: a0 = reverse a3\n 37731: u64 [s1 + 0x40] = a0\n 37734: a0 = sp + 0xffffffffffffffe0\n 37737: a0 = a0 & 0xffffffffffffffe0\n 37740: u64 [s1 + 0x60] = a0\n 37743: sp = a0\n 37745: jump [t0]\n      : @1453 (gas: 14)\n 37747: a0 = u64 [a2 + 0x8]\n 37750: a1 = i32 [a2 + 0x10]\n 37753: a2 = u64 [a2]\n 37755: a3 = reverse a0\n 37757: a0 = a3 << 0x20\n 37760: a1 = reverse a1\n 37762: a1 = a1 >> 0x20\n 37765: a0 = a0 | a1\n 37768: a3 = a3 >> 0x20\n 37771: a2 = reverse a2\n 37773: a1 = a2 << 0x20\n 37776: a1 = a1 | a3\n 37779: a2 = a2 >> 0x20\n 37782: jump [t0]\n      : @1454 (gas: 15)\n 37784: a3 = u64 [s1 + 0xf8]\n 37788: a0 = u64 [a3 + 0x18]\n 37791: a1 = u64 [a3 + 0x10]\n 37794: a2 = u64 [a3 + 0x8]\n 37797: a3 = u64 [a3]\n 37799: a0 = reverse a0\n 37801: a4 = reverse a1\n 37803: a2 = reverse a2\n 37805: a3 = reverse a3\n 37807: a1 = u64 [s1 + 0xe0]\n 37811: u64 [a1 + 0x18] = a3\n 37814: u64 [a1 + 0x10] = a2\n 37817: u64 [a1 + 0x8] = a4\n 37820: u64 [a1] = a0\n 37822: jump [t0]\n      : @1455 (gas: 15)\n 37824: a0 = u64 [a3 + 0x18]\n 37827: a1 = u64 [a3 + 0x10]\n 37830: a2 = u64 [a3 + 0x8]\n 37833: a3 = u64 [a3]\n 37835: a0 = reverse a0\n 37837: a4 = reverse a1\n 37839: a2 = reverse a2\n 37841: a3 = reverse a3\n 37843: a1 = u64 [s1 + 0xa8]\n 37847: u64 [a1 + 0x18] = a3\n 37850: u64 [a1 + 0x10] = a2\n 37853: u64 [a1 + 0x8] = a4\n 37856: u64 [a1] = a0\n 37858: a0 = 0x1000\n 37862: jump [t0]\n      : @1456 (gas: 24)\n 37864: a0 = a1 if a2 == 0\n 37867: a2 = u64 [s1 + 0xb0]\n 37871: a3 = a2\n 37873: a1 = a2\n 37875: a2 = u64 [s1 + 0xc0]\n 37879: a3 = a0 if a2 != 0\n 37882: u64 [s1 + 0xc8] = a3\n 37886: a0 = u64 [s1 + 0xa8]\n 37890: a3 = u64 [s1 + 0x90]\n 37894: a0 = a0 | a3\n 37897: a3 = u64 [s1 + 0x80]\n 37901: a0 = a3 if a5 == 0\n 37904: a4 = u64 [s1 + 0xb8]\n 37908: a3 = a4\n 37910: a3 = a0 if a2 != 0\n 37913: u64 [s1 + 0xc0] = a3\n 37917: a0 = u64 [s1 + 0xd0]\n 37921: a0 = 0 if a5 == 0\n 37923: u64 [s1 + 0xd0] = a0\n 37927: u64 [s1 + 144] = 0x15180\n 37934: a0 = u64 [s1 + 0xf8]\n 37938: a2 = a0 + 0xffffffffffffff80\n 37941: a0 = a4\n 37943: jump [t0]\n      : @1457 (gas: 15)\n 37945: a3 = u64 [s1 + 0x58]\n 37948: a0 = u64 [a3 + 0x18]\n 37951: a1 = u64 [a3 + 0x10]\n 37954: a2 = u64 [a3 + 0x8]\n 37957: a3 = u64 [a3]\n 37959: a0 = reverse a0\n 37961: a4 = reverse a1\n 37963: a2 = reverse a2\n 37965: a3 = reverse a3\n 37967: a1 = u64 [s1 + 0x60]\n 37970: u64 [a1 + 0x18] = a3\n 37973: u64 [a1 + 0x10] = a2\n 37976: u64 [a1 + 0x8] = a4\n 37979: u64 [a1] = a0\n 37981: jump [t0]\n      : @1458 (gas: 9)\n 37983: a1 = a1 <u 0x20\n 37986: a1 = a1 ^ 0x1\n 37989: a1 = a0 if a3 != 0\n 37992: a0 = a3 >u 0\n 37994: a2 = a3 >u 0\n 37996: a2 = a0 if a3 == 0\n 37999: a0 = a3 | a3\n 38002: a2 = a1 if a0 == 0\n 38005: jump [t0]\n      : @1459 (gas: 8)\n 38007: a0 = a0 | a2\n 38010: a2 = a3 | a1\n 38013: a2 = a2 | a0\n 38016: a2 = a2 >> 0x20\n 38019: a0 = a0 | a1\n 38022: a0 = a0 << 0x20\n 38025: a0 = a0 | a2\n 38028: jump [t0]\n      : @1460 (gas: 18)\n 38030: a1 = a2 + 0x1\n 38033: u64 [s1 + 0xf8] = a1\n 38037: a0 = a1 <u 0x1\n 38040: a0 = a0 + a3\n 38043: u64 [s1 + 0xf0] = a0\n 38047: a0 = a0 | a1\n 38050: a0 = a0 <u 0x1\n 38053: a0 = a0 + t1\n 38056: u64 [s1 + 0xe0] = a0\n 38060: a0 = a0 <u t1\n 38063: a0 = a0 + ra\n 38066: u64 [s1 + 0xe8] = a0\n 38070: a1 = 0xff - a2\n 38074: u64 [s1 + 0xc0] = a1\n 38078: a2 = 0x80 - a1\n 38082: a0 = u64 [s1 + 0xa0]\n 38086: a1 = u64 [s1 + 0x98]\n 38090: jump [t0]\n      : @1461 (gas: 17)\n 38092: a0 = u64 [a3]\n 38094: a1 = u64 [a3 + 0x8]\n 38097: a2 = u64 [a3 + 0x10]\n 38100: a3 = u64 [a3 + 0x18]\n 38103: a0 = reverse a0\n 38105: a1 = reverse a1\n 38107: a2 = reverse a2\n 38109: a3 = reverse a3\n 38111: a4 = a3 + 0x3\n 38114: a3 = a4 <u a3\n 38117: a5 = a2 + a3\n 38120: a2 = a5 <u a2\n 38123: a2 = a3 if a3 == 0\n 38126: a2 = a2 + a1\n 38129: a1 = a2 <u a1\n 38132: a0 = a0 + a1\n 38135: jump [t0]\n      : @1462 (gas: 12)\n 38137: a1 = u64 [s1 + 0xf0]\n 38141: a2 = u64 [s1 + 0xe0]\n 38145: a1 = a1 | a2\n 38148: a3 = u64 [s1 + 0xe8]\n 38152: a2 = u64 [s1 + 0xf8]\n 38156: a2 = a2 | a3\n 38159: a2 = a2 | a1\n 38162: a2 = a2 >> 0x20\n 38165: a1 = a1 | a3\n 38168: a1 = a1 << 0x20\n 38171: a1 = a1 | a2\n 38174: jump [t0]\n      : @1463 (gas: 17)\n 38176: a0 = u64 [a2 + 0x8]\n 38179: a1 = i32 [a2 + 0x10]\n 38182: a2 = u64 [a2]\n 38184: a0 = reverse a0\n 38186: a3 = a0 << 0x20\n 38189: a1 = reverse a1\n 38191: a1 = a1 >> 0x20\n 38194: a3 = a3 | a1\n 38197: a0 = a0 >> 0x20\n 38200: a1 = reverse a2\n 38202: a2 = a1 << 0x20\n 38205: a2 = a2 | a0\n 38208: a1 = a1 >> 0x20\n 38211: i32 a0 = a4 + 0x4\n 38214: a4 = 0x1878\n 38218: a5 = s1 + a4\n 38221: jump [t0]\n      : @1464 (gas: 8)\n 38223: a0 = u64 [a2 + 0x8]\n 38226: a1 = i32 [a2 + 0x10]\n 38229: a2 = u64 [a2]\n 38231: a3 = reverse a0\n 38233: a0 = a3 << 0x20\n 38236: a1 = reverse a1\n 38238: a1 = a1 >> 0x20\n 38241: jump [t0]\n      : @1465 (gas: 5)\n 38243: sp = a0\n 38245: i32 a2 = a0 + 0\n 38247: a1 = 0x40\n 38250: a0 = u64 [s1 + 0xe8]\n 38254: jump [t0]\n      : @1466 (gas: 5)\n 38256: sp = a0\n 38258: i32 a2 = a0 + 0\n 38260: a1 = 0x40\n 38263: a0 = u64 [s1 + 0xb8]\n 38267: jump [t0]\n      : @1467 (gas: 15)\n 38269: t2 = u64 [s1 + 0xa0]\n 38273: t1 = u64 [s1 + 0x98]\n 38277: u64 [s1 + 184] = 0\n 38281: u64 [s1 + 176] = 0\n 38285: a2 = u64 [s1 + 0x88]\n 38289: a1 = 0 if a2 == 0\n 38291: a0 = 0 if a2 == 0\n 38293: u64 [s1 + 0xa8] = a0\n 38297: a3 = u64 [s1 + 0x90]\n 38301: a2 = a3 + 0xffffffffffffffff\n 38304: u64 [s1 + 0x88] = a2\n 38308: a2 = a3 >u 0\n 38310: a2 = a2 + 0xffffffffffffffff\n 38313: u64 [s1 + 0x80] = a2\n 38317: jump [t0]\n      : @1468 (gas: 5)\n 38319: sp = a0\n 38321: i32 a2 = a0 + 0\n 38323: a1 = 0x40\n 38326: a0 = u64 [s1 + 0xf0]\n 38330: jump [t0]\n      : @1469 (gas: 9)\n 38332: a0 = u64 [a3 + 0x18]\n 38335: a1 = u64 [a3 + 0x10]\n 38338: a2 = u64 [a3 + 0x8]\n 38341: a3 = u64 [a3]\n 38343: a0 = reverse a0\n 38345: a4 = reverse a1\n 38347: a2 = reverse a2\n 38349: a3 = reverse a3\n 38351: jump [t0]\n      : @1470 (gas: 14)\n 38353: a0 = u64 [a2 + 0x8]\n 38356: a1 = i32 [a2 + 0x10]\n 38359: a2 = u64 [a2]\n 38361: a0 = reverse a0\n 38363: a3 = a0 << 0x20\n 38366: a1 = reverse a1\n 38368: a1 = a1 >> 0x20\n 38371: a3 = a3 | a1\n 38374: a0 = a0 >> 0x20\n 38377: a1 = reverse a2\n 38379: a2 = a1 << 0x20\n 38382: a0 = a0 | a2\n 38385: a1 = a1 >> 0x20\n 38388: jump [t0]\n      : @1471 (gas: 12)\n 38390: a4 = u64 [s1 + 0x88]\n 38394: a0 = a0 & a4\n 38397: a4 = u64 [s1 + 0x78]\n 38400: a1 = a1 & a4\n 38403: a4 = u64 [s1 + 0x90]\n 38407: a2 = a2 & a4\n 38410: a4 = u64 [s1 + 0x80]\n 38414: a3 = a3 & a4\n 38417: a2 = a2 | a3\n 38420: a0 = a0 | a1\n 38423: a0 = a0 | a2\n 38426: jump [t0]\n      : @1472 (gas: 12)\n 38428: a2 = t2 >> 0x3f\n 38431: a3 = t1 << 0x1\n 38434: a2 = a2 | a3\n 38437: a3 = t2 << 0x1\n 38440: t2 = u64 [s1 + 0xc8]\n 38444: a4 = t2 >> 0x3f\n 38447: a3 = a3 | a4\n 38450: u64 [s1 + 0xa0] = a3\n 38454: ra = u64 [s1 + 0x80]\n 38458: a0 = t1\n 38460: t1 = ra ^ a2\n 38463: jump [t0]\n      : @1473 (gas: 14)\n 38465: a3 = u64 [s1 + 0xd8]\n 38469: a0 = u64 [a3 + 0x18]\n 38472: a1 = u64 [a3 + 0x10]\n 38475: a2 = u64 [a3 + 0x8]\n 38478: a3 = u64 [a3]\n 38480: a0 = reverse a0\n 38482: u64 [s1 + 0xd8] = a0\n 38486: a0 = reverse a1\n 38488: u64 [s1 + 0xd0] = a0\n 38492: a0 = reverse a2\n 38494: u64 [s1 + 0xc8] = a0\n 38498: a0 = reverse a3\n 38500: u64 [s1 + 0xc0] = a0\n 38504: jump [t0]\n      : @1474 (gas: 10)\n 38506: u64 [s1] = a3\n 38508: u64 [s1 + 0x8] = a2\n 38511: u64 [s1 + 0x10] = a1\n 38514: u64 [s1 + 0x18] = a0\n 38517: sp = s0 + 0xffffffffffffffc0\n 38520: ra = u64 [sp + 0x38]\n 38523: s0 = u64 [sp + 0x30]\n 38526: s1 = u64 [sp + 0x28]\n 38529: sp = sp + 0x40\n 38532: jump [t0]\n      : @1475 (gas: 8)\n 38534: a0 = u64 [a4 + 0x18]\n 38537: a1 = u64 [a4 + 0x20]\n 38540: a2 = u64 [a4 + 0x10]\n 38543: a3 = u64 [a4 + 0x8]\n 38546: a1 = a1 | a2\n 38549: a0 = a0 | a3\n 38552: a0 = a0 | a1\n 38555: jump [t0]\n      : @1476 (gas: 8)\n 38557: a4 = a4 | a2\n 38560: a2 = a0 | a1\n 38563: a2 = a2 | a4\n 38566: a2 = a2 >> 0x20\n 38569: a1 = a1 | a4\n 38572: a1 = a1 << 0x20\n 38575: a1 = a1 | a2\n 38578: jump [t0]\n      : @1477 (gas: 12)\n 38580: a1 = a1 << 0x1\n 38583: a4 = u64 [s1 + 0xa8]\n 38587: a3 = a4 >> 0x3f\n 38590: a1 = a1 | a3\n 38593: u64 [s1 + 0x98] = a1\n 38597: a3 = a0 >> 0x3f\n 38600: a0 = a4 << 0x1\n 38603: a3 = a3 | a0\n 38606: a0 = t2 << 0x1\n 38609: a4 = u64 [s1 + 0xc0]\n 38613: a1 = a4 >> 0x3f\n 38616: jump [t0]\n      : @1478 (gas: 10)\n 38618: a0 = u64 [a3 + 0x18]\n 38621: a1 = u64 [a3 + 0x10]\n 38624: a2 = u64 [a3 + 0x8]\n 38627: a3 = u64 [a3]\n 38629: a0 = reverse a0\n 38631: a1 = reverse a1\n 38633: a2 = reverse a2\n 38635: a3 = reverse a3\n 38637: a4 = s1 + 0x2078\n 38641: jump [t0]\n      : @1479 (gas: 8)\n 38643: a0 = a0 | a2\n 38646: a2 = a4 | a1\n 38649: a2 = a2 | a0\n 38652: a2 = a2 >> 0x20\n 38655: a0 = a0 | a1\n 38658: a0 = a0 << 0x20\n 38661: a0 = a0 | a2\n 38664: jump [t0]\n      : @1480 (gas: 16)\n 38666: a4 = u64 [a3]\n 38668: u64 [sp + 0x18] = a4\n 38671: a4 = u64 [a3 + 0x8]\n 38674: u64 [sp + 0x20] = a4\n 38677: a4 = u64 [a3 + 0x10]\n 38680: u64 [sp + 0x28] = a4\n 38683: a3 = u64 [a3 + 0x18]\n 38686: u64 [sp + 0x30] = a3\n 38689: s1 = u64 [a2]\n 38691: a3 = u64 [a2 + 0x8]\n 38694: u64 [sp] = a3\n 38696: a3 = u64 [a2 + 0x10]\n 38699: u64 [sp + 0x8] = a3\n 38702: a2 = u64 [a2 + 0x18]\n 38705: u64 [sp + 0x10] = a2\n 38708: jump [t0]\n      : @1481 (gas: 10)\n 38710: a0 = u64 [sp + 0x10]\n 38713: a1 = u64 [sp + 0x18]\n 38716: a2 = 0x100000000\n 38726: a2 = a2 ^ a0\n 38729: a2 = a2 | a1\n 38732: a3 = a0 >> 0x20\n 38735: a3 = a3 <u 0x1\n 38738: a3 = 0 if a1 != 0\n 38740: a3 = 0 if a2 == 0\n 38742: jump [t0]\n      : @1482 (gas: 8)\n 38744: a0 = u64 [a4 + 0xd8]\n 38748: a1 = u64 [a4 + 0xe0]\n 38752: a2 = u64 [a4 + 0xd0]\n 38756: a3 = u64 [a4 + 0xc8]\n 38760: a1 = a1 | a2\n 38763: a0 = a0 | a3\n 38766: a0 = a0 | a1\n 38769: jump [t0]\n      : @1483 (gas: 4)\n 38771: a0 = 0x2078\n 38775: a3 = s1 + a0\n 38778: a4 = a3 + 0x500\n 38782: jump [t0]\n      : @1484 (gas: 11)\n 38784: a2 = u64 [s1 + 0x88]\n 38788: a1 = a1 | a2\n 38791: a2 = u64 [s1 + 0xf8]\n 38795: a3 = a2 <u 0x80\n 38799: u64 [s1 + 0x88] = a3\n 38803: a4 = u64 [s1 + 0x80]\n 38807: a1 = a4 if a3 == 0\n 38810: a4 = u64 [s1 + 0x98]\n 38814: a4 = a1 if a2 != 0\n 38817: u64 [s1 + 0x98] = a4\n 38821: jump [t0]\n      : @1485 (gas: 10)\n 38823: a2 = u64 [s1 + 0x88]\n 38827: a1 = 0 if a2 == 0\n 38829: a0 = 0 if a2 == 0\n 38831: a3 = u64 [s1 + 0x98]\n 38835: a2 = a3 + 0xffffffffffffffff\n 38838: u64 [s1 + 0x90] = a2\n 38842: a2 = a3 >u 0\n 38844: a2 = a2 + 0xffffffffffffffff\n 38847: u64 [s1 + 0x88] = a2\n 38851: jump [t0]\n      : @1486 (gas: 11)\n 38853: a3 = u64 [s1 + 0xc8]\n 38857: a0 = u64 [a3 + 0x18]\n 38860: a1 = u64 [a3 + 0x10]\n 38863: a2 = u64 [a3 + 0x8]\n 38866: a3 = u64 [a3]\n 38868: a0 = reverse a0\n 38870: u64 [s1 + 0xc0] = a0\n 38874: a0 = reverse a1\n 38876: u64 [s1 + 0xb8] = a0\n 38880: a0 = reverse a2\n 38882: jump [t0]\n      : @1487 (gas: 9)\n 38884: u64 [s1 + 0xc0] = a3\n 38888: a1 = 0 if a4 == 0\n 38890: u64 [s1 + 0xc8] = a1\n 38894: u64 [s1 + 152] = 0x15180\n 38901: a0 = u64 [s1 + 0xf0]\n 38905: a2 = a0 + 0xffffffffffffff80\n 38908: a0 = a5\n 38910: a1 = t1\n 38912: jump [t0]\n      : @1488 (gas: 12)\n 38914: a0 = u64 [sp + 0x18]\n 38917: a1 = u64 [sp + 0x10]\n 38920: a2 = u64 [sp + 0x8]\n 38923: a3 = u64 [sp]\n 38925: a4 = a2 | a0\n 38928: a5 = a3 | a1\n 38931: a5 = a5 | a4\n 38934: a5 = a5 >> 0x20\n 38937: a4 = a4 | a1\n 38940: a4 = a4 << 0x20\n 38943: a4 = a4 | a5\n 38946: jump [t0]\n      : @1489 (gas: 6)\n 38948: a0 = u64 [a3 + 0x18]\n 38951: a1 = u64 [a3 + 0x10]\n 38954: a2 = u64 [a3 + 0x8]\n 38957: a3 = u64 [a3]\n 38959: a0 = reverse a0\n 38961: jump [t0]\n      : @1490 (gas: 12)\n 38963: a2 = u64 [sp]\n 38965: a3 = u64 [sp + 0x8]\n 38968: u64 [s1] = a2\n 38970: u64 [s1 + 0x8] = a3\n 38973: u64 [s1 + 0x10] = a0\n 38976: u64 [s1 + 0x18] = a1\n 38979: sp = s0 + 0xffffffffffffffc0\n 38982: ra = u64 [sp + 0x38]\n 38985: s0 = u64 [sp + 0x30]\n 38988: s1 = u64 [sp + 0x28]\n 38991: sp = sp + 0x40\n 38994: jump [t0]\n      : @1491 (gas: 12)\n 38996: a4 = u64 [s1 + 0xd8]\n 39000: a0 = a0 & a4\n 39003: a4 = u64 [s1 + 0xc8]\n 39007: a1 = a1 & a4\n 39010: a4 = u64 [s1 + 0xd0]\n 39014: a2 = a2 & a4\n 39017: a4 = u64 [s1 + 0xc0]\n 39021: a3 = a3 & a4\n 39024: a2 = a2 | a3\n 39027: a0 = a0 | a1\n 39030: a0 = a0 | a2\n 39033: jump [t0]\n      : @1492 (gas: 8)\n 39035: u64 [sp + 64] = 0\n 39038: u64 [sp + 56] = 0\n 39041: u64 [sp + 48] = 0\n 39044: a0 = 0x4e487b7100000000\n 39054: a1 = sp + 0x30\n 39057: u64 [sp + 0x48] = a0\n 39060: a0 = 0\n 39062: jump [t0]\n      : @1493 (gas: 10)\n 39064: sp = sp + 0xffffffffffffffc0\n 39067: u64 [sp + 0x38] = ra\n 39070: u64 [sp + 0x30] = s0\n 39073: u64 [sp + 0x28] = s1\n 39076: s0 = sp + 0x40\n 39079: sp = sp & 0xffffffffffffffe0\n 39082: s1 = a0\n 39084: i32 a0 = sp + 0\n 39086: a1 = 0x4\n 39089: jump [t0]\n      : @1494 (gas: 8)\n 39091: a0 = u64 [a4 + 0x38]\n 39094: a1 = u64 [a4 + 0x40]\n 39097: a2 = u64 [a4 + 0x30]\n 39100: a3 = u64 [a4 + 0x28]\n 39103: a1 = a1 | a2\n 39106: a0 = a0 | a3\n 39109: a0 = a0 | a1\n 39112: jump [t0]\n      : @1495 (gas: 4)\n 39114: i32 a0 = a0 + 0x78\n 39117: a3 = s1 + a0\n 39120: a4 = a3 + 0x100\n 39124: jump [t0]\n      : @1496 (gas: 4)\n 39126: a0 = 0x2078\n 39130: a3 = s1 + a0\n 39133: a4 = a3 + 0x400\n 39137: jump [t0]\n      : @1497 (gas: 4)\n 39139: a0 = 0x2878\n 39143: a3 = s1 + a0\n 39146: a4 = a3 + 0x100\n 39150: jump [t0]\n      : @1498 (gas: 4)\n 39152: a0 = 0x2878\n 39156: a3 = s1 + a0\n 39159: a4 = a3 + 0x200\n 39163: jump [t0]\n      : @1499 (gas: 9)\n 39165: sp = sp + 0xffffffffffffffc0\n 39168: u64 [sp + 0x38] = ra\n 39171: u64 [sp + 0x30] = s0\n 39174: u64 [sp + 0x28] = s1\n 39177: s0 = sp + 0x40\n 39180: sp = sp & 0xffffffffffffffe0\n 39183: s1 = a0\n 39185: i32 a0 = sp + 0\n 39187: jump [t0]\n      : @1500 (gas: 8)\n 39189: a0 = u64 [a4 + 0xb8]\n 39193: a1 = u64 [a4 + 0xc0]\n 39197: a2 = u64 [a4 + 0xb0]\n 39201: a3 = u64 [a4 + 0xa8]\n 39205: a1 = a1 | a2\n 39208: a0 = a0 | a3\n 39211: a0 = a0 | a1\n 39214: jump [t0]\n      : @1501 (gas: 7)\n 39216: a3 = u64 [s1 + 0xf8]\n 39220: a0 = u64 [a3 + 0x18]\n 39223: a1 = u64 [a3 + 0x10]\n 39226: a2 = u64 [a3 + 0x8]\n 39229: a3 = u64 [a3]\n 39231: a5 = reverse a0\n 39233: jump [t0]\n      : @1502 (gas: 8)\n 39235: a1 = sp + 0xffffffffffffffe0\n 39238: a1 = a1 & 0xffffffffffffffe0\n 39241: u64 [s1 + 0xf0] = a1\n 39245: sp = a1\n 39247: i32 a0 = a0 + 0\n 39249: i32 a2 = a1 + 0\n 39251: a1 = 0x40\n 39254: jump [t0]\n      : @1503 (gas: 9)\n 39256: a0 = a0 | a1\n 39259: a1 = u64 [s1 + 0xa8]\n 39263: a0 = a1 if a3 == 0\n 39266: a1 = u64 [s1 + 0xa0]\n 39270: a1 = a0 if a2 != 0\n 39273: u64 [s1 + 0xa0] = a1\n 39277: a0 = u64 [s1 + 0xb8]\n 39281: a1 = u64 [s1 + 0xb0]\n 39285: jump [t0]\n      : @1504 (gas: 2)\n 39287: a3 = a2 & 0x40\n 39290: jump @1508 if a3 != 0\n      : @1505 (gas: 1)\n 39293: jump @1507 if a2 == 0\n      : @1506 (gas: 6)\n 39296: i32 a3 = 0x40 - a2\n 39299: a3 = a1 << a3\n 39302: a1 = a1 >> a2\n 39305: a0 = a0 >> a2\n 39308: a0 = a0 | a3\n 39311: ret\n      : @1507 (gas: 1)\n 39313: ret\n      : @1508 (gas: 4)\n 39315: a0 = a2 + 0xffffffffffffffc0\n 39318: a0 = a1 >> a0\n 39321: a1 = 0\n 39323: ret\n      : @1509 (gas: 2)\n 39325: a3 = a2 & 0x40\n 39328: jump @1513 if a3 != 0\n      : @1510 (gas: 1)\n 39331: jump @1512 if a2 == 0\n      : @1511 (gas: 6)\n 39334: i32 a3 = 0x40 - a2\n 39337: a3 = a0 >> a3\n 39340: a0 = a0 << a2\n 39343: a1 = a1 << a2\n 39346: a1 = a1 | a3\n 39349: ret\n      : @1512 (gas: 1)\n 39351: ret\n      : @1513 (gas: 4)\n 39353: a1 = a2 + 0xffffffffffffffc0\n 39356: a1 = a0 << a1\n 39359: a0 = 0\n 39361: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "STAKE_PER_DAY()": "4a91f7ae",
              "archiveHabit(uint32)": "b650673a",
              "checkIn(uint32,uint64)": "a0145927",
              "checked(address,uint64)": "a8389e0a",
              "claimAll()": "d1058e59",
              "claimYieldRewards()": "db0f53f9",
              "createHabit(bytes32)": "e9714e07",
              "deposit()": "d0e30db0",
              "epochNow()": "222ae786",
              "forceSettle(address,uint64,uint32)": "68188762",
              "funded(address,uint64)": "319bec54",
              "habits(address,uint32)": "99626634",
              "move(uint8,uint8,uint256)": "4f126f03",
              "owner()": "8da5cb5b",
              "prepareDay(uint64)": "48cc36b8",
              "setStakingAdapter(address)": "40729c58",
              "settle(address,uint64,uint32)": "9c14eb6e",
              "settled(address,uint64)": "39c51515",
              "stakingAdapter()": "4cbb98f4",
              "transferOwnership(address)": "f2fde38b",
              "treasury()": "61d027b3",
              "userHabitCounters(address)": "0e08454a",
              "userStates(address)": "0ecc535f"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/HabitTracker.sol\"\nobject \"HabitTracker_1154\" {\n    code {\n        {\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"HabitTracker_1154\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            /// @src 0:3660:3713  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            if /** @src 0:3664:3687  \"_treasury == address(0)\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:3664:3687  \"_treasury == address(0)\" */ value0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n            /// @src 0:3660:3713  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            {\n                /// @src 0:3696:3713  \"InvalidTreasury()\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:3696:3713  \"InvalidTreasury()\" */ shl(227, 0x02979eb9))\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:3696:3713  \"InvalidTreasury()\" */ 4)\n            }\n            /// @src 0:3723:3743  \"treasury = _treasury\"\n            mstore(128, value0)\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            sstore(/** @src 0:3753:3771  \"owner = msg.sender\" */ 0x01, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:3753:3771  \"owner = msg.sender\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ not(sub(shl(160, 1), 1))), /** @src 0:3761:3771  \"msg.sender\" */ caller()))\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            let _2 := and(/** @src 0:3863:3892  \"_stakingAdapter != address(0)\" */ value1, /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n            /// @src 0:3859:3968  \"if (_stakingAdapter != address(0)) {...\"\n            if /** @src 0:3863:3892  \"_stakingAdapter != address(0)\" */ iszero(iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2))\n            /// @src 0:3859:3968  \"if (_stakingAdapter != address(0)) {...\"\n            {\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14758  \"contract HabitTracker {...\" */ not(sub(shl(160, 1), 1))), _2))\n            }\n            let _3 := mload(64)\n            let _4 := datasize(\"HabitTracker_1154_deployed\")\n            codecopy(_3, dataoffset(\"HabitTracker_1154_deployed\"), _4)\n            setimmutable(_3, \"11\", mload(/** @src 0:3723:3743  \"treasury = _treasury\" */ 128))\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            return(_3, _4)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 0:\"contracts/HabitTracker.sol\"\n    object \"HabitTracker_1154_deployed\" {\n        code {\n            {\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(0))\n                    case 0x0e08454a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        mstore(_1, and(sload(keccak256(0, 64)), 0xffffffff))\n                        return(_1, 32)\n                    }\n                    case 0x0ecc535f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ 2)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot := keccak256(0, 64)\n                        let _3 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ dataSlot)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _4 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 1))\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _5 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 2))\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let value := and(sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 3)), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                        let memPos := mload(64)\n                        mstore(memPos, _3)\n                        mstore(add(memPos, 32), _4)\n                        mstore(add(memPos, 64), _5)\n                        mstore(add(memPos, 96), value)\n                        return(memPos, 128)\n                    }\n                    case 0x222ae786 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let var := 0\n                        /// @src 0:4043:4091  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4057:4072  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, var)\n                        return(memPos_1, 32)\n                    }\n                    case 0x319bec54 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value1 := abi_decode_uint64()\n                        mstore(0, and(value0, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ 5)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_1 := keccak256(0, 64)\n                        /// @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\"\n                        let dataSlot_2 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ value1, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ dataSlot_1)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_2 := keccak256(0, 0x40)\n                        let _6 := sload(/** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ dataSlot_2)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _6)\n                        return(memPos_2, 32)\n                    }\n                    case 0x39c51515 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1_1 := abi_decode_uint64()\n                        mstore(0, and(value0_1, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ 7)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_3 := keccak256(0, 64)\n                        /// @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\"\n                        let dataSlot_4 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ value1_1, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ dataSlot_3)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_4 := keccak256(0, 0x40)\n                        let _7 := sload(/** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ dataSlot_4)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, _7)\n                        return(memPos_3, 32)\n                    }\n                    case 0x40729c58 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 0:4162:4490  \"function setStakingAdapter(address _newAdapter) external {...\"\n                        fun_checkOwner()\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _8 := and(/** @src 0:4256:4281  \"_newAdapter == address(0)\" */ value0_2, /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:4252:4313  \"if (_newAdapter == address(0)) revert InvalidStakingAdapter()\"\n                        if /** @src 0:4256:4281  \"_newAdapter == address(0)\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _8)\n                        /// @src 0:4252:4313  \"if (_newAdapter == address(0)) revert InvalidStakingAdapter()\"\n                        {\n                            /// @src 0:4290:4313  \"InvalidStakingAdapter()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:4290:4313  \"InvalidStakingAdapter()\" */ shl(225, 0x6eba82c9))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _9 := sload(0)\n                        sstore(0, or(and(_9, shl(160, 0xffffffffffffffffffffffff)), _8))\n                        /// @src 0:4437:4483  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\"\n                        log3(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:4437:4483  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\" */ 0x258ff515b65e53911071aed3f954e1f58eca37dce2ed4a50766f00c9d0161048, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(_9, sub(shl(160, 1), 1)), /** @src 0:4437:4483  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\" */ _8)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x48cc36b8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := 0\n                        value_1 := calldataload(4)\n                        let _10 := and(value_1, 0xffffffffffffffff)\n                        if iszero(eq(value_1, _10)) { revert(0, 0) }\n                        /// @src 0:8308:8318  \"epochNow()\"\n                        let var_1 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4043:4091  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_1 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4057:4072  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:8295:8341  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:8299:8318  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _10, /** @src 0:8299:8318  \"epoch != epochNow()\" */ var_1))\n                        /// @src 0:8295:8341  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:8327:8341  \"InvalidEpoch()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:8327:8341  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:8397:8407  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8386:8396  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_5 := keccak256(0, 64)\n                        mstore(0, /** @src 0:8397:8407  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, 4)\n                        let value_2 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:8472:8490  \"uint32 fundedCount\"\n                        let var_fundedCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8472:8490  \"uint32 fundedCount\"\n                        var_fundedCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8500:8524  \"uint32 insufficientCount\"\n                        let var_insufficientCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8500:8524  \"uint32 insufficientCount\"\n                        var_insufficientCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, /** @src 0:8397:8407  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8557:8563  \"funded\" */ 0x05)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 0:8557:8582  \"funded[msg.sender][epoch]\"\n                        let dataSlot_7 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, _10)\n                        mstore(0x20, /** @src 0:8557:8575  \"funded[msg.sender]\" */ dataSlot_6)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_7 := keccak256(0, 0x40)\n                        /// @src 0:8534:8582  \"uint256 fundedBitmap = funded[msg.sender][epoch]\"\n                        let var_fundedBitmap := /** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:8557:8582  \"funded[msg.sender][epoch]\" */ dataSlot_7)\n                        /// @src 0:8606:8618  \"uint32 i = 1\"\n                        let var_i := /** @src 0:8617:8618  \"1\" */ 0x01\n                        /// @src 0:8601:9470  \"for (uint32 i = 1; i <= count;) {...\"\n                        for { }\n                        /** @src 0:8617:8618  \"1\" */ 0x01\n                        /// @src 0:8606:8618  \"uint32 i = 1\"\n                        { }\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let _11 := and(/** @src 0:8620:8630  \"i <= count\" */ var_i, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                            /// @src 0:8620:8630  \"i <= count\"\n                            if gt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _11, /** @src 0:8620:8630  \"i <= count\" */ value_2) { break }\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            mstore(0, /** @src 0:8397:8407  \"msg.sender\" */ caller())\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            mstore(32, /** @src 0:8669:8675  \"habits\" */ 0x03)\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let dataSlot_8 := keccak256(0, 64)\n                            /// @src 0:8669:8690  \"habits[msg.sender][i]\"\n                            let dataSlot_9 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                            mstore(0, _11)\n                            mstore(0x20, /** @src 0:8669:8687  \"habits[msg.sender]\" */ dataSlot_8)\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            dataSlot_9 := keccak256(0, 0x40)\n                            let _12 := sload(/** @src 0:8722:8736  \"habit.archived\" */ add(/** @src 0:8669:8690  \"habits[msg.sender][i]\" */ dataSlot_9, /** @src 0:8617:8618  \"1\" */ 0x01))\n                            /// @src 0:8721:8765  \"!habit.archived && habit.createdAtEpoch != 0\"\n                            let expr := /** @src 0:8721:8736  \"!habit.archived\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(shr(64, _12), 0xff))\n                            /// @src 0:8721:8765  \"!habit.archived && habit.createdAtEpoch != 0\"\n                            if expr\n                            {\n                                expr := /** @src 0:8740:8765  \"habit.createdAtEpoch != 0\" */ iszero(iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(_12, 0xffffffffffffffff)))\n                            }\n                            /// @src 0:8717:9429  \"if (!habit.archived && habit.createdAtEpoch != 0) {...\"\n                            if expr\n                            {\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                let result := shl(_11, /** @src 0:8617:8618  \"1\" */ 0x01)\n                                /// @src 0:8841:9415  \"if (fundedBitmap & mask == 0) { // Check if not already funded...\"\n                                if /** @src 0:8845:8869  \"fundedBitmap & mask == 0\" */ iszero(/** @src 0:8845:8864  \"fundedBitmap & mask\" */ and(var_fundedBitmap, result))\n                                /// @src 0:8841:9415  \"if (fundedBitmap & mask == 0) { // Check if not already funded...\"\n                                {\n                                    /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                    let _13 := sload(/** @src 0:8928:8948  \"state.depositBalance\" */ dataSlot_5)\n                                    /// @src 0:8924:9397  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    switch /** @src 0:8928:8965  \"state.depositBalance >= STAKE_PER_DAY\" */ iszero(lt(_13, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                                    case /** @src 0:8924:9397  \"if (state.depositBalance >= STAKE_PER_DAY) {...\" */ 0 {\n                                        /// @src 0:9353:9372  \"insufficientCount++\"\n                                        var_insufficientCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(add(/** @src 0:9353:9372  \"insufficientCount++\" */ var_insufficientCount, /** @src 0:8617:8618  \"1\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                                    }\n                                    default /// @src 0:8924:9397  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    {\n                                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                        sstore(dataSlot_5, add(_13, not(0x8ac7230489e7ffff)))\n                                        /// @src 0:9100:9120  \"state.blockedBalance\"\n                                        let _14 := add(dataSlot_5, /** @src 0:8617:8618  \"1\" */ 0x01)\n                                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                        sstore(_14, add(sload(/** @src 0:9100:9137  \"state.blockedBalance += STAKE_PER_DAY\" */ _14), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                                        /// @src 0:9183:9196  \"fundedCount++\"\n                                        var_fundedCount := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(add(/** @src 0:9183:9196  \"fundedCount++\" */ var_fundedCount, /** @src 0:8617:8618  \"1\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                                        /// @src 0:9248:9268  \"fundedBitmap |= mask\"\n                                        var_fundedBitmap := or(var_fundedBitmap, result)\n                                    }\n                                }\n                            }\n                            /// @src 0:9454:9457  \"i++\"\n                            var_i := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(add(/** @src 0:9454:9457  \"i++\" */ var_i, /** @src 0:8617:8618  \"1\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        mstore(0, /** @src 0:8397:8407  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8557:8563  \"funded\" */ 0x05)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_10 := keccak256(0, 64)\n                        /// @src 0:9488:9513  \"funded[msg.sender][epoch]\"\n                        let dataSlot_11 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, _10)\n                        mstore(0x20, /** @src 0:9488:9506  \"funded[msg.sender]\" */ dataSlot_10)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_11 := keccak256(0, 0x40)\n                        sstore(/** @src 0:9488:9513  \"funded[msg.sender][epoch]\" */ dataSlot_11, /** @src 0:761:14758  \"contract HabitTracker {...\" */ var_fundedBitmap)\n                        /// @src 0:9543:9605  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        let _15 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_15, and(var_fundedCount, 0xffffffff))\n                        mstore(add(_15, 32), and(var_insufficientCount, 0xffffffff))\n                        /// @src 0:9543:9605  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        log3(_15, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 64, /** @src 0:9543:9605  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ 0xc3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5, /** @src 0:8397:8407  \"msg.sender\" */ caller(), /** @src 0:9543:9605  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ _10)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x4a91f7ae {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0x4cbb98f4 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_3 := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, value_3)\n                        return(memPos_5, 32)\n                    }\n                    case 0x4f126f03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value_4 := 0\n                        value_4 := calldataload(4)\n                        let _16 := and(value_4, 0xff)\n                        if iszero(eq(value_4, _16)) { revert(0, 0) }\n                        let value_5 := 0\n                        value_5 := calldataload(36)\n                        let _17 := and(value_5, 0xff)\n                        if iszero(eq(value_5, _17)) { revert(0, 0) }\n                        let value_6 := calldataload(68)\n                        /// @src 0:5381:5420  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 0:5385:5396  \"amount == 0\" */ iszero(value_6)\n                        /// @src 0:5381:5420  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:5405:5420  \"InvalidAmount()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5405:5420  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:5430:5473  \"if (from == to) revert InvalidBalanceType()\"\n                        if /** @src 0:5434:5444  \"from == to\" */ eq(_16, _17)\n                        /// @src 0:5430:5473  \"if (from == to) revert InvalidBalanceType()\"\n                        {\n                            /// @src 0:5453:5473  \"InvalidBalanceType()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5453:5473  \"InvalidBalanceType()\" */ shl(225, 0x7e5b1d11))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:5487:5536  \"from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL\"\n                        let expr_1 := /** @src 0:5487:5511  \"from > BALANCE_CLAIMABLE\" */ gt(_16, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 1)\n                        /// @src 0:5487:5536  \"from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL\"\n                        if iszero(expr_1)\n                        {\n                            expr_1 := /** @src 0:5515:5536  \"to > BALANCE_EXTERNAL\" */ gt(_17, /** @src 0:1182:1183  \"2\" */ 0x02)\n                        }\n                        /// @src 0:5483:5565  \"if (from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL) revert InvalidBalanceType()\"\n                        if expr_1\n                        {\n                            /// @src 0:5545:5565  \"InvalidBalanceType()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5453:5473  \"InvalidBalanceType()\" */ shl(225, 0x7e5b1d11))\n                            /// @src 0:5545:5565  \"InvalidBalanceType()\"\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:5621:5631  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:5610:5620  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_12 := keccak256(0, 64)\n                        /// @src 0:5681:6033  \"if (from == BALANCE_DEPOSIT) {...\"\n                        switch /** @src 0:5685:5708  \"from == BALANCE_DEPOSIT\" */ iszero(_16)\n                        case /** @src 0:5681:6033  \"if (from == BALANCE_DEPOSIT) {...\" */ 0 {\n                            /// @src 0:5901:5923  \"state.claimableBalance\"\n                            let _18 := add(dataSlot_12, /** @src 0:5610:5620  \"userStates\" */ 0x02)\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let _19 := sload(/** @src 0:5901:5923  \"state.claimableBalance\" */ _18)\n                            /// @src 0:5897:5962  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                            if /** @src 0:5901:5932  \"state.claimableBalance < amount\" */ lt(_19, value_6)\n                            /// @src 0:5897:5962  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                            {\n                                /// @src 0:5941:5962  \"InsufficientBalance()\"\n                                mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5941:5962  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                                revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                            }\n                            sstore(_18, sub(_19, value_6))\n                        }\n                        default /// @src 0:5681:6033  \"if (from == BALANCE_DEPOSIT) {...\"\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let _20 := sload(/** @src 0:5728:5748  \"state.depositBalance\" */ dataSlot_12)\n                            /// @src 0:5724:5787  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                            if /** @src 0:5728:5757  \"state.depositBalance < amount\" */ lt(_20, value_6)\n                            /// @src 0:5724:5787  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                            {\n                                /// @src 0:5766:5787  \"InsufficientBalance()\"\n                                mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5941:5962  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                                /// @src 0:5766:5787  \"InsufficientBalance()\"\n                                revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                            }\n                            sstore(dataSlot_12, sub(_20, value_6))\n                        }\n                        /// @src 0:6081:6363  \"if (to == BALANCE_DEPOSIT) {...\"\n                        switch /** @src 0:6085:6106  \"to == BALANCE_DEPOSIT\" */ iszero(_17)\n                        case /** @src 0:6081:6363  \"if (to == BALANCE_DEPOSIT) {...\" */ 0 {\n                            /// @src 0:6183:6363  \"if (to == BALANCE_CLAIMABLE) {...\"\n                            switch /** @src 0:6187:6210  \"to == BALANCE_CLAIMABLE\" */ eq(_17, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 1)\n                            case /** @src 0:6183:6363  \"if (to == BALANCE_CLAIMABLE) {...\" */ 0 {\n                                /// @src 0:6345:6351  \"amount\"\n                                fun_transfer(/** @src 0:5621:5631  \"msg.sender\" */ caller(), /** @src 0:6345:6351  \"amount\" */ value_6)\n                            }\n                            default /// @src 0:6183:6363  \"if (to == BALANCE_CLAIMABLE) {...\"\n                            {\n                                /// @src 0:6238:6260  \"state.claimableBalance\"\n                                let _21 := add(dataSlot_12, /** @src 0:5610:5620  \"userStates\" */ 0x02)\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                sstore(_21, add(sload(/** @src 0:6238:6270  \"state.claimableBalance += amount\" */ _21), /** @src 0:761:14758  \"contract HabitTracker {...\" */ value_6))\n                            }\n                        }\n                        default /// @src 0:6081:6363  \"if (to == BALANCE_DEPOSIT) {...\"\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            sstore(dataSlot_12, add(sload(/** @src 0:6134:6164  \"state.depositBalance += amount\" */ dataSlot_12), /** @src 0:761:14758  \"contract HabitTracker {...\" */ value_6))\n                        }\n                        /// @src 0:6386:6428  \"BalanceMoved(msg.sender, from, to, amount)\"\n                        let _22 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_22, value_6)\n                        /// @src 0:6386:6428  \"BalanceMoved(msg.sender, from, to, amount)\"\n                        log4(_22, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32, /** @src 0:6386:6428  \"BalanceMoved(msg.sender, from, to, amount)\" */ 0x1a76aaec2e9828be3e61d555cee697fff809245531b81aeaabfc9802480b1f05, /** @src 0:5621:5631  \"msg.sender\" */ caller(), /** @src 0:6386:6428  \"BalanceMoved(msg.sender, from, to, amount)\" */ _16, _17)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x61d027b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, and(/** @src 0:897:930  \"address public immutable treasury\" */ loadimmutable(\"11\"), /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_6, 32)\n                    }\n                    case 0x68188762 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value1_2 := abi_decode_uint64()\n                        /// @src 0:11242:11249  \"habitId\"\n                        fun_settleInternal(value0_3, value1_2, /** @src 0:761:14758  \"contract HabitTracker {...\" */ abi_decode_t_uint32())\n                        return(0, 0)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_7 := and(sload(/** @src 0:979:999  \"address public owner\" */ 1), /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, value_7)\n                        return(memPos_7, 32)\n                    }\n                    case 0x99626634 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value_8 := 0\n                        value_8 := calldataload(36)\n                        if iszero(eq(value_8, and(value_8, 0xffffffff))) { revert(0, 0) }\n                        mstore(0, and(value0_4, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ 3)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_13 := keccak256(0, 64)\n                        /// @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\"\n                        let dataSlot_14 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ value_8, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_13)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_14 := keccak256(0, 0x40)\n                        let _23 := sload(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_14)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _24 := sload(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ add(dataSlot_14, 1))\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, _23)\n                        mstore(add(memPos_8, 32), and(_24, 0xffffffffffffffff))\n                        mstore(add(memPos_8, 64), iszero(iszero(and(shr(64, _24), 0xff))))\n                        return(memPos_8, 96)\n                    }\n                    case 0x9c14eb6e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let value1_3 := abi_decode_uint64()\n                        let value2 := abi_decode_t_uint32()\n                        /// @src 0:10677:10687  \"epochNow()\"\n                        let var_2 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4043:4091  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_2 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4057:4072  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:10664:10720  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        if /** @src 0:10668:10687  \"epoch >= epochNow()\" */ iszero(lt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:10668:10687  \"epoch >= epochNow()\" */ value1_3, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:10668:10687  \"epoch >= epochNow()\" */ var_2))\n                        /// @src 0:10664:10720  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        {\n                            /// @src 0:10696:10720  \"CannotSettleCurrentDay()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:10696:10720  \"CannotSettleCurrentDay()\" */ shl(224, 0xcf114bd9))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:10759:10766  \"habitId\"\n                        fun_settleInternal(value0_5, value1_3, value2)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xa0145927 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_6 := abi_decode_uint32()\n                        let value1_4 := abi_decode_uint64()\n                        /// @src 0:9874:9884  \"epochNow()\"\n                        let var_ := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4043:4091  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_ := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4057:4072  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let _25 := and(/** @src 0:9865:9884  \"epoch != epochNow()\" */ value1_4, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:9861:9907  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:9865:9884  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _25, /** @src 0:9865:9884  \"epoch != epochNow()\" */ var_))\n                        /// @src 0:9861:9907  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:9893:9907  \"InvalidEpoch()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:8327:8341  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            /// @src 0:9893:9907  \"InvalidEpoch()\"\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9946:9956  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:9939:9945  \"habits\" */ 0x03)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_15 := keccak256(0, 64)\n                        /// @src 0:9939:9966  \"habits[msg.sender][habitId]\"\n                        let dataSlot_16 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:9939:9966  \"habits[msg.sender][habitId]\" */ value0_6, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:9939:9957  \"habits[msg.sender]\" */ dataSlot_15)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_16 := keccak256(0, 0x40)\n                        let _26 := sload(/** @src 0:9980:10000  \"habit.createdAtEpoch\" */ add(/** @src 0:9939:9966  \"habits[msg.sender][habitId]\" */ dataSlot_16, /** @src 0:9980:10000  \"habit.createdAtEpoch\" */ 1))\n                        /// @src 0:9980:10023  \"habit.createdAtEpoch == 0 || habit.archived\"\n                        let expr_2 := /** @src 0:9980:10005  \"habit.createdAtEpoch == 0\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(_26, 0xffffffffffffffff))\n                        /// @src 0:9980:10023  \"habit.createdAtEpoch == 0 || habit.archived\"\n                        if iszero(expr_2)\n                        {\n                            expr_2 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(shr(64, _26), 0xff)\n                        }\n                        /// @src 0:9976:10047  \"if (habit.createdAtEpoch == 0 || habit.archived) revert HabitNotFound()\"\n                        if expr_2\n                        {\n                            /// @src 0:10032:10047  \"HabitNotFound()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:10032:10047  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let bits := and(value0_6, 0xffffffff)\n                        let result_1 := shl(bits, /** @src 0:9980:10000  \"habit.createdAtEpoch\" */ 1)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(0, /** @src 0:9946:9956  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10107:10113  \"funded\" */ 0x05)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_17 := keccak256(0, 64)\n                        /// @src 0:10107:10132  \"funded[msg.sender][epoch]\"\n                        let dataSlot_18 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, _25)\n                        mstore(0x20, /** @src 0:10107:10125  \"funded[msg.sender]\" */ dataSlot_17)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_18 := keccak256(0, 0x40)\n                        /// @src 0:10103:10167  \"if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded()\"\n                        if /** @src 0:10107:10144  \"funded[msg.sender][epoch] & mask == 0\" */ iszero(/** @src 0:10107:10139  \"funded[msg.sender][epoch] & mask\" */ and(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:10107:10132  \"funded[msg.sender][epoch]\" */ dataSlot_18), /** @src 0:10107:10139  \"funded[msg.sender][epoch] & mask\" */ result_1))\n                        /// @src 0:10103:10167  \"if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded()\"\n                        {\n                            /// @src 0:10153:10167  \"DayNotFunded()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:10153:10167  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9946:9956  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10181:10188  \"checked\" */ 0x06)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_19 := keccak256(0, 64)\n                        /// @src 0:10181:10207  \"checked[msg.sender][epoch]\"\n                        let dataSlot_20 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, _25)\n                        mstore(0x20, /** @src 0:10181:10200  \"checked[msg.sender]\" */ dataSlot_19)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_20 := keccak256(0, 0x40)\n                        /// @src 0:10177:10246  \"if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn()\"\n                        if /** @src 0:10181:10219  \"checked[msg.sender][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:10181:10214  \"checked[msg.sender][epoch] & mask\" */ and(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:10181:10207  \"checked[msg.sender][epoch]\" */ dataSlot_20), /** @src 0:10181:10214  \"checked[msg.sender][epoch] & mask\" */ result_1)))\n                        /// @src 0:10177:10246  \"if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn()\"\n                        {\n                            /// @src 0:10228:10246  \"AlreadyCheckedIn()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:10228:10246  \"AlreadyCheckedIn()\" */ shl(228, 0x0c98289f))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9946:9956  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10181:10188  \"checked\" */ 0x06)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_21 := keccak256(0, 64)\n                        /// @src 0:10265:10291  \"checked[msg.sender][epoch]\"\n                        let dataSlot_22 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, _25)\n                        mstore(0x20, /** @src 0:10265:10284  \"checked[msg.sender]\" */ dataSlot_21)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_22 := keccak256(0, 0x40)\n                        sstore(/** @src 0:10265:10291  \"checked[msg.sender][epoch]\" */ dataSlot_22, /** @src 0:10265:10299  \"checked[msg.sender][epoch] |= mask\" */ or(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:10265:10291  \"checked[msg.sender][epoch]\" */ dataSlot_22), /** @src 0:10265:10299  \"checked[msg.sender][epoch] |= mask\" */ result_1))\n                        /// @src 0:10314:10351  \"CheckedIn(msg.sender, habitId, epoch)\"\n                        log4(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:10314:10351  \"CheckedIn(msg.sender, habitId, epoch)\" */ 0xb004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682, /** @src 0:9946:9956  \"msg.sender\" */ caller(), /** @src 0:10314:10351  \"CheckedIn(msg.sender, habitId, epoch)\" */ bits, _25)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xa8389e0a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_7 := abi_decode_address()\n                        let value1_5 := abi_decode_uint64()\n                        mstore(0, and(value0_7, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ 6)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_23 := keccak256(0, 64)\n                        /// @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\"\n                        let dataSlot_24 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ value1_5, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ dataSlot_23)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_24 := keccak256(0, 0x40)\n                        let _27 := sload(/** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ dataSlot_24)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, _27)\n                        return(memPos_9, 32)\n                    }\n                    case 0xb650673a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_8 := abi_decode_uint32()\n                        mstore(0, /** @src 0:7641:7651  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7634:7640  \"habits\" */ 0x03)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_25 := keccak256(0, 64)\n                        /// @src 0:7634:7661  \"habits[msg.sender][habitId]\"\n                        let dataSlot_26 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, and(/** @src 0:7634:7661  \"habits[msg.sender][habitId]\" */ value0_8, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:7634:7652  \"habits[msg.sender]\" */ dataSlot_25)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_26 := keccak256(0, 0x40)\n                        /// @src 0:7675:7695  \"habit.createdAtEpoch\"\n                        let _28 := add(/** @src 0:7634:7661  \"habits[msg.sender][habitId]\" */ dataSlot_26, /** @src 0:7675:7695  \"habit.createdAtEpoch\" */ 1)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _29 := sload(/** @src 0:7675:7695  \"habit.createdAtEpoch\" */ _28)\n                        /// @src 0:7671:7724  \"if (habit.createdAtEpoch == 0) revert HabitNotFound()\"\n                        if /** @src 0:7675:7700  \"habit.createdAtEpoch == 0\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(_29, 0xffffffffffffffff))\n                        /// @src 0:7671:7724  \"if (habit.createdAtEpoch == 0) revert HabitNotFound()\"\n                        {\n                            /// @src 0:7709:7724  \"HabitNotFound()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:10032:10047  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                            /// @src 0:7709:7724  \"HabitNotFound()\"\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:7734:7783  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        if /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(shr(64, _29), 0xff)\n                        /// @src 0:7734:7783  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        {\n                            /// @src 0:7761:7783  \"HabitAlreadyArchived()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:7761:7783  \"HabitAlreadyArchived()\" */ shl(227, 0x18383099))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(_28, or(and(_29, not(0xff0000000000000000)), 0x010000000000000000))\n                        mstore(0, /** @src 0:7641:7651  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7836:7846  \"userStates\" */ 0x02)\n                        /// @src 0:7836:7875  \"userStates[msg.sender].activeHabitCount\"\n                        let _30 := add(/** @src 0:761:14758  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:7634:7640  \"habits\" */ 0x03)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:7836:7877  \"userStates[msg.sender].activeHabitCount--\" */ _30, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7836:7877  \"userStates[msg.sender].activeHabitCount--\" */ _30), /** @src 0:761:14758  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(add(and(sload(/** @src 0:7836:7877  \"userStates[msg.sender].activeHabitCount--\" */ _30), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff), not(0)), 0xffffffff), 0xffffffff)))\n                        /// @src 0:7894:7928  \"HabitArchived(msg.sender, habitId)\"\n                        log3(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:7894:7928  \"HabitArchived(msg.sender, habitId)\" */ 0x0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3, /** @src 0:7641:7651  \"msg.sender\" */ caller(), /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:7894:7928  \"HabitArchived(msg.sender, habitId)\" */ value0_8, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff))\n                        return(0, 0)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:4785:4827  \"if (msg.value == 0) revert InvalidAmount()\"\n                        if /** @src 0:4789:4803  \"msg.value == 0\" */ iszero(/** @src 0:4789:4798  \"msg.value\" */ callvalue())\n                        /// @src 0:4785:4827  \"if (msg.value == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:4812:4827  \"InvalidAmount()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:5405:5420  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 0:4812:4827  \"InvalidAmount()\"\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:4848:4858  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(0x20, /** @src 0:4837:4847  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_27 := keccak256(0, 64)\n                        sstore(dataSlot_27, /** @src 0:4837:4887  \"userStates[msg.sender].depositBalance += msg.value\" */ checked_add_uint256(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:4837:4887  \"userStates[msg.sender].depositBalance += msg.value\" */ dataSlot_27), /** @src 0:4789:4798  \"msg.value\" */ callvalue()))\n                        /// @src 0:4902:4934  \"Deposited(msg.sender, msg.value)\"\n                        let _31 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_31, /** @src 0:4789:4798  \"msg.value\" */ callvalue())\n                        /// @src 0:4902:4934  \"Deposited(msg.sender, msg.value)\"\n                        log2(_31, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:4902:4934  \"Deposited(msg.sender, msg.value)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:4848:4858  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xd1058e59 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let var_total := 0\n                        /// @src 0:13704:13717  \"uint256 total\"\n                        var_total := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                        mstore(0, /** @src 0:13766:13776  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(0x20, /** @src 0:13755:13765  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_28 := keccak256(0, 64)\n                        let cleaned := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 0:13842:14216  \"if (address(stakingAdapter) != address(0)) {...\"\n                        if /** @src 0:13846:13883  \"address(stakingAdapter) != address(0)\" */ iszero(iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ cleaned))\n                        /// @src 0:13842:14216  \"if (address(stakingAdapter) != address(0)) {...\"\n                        {\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            let _32 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            mstore(_32, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(225, 0x26d352ab))\n                            mstore(/** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ add(_32, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 4), /** @src 0:13766:13776  \"msg.sender\" */ caller())\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            let _33 := staticcall(gas(), cleaned, _32, 36, _32, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20)\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            if iszero(_33)\n                            {\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                let pos := mload(64)\n                                returndatacopy(pos, 0, returndatasize())\n                                revert(pos, returndatasize())\n                            }\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            let expr_3 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                            /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                            if _33\n                            {\n                                let _34 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20\n                                /// @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\"\n                                if gt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ returndatasize()) { _34 := returndatasize() }\n                                finalize_allocation(_32, _34)\n                                let value0_9 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                                if slt(sub(/** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ add(_32, _34), _32), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32) { revert(0, 0) }\n                                value0_9 := mload(/** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ _32)\n                                expr_3 := value0_9\n                            }\n                            /// @src 0:13972:14095  \"if (staked > 0) {...\"\n                            if /** @src 0:13976:13986  \"staked > 0\" */ iszero(iszero(expr_3))\n                            /// @src 0:13972:14095  \"if (staked > 0) {...\"\n                            {\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                if iszero(extcodesize(cleaned))\n                                {\n                                    /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                    revert(0, 0)\n                                }\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                let _35 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                mstore(_35, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(229, 0x06153397))\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                let tail := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0\n                                tail := add(/** @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\" */ _35, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 68)\n                                mstore(/** @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\" */ add(_35, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 4), /** @src 0:13766:13776  \"msg.sender\" */ caller())\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                mstore(add(/** @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\" */ _35, /** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ 36), /** @src 0:761:14758  \"contract HabitTracker {...\" */ expr_3)\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                let _36 := call(gas(), cleaned, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0, /** @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\" */ _35, 68, _35, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0)\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                if iszero(_36)\n                                {\n                                    /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                    let pos_1 := mload(64)\n                                    returndatacopy(pos_1, 0, returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 0:14006:14048  \"stakingAdapter.unstake(msg.sender, staked)\"\n                                if _36\n                                {\n                                    finalize_allocation(_35, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0)\n                                    _2 := 0\n                                }\n                                /// @src 0:14066:14080  \"total = staked\"\n                                var_total := expr_3\n                            }\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let cleaned_1 := and(sload(_2), sub(shl(160, 1), 1))\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            let _37 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            mstore(_37, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(226, 0x3bd73ee3))\n                            mstore(/** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_37, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 4), /** @src 0:13766:13776  \"msg.sender\" */ caller())\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            let _38 := call(gas(), cleaned_1, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ _37, /** @src 0:13916:13958  \"stakingAdapter.getStakedAmount(msg.sender)\" */ 36, /** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ _37, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20)\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            if iszero(_38)\n                            {\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                let pos_2 := mload(64)\n                                returndatacopy(pos_2, _2, returndatasize())\n                                revert(pos_2, returndatasize())\n                            }\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            let expr_4 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ _2\n                            /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                            if _38\n                            {\n                                let _39 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20\n                                /// @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\"\n                                if gt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ returndatasize()) { _39 := returndatasize() }\n                                finalize_allocation(_37, _39)\n                                let value0_10 := /** @src -1:-1:-1 */ 0\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                if slt(sub(/** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_37, _39), _37), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32)\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                                value0_10 := mload(/** @src 0:14131:14170  \"stakingAdapter.claimRewards(msg.sender)\" */ _37)\n                                expr_4 := value0_10\n                            }\n                            /// @src 0:14184:14205  \"total += yieldRewards\"\n                            var_total := checked_add_uint256(var_total, expr_4)\n                        }\n                        /// @src 0:14287:14309  \"state.claimableBalance\"\n                        let _40 := add(dataSlot_28, /** @src 0:13755:13765  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _41 := sload(/** @src 0:14287:14309  \"state.claimableBalance\" */ _40)\n                        /// @src 0:14319:14512  \"if (claimable > 0) {...\"\n                        if /** @src 0:14323:14336  \"claimable > 0\" */ iszero(iszero(_41))\n                        /// @src 0:14319:14512  \"if (claimable > 0) {...\"\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            sstore(_40, _2)\n                            /// @src 0:14397:14469  \"BalanceMoved(msg.sender, BALANCE_CLAIMABLE, BALANCE_EXTERNAL, claimable)\"\n                            let _42 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                            mstore(_42, _41)\n                            /// @src 0:14397:14469  \"BalanceMoved(msg.sender, BALANCE_CLAIMABLE, BALANCE_EXTERNAL, claimable)\"\n                            log4(_42, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:14397:14469  \"BalanceMoved(msg.sender, BALANCE_CLAIMABLE, BALANCE_EXTERNAL, claimable)\" */ 0x1a76aaec2e9828be3e61d555cee697fff809245531b81aeaabfc9802480b1f05, /** @src 0:13766:13776  \"msg.sender\" */ caller(), /** @src 0:1133:1134  \"1\" */ 0x01, /** @src 0:13755:13765  \"userStates\" */ 0x02)\n                            /// @src 0:14483:14501  \"total += claimable\"\n                            var_total := checked_add_uint256(var_total, _41)\n                        }\n                        /// @src 0:14530:14573  \"if (total > 0) _transfer(msg.sender, total)\"\n                        if /** @src 0:14534:14543  \"total > 0\" */ iszero(iszero(var_total))\n                        /// @src 0:14530:14573  \"if (total > 0) _transfer(msg.sender, total)\"\n                        {\n                            /// @src 0:14567:14572  \"total\"\n                            fun_transfer(/** @src 0:13766:13776  \"msg.sender\" */ caller(), /** @src 0:14567:14572  \"total\" */ var_total)\n                        }\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, var_total)\n                        return(memPos_10, 0x20)\n                    }\n                    case 0xdb0f53f9 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let cleaned_2 := and(sload(_2), sub(shl(160, 1), 1))\n                        /// @src 0:13330:13403  \"if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter()\"\n                        if /** @src 0:13334:13371  \"address(stakingAdapter) == address(0)\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ cleaned_2)\n                        /// @src 0:13330:13403  \"if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter()\"\n                        {\n                            /// @src 0:13380:13403  \"InvalidStakingAdapter()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:4290:4313  \"InvalidStakingAdapter()\" */ shl(225, 0x6eba82c9))\n                            /// @src 0:13380:13403  \"InvalidStakingAdapter()\"\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, 4)\n                        }\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let _43 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        mstore(_43, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(226, 0x3bd73ee3))\n                        mstore(/** @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_43, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 4), /** @src 0:13459:13469  \"msg.sender\" */ caller())\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let _44 := call(gas(), cleaned_2, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\" */ _43, 36, _43, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32)\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        if iszero(_44)\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, _2, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let expr_5 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ _2\n                        /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                        if _44\n                        {\n                            let _45 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32\n                            /// @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\"\n                            if gt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 32, /** @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\" */ returndatasize()) { _45 := returndatasize() }\n                            finalize_allocation(_43, _45)\n                            let value0_11 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            if slt(sub(/** @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_43, _45), _43), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            value0_11 := mload(/** @src 0:13431:13470  \"stakingAdapter.claimRewards(msg.sender)\" */ _43)\n                            expr_5 := value0_11\n                        }\n                        /// @src 0:13480:13527  \"if (claimed > 0) _transfer(msg.sender, claimed)\"\n                        if /** @src 0:13484:13495  \"claimed > 0\" */ iszero(iszero(expr_5))\n                        /// @src 0:13480:13527  \"if (claimed > 0) _transfer(msg.sender, claimed)\"\n                        {\n                            /// @src 0:13519:13526  \"claimed\"\n                            fun_transfer(/** @src 0:13459:13469  \"msg.sender\" */ caller(), /** @src 0:13519:13526  \"claimed\" */ expr_5)\n                        }\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_11 := mload(64)\n                        mstore(memPos_11, expr_5)\n                        return(memPos_11, 32)\n                    }\n                    case 0xe9714e07 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value_9 := calldataload(4)\n                        /// @src 0:6923:6972  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        if /** @src 0:6927:6945  \"text == bytes32(0)\" */ iszero(value_9)\n                        /// @src 0:6923:6972  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        {\n                            /// @src 0:6954:6972  \"HabitTextTooLong()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:6954:6972  \"HabitTextTooLong()\" */ shl(224, 0xcc67c13b))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, 4)\n                        }\n                        mstore(_2, /** @src 0:7028:7038  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, 4)\n                        let dataSlot_29 := keccak256(_2, 64)\n                        let value_10 := and(sload(/** @src 0:7008:7039  \"++userHabitCounters[msg.sender]\" */ dataSlot_29), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                        if eq(value_10, 0xffffffff)\n                        {\n                            /// @src 0:886:891  \"86400\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ 4, /** @src 0:886:891  \"86400\" */ 0x11)\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:886:891  \"86400\" */ 0x24)\n                        }\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let ret := add(value_10, 1)\n                        sstore(/** @src 0:7008:7039  \"++userHabitCounters[msg.sender]\" */ dataSlot_29, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7008:7039  \"++userHabitCounters[msg.sender]\" */ dataSlot_29), /** @src 0:761:14758  \"contract HabitTracker {...\" */ not(0xffffffff)), and(/** @src 0:7008:7039  \"++userHabitCounters[msg.sender]\" */ ret, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)))\n                        let _46 := and(/** @src 0:7053:7066  \"habitId > 255\" */ ret, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff)\n                        /// @src 0:7049:7092  \"if (habitId > 255) revert HabitIdTooLarge()\"\n                        if /** @src 0:7053:7066  \"habitId > 255\" */ gt(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _46, /** @src 0:7063:7066  \"255\" */ 0xff)\n                        /// @src 0:7049:7092  \"if (habitId > 255) revert HabitIdTooLarge()\"\n                        {\n                            /// @src 0:7075:7092  \"HabitIdTooLarge()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:7075:7092  \"HabitIdTooLarge()\" */ shl(224, 0xe9987cdd))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, 4)\n                        }\n                        /// @src 0:7217:7227  \"epochNow()\"\n                        let var_3 := /** @src -1:-1:-1 */ _2\n                        /// @src 0:4043:4091  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_3 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4057:4072  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPtr := mload(64)\n                        let newFreePtr := add(memPtr, 96)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(/** @src -1:-1:-1 */ _2, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ _2, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr, value_9)\n                        /// @src 0:7157:7267  \"Habit({...\"\n                        let _47 := add(memPtr, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32)\n                        mstore(_47, var_3)\n                        /// @src 0:7157:7267  \"Habit({...\"\n                        let _48 := add(memPtr, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 64)\n                        mstore(_48, _2)\n                        mstore(_2, /** @src 0:7028:7038  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7127:7133  \"habits\" */ 0x03)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let dataSlot_30 := keccak256(_2, 64)\n                        /// @src 0:7127:7154  \"habits[msg.sender][habitId]\"\n                        let dataSlot_31 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _46)\n                        mstore(0x20, /** @src 0:7127:7145  \"habits[msg.sender]\" */ dataSlot_30)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        dataSlot_31 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                        sstore(/** @src 0:7127:7154  \"habits[msg.sender][habitId]\" */ dataSlot_31, /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(memPtr))\n                        let memberSlot := add(/** @src 0:7127:7154  \"habits[msg.sender][habitId]\" */ dataSlot_31, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 1)\n                        sstore(memberSlot, or(and(sload(memberSlot), not(0xffffffffffffffff)), and(mload(_47), 0xffffffffffffffff)))\n                        let cleaned_3 := iszero(iszero(mload(_48)))\n                        let _49 := sload(memberSlot)\n                        sstore(memberSlot, or(and(_49, not(0xff0000000000000000)), and(shl(64, cleaned_3), 0xff0000000000000000)))\n                        mstore(_2, /** @src 0:7028:7038  \"msg.sender\" */ caller())\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7298:7308  \"userStates\" */ 0x02)\n                        /// @src 0:7298:7337  \"userStates[msg.sender].activeHabitCount\"\n                        let _50 := add(/** @src 0:761:14758  \"contract HabitTracker {...\" */ keccak256(_2, 64), /** @src 0:7127:7133  \"habits\" */ 0x03)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:7298:7339  \"userStates[msg.sender].activeHabitCount++\" */ _50, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7298:7339  \"userStates[msg.sender].activeHabitCount++\" */ _50), /** @src 0:761:14758  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(add(and(sload(/** @src 0:7298:7339  \"userStates[msg.sender].activeHabitCount++\" */ _50), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff), 1), 0xffffffff), 0xffffffff)))\n                        /// @src 0:7365:7404  \"HabitCreated(msg.sender, habitId, text)\"\n                        let _51 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_51, value_9)\n                        /// @src 0:7365:7404  \"HabitCreated(msg.sender, habitId, text)\"\n                        log3(_51, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 32, /** @src 0:7365:7404  \"HabitCreated(msg.sender, habitId, text)\" */ 0x1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453, /** @src 0:7028:7038  \"msg.sender\" */ caller(), /** @src 0:7365:7404  \"HabitCreated(msg.sender, habitId, text)\" */ _46)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let memPos_12 := mload(64)\n                        mstore(memPos_12, _46)\n                        return(memPos_12, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value0_12 := abi_decode_address()\n                        /// @src 0:4500:4672  \"function transferOwnership(address newOwner) external {...\"\n                        fun_checkOwner()\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let _52 := and(/** @src 0:4591:4613  \"newOwner == address(0)\" */ value0_12, /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:4587:4639  \"if (newOwner == address(0)) revert InvalidTreasury()\"\n                        if /** @src 0:4591:4613  \"newOwner == address(0)\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _52)\n                        /// @src 0:4587:4639  \"if (newOwner == address(0)) revert InvalidTreasury()\"\n                        {\n                            /// @src 0:4622:4639  \"InvalidTreasury()\"\n                            mstore(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, /** @src 0:4622:4639  \"InvalidTreasury()\" */ shl(227, 0x02979eb9))\n                            revert(/** @src 0:761:14758  \"contract HabitTracker {...\" */ _2, 4)\n                        }\n                        sstore(/** @src 0:4649:4665  \"owner = newOwner\" */ 0x01, /** @src 0:761:14758  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:4649:4665  \"owner = newOwner\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(160, 0xffffffffffffffffffffffff)), _52))\n                        return(_2, _2)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_uint64() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_t_uint32() -> value\n            {\n                value := calldataload(68)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_uint32() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    /// @src 0:886:891  \"86400\"\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @src 0:761:14758  \"contract HabitTracker {...\"\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                    /// @src 0:761:14758  \"contract HabitTracker {...\"\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @ast-id 193 @src 0:3438:3534  \"function _checkOwner() private view {...\"\n            function fun_checkOwner()\n            {\n                /// @src 0:3484:3527  \"if (msg.sender != owner) revert OnlyOwner()\"\n                if /** @src 0:3488:3507  \"msg.sender != owner\" */ iszero(eq(/** @src 0:3488:3498  \"msg.sender\" */ caller(), /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(sload(/** @src 0:3502:3507  \"owner\" */ 0x01), /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                /// @src 0:3484:3527  \"if (msg.sender != owner) revert OnlyOwner()\"\n                {\n                    /// @src 0:3516:3527  \"OnlyOwner()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:3516:3527  \"OnlyOwner()\" */ shl(224, 0x5fc483c5))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:3516:3527  \"OnlyOwner()\" */ 4)\n                }\n            }\n            /// @ast-id 478 @src 0:6445:6609  \"function _transfer(address to, uint256 amount) private {...\"\n            function fun_transfer(var_to, var_amount)\n            {\n                /// @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\"\n                let expr_component := call(gas(), var_to, var_amount, 0, 0, 0, 0)\n                let data := 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        mstore(4, 0x41)\n                        revert(/** @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ returndatasize())\n                }\n                /// @src 0:6565:6602  \"if (!success) revert TransferFailed()\"\n                if /** @src 0:6569:6577  \"!success\" */ iszero(expr_component)\n                /// @src 0:6565:6602  \"if (!success) revert TransferFailed()\"\n                {\n                    /// @src 0:6586:6602  \"TransferFailed()\"\n                    mstore(/** @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:6586:6602  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                    revert(/** @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:6586:6602  \"TransferFailed()\" */ 4)\n                }\n            }\n            /// @ast-id 1007 @src 0:11657:13120  \"function _settleInternal(address user, uint64 epoch, uint32 habitId) private {...\"\n            function fun_settleInternal(var_user, var_epoch, var_habitId)\n            {\n                /// @src 0:11748:11760  \"habits[user]\"\n                let dataSlot := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let _1 := and(var_user, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11748:11754  \"habits\" */ 0x03)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11748:11769  \"habits[user][habitId]\"\n                let dataSlot_2 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:11748:11769  \"habits[user][habitId]\" */ var_habitId, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffff))\n                mstore(0x20, /** @src 0:11748:11760  \"habits[user]\" */ dataSlot_1)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                dataSlot_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11744:11813  \"if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound()\"\n                if /** @src 0:11748:11789  \"habits[user][habitId].createdAtEpoch == 0\" */ iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(sload(/** @src 0:11748:11784  \"habits[user][habitId].createdAtEpoch\" */ add(/** @src 0:11748:11769  \"habits[user][habitId]\" */ dataSlot_2, /** @src 0:11748:11784  \"habits[user][habitId].createdAtEpoch\" */ 1)), /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                /// @src 0:11744:11813  \"if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound()\"\n                {\n                    /// @src 0:11798:11813  \"HabitNotFound()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:10032:10047  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                    /// @src 0:11798:11813  \"HabitNotFound()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11798:11813  \"HabitNotFound()\" */ 4)\n                }\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let bits := and(var_habitId, 0xffffffff)\n                let result := shl(bits, /** @src 0:11748:11784  \"habits[user][habitId].createdAtEpoch\" */ 1)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11873:11879  \"funded\" */ 0x05)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11873:11892  \"funded[user][epoch]\"\n                let dataSlot_4 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:11873:11892  \"funded[user][epoch]\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:11873:11885  \"funded[user]\" */ dataSlot_3)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                dataSlot_4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11869:11927  \"if (funded[user][epoch] & mask == 0) revert DayNotFunded()\"\n                if /** @src 0:11873:11904  \"funded[user][epoch] & mask == 0\" */ iszero(/** @src 0:11873:11899  \"funded[user][epoch] & mask\" */ and(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:11873:11892  \"funded[user][epoch]\" */ dataSlot_4), /** @src 0:11873:11899  \"funded[user][epoch] & mask\" */ result))\n                /// @src 0:11869:11927  \"if (funded[user][epoch] & mask == 0) revert DayNotFunded()\"\n                {\n                    /// @src 0:11913:11927  \"DayNotFunded()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:10153:10167  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                    /// @src 0:11913:11927  \"DayNotFunded()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11913:11927  \"DayNotFunded()\" */ 4)\n                }\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11941:11948  \"settled\" */ 0x07)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11941:11961  \"settled[user][epoch]\"\n                let dataSlot_6 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:11941:11961  \"settled[user][epoch]\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:11941:11954  \"settled[user]\" */ dataSlot_5)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                dataSlot_6 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11937:11998  \"if (settled[user][epoch] & mask != 0) revert AlreadySettled()\"\n                if /** @src 0:11941:11973  \"settled[user][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:11941:11968  \"settled[user][epoch] & mask\" */ and(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:11941:11961  \"settled[user][epoch]\" */ dataSlot_6), /** @src 0:11941:11968  \"settled[user][epoch] & mask\" */ result)))\n                /// @src 0:11937:11998  \"if (settled[user][epoch] & mask != 0) revert AlreadySettled()\"\n                {\n                    /// @src 0:11982:11998  \"AlreadySettled()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:11982:11998  \"AlreadySettled()\" */ shl(232, 5640185))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11982:11998  \"AlreadySettled()\" */ 4)\n                }\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11941:11948  \"settled\" */ 0x07)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12017:12037  \"settled[user][epoch]\"\n                let dataSlot_8 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:12017:12037  \"settled[user][epoch]\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:12017:12030  \"settled[user]\" */ dataSlot_7)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                dataSlot_8 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                sstore(/** @src 0:12017:12037  \"settled[user][epoch]\" */ dataSlot_8, /** @src 0:12017:12045  \"settled[user][epoch] |= mask\" */ or(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:12017:12037  \"settled[user][epoch]\" */ dataSlot_8), /** @src 0:12017:12045  \"settled[user][epoch] |= mask\" */ result))\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:12081:12091  \"userStates\" */ 0x02)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_9 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12173:12193  \"state.blockedBalance\"\n                let _2 := add(dataSlot_9, /** @src 0:11748:11784  \"habits[user][habitId].createdAtEpoch\" */ 1)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let _3 := sload(/** @src 0:12173:12193  \"state.blockedBalance\" */ _2)\n                /// @src 0:12169:12239  \"if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance()\"\n                if /** @src 0:12173:12209  \"state.blockedBalance < STAKE_PER_DAY\" */ lt(_3, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                /// @src 0:12169:12239  \"if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance()\"\n                {\n                    /// @src 0:12218:12239  \"InsufficientBalance()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:5941:5962  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                    /// @src 0:12218:12239  \"InsufficientBalance()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:12218:12239  \"InsufficientBalance()\" */ 4)\n                }\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                sstore(_2, add(_3, not(0x8ac7230489e7ffff)))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:12323:12330  \"checked\" */ 0x06)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                let dataSlot_10 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12323:12343  \"checked[user][epoch]\"\n                let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:12323:12343  \"checked[user][epoch]\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:12323:12336  \"checked[user]\" */ dataSlot_10)\n                /// @src 0:761:14758  \"contract HabitTracker {...\"\n                dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12319:13114  \"if (checked[user][epoch] & mask != 0) {...\"\n                switch /** @src 0:12323:12355  \"checked[user][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:12323:12350  \"checked[user][epoch] & mask\" */ and(/** @src 0:761:14758  \"contract HabitTracker {...\" */ sload(/** @src 0:12323:12343  \"checked[user][epoch]\" */ dataSlot_11), /** @src 0:12323:12350  \"checked[user][epoch] & mask\" */ result)))\n                case /** @src 0:12319:13114  \"if (checked[user][epoch] & mask != 0) {...\" */ 0 {\n                    /// @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\"\n                    let expr_component := call(gas(), /** @src 0:13012:13020  \"treasury\" */ loadimmutable(\"11\"), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000, /** @src -1:-1:-1 */ 0, 0, 0, 0)\n                    /// @src 0:6529:6555  \"to.call{value: amount}(\\\"\\\")\"\n                    let data := /** @src -1:-1:-1 */ 0\n                    /// @src 0:761:14758  \"contract HabitTracker {...\"\n                    switch returndatasize()\n                    case 0 { data := 96 }\n                    default {\n                        let _4 := returndatasize()\n                        if gt(_4, 0xffffffffffffffff)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x24)\n                        }\n                        let memPtr := mload(0x40)\n                        finalize_allocation(memPtr, add(and(add(_4, 31), not(31)), 0x20))\n                        mstore(memPtr, _4)\n                        data := memPtr\n                        returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ returndatasize())\n                    }\n                    /// @src 0:6565:6602  \"if (!success) revert TransferFailed()\"\n                    if /** @src 0:6569:6577  \"!success\" */ iszero(expr_component)\n                    /// @src 0:6565:6602  \"if (!success) revert TransferFailed()\"\n                    {\n                        /// @src 0:6586:6602  \"TransferFailed()\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:6586:6602  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:6586:6602  \"TransferFailed()\" */ 4)\n                    }\n                    /// @src 0:13055:13103  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _5 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_5, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:13055:13103  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_5, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:13055:13103  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xbe6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba, _1, bits, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:13055:13103  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n                default /// @src 0:12319:13114  \"if (checked[user][epoch] & mask != 0) {...\"\n                {\n                    /// @src 0:12524:12843  \"if (address(stakingAdapter) != address(0)) {...\"\n                    switch /** @src 0:12528:12565  \"address(stakingAdapter) != address(0)\" */ iszero(iszero(/** @src 0:761:14758  \"contract HabitTracker {...\" */ and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                    case /** @src 0:12524:12843  \"if (address(stakingAdapter) != address(0)) {...\" */ 0 {\n                        /// @src 0:12787:12809  \"state.claimableBalance\"\n                        let _6 := add(dataSlot_9, /** @src 0:12081:12091  \"userStates\" */ 0x02)\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        sstore(_6, add(sload(/** @src 0:12787:12826  \"state.claimableBalance += STAKE_PER_DAY\" */ _6), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                    }\n                    default /// @src 0:12524:12843  \"if (address(stakingAdapter) != address(0)) {...\"\n                    {\n                        /// @src 0:761:14758  \"contract HabitTracker {...\"\n                        let cleaned := and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14758  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if iszero(extcodesize(cleaned))\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        let _7 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(0x40)\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        mstore(_7, /** @src 0:761:14758  \"contract HabitTracker {...\" */ shl(225, 0x56e4bb97))\n                        mstore(/** @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ add(_7, 4), /** @src 0:761:14758  \"contract HabitTracker {...\" */ _1)\n                        mstore(add(/** @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ _7, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 36), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        let _8 := call(gas(), cleaned, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000, /** @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ _7, 68, _7, /** @src -1:-1:-1 */ 0)\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if iszero(_8)\n                        {\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            let pos := mload(0x40)\n                            returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:761:14758  \"contract HabitTracker {...\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 0:12585:12648  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if _8\n                        {\n                            finalize_allocation(_7, /** @src -1:-1:-1 */ 0)\n                            /// @src 0:761:14758  \"contract HabitTracker {...\"\n                            dataSlot := /** @src -1:-1:-1 */ 0\n                        }\n                    }\n                    /// @src 0:12861:12912  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _9 := /** @src 0:761:14758  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_9, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:12861:12912  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_9, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0x20, /** @src 0:12861:12912  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209, _1, bits, /** @src 0:761:14758  \"contract HabitTracker {...\" */ and(/** @src 0:12861:12912  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:761:14758  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220916062a79dda48688ee9fd11a13c5d6bb9a3a9b0fbff2adeaeccf1f8494624e164736f6c634300081c0033\"\n    }\n}\n",
          "hash": "bd852a319bf254866542d64ebf7f6bc2312fded118c9893927546b55bc27f1a3",
          "factoryDependencies": {}
        }
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "IStakingAdapter": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "claimRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "claimed",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getPendingRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "pending",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getStakedAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "staked",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows HabitTracker to integrate with any staking protocol Terminology: - Yield Stake: User rewards staked in external protocol (principal) - Yield Rewards: Additional rewards generated from external protocol\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Returns 0 if no yield rewards available or not supportedClaimed rewards should be sent back to HabitTracker\",\"params\":{\"user\":\"Address of the user whose yield rewards to claim\"},\"returns\":{\"claimed\":\"Amount of yield rewards claimed\"}},\"getPendingRewards(address)\":{\"details\":\"Returns 0 if not supported by protocol\",\"params\":{\"who\":\"Address to check\"},\"returns\":{\"pending\":\"Pending yield rewards\"}},\"getStakedAmount(address)\":{\"params\":{\"who\":\"Address to check\"},\"returns\":{\"staked\":\"Total yield stake by address (excludes yield rewards)\"}},\"stake(address,uint256)\":{\"details\":\"For native token staking, msg.value should equal amount\",\"params\":{\"amount\":\"Amount to stake (user's earned rewards)\",\"user\":\"Address of the user whose rewards are being staked\"}},\"unstake(address,uint256)\":{\"details\":\"Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker\",\"params\":{\"amount\":\"Amount to unstake\",\"user\":\"Address of the user whose rewards are being unstaked\"}}},\"title\":\"IStakingAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"Claim accumulated yield rewards from external protocol for a specific user\"},\"getPendingRewards(address)\":{\"notice\":\"Get pending unclaimed yield rewards for an address\"},\"getStakedAmount(address)\":{\"notice\":\"Get total yield stake amount for an address (principal only)\"},\"stake(address,uint256)\":{\"notice\":\"Create yield stake by staking user rewards into external protocol\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake from external protocol (yield stake + yield rewards)\"}},\"notice\":\"Chain-agnostic interface for external staking protocols\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakingAdapter.sol\":\"IStakingAdapter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "claimRewards(address)": "ef5cfb8c",
              "getPendingRewards(address)": "f6ed2017",
              "getStakedAmount(address)": "4da6a556",
              "stake(address,uint256)": "adc9772e",
              "unstake(address,uint256)": "c2a672e0"
            }
          },
          "irOptimized": ""
        }
      }
    }
  }
}