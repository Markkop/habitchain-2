{
  "id": "4aca050a7b0cb25b6a816e106c82461c",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/adapters/MoonwellAdapter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"../interfaces/IStakingAdapter.sol\";\n\n/**\n * @notice Minimal ERC20 interface\n */\ninterface IERC20 {\n    function approve(address spender, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\n/**\n * @notice Moonwell mToken interface (native GLMR version - CEther-style)\n */\ninterface IMTokenNative {\n    function mint() external payable; // CEther-style: amount = msg.value\n    function redeem(uint256 redeemTokens) external returns (uint256);\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function exchangeRateStored() external view returns (uint256);\n}\n\n/**\n * @notice Moonwell Comptroller interface\n */\ninterface IComptroller {\n    function claimReward(uint8 rewardType, address holder, address[] calldata mTokens) external;\n}\n\n/**\n * @title MoonwellAdapter\n * @notice Adapter for HabitTracker to create yield stakes in Moonwell on Moonbeam\n * @dev Supports native GLMR staking via mGLMR market\n * \n * @dev Terminology:\n * - Yield Stake: User rewards from successful habits staked here (userStakes)\n * - Yield Rewards: Additional rewards generated from Moonwell (WELL tokens + supply APY)\n * \n * @dev When user completes a habit successfully, their reward is sent here as a yield stake\n * to generate additional yield rewards over time\n */\ncontract MoonwellAdapter is IStakingAdapter {\n    address public immutable mToken;        // mGLMR address\n    address public immutable comptroller;   // Moonwell Comptroller\n    address public immutable habitTracker;  // Only HabitTracker can call\n\n    mapping(address => uint256) public userStakes; // Track per-user yield stakes (principal)\n\n    event Staked(address indexed user, uint256 amount, uint256 mTokens);\n    event Unstaked(address indexed user, uint256 amount, uint256 mTokens);\n    event RewardsClaimed(address indexed user, uint256 amount);\n\n    error OnlyHabitTracker();\n    error MintFailed();\n    error RedeemFailed();\n    error InvalidAmount();\n\n    modifier onlyHabitTracker() {\n        if (msg.sender != habitTracker) revert OnlyHabitTracker();\n        _;\n    }\n\n    /**\n     * @param _mToken Moonwell mGLMR token address\n     * @param _comptroller Moonwell Comptroller address\n     * @param _habitTracker HabitTracker contract address\n     */\n    constructor(address _mToken, address _comptroller, address _habitTracker) {\n        mToken = _mToken;\n        comptroller = _comptroller;\n        habitTracker = _habitTracker;\n    }\n\n    /**\n     * @notice Create yield stake by staking user rewards into Moonwell\n     * @param user Address of the user whose rewards are being staked\n     * @param amount Amount of GLMR to stake (user's earned reward)\n     * @dev msg.value must equal amount (native token)\n     * @dev This converts user rewards into yield stakes that generate yield rewards\n     */\n    function stake(address user, uint256 amount) external payable onlyHabitTracker {\n        if (msg.value != amount) revert InvalidAmount();\n        if (amount == 0) revert InvalidAmount();\n\n        // Mint mGLMR by sending GLMR (creates yield stake)\n        IMTokenNative(mToken).mint{value: amount}();\n\n        // Track user's yield stake (principal amount)\n        userStakes[user] += amount;\n\n        emit Staked(user, amount, IMTokenNative(mToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Unstake GLMR from Moonwell (redeem yield stake + accumulated yield rewards)\n     * @param user Address of the user whose rewards are being unstaked\n     * @param amount Amount of underlying GLMR to unstake\n     * @dev Redeems mGLMR and sends GLMR back to HabitTracker\n     * @dev Returns both yield stake principal and any accumulated yield rewards\n     */\n    function unstake(address user, uint256 amount) external onlyHabitTracker {\n        if (amount == 0) revert InvalidAmount();\n\n        // Redeem underlying GLMR (yield stake + yield rewards)\n        uint256 err = IMTokenNative(mToken).redeemUnderlying(amount);\n        if (err != 0) revert RedeemFailed();\n\n        // Update user's yield stake principal\n        userStakes[user] -= amount;\n\n        // Send GLMR back to HabitTracker (includes yield rewards if amount > principal)\n        (bool success, ) = habitTracker.call{value: amount}(\"\");\n        if (!success) revert RedeemFailed();\n\n        emit Unstaked(user, amount, IMTokenNative(mToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Claim yield rewards (WELL tokens) from Moonwell\n     * @param user Address of the user (unused in Moonwell - claims for entire protocol)\n     * @return claimed Amount of yield rewards claimed (0 if none)\n     * @dev Best-effort claim; returns 0 if rewards not active\n     * @dev Yield rewards = WELL tokens earned from supplying to Moonwell\n     * @dev Note: Moonwell claims are protocol-wide, not per-user\n     */\n    function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {\n        address[] memory markets = new address[](1);\n        markets[0] = mToken;\n\n        // Try to claim WELL yield rewards (rewardType 0)\n        try IComptroller(comptroller).claimReward(0, address(this), markets) {\n            // If successful, WELL yield rewards sent to this adapter\n            // HabitTracker can sweep them later\n            emit RewardsClaimed(user, 0);\n            return 0; // Don't track WELL tokens for now\n        } catch {\n            return 0; // Yield rewards not active or failed\n        }\n    }\n\n    /**\n     * @notice Get user's yield stake amount (in underlying GLMR)\n     * @param who Address to check\n     * @return staked Amount of GLMR in yield stake (principal only, excludes yield rewards)\n     */\n    function getStakedAmount(address who) external view returns (uint256 staked) {\n        // Return user's tracked yield stake principal\n        // Note: This tracks only principal, not current value including yield rewards\n        return userStakes[who];\n    }\n\n    /**\n     * @notice Get pending yield rewards (not supported by Moonwell directly)\n     * @return pending Always returns 0\n     * @dev Moonwell doesn't expose claimable yield rewards on-chain; use off-chain calculation\n     * @dev Yield rewards accumulate automatically in mToken exchange rate\n     */\n    function getPendingRewards(address /* who */) external pure returns (uint256 pending) {\n        return 0; // Not easily accessible on-chain\n    }\n\n    /**\n     * @notice Allow receiving GLMR from Moonwell redemptions\n     */\n    receive() external payable {}\n}\n\n"
      },
      "contracts/HabitTracker.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./interfaces/IStakingAdapter.sol\";\n\n/**\n * @title HabitTracker\n * @notice Gamified habit tracking with financial commitment and yield generation\n * @dev Uses epoch-based time (86400-second days) for daily cycles\n * @dev Integrates with external staking via IStakingAdapter\n * \n * @dev Two types of stakes:\n * - Funded Stake: User deposits locked during day (blockedBalance)\n * - Yield Stake: Successful rewards staked externally for yield generation\n * \n * @dev Two types of rewards:\n * - User Rewards: Base rewards from successful habit completion (claimableBalance)\n * - Yield Rewards: Additional rewards generated from external staking (tracked in adapter)\n * \n * @author HabitChain Team\n */\ncontract HabitTracker {\n    uint256 public constant STAKE_PER_DAY = 10 ether;\n    uint256 private constant SECONDS_PER_DAY = 86400;\n    address public immutable treasury;\n    IStakingAdapter public stakingAdapter;\n    address public owner;\n    \n    // Balance type identifiers\n    uint8 private constant BALANCE_DEPOSIT = 0;\n    uint8 private constant BALANCE_CLAIMABLE = 1;\n    uint8 private constant BALANCE_EXTERNAL = 2;\n    \n    // ============ Structs ============\n    \n    struct UserState {\n        uint256 depositBalance;      // Available funds for staking on habits\n        uint256 blockedBalance;      // Funded stake: locked during active day\n        uint256 claimableBalance;    // User rewards: earned from successful habits\n        uint32 activeHabitCount;\n    }\n    \n    struct Habit {\n        bytes32 text;\n        uint64 createdAtEpoch;\n        bool archived;\n    }\n    \n    mapping(address => UserState) public userStates;\n    mapping(address => mapping(uint32 => Habit)) public habits;\n    mapping(address => uint32) public userHabitCounters;\n    \n    // Bitmap storage: each bit represents a habitId (supports 256 habits per user per epoch)\n    mapping(address => mapping(uint64 => uint256)) public funded;\n    mapping(address => mapping(uint64 => uint256)) public checked;\n    mapping(address => mapping(uint64 => uint256)) public settled;\n    \n    event Deposited(address indexed user, uint256 amount);\n    event BalanceMoved(address indexed user, uint8 indexed from, uint8 indexed to, uint256 amount);\n    event HabitCreated(address indexed user, uint32 indexed habitId, bytes32 text);\n    event HabitArchived(address indexed user, uint32 indexed habitId);\n    event DayPrepared(address indexed user, uint64 indexed epoch, uint32 fundedCount, uint32 insufficientCount);\n    event CheckedIn(address indexed user, uint32 indexed habitId, uint64 indexed epoch);\n    event SettledSuccess(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 reward);\n    event SettledFail(address indexed user, uint32 indexed habitId, uint64 indexed epoch, uint256 slashed);\n    event StakingAdapterUpdated(address indexed oldAdapter, address indexed newAdapter);\n    \n    error InvalidTreasury();\n    error InvalidAmount();\n    error InsufficientBalance();\n    error InvalidBalanceType();\n    error HabitNotFound();\n    error HabitAlreadyArchived();\n    error InvalidEpoch();\n    error DayNotFunded();\n    error AlreadyCheckedIn();\n    error AlreadySettled();\n    error CannotSettleCurrentDay();\n    error TransferFailed();\n    error HabitTextTooLong();\n    error OnlyOwner();\n    error InvalidStakingAdapter();\n    error HabitIdTooLarge();\n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) revert OnlyOwner();\n        _;\n    }\n    \n    // ============ Constructor ============\n    \n    constructor(address _treasury, address _stakingAdapter) {\n        if (_treasury == address(0)) revert InvalidTreasury();\n        treasury = _treasury;\n        owner = msg.sender;\n        \n        // Staking adapter is optional - can be address(0) initially\n        if (_stakingAdapter != address(0)) {\n            stakingAdapter = IStakingAdapter(_stakingAdapter);\n        }\n    }\n    \n    function epochNow() public view returns (uint64) {\n        return uint64(block.timestamp / SECONDS_PER_DAY);\n    }\n    \n    // ============ Admin Functions ============\n    \n    function setStakingAdapter(address _newAdapter) external onlyOwner {\n        if (_newAdapter == address(0)) revert InvalidStakingAdapter();\n        address oldAdapter = address(stakingAdapter);\n        stakingAdapter = IStakingAdapter(_newAdapter);\n        emit StakingAdapterUpdated(oldAdapter, _newAdapter);\n    }\n    \n    function transferOwnership(address newOwner) external onlyOwner {\n        if (newOwner == address(0)) revert InvalidTreasury();\n        owner = newOwner;\n    }\n    \n    // ============ Balance Management ============\n    \n    function deposit() external payable {\n        if (msg.value == 0) revert InvalidAmount();\n        userStates[msg.sender].depositBalance += msg.value;\n        emit Deposited(msg.sender, msg.value);\n    }\n    \n    /**\n     * @notice Move funds between balance types\n     * @param from Source balance type (0=deposit, 1=claimable)\n     * @param to Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\n     * @param amount Amount to move\n     * @dev Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)\n     */\n    function move(uint8 from, uint8 to, uint256 amount) external {\n        if (amount == 0) revert InvalidAmount();\n        if (from == to) revert InvalidBalanceType();\n        if (from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL) revert InvalidBalanceType();\n        \n        UserState storage state = userStates[msg.sender];\n        \n        // Deduct from source\n        if (from == BALANCE_DEPOSIT) {\n            if (state.depositBalance < amount) revert InsufficientBalance();\n            unchecked { state.depositBalance -= amount; }\n        } else { // BALANCE_CLAIMABLE\n            if (state.claimableBalance < amount) revert InsufficientBalance();\n            unchecked { state.claimableBalance -= amount; }\n        }\n        \n        // Add to destination\n        if (to == BALANCE_DEPOSIT) {\n            unchecked { state.depositBalance += amount; }\n        } else if (to == BALANCE_CLAIMABLE) {\n            unchecked { state.claimableBalance += amount; }\n        } else { // BALANCE_EXTERNAL\n            _transfer(msg.sender, amount);\n        }\n        \n        emit BalanceMoved(msg.sender, from, to, amount);\n    }\n    \n    function _transfer(address to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n    }\n    \n    // ============ Habit Management Functions ============\n    \n    /**\n     * @notice Create a new habit\n     * @param text Description of the habit (up to 32 bytes)\n     * @return habitId The ID of the newly created habit\n     */\n    function createHabit(bytes32 text) external returns (uint32) {\n        if (text == bytes32(0)) revert HabitTextTooLong();\n        \n        uint32 habitId = ++userHabitCounters[msg.sender];\n        if (habitId > 255) revert HabitIdTooLarge(); // Bitmap limit\n        \n        habits[msg.sender][habitId] = Habit({\n            text: text,\n            createdAtEpoch: epochNow(),\n            archived: false\n        });\n        \n        unchecked { userStates[msg.sender].activeHabitCount++; }\n        \n        emit HabitCreated(msg.sender, habitId, text);\n        return habitId;\n    }\n    \n    /**\n     * @notice Archive a habit (soft delete)\n     * @param habitId ID of the habit to archive\n     */\n    function archiveHabit(uint32 habitId) external {\n        Habit storage habit = habits[msg.sender][habitId];\n        if (habit.createdAtEpoch == 0) revert HabitNotFound();\n        if (habit.archived) revert HabitAlreadyArchived();\n        habit.archived = true;\n        unchecked { userStates[msg.sender].activeHabitCount--; }\n        emit HabitArchived(msg.sender, habitId);\n    }\n    \n    // ============ Daily Cycle Functions ============\n    \n    /**\n     * @notice Prepare the day by locking funds (funded stake) for active habits\n     * @param epoch The epoch to prepare (must be current day)\n     * @dev Moves funds from depositBalance to blockedBalance (funded stake)\n     */\n    function prepareDay(uint64 epoch) external {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        \n        UserState storage state = userStates[msg.sender];\n        uint32 count = userHabitCounters[msg.sender];\n        uint32 fundedCount;\n        uint32 insufficientCount;\n        uint256 fundedBitmap = funded[msg.sender][epoch];\n        \n        for (uint32 i = 1; i <= count;) {\n            Habit storage habit = habits[msg.sender][i];\n            \n            if (!habit.archived && habit.createdAtEpoch != 0) {\n                uint256 mask = 1 << i;\n                \n                if (fundedBitmap & mask == 0) { // Check if not already funded\n                    if (state.depositBalance >= STAKE_PER_DAY) {\n                        unchecked {\n                            state.depositBalance -= STAKE_PER_DAY;\n                            state.blockedBalance += STAKE_PER_DAY; // Funded stake\n                            fundedCount++;\n                        }\n                        fundedBitmap |= mask; // Set funded bit\n                    } else {\n                        unchecked { insufficientCount++; }\n                    }\n                }\n            }\n            unchecked { i++; }\n        }\n        \n        funded[msg.sender][epoch] = fundedBitmap;\n        emit DayPrepared(msg.sender, epoch, fundedCount, insufficientCount);\n    }\n    \n    /**\n     * @notice Check in to a habit for the current day\n     * @param habitId ID of the habit\n     * @param epoch The epoch to check in (must be current day)\n     */\n    function checkIn(uint32 habitId, uint64 epoch) external {\n        if (epoch != epochNow()) revert InvalidEpoch();\n        Habit storage habit = habits[msg.sender][habitId];\n        if (habit.createdAtEpoch == 0 || habit.archived) revert HabitNotFound();\n        \n        uint256 mask = 1 << habitId;\n        if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded();\n        if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn();\n        \n        checked[msg.sender][epoch] |= mask;\n        emit CheckedIn(msg.sender, habitId, epoch);\n    }\n    \n    /**\n     * @notice Settle a specific habit for a past day\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (must be past day)\n     * @param habitId ID of the habit to settle\n     */\n    function settle(address user, uint64 epoch, uint32 habitId) public {\n        if (epoch >= epochNow()) revert CannotSettleCurrentDay();\n        _settleInternal(user, epoch, habitId);\n    }\n    \n    /**\n     * @notice Force settle a specific habit without epoch validation (TESTING ONLY)\n     * @dev Bypasses the \"cannot settle current day\" check - use with caution\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle (can be any epoch, including current)\n     * @param habitId ID of the habit to settle\n     */\n    function forceSettle(address user, uint64 epoch, uint32 habitId) public {\n        _settleInternal(user, epoch, habitId);\n    }\n    \n    /**\n     * @notice Internal settlement logic without epoch validation\n     * @param user Address of habit owner\n     * @param epoch The epoch to settle\n     * @param habitId ID of the habit to settle\n     * @dev Settlement flow:\n     * - SUCCESS: User reward is staked externally (yield stake) to generate yield rewards\n     * - FAIL: Funded stake is sent to treasury (slashed)\n     */\n    function _settleInternal(address user, uint64 epoch, uint32 habitId) private {\n        if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound();\n        \n        uint256 mask = 1 << habitId;\n        if (funded[user][epoch] & mask == 0) revert DayNotFunded();\n        if (settled[user][epoch] & mask != 0) revert AlreadySettled();\n        \n        settled[user][epoch] |= mask;\n        UserState storage state = userStates[user];\n        \n        // Release funded stake from blocked balance\n        if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance();\n        unchecked { state.blockedBalance -= STAKE_PER_DAY; }\n        \n        if (checked[user][epoch] & mask != 0) {\n            // SUCCESS: Create yield stake by staking user rewards externally\n            // This generates yield rewards on top of the base user reward\n            if (address(stakingAdapter) != address(0)) {\n                stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY);\n            } else {\n                // Fallback: add user reward to claimable balance (no yield generation)\n                unchecked { state.claimableBalance += STAKE_PER_DAY; }\n            }\n            emit SettledSuccess(user, habitId, epoch, STAKE_PER_DAY);\n        } else {\n            // FAIL: Slash funded stake - send to treasury\n            _transfer(treasury, STAKE_PER_DAY);\n            emit SettledFail(user, habitId, epoch, STAKE_PER_DAY);\n        }\n    }\n    \n    // ============ Yield Rewards Functions ============\n    \n    /**\n     * @notice Claim yield rewards from external staking adapter\n     * @dev Claims yield rewards for msg.sender and sends them directly to their wallet\n     * @return claimed Amount of yield rewards claimed\n     */\n    function claimYieldRewards() external returns (uint256 claimed) {\n        if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter();\n        \n        // Claim rewards from adapter (sent back to this contract)\n        claimed = stakingAdapter.claimRewards(msg.sender);\n        \n        // Transfer claimed rewards to user\n        if (claimed > 0) {\n            _transfer(msg.sender, claimed);\n        }\n        \n        return claimed;\n    }\n    \n    // ============ Receive Function ============\n    \n    /**\n     * @notice Allow receiving native tokens from staking adapter\n     */\n    receive() external payable {}\n}\n\n"
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title IStakingAdapter\n * @notice Chain-agnostic interface for external staking protocols\n * @dev Allows HabitTracker to integrate with any staking protocol\n * \n * @dev Terminology:\n * - Yield Stake: User rewards staked in external protocol (principal)\n * - Yield Rewards: Additional rewards generated from external protocol\n */\ninterface IStakingAdapter {\n    /**\n     * @notice Create yield stake by staking user rewards into external protocol\n     * @param user Address of the user whose rewards are being staked\n     * @param amount Amount to stake (user's earned rewards)\n     * @dev For native token staking, msg.value should equal amount\n     */\n    function stake(address user, uint256 amount) external payable;\n\n    /**\n     * @notice Unstake from external protocol (yield stake + yield rewards)\n     * @param user Address of the user whose rewards are being unstaked\n     * @param amount Amount to unstake\n     * @dev Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker\n     */\n    function unstake(address user, uint256 amount) external;\n\n    /**\n     * @notice Claim accumulated yield rewards from external protocol for a specific user\n     * @param user Address of the user whose yield rewards to claim\n     * @return claimed Amount of yield rewards claimed\n     * @dev Returns 0 if no yield rewards available or not supported\n     * @dev Claimed rewards should be sent back to HabitTracker\n     */\n    function claimRewards(address user) external returns (uint256 claimed);\n\n    /**\n     * @notice Get total yield stake amount for an address (principal only)\n     * @param who Address to check\n     * @return staked Total yield stake by address (excludes yield rewards)\n     */\n    function getStakedAmount(address who) external view returns (uint256 staked);\n\n    /**\n     * @notice Get pending unclaimed yield rewards for an address\n     * @param who Address to check\n     * @return pending Pending yield rewards\n     * @dev Returns 0 if not supported by protocol\n     */\n    function getPendingRewards(address who) external view returns (uint256 pending);\n}\n\n"
      },
      "contracts/mocks/MockStakingRewards.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"../interfaces/IStakingAdapter.sol\";\n\n/**\n * @title MockStakingRewards\n * @notice Simple mock staking contract for testing on Passet Hub\n * @dev Linear reward rate: rewards = staked * ratePerSecond * timeStaked\n */\ncontract MockStakingRewards is IStakingAdapter {\n    uint256 public immutable ratePerSecond; // Reward rate per second (in wei per 1e18 staked)\n    address public immutable habitTracker;\n\n    mapping(address => uint256) public deposits;\n    mapping(address => uint256) public lastUpdateTime;\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event RewardsClaimed(address indexed user, uint256 amount);\n\n    error OnlyHabitTracker();\n    error InsufficientBalance();\n    error TransferFailed();\n    error InvalidAmount();\n\n    modifier onlyHabitTracker() {\n        if (msg.sender != habitTracker) revert OnlyHabitTracker();\n        _;\n    }\n\n    /**\n     * @param _ratePerSecond Reward rate (e.g., 1e15 = 0.1% per second)\n     * @param _habitTracker HabitTracker contract address\n     */\n    constructor(uint256 _ratePerSecond, address _habitTracker) {\n        ratePerSecond = _ratePerSecond;\n        habitTracker = _habitTracker;\n    }\n\n    function stake(address user, uint256 amount) external payable onlyHabitTracker {\n        if (msg.value != amount) revert InvalidAmount();\n        if (amount == 0) revert InvalidAmount();\n\n        _updateRewards(user);\n        deposits[user] += amount;\n\n        emit Staked(user, amount);\n    }\n\n    function unstake(address user, uint256 amount) external onlyHabitTracker {\n        if (amount == 0) revert InvalidAmount();\n        if (deposits[user] < amount) revert InsufficientBalance();\n\n        _updateRewards(user);\n        deposits[user] -= amount;\n\n        // Send back to HabitTracker\n        (bool success, ) = habitTracker.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit Unstaked(user, amount);\n    }\n\n    function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {\n        claimed = _pendingRewards(user);\n        \n        // Safety: Check contract has funds\n        uint256 balance = address(this).balance;\n        if (balance == 0) return 0;\n        \n        // Safety: Cap at 10% of balance per claim\n        uint256 maxClaim = balance / 10;\n        if (claimed > maxClaim) claimed = maxClaim;\n        \n        // Safety: Can only claim what's available\n        if (claimed > balance) claimed = balance;\n        \n        if (claimed > 0) {\n            lastUpdateTime[user] = block.timestamp;\n            (bool success, ) = habitTracker.call{value: claimed}(\"\");\n            if (!success) revert TransferFailed();\n            emit RewardsClaimed(user, claimed);\n        }\n        \n        return claimed;\n    }\n\n    function getStakedAmount(address who) external view returns (uint256) {\n        return deposits[who];\n    }\n\n    function getPendingRewards(address who) external view returns (uint256) {\n        return _pendingRewards(who);\n    }\n\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function _updateRewards(address user) internal {\n        if (lastUpdateTime[user] == 0) {\n            lastUpdateTime[user] = block.timestamp;\n        }\n    }\n\n    function _pendingRewards(address user) internal view returns (uint256) {\n        if (lastUpdateTime[user] == 0 || deposits[user] == 0) {\n            return 0;\n        }\n\n        uint256 timeElapsed = block.timestamp - lastUpdateTime[user];\n        // rewards = staked * ratePerSecond * timeElapsed / 1e18\n        return (deposits[user] * ratePerSecond * timeElapsed) / 1e18;\n    }\n\n    /**\n     * @notice Allow receiving PAS for reward pool\n     */\n    receive() external payable {}\n}\n\n"
      }
    },
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "parameters": "z",
        "fallbackOz": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi"
          ]
        }
      },
      "resolc": {
        "version": "latest",
        "compilerSource": "npm",
        "settings": {
          "optimizer": {
            "enabled": true,
            "parameters": "z",
            "fallbackOz": true,
            "runs": 200
          }
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
    "sources": {
      "contracts/HabitTracker.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/HabitTracker.sol",
          "exportedSymbols": {
            "HabitTracker": [
              1052
            ],
            "IStakingAdapter": [
              1453
            ]
          },
          "id": 1053,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
              "file": "./interfaces/IStakingAdapter.sol",
              "id": 2,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1053,
              "sourceUnit": 1454,
              "src": "58:42:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "HabitTracker",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 3,
                "nodeType": "StructuredDocumentation",
                "src": "102:658:0",
                "text": " @title HabitTracker\n @notice Gamified habit tracking with financial commitment and yield generation\n @dev Uses epoch-based time (86400-second days) for daily cycles\n @dev Integrates with external staking via IStakingAdapter\n \n @dev Two types of stakes:\n - Funded Stake: User deposits locked during day (blockedBalance)\n - Yield Stake: Successful rewards staked externally for yield generation\n \n @dev Two types of rewards:\n - User Rewards: Base rewards from successful habit completion (claimableBalance)\n - Yield Rewards: Additional rewards generated from external staking (tracked in adapter)\n \n @author HabitChain Team"
              },
              "fullyImplemented": true,
              "id": 1052,
              "linearizedBaseContracts": [
                1052
              ],
              "name": "HabitTracker",
              "nameLocation": "770:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "functionSelector": "4a91f7ae",
                  "id": 6,
                  "mutability": "constant",
                  "name": "STAKE_PER_DAY",
                  "nameLocation": "813:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "789:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3130",
                    "id": 5,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "829:8:0",
                    "subdenomination": "ether",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_10000000000000000000_by_1",
                      "typeString": "int_const 10000000000000000000"
                    },
                    "value": "10"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 9,
                  "mutability": "constant",
                  "name": "SECONDS_PER_DAY",
                  "nameLocation": "868:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "843:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "843:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3836343030",
                    "id": 8,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "886:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_86400_by_1",
                      "typeString": "int_const 86400"
                    },
                    "value": "86400"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "61d027b3",
                  "id": 11,
                  "mutability": "immutable",
                  "name": "treasury",
                  "nameLocation": "922:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "897:33:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "897:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "4cbb98f4",
                  "id": 14,
                  "mutability": "mutable",
                  "name": "stakingAdapter",
                  "nameLocation": "959:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "936:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                    "typeString": "contract IStakingAdapter"
                  },
                  "typeName": {
                    "id": 13,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12,
                      "name": "IStakingAdapter",
                      "nameLocations": [
                        "936:15:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1453,
                      "src": "936:15:0"
                    },
                    "referencedDeclaration": 1453,
                    "src": "936:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                      "typeString": "contract IStakingAdapter"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 16,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "994:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "979:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 19,
                  "mutability": "constant",
                  "name": "BALANCE_DEPOSIT",
                  "nameLocation": "1065:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1042:42:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 17,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1042:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 18,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1083:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 22,
                  "mutability": "constant",
                  "name": "BALANCE_CLAIMABLE",
                  "nameLocation": "1113:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1090:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1090:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1133:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 25,
                  "mutability": "constant",
                  "name": "BALANCE_EXTERNAL",
                  "nameLocation": "1163:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1140:43:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1140:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 24,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1182:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "canonicalName": "HabitTracker.UserState",
                  "id": 34,
                  "members": [
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "depositBalance",
                      "nameLocation": "1275:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1267:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1267:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 29,
                      "mutability": "mutable",
                      "name": "blockedBalance",
                      "nameLocation": "1353:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1345:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 28,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1345:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 31,
                      "mutability": "mutable",
                      "name": "claimableBalance",
                      "nameLocation": "1432:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1424:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1424:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 33,
                      "mutability": "mutable",
                      "name": "activeHabitCount",
                      "nameLocation": "1515:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 34,
                      "src": "1508:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 32,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1508:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserState",
                  "nameLocation": "1247:9:0",
                  "nodeType": "StructDefinition",
                  "scope": 1052,
                  "src": "1240:298:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "HabitTracker.Habit",
                  "id": 41,
                  "members": [
                    {
                      "constant": false,
                      "id": 36,
                      "mutability": "mutable",
                      "name": "text",
                      "nameLocation": "1579:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1571:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 35,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1571:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 38,
                      "mutability": "mutable",
                      "name": "createdAtEpoch",
                      "nameLocation": "1600:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1593:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 37,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "1593:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 40,
                      "mutability": "mutable",
                      "name": "archived",
                      "nameLocation": "1629:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 41,
                      "src": "1624:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 39,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1624:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Habit",
                  "nameLocation": "1555:5:0",
                  "nodeType": "StructDefinition",
                  "scope": 1052,
                  "src": "1548:96:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0ecc535f",
                  "id": 46,
                  "mutability": "mutable",
                  "name": "userStates",
                  "nameLocation": "1691:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1654:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                    "typeString": "mapping(address => struct HabitTracker.UserState)"
                  },
                  "typeName": {
                    "id": 45,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 42,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1662:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1654:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                      "typeString": "mapping(address => struct HabitTracker.UserState)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 44,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 43,
                        "name": "UserState",
                        "nameLocations": [
                          "1673:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 34,
                        "src": "1673:9:0"
                      },
                      "referencedDeclaration": 34,
                      "src": "1673:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                        "typeString": "struct HabitTracker.UserState"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "99626634",
                  "id": 53,
                  "mutability": "mutable",
                  "name": "habits",
                  "nameLocation": "1759:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1707:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                  },
                  "typeName": {
                    "id": 52,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 47,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1715:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1707:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 51,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 48,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1734:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1726:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                        "typeString": "mapping(uint32 => struct HabitTracker.Habit)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 50,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 49,
                          "name": "Habit",
                          "nameLocations": [
                            "1744:5:0"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 41,
                          "src": "1744:5:0"
                        },
                        "referencedDeclaration": 41,
                        "src": "1744:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                          "typeString": "struct HabitTracker.Habit"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0e08454a",
                  "id": 57,
                  "mutability": "mutable",
                  "name": "userHabitCounters",
                  "nameLocation": "1805:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1771:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                    "typeString": "mapping(address => uint32)"
                  },
                  "typeName": {
                    "id": 56,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 54,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1779:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1771:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                      "typeString": "mapping(address => uint32)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 55,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1790:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "319bec54",
                  "id": 63,
                  "mutability": "mutable",
                  "name": "funded",
                  "nameLocation": "1981:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1927:60:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 62,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 58,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1935:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1927:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 61,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 59,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "1954:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1946:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 60,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1964:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "a8389e0a",
                  "id": 69,
                  "mutability": "mutable",
                  "name": "checked",
                  "nameLocation": "2047:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1993:61:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 68,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 64,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2001:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1993:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 67,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 65,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2020:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2012:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 66,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2030:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "39c51515",
                  "id": 75,
                  "mutability": "mutable",
                  "name": "settled",
                  "nameLocation": "2114:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "2060:61:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                  },
                  "typeName": {
                    "id": 74,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 70,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2068:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2060:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint64 => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 73,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 71,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2087:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2079:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                        "typeString": "mapping(uint64 => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 72,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2097:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4",
                  "id": 81,
                  "name": "Deposited",
                  "nameLocation": "2138:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 80,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 77,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2164:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2148:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 76,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2148:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 79,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2178:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2170:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 78,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2170:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2147:38:0"
                  },
                  "src": "2132:54:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1a76aaec2e9828be3e61d555cee697fff809245531b81aeaabfc9802480b1f05",
                  "id": 91,
                  "name": "BalanceMoved",
                  "nameLocation": "2197:12:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 90,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 83,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2226:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2210:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2210:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 85,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2246:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2232:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 84,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2232:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 87,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2266:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2252:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 86,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2252:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 89,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2278:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 91,
                        "src": "2270:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 88,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2270:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2209:76:0"
                  },
                  "src": "2191:95:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453",
                  "id": 99,
                  "name": "HabitCreated",
                  "nameLocation": "2297:12:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2326:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2310:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2310:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2347:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2332:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2332:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "2364:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 99,
                        "src": "2356:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2356:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2309:60:0"
                  },
                  "src": "2291:79:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3",
                  "id": 105,
                  "name": "HabitArchived",
                  "nameLocation": "2381:13:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 104,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 101,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2411:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "2395:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2395:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 103,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2432:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "2417:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 102,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2417:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2394:46:0"
                  },
                  "src": "2375:66:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "c3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5",
                  "id": 115,
                  "name": "DayPrepared",
                  "nameLocation": "2452:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 107,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2480:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2464:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2464:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 109,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2501:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2486:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2486:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 111,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "fundedCount",
                        "nameLocation": "2515:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2508:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 110,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2508:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 113,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "insufficientCount",
                        "nameLocation": "2535:17:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "2528:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2528:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2463:90:0"
                  },
                  "src": "2446:108:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "b004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682",
                  "id": 123,
                  "name": "CheckedIn",
                  "nameLocation": "2565:9:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 117,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2591:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2575:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2575:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 119,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2612:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2597:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2597:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 121,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2636:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "2621:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2621:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2574:68:0"
                  },
                  "src": "2559:84:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "ebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209",
                  "id": 133,
                  "name": "SettledSuccess",
                  "nameLocation": "2654:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 132,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 125,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2685:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2669:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 124,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 127,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2706:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2691:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 126,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2691:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 129,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2730:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2715:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 128,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2715:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 131,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "reward",
                        "nameLocation": "2745:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 133,
                        "src": "2737:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2737:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2668:84:0"
                  },
                  "src": "2648:105:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "be6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba",
                  "id": 143,
                  "name": "SettledFail",
                  "nameLocation": "2764:11:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 142,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 135,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2792:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2776:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2776:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 137,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "2813:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2798:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 136,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2798:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 139,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "2837:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2822:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 138,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2822:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 141,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "slashed",
                        "nameLocation": "2852:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "2844:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 140,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2844:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2775:85:0"
                  },
                  "src": "2758:103:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "258ff515b65e53911071aed3f954e1f58eca37dce2ed4a50766f00c9d0161048",
                  "id": 149,
                  "name": "StakingAdapterUpdated",
                  "nameLocation": "2872:21:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 148,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 145,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldAdapter",
                        "nameLocation": "2910:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 149,
                        "src": "2894:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 144,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2894:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAdapter",
                        "nameLocation": "2938:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 149,
                        "src": "2922:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 146,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2922:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2893:56:0"
                  },
                  "src": "2866:84:0"
                },
                {
                  "errorSelector": "14bcf5c8",
                  "id": 151,
                  "name": "InvalidTreasury",
                  "nameLocation": "2966:15:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2981:2:0"
                  },
                  "src": "2960:24:0"
                },
                {
                  "errorSelector": "2c5211c6",
                  "id": 153,
                  "name": "InvalidAmount",
                  "nameLocation": "2995:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3008:2:0"
                  },
                  "src": "2989:22:0"
                },
                {
                  "errorSelector": "f4d678b8",
                  "id": 155,
                  "name": "InsufficientBalance",
                  "nameLocation": "3022:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 154,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3041:2:0"
                  },
                  "src": "3016:28:0"
                },
                {
                  "errorSelector": "fcb63a22",
                  "id": 157,
                  "name": "InvalidBalanceType",
                  "nameLocation": "3055:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 156,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3073:2:0"
                  },
                  "src": "3049:27:0"
                },
                {
                  "errorSelector": "a7a9536d",
                  "id": 159,
                  "name": "HabitNotFound",
                  "nameLocation": "3087:13:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3100:2:0"
                  },
                  "src": "3081:22:0"
                },
                {
                  "errorSelector": "c1c184c8",
                  "id": 161,
                  "name": "HabitAlreadyArchived",
                  "nameLocation": "3114:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3134:2:0"
                  },
                  "src": "3108:29:0"
                },
                {
                  "errorSelector": "d5b25b63",
                  "id": 163,
                  "name": "InvalidEpoch",
                  "nameLocation": "3148:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 162,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3160:2:0"
                  },
                  "src": "3142:21:0"
                },
                {
                  "errorSelector": "afa4e2b6",
                  "id": 165,
                  "name": "DayNotFunded",
                  "nameLocation": "3174:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 164,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3186:2:0"
                  },
                  "src": "3168:21:0"
                },
                {
                  "errorSelector": "c98289f0",
                  "id": 167,
                  "name": "AlreadyCheckedIn",
                  "nameLocation": "3200:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 166,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3216:2:0"
                  },
                  "src": "3194:25:0"
                },
                {
                  "errorSelector": "560ff900",
                  "id": 169,
                  "name": "AlreadySettled",
                  "nameLocation": "3230:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 168,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3244:2:0"
                  },
                  "src": "3224:23:0"
                },
                {
                  "errorSelector": "cf114bd9",
                  "id": 171,
                  "name": "CannotSettleCurrentDay",
                  "nameLocation": "3258:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 170,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3280:2:0"
                  },
                  "src": "3252:31:0"
                },
                {
                  "errorSelector": "90b8ec18",
                  "id": 173,
                  "name": "TransferFailed",
                  "nameLocation": "3294:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3308:2:0"
                  },
                  "src": "3288:23:0"
                },
                {
                  "errorSelector": "cc67c13b",
                  "id": 175,
                  "name": "HabitTextTooLong",
                  "nameLocation": "3322:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 174,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3338:2:0"
                  },
                  "src": "3316:25:0"
                },
                {
                  "errorSelector": "5fc483c5",
                  "id": 177,
                  "name": "OnlyOwner",
                  "nameLocation": "3352:9:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 176,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3361:2:0"
                  },
                  "src": "3346:18:0"
                },
                {
                  "errorSelector": "dd750592",
                  "id": 179,
                  "name": "InvalidStakingAdapter",
                  "nameLocation": "3375:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3396:2:0"
                  },
                  "src": "3369:30:0"
                },
                {
                  "errorSelector": "e9987cdd",
                  "id": 181,
                  "name": "HabitIdTooLarge",
                  "nameLocation": "3410:15:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3425:2:0"
                  },
                  "src": "3404:24:0"
                },
                {
                  "body": {
                    "id": 192,
                    "nodeType": "Block",
                    "src": "3459:71:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 183,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3473:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 184,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3477:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3473:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 185,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "3487:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3473:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 190,
                        "nodeType": "IfStatement",
                        "src": "3469:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 187,
                              "name": "OnlyOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 177,
                              "src": "3501:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3501:11:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 189,
                          "nodeType": "RevertStatement",
                          "src": "3494:18:0"
                        }
                      },
                      {
                        "id": 191,
                        "nodeType": "PlaceholderStatement",
                        "src": "3522:1:0"
                      }
                    ]
                  },
                  "id": 193,
                  "name": "onlyOwner",
                  "nameLocation": "3447:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 182,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3456:2:0"
                  },
                  "src": "3438:92:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 233,
                    "nodeType": "Block",
                    "src": "3646:324:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 200,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "3660:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 203,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3681:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 202,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3673:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 201,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3673:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3673:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3660:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 209,
                        "nodeType": "IfStatement",
                        "src": "3656:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 206,
                              "name": "InvalidTreasury",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "3692:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3692:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 208,
                          "nodeType": "RevertStatement",
                          "src": "3685:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 210,
                            "name": "treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "3719:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 211,
                            "name": "_treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "3730:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3719:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 213,
                        "nodeType": "ExpressionStatement",
                        "src": "3719:20:0"
                      },
                      {
                        "expression": {
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 214,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "3749:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 215,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3757:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 216,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3761:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3757:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3749:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 218,
                        "nodeType": "ExpressionStatement",
                        "src": "3749:18:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 219,
                            "name": "_stakingAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 197,
                            "src": "3859:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 222,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3886:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3878:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 220,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3878:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3878:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3859:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 232,
                        "nodeType": "IfStatement",
                        "src": "3855:109:0",
                        "trueBody": {
                          "id": 231,
                          "nodeType": "Block",
                          "src": "3890:74:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 229,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 225,
                                  "name": "stakingAdapter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14,
                                  "src": "3904:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                    "typeString": "contract IStakingAdapter"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 227,
                                      "name": "_stakingAdapter",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 197,
                                      "src": "3937:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 226,
                                    "name": "IStakingAdapter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1453,
                                    "src": "3921:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IStakingAdapter_$1453_$",
                                      "typeString": "type(contract IStakingAdapter)"
                                    }
                                  },
                                  "id": 228,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3921:32:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                    "typeString": "contract IStakingAdapter"
                                  }
                                },
                                "src": "3904:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                  "typeString": "contract IStakingAdapter"
                                }
                              },
                              "id": 230,
                              "nodeType": "ExpressionStatement",
                              "src": "3904:49:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 234,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 198,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 195,
                        "mutability": "mutable",
                        "name": "_treasury",
                        "nameLocation": "3610:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 234,
                        "src": "3602:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 194,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3602:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 197,
                        "mutability": "mutable",
                        "name": "_stakingAdapter",
                        "nameLocation": "3629:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 234,
                        "src": "3621:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 196,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3621:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3601:44:0"
                  },
                  "returnParameters": {
                    "id": 199,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3646:0:0"
                  },
                  "scope": 1052,
                  "src": "3590:380:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 247,
                    "nodeType": "Block",
                    "src": "4029:65:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 241,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967292,
                                  "src": "4053:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 242,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4059:9:0",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "4053:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 243,
                                "name": "SECONDS_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 9,
                                "src": "4071:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4053:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 240,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4046:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint64_$",
                              "typeString": "type(uint64)"
                            },
                            "typeName": {
                              "id": 239,
                              "name": "uint64",
                              "nodeType": "ElementaryTypeName",
                              "src": "4046:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4046:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "functionReturnParameters": 238,
                        "id": 246,
                        "nodeType": "Return",
                        "src": "4039:48:0"
                      }
                    ]
                  },
                  "functionSelector": "222ae786",
                  "id": 248,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "epochNow",
                  "nameLocation": "3989:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 235,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3997:2:0"
                  },
                  "returnParameters": {
                    "id": 238,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 237,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 248,
                        "src": "4021:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 236,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "4021:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4020:8:0"
                  },
                  "scope": 1052,
                  "src": "3980:114:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 283,
                    "nodeType": "Block",
                    "src": "4225:248:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 255,
                            "name": "_newAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 250,
                            "src": "4239:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 258,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4262:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4254:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 256,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4254:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 259,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4254:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4239:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 264,
                        "nodeType": "IfStatement",
                        "src": "4235:61:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 261,
                              "name": "InvalidStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "4273:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 262,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4273:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 263,
                          "nodeType": "RevertStatement",
                          "src": "4266:30:0"
                        }
                      },
                      {
                        "assignments": [
                          266
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 266,
                            "mutability": "mutable",
                            "name": "oldAdapter",
                            "nameLocation": "4314:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 283,
                            "src": "4306:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 265,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4306:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 271,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 269,
                              "name": "stakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "4335:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                "typeString": "contract IStakingAdapter"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                "typeString": "contract IStakingAdapter"
                              }
                            ],
                            "id": 268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4327:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 267,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4327:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4327:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4306:44:0"
                      },
                      {
                        "expression": {
                          "id": 276,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 272,
                            "name": "stakingAdapter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14,
                            "src": "4360:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                              "typeString": "contract IStakingAdapter"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 274,
                                "name": "_newAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 250,
                                "src": "4393:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 273,
                              "name": "IStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1453,
                              "src": "4377:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IStakingAdapter_$1453_$",
                                "typeString": "type(contract IStakingAdapter)"
                              }
                            },
                            "id": 275,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4377:28:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                              "typeString": "contract IStakingAdapter"
                            }
                          },
                          "src": "4360:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                            "typeString": "contract IStakingAdapter"
                          }
                        },
                        "id": 277,
                        "nodeType": "ExpressionStatement",
                        "src": "4360:45:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 279,
                              "name": "oldAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 266,
                              "src": "4442:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 280,
                              "name": "_newAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 250,
                              "src": "4454:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 278,
                            "name": "StakingAdapterUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 149,
                            "src": "4420:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4420:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 282,
                        "nodeType": "EmitStatement",
                        "src": "4415:51:0"
                      }
                    ]
                  },
                  "functionSelector": "40729c58",
                  "id": 284,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 253,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 252,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "4215:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 193,
                        "src": "4215:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4215:9:0"
                    }
                  ],
                  "name": "setStakingAdapter",
                  "nameLocation": "4167:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 251,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 250,
                        "mutability": "mutable",
                        "name": "_newAdapter",
                        "nameLocation": "4193:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 284,
                        "src": "4185:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 249,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4185:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4184:21:0"
                  },
                  "returnParameters": {
                    "id": 254,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4225:0:0"
                  },
                  "scope": 1052,
                  "src": "4158:315:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 305,
                    "nodeType": "Block",
                    "src": "4547:95:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 296,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 291,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "4561:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 294,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4581:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 293,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4573:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 292,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4573:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 295,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4573:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4561:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 300,
                        "nodeType": "IfStatement",
                        "src": "4557:52:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 297,
                              "name": "InvalidTreasury",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "4592:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4592:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 299,
                          "nodeType": "RevertStatement",
                          "src": "4585:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 301,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "4619:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 302,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "4627:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4619:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 304,
                        "nodeType": "ExpressionStatement",
                        "src": "4619:16:0"
                      }
                    ]
                  },
                  "functionSelector": "f2fde38b",
                  "id": 306,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 289,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 288,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "4537:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 193,
                        "src": "4537:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4537:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "4492:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 286,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "4518:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "4510:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 285,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4510:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4509:18:0"
                  },
                  "returnParameters": {
                    "id": 290,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4547:0:0"
                  },
                  "scope": 1052,
                  "src": "4483:159:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 333,
                    "nodeType": "Block",
                    "src": "4745:166:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 309,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "4759:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4763:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "4759:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4772:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4759:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 316,
                        "nodeType": "IfStatement",
                        "src": "4755:42:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 313,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "4782:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 314,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4782:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 315,
                          "nodeType": "RevertStatement",
                          "src": "4775:22:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 317,
                                "name": "userStates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "4807:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                  "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                }
                              },
                              "id": 320,
                              "indexExpression": {
                                "expression": {
                                  "id": 318,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "4818:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 319,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4822:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4818:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4807:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage",
                                "typeString": "struct HabitTracker.UserState storage ref"
                              }
                            },
                            "id": 321,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "4830:14:0",
                            "memberName": "depositBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 27,
                            "src": "4807:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 322,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "4848:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 323,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4852:5:0",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "4848:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4807:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 325,
                        "nodeType": "ExpressionStatement",
                        "src": "4807:50:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 327,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4882:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 328,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4886:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4882:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 329,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4894:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 330,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4898:5:0",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "4894:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 326,
                            "name": "Deposited",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 81,
                            "src": "4872:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4872:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 332,
                        "nodeType": "EmitStatement",
                        "src": "4867:37:0"
                      }
                    ]
                  },
                  "functionSelector": "d0e30db0",
                  "id": 334,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "4718:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 307,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4725:2:0"
                  },
                  "returnParameters": {
                    "id": 308,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4745:0:0"
                  },
                  "scope": 1052,
                  "src": "4709:202:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 452,
                    "nodeType": "Block",
                    "src": "5341:1064:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 344,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 341,
                            "src": "5355:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 345,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5365:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5355:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 350,
                        "nodeType": "IfStatement",
                        "src": "5351:39:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 347,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "5375:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5375:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 349,
                          "nodeType": "RevertStatement",
                          "src": "5368:22:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 353,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 351,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "5404:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 352,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5412:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "5404:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 357,
                        "nodeType": "IfStatement",
                        "src": "5400:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 354,
                              "name": "InvalidBalanceType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 157,
                              "src": "5423:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 355,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5423:20:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 356,
                          "nodeType": "RevertStatement",
                          "src": "5416:27:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 360,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 358,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "5457:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 359,
                              "name": "BALANCE_CLAIMABLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "5464:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5457:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 361,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5485:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 362,
                              "name": "BALANCE_EXTERNAL",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25,
                              "src": "5490:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5485:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5457:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 368,
                        "nodeType": "IfStatement",
                        "src": "5453:82:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 365,
                              "name": "InvalidBalanceType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 157,
                              "src": "5515:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 366,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5515:20:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 367,
                          "nodeType": "RevertStatement",
                          "src": "5508:27:0"
                        }
                      },
                      {
                        "assignments": [
                          371
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 371,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "5572:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 452,
                            "src": "5554:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 370,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 369,
                                "name": "UserState",
                                "nameLocations": [
                                  "5554:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "5554:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "5554:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 376,
                        "initialValue": {
                          "baseExpression": {
                            "id": 372,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "5580:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 375,
                          "indexExpression": {
                            "expression": {
                              "id": 373,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "5591:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5595:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5591:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5580:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5554:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 377,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "5655:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 378,
                            "name": "BALANCE_DEPOSIT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "5663:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "5655:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 411,
                          "nodeType": "Block",
                          "src": "5832:171:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 399,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 396,
                                    "name": "state",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 371,
                                    "src": "5871:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                      "typeString": "struct HabitTracker.UserState storage pointer"
                                    }
                                  },
                                  "id": 397,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5877:16:0",
                                  "memberName": "claimableBalance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 31,
                                  "src": "5871:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 398,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 341,
                                  "src": "5896:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5871:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 403,
                              "nodeType": "IfStatement",
                              "src": "5867:65:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 400,
                                    "name": "InsufficientBalance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 155,
                                    "src": "5911:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                      "typeString": "function () pure returns (error)"
                                    }
                                  },
                                  "id": 401,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5911:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_error",
                                    "typeString": "error"
                                  }
                                },
                                "id": 402,
                                "nodeType": "RevertStatement",
                                "src": "5904:28:0"
                              }
                            },
                            {
                              "id": 410,
                              "nodeType": "UncheckedBlock",
                              "src": "5946:47:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 408,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 404,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 371,
                                        "src": "5958:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 406,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "5964:16:0",
                                      "memberName": "claimableBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 31,
                                      "src": "5958:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 407,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 341,
                                      "src": "5984:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5958:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 409,
                                  "nodeType": "ExpressionStatement",
                                  "src": "5958:32:0"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 412,
                        "nodeType": "IfStatement",
                        "src": "5651:352:0",
                        "trueBody": {
                          "id": 395,
                          "nodeType": "Block",
                          "src": "5680:146:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 383,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 380,
                                    "name": "state",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 371,
                                    "src": "5698:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                      "typeString": "struct HabitTracker.UserState storage pointer"
                                    }
                                  },
                                  "id": 381,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5704:14:0",
                                  "memberName": "depositBalance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 27,
                                  "src": "5698:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 382,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 341,
                                  "src": "5721:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5698:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 387,
                              "nodeType": "IfStatement",
                              "src": "5694:63:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 384,
                                    "name": "InsufficientBalance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 155,
                                    "src": "5736:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                      "typeString": "function () pure returns (error)"
                                    }
                                  },
                                  "id": 385,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5736:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_error",
                                    "typeString": "error"
                                  }
                                },
                                "id": 386,
                                "nodeType": "RevertStatement",
                                "src": "5729:28:0"
                              }
                            },
                            {
                              "id": 394,
                              "nodeType": "UncheckedBlock",
                              "src": "5771:45:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 392,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 388,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 371,
                                        "src": "5783:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 390,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "5789:14:0",
                                      "memberName": "depositBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 27,
                                      "src": "5783:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 391,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 341,
                                      "src": "5807:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5783:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 393,
                                  "nodeType": "ExpressionStatement",
                                  "src": "5783:30:0"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 415,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 413,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "6055:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 414,
                            "name": "BALANCE_DEPOSIT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "6061:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "6055:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 424,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "6157:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 425,
                              "name": "BALANCE_CLAIMABLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "6163:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "6157:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 441,
                            "nodeType": "Block",
                            "src": "6259:74:0",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 436,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "6303:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 437,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "6307:6:0",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "6303:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 438,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 341,
                                      "src": "6315:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 435,
                                    "name": "_transfer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 476,
                                    "src": "6293:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256)"
                                    }
                                  },
                                  "id": 439,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6293:29:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 440,
                                "nodeType": "ExpressionStatement",
                                "src": "6293:29:0"
                              }
                            ]
                          },
                          "id": 442,
                          "nodeType": "IfStatement",
                          "src": "6153:180:0",
                          "trueBody": {
                            "id": 434,
                            "nodeType": "Block",
                            "src": "6182:71:0",
                            "statements": [
                              {
                                "id": 433,
                                "nodeType": "UncheckedBlock",
                                "src": "6196:47:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 431,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 427,
                                          "name": "state",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 371,
                                          "src": "6208:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                          }
                                        },
                                        "id": 429,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberLocation": "6214:16:0",
                                        "memberName": "claimableBalance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 31,
                                        "src": "6208:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "id": 430,
                                        "name": "amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 341,
                                        "src": "6234:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6208:32:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 432,
                                    "nodeType": "ExpressionStatement",
                                    "src": "6208:32:0"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "id": 443,
                        "nodeType": "IfStatement",
                        "src": "6051:282:0",
                        "trueBody": {
                          "id": 423,
                          "nodeType": "Block",
                          "src": "6078:69:0",
                          "statements": [
                            {
                              "id": 422,
                              "nodeType": "UncheckedBlock",
                              "src": "6092:45:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 420,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "expression": {
                                        "id": 416,
                                        "name": "state",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 371,
                                        "src": "6104:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                          "typeString": "struct HabitTracker.UserState storage pointer"
                                        }
                                      },
                                      "id": 418,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberLocation": "6110:14:0",
                                      "memberName": "depositBalance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 27,
                                      "src": "6104:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 419,
                                      "name": "amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 341,
                                      "src": "6128:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6104:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 421,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6104:30:0"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 445,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "6369:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 446,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6373:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6369:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 447,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "6381:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 448,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "6387:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 449,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "6391:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 444,
                            "name": "BalanceMoved",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 91,
                            "src": "6356:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint8,uint8,uint256)"
                            }
                          },
                          "id": 450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6356:42:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 451,
                        "nodeType": "EmitStatement",
                        "src": "6351:47:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 335,
                    "nodeType": "StructuredDocumentation",
                    "src": "4921:354:0",
                    "text": " @notice Move funds between balance types\n @param from Source balance type (0=deposit, 1=claimable)\n @param to Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\n @param amount Amount to move\n @dev Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)"
                  },
                  "functionSelector": "4f126f03",
                  "id": 453,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "move",
                  "nameLocation": "5289:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 337,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5300:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "5294:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 336,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "5294:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5312:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "5306:8:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "5306:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "5324:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "5316:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5316:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5293:38:0"
                  },
                  "returnParameters": {
                    "id": 343,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5341:0:0"
                  },
                  "scope": 1052,
                  "src": "5280:1125:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 475,
                    "nodeType": "Block",
                    "src": "6470:109:0",
                    "statements": [
                      {
                        "assignments": [
                          461,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 461,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6486:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 475,
                            "src": "6481:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 460,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6481:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 468,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 466,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6522:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 462,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 455,
                                "src": "6499:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 463,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6502:4:0",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "6499:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 465,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 464,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 457,
                                "src": "6514:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "6499:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 467,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6499:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6480:45:0"
                      },
                      {
                        "condition": {
                          "id": 470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "6539:8:0",
                          "subExpression": {
                            "id": 469,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "6540:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 474,
                        "nodeType": "IfStatement",
                        "src": "6535:37:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 471,
                              "name": "TransferFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 173,
                              "src": "6556:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 472,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6556:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 473,
                          "nodeType": "RevertStatement",
                          "src": "6549:23:0"
                        }
                      }
                    ]
                  },
                  "id": 476,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "6424:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 458,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6442:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "6434:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6434:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 457,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "6454:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "6446:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6446:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6433:28:0"
                  },
                  "returnParameters": {
                    "id": 459,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6470:0:0"
                  },
                  "scope": 1052,
                  "src": "6415:164:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 540,
                    "nodeType": "Block",
                    "src": "6883:522:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 484,
                            "name": "text",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 479,
                            "src": "6897:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 487,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6913:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6905:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": {
                                "id": 485,
                                "name": "bytes32",
                                "nodeType": "ElementaryTypeName",
                                "src": "6905:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 488,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6905:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "6897:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 493,
                        "nodeType": "IfStatement",
                        "src": "6893:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 490,
                              "name": "HabitTextTooLong",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 175,
                              "src": "6924:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 491,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6924:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 492,
                          "nodeType": "RevertStatement",
                          "src": "6917:25:0"
                        }
                      },
                      {
                        "assignments": [
                          495
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 495,
                            "mutability": "mutable",
                            "name": "habitId",
                            "nameLocation": "6968:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 540,
                            "src": "6961:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 494,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6961:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 501,
                        "initialValue": {
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "6978:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 496,
                              "name": "userHabitCounters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 57,
                              "src": "6980:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                "typeString": "mapping(address => uint32)"
                              }
                            },
                            "id": 499,
                            "indexExpression": {
                              "expression": {
                                "id": 497,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "6998:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 498,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7002:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6998:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6980:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6961:48:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 504,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 502,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 495,
                            "src": "7023:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "323535",
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7033:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_255_by_1",
                              "typeString": "int_const 255"
                            },
                            "value": "255"
                          },
                          "src": "7023:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 508,
                        "nodeType": "IfStatement",
                        "src": "7019:43:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 505,
                              "name": "HabitIdTooLarge",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 181,
                              "src": "7045:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 506,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7045:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 507,
                          "nodeType": "RevertStatement",
                          "src": "7038:24:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 509,
                                "name": "habits",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53,
                                "src": "7097:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                }
                              },
                              "id": 513,
                              "indexExpression": {
                                "expression": {
                                  "id": 510,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "7104:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 511,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7108:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "7104:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7097:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                              }
                            },
                            "id": 514,
                            "indexExpression": {
                              "id": 512,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 495,
                              "src": "7116:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7097:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage",
                              "typeString": "struct HabitTracker.Habit storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 516,
                                "name": "text",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 479,
                                "src": "7153:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 517,
                                  "name": "epochNow",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 248,
                                  "src": "7187:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                    "typeString": "function () view returns (uint64)"
                                  }
                                },
                                "id": 518,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7187:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 519,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7221:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "id": 515,
                              "name": "Habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "7127:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Habit_$41_storage_ptr_$",
                                "typeString": "type(struct HabitTracker.Habit storage pointer)"
                              }
                            },
                            "id": 520,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "nameLocations": [
                              "7147:4:0",
                              "7171:14:0",
                              "7211:8:0"
                            ],
                            "names": [
                              "text",
                              "createdAtEpoch",
                              "archived"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "7127:110:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_memory_ptr",
                              "typeString": "struct HabitTracker.Habit memory"
                            }
                          },
                          "src": "7097:140:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "id": 522,
                        "nodeType": "ExpressionStatement",
                        "src": "7097:140:0"
                      },
                      {
                        "id": 530,
                        "nodeType": "UncheckedBlock",
                        "src": "7256:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": false,
                              "src": "7268:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 523,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46,
                                    "src": "7268:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 526,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 524,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "7279:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 525,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7283:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "7279:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7268:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 527,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "7291:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 33,
                                "src": "7268:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 529,
                            "nodeType": "ExpressionStatement",
                            "src": "7268:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 532,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7348:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 533,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7352:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7348:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 534,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 495,
                              "src": "7360:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 535,
                              "name": "text",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 479,
                              "src": "7369:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 531,
                            "name": "HabitCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 99,
                            "src": "7335:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_bytes32_$returns$__$",
                              "typeString": "function (address,uint32,bytes32)"
                            }
                          },
                          "id": 536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7335:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 537,
                        "nodeType": "EmitStatement",
                        "src": "7330:44:0"
                      },
                      {
                        "expression": {
                          "id": 538,
                          "name": "habitId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 495,
                          "src": "7391:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 483,
                        "id": 539,
                        "nodeType": "Return",
                        "src": "7384:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 477,
                    "nodeType": "StructuredDocumentation",
                    "src": "6654:163:0",
                    "text": " @notice Create a new habit\n @param text Description of the habit (up to 32 bytes)\n @return habitId The ID of the newly created habit"
                  },
                  "functionSelector": "e9714e07",
                  "id": 541,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "createHabit",
                  "nameLocation": "6831:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 480,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 479,
                        "mutability": "mutable",
                        "name": "text",
                        "nameLocation": "6851:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 541,
                        "src": "6843:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 478,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6843:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6842:14:0"
                  },
                  "returnParameters": {
                    "id": 483,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 482,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 541,
                        "src": "6875:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 481,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6874:8:0"
                  },
                  "scope": 1052,
                  "src": "6822:583:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 591,
                    "nodeType": "Block",
                    "src": "7572:333:0",
                    "statements": [
                      {
                        "assignments": [
                          549
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 549,
                            "mutability": "mutable",
                            "name": "habit",
                            "nameLocation": "7596:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 591,
                            "src": "7582:19:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit"
                            },
                            "typeName": {
                              "id": 548,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 547,
                                "name": "Habit",
                                "nameLocations": [
                                  "7582:5:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 41,
                                "src": "7582:5:0"
                              },
                              "referencedDeclaration": 41,
                              "src": "7582:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 556,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 550,
                              "name": "habits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "7604:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                              }
                            },
                            "id": 553,
                            "indexExpression": {
                              "expression": {
                                "id": 551,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7611:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 552,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7615:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7611:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7604:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                            }
                          },
                          "id": 555,
                          "indexExpression": {
                            "id": 554,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 544,
                            "src": "7623:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7604:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7582:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 560,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 557,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 549,
                              "src": "7645:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 558,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7651:14:0",
                            "memberName": "createdAtEpoch",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38,
                            "src": "7645:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 559,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7669:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "7645:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 564,
                        "nodeType": "IfStatement",
                        "src": "7641:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 561,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "7679:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 562,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7679:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 563,
                          "nodeType": "RevertStatement",
                          "src": "7672:22:0"
                        }
                      },
                      {
                        "condition": {
                          "expression": {
                            "id": 565,
                            "name": "habit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 549,
                            "src": "7708:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit storage pointer"
                            }
                          },
                          "id": 566,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7714:8:0",
                          "memberName": "archived",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 40,
                          "src": "7708:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 570,
                        "nodeType": "IfStatement",
                        "src": "7704:49:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 567,
                              "name": "HabitAlreadyArchived",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 161,
                              "src": "7731:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 568,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7731:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 569,
                          "nodeType": "RevertStatement",
                          "src": "7724:29:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 575,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 571,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 549,
                              "src": "7763:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 573,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "7769:8:0",
                            "memberName": "archived",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40,
                            "src": "7763:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 574,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7780:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "7763:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 576,
                        "nodeType": "ExpressionStatement",
                        "src": "7763:21:0"
                      },
                      {
                        "id": 584,
                        "nodeType": "UncheckedBlock",
                        "src": "7794:56:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 582,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "--",
                              "prefix": false,
                              "src": "7806:41:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 577,
                                    "name": "userStates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46,
                                    "src": "7806:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                                      "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                                    }
                                  },
                                  "id": 580,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 578,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "7817:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 579,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7821:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "7817:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7806:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage",
                                    "typeString": "struct HabitTracker.UserState storage ref"
                                  }
                                },
                                "id": 581,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "7829:16:0",
                                "memberName": "activeHabitCount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 33,
                                "src": "7806:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "id": 583,
                            "nodeType": "ExpressionStatement",
                            "src": "7806:41:0"
                          }
                        ]
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 586,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "7878:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 587,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7882:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7878:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 588,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 544,
                              "src": "7890:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 585,
                            "name": "HabitArchived",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 105,
                            "src": "7864:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint32)"
                            }
                          },
                          "id": 589,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7864:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 590,
                        "nodeType": "EmitStatement",
                        "src": "7859:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 542,
                    "nodeType": "StructuredDocumentation",
                    "src": "7415:105:0",
                    "text": " @notice Archive a habit (soft delete)\n @param habitId ID of the habit to archive"
                  },
                  "functionSelector": "b650673a",
                  "id": 592,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "archiveHabit",
                  "nameLocation": "7534:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 545,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 544,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "7554:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "7547:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 543,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "7547:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7546:16:0"
                  },
                  "returnParameters": {
                    "id": 546,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7572:0:0"
                  },
                  "scope": 1052,
                  "src": "7525:380:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 730,
                    "nodeType": "Block",
                    "src": "8255:1327:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 601,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 598,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 595,
                            "src": "8269:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 599,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "8278:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 600,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8278:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "8269:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 605,
                        "nodeType": "IfStatement",
                        "src": "8265:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 602,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "8297:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 603,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8297:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 604,
                          "nodeType": "RevertStatement",
                          "src": "8290:21:0"
                        }
                      },
                      {
                        "assignments": [
                          608
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 608,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "8348:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 730,
                            "src": "8330:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 607,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 606,
                                "name": "UserState",
                                "nameLocations": [
                                  "8330:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "8330:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "8330:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 613,
                        "initialValue": {
                          "baseExpression": {
                            "id": 609,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "8356:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 612,
                          "indexExpression": {
                            "expression": {
                              "id": 610,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "8367:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 611,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8371:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8367:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8356:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8330:48:0"
                      },
                      {
                        "assignments": [
                          615
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 615,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "8395:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 730,
                            "src": "8388:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 614,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8388:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 620,
                        "initialValue": {
                          "baseExpression": {
                            "id": 616,
                            "name": "userHabitCounters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 57,
                            "src": "8403:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                              "typeString": "mapping(address => uint32)"
                            }
                          },
                          "id": 619,
                          "indexExpression": {
                            "expression": {
                              "id": 617,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "8421:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8425:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8421:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8403:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8388:44:0"
                      },
                      {
                        "assignments": [
                          622
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 622,
                            "mutability": "mutable",
                            "name": "fundedCount",
                            "nameLocation": "8449:11:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 730,
                            "src": "8442:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 621,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8442:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 623,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8442:18:0"
                      },
                      {
                        "assignments": [
                          625
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 625,
                            "mutability": "mutable",
                            "name": "insufficientCount",
                            "nameLocation": "8477:17:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 730,
                            "src": "8470:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 624,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "8470:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 626,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8470:24:0"
                      },
                      {
                        "assignments": [
                          628
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 628,
                            "mutability": "mutable",
                            "name": "fundedBitmap",
                            "nameLocation": "8512:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 730,
                            "src": "8504:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 627,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8504:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 635,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 629,
                              "name": "funded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 63,
                              "src": "8527:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(uint64 => uint256))"
                              }
                            },
                            "id": 632,
                            "indexExpression": {
                              "expression": {
                                "id": 630,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "8534:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8538:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "8534:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8527:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                              "typeString": "mapping(uint64 => uint256)"
                            }
                          },
                          "id": 634,
                          "indexExpression": {
                            "id": 633,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 595,
                            "src": "8546:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8527:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8504:48:0"
                      },
                      {
                        "body": {
                          "id": 711,
                          "nodeType": "Block",
                          "src": "8603:837:0",
                          "statements": [
                            {
                              "assignments": [
                                645
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 645,
                                  "mutability": "mutable",
                                  "name": "habit",
                                  "nameLocation": "8631:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 711,
                                  "src": "8617:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                    "typeString": "struct HabitTracker.Habit"
                                  },
                                  "typeName": {
                                    "id": 644,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 643,
                                      "name": "Habit",
                                      "nameLocations": [
                                        "8617:5:0"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 41,
                                      "src": "8617:5:0"
                                    },
                                    "referencedDeclaration": 41,
                                    "src": "8617:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                      "typeString": "struct HabitTracker.Habit"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 652,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 646,
                                    "name": "habits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "8639:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                      "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                    }
                                  },
                                  "id": 649,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 647,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "8646:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 648,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8650:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "8646:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8639:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                    "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                  }
                                },
                                "id": 651,
                                "indexExpression": {
                                  "id": 650,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 637,
                                  "src": "8658:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8639:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$41_storage",
                                  "typeString": "struct HabitTracker.Habit storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8617:43:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 660,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "8691:15:0",
                                  "subExpression": {
                                    "expression": {
                                      "id": 653,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 645,
                                      "src": "8692:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 654,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8698:8:0",
                                    "memberName": "archived",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 40,
                                    "src": "8692:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  },
                                  "id": 659,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 656,
                                      "name": "habit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 645,
                                      "src": "8710:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                        "typeString": "struct HabitTracker.Habit storage pointer"
                                      }
                                    },
                                    "id": 657,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8716:14:0",
                                    "memberName": "createdAtEpoch",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 38,
                                    "src": "8710:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 658,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8734:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "8710:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "8691:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 706,
                              "nodeType": "IfStatement",
                              "src": "8687:712:0",
                              "trueBody": {
                                "id": 705,
                                "nodeType": "Block",
                                "src": "8737:662:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      662
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 662,
                                        "mutability": "mutable",
                                        "name": "mask",
                                        "nameLocation": "8763:4:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 705,
                                        "src": "8755:12:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 661,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "8755:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 666,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 665,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "31",
                                        "id": 663,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8770:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<<",
                                      "rightExpression": {
                                        "id": 664,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 637,
                                        "src": "8775:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        }
                                      },
                                      "src": "8770:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "8755:21:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 671,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 669,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 667,
                                          "name": "fundedBitmap",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 628,
                                          "src": "8815:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "id": 668,
                                          "name": "mask",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 662,
                                          "src": "8830:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "8815:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 670,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8838:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "8815:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 704,
                                    "nodeType": "IfStatement",
                                    "src": "8811:574:0",
                                    "trueBody": {
                                      "id": 703,
                                      "nodeType": "Block",
                                      "src": "8841:544:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 675,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 672,
                                                "name": "state",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 608,
                                                "src": "8898:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                  "typeString": "struct HabitTracker.UserState storage pointer"
                                                }
                                              },
                                              "id": 673,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "8904:14:0",
                                              "memberName": "depositBalance",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 27,
                                              "src": "8898:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">=",
                                            "rightExpression": {
                                              "id": 674,
                                              "name": "STAKE_PER_DAY",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 6,
                                              "src": "8922:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "8898:37:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 701,
                                            "nodeType": "Block",
                                            "src": "9285:82:0",
                                            "statements": [
                                              {
                                                "id": 700,
                                                "nodeType": "UncheckedBlock",
                                                "src": "9311:34:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 698,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "9323:19:0",
                                                      "subExpression": {
                                                        "id": 697,
                                                        "name": "insufficientCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 625,
                                                        "src": "9323:17:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 699,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9323:19:0"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          "id": 702,
                                          "nodeType": "IfStatement",
                                          "src": "8894:473:0",
                                          "trueBody": {
                                            "id": 696,
                                            "nodeType": "Block",
                                            "src": "8937:342:0",
                                            "statements": [
                                              {
                                                "id": 691,
                                                "nodeType": "UncheckedBlock",
                                                "src": "8963:230:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 680,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 676,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 608,
                                                          "src": "9003:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 678,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "9009:14:0",
                                                        "memberName": "depositBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 27,
                                                        "src": "9003:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "-=",
                                                      "rightHandSide": {
                                                        "id": 679,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 6,
                                                        "src": "9027:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "9003:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 681,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9003:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 686,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "expression": {
                                                          "id": 682,
                                                          "name": "state",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 608,
                                                          "src": "9070:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                            "typeString": "struct HabitTracker.UserState storage pointer"
                                                          }
                                                        },
                                                        "id": 684,
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "memberLocation": "9076:14:0",
                                                        "memberName": "blockedBalance",
                                                        "nodeType": "MemberAccess",
                                                        "referencedDeclaration": 29,
                                                        "src": "9070:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "+=",
                                                      "rightHandSide": {
                                                        "id": 685,
                                                        "name": "STAKE_PER_DAY",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 6,
                                                        "src": "9094:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "9070:37:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 687,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9070:37:0"
                                                  },
                                                  {
                                                    "expression": {
                                                      "id": 689,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "++",
                                                      "prefix": false,
                                                      "src": "9153:13:0",
                                                      "subExpression": {
                                                        "id": 688,
                                                        "name": "fundedCount",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 622,
                                                        "src": "9153:11:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint32",
                                                          "typeString": "uint32"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint32",
                                                        "typeString": "uint32"
                                                      }
                                                    },
                                                    "id": 690,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "9153:13:0"
                                                  }
                                                ]
                                              },
                                              {
                                                "expression": {
                                                  "id": 694,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 692,
                                                    "name": "fundedBitmap",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 628,
                                                    "src": "9218:12:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "|=",
                                                  "rightHandSide": {
                                                    "id": 693,
                                                    "name": "mask",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 662,
                                                    "src": "9234:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "src": "9218:20:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 695,
                                                "nodeType": "ExpressionStatement",
                                                "src": "9218:20:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "id": 710,
                              "nodeType": "UncheckedBlock",
                              "src": "9412:18:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 708,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "9424:3:0",
                                    "subExpression": {
                                      "id": 707,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 637,
                                      "src": "9424:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "id": 709,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9424:3:0"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 640,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 637,
                            "src": "8590:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 641,
                            "name": "count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "8595:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "8590:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 712,
                        "initializationExpression": {
                          "assignments": [
                            637
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 637,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "8583:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 712,
                              "src": "8576:8:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "typeName": {
                                "id": 636,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "8576:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 639,
                          "initialValue": {
                            "hexValue": "31",
                            "id": 638,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8587:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "8576:12:0"
                        },
                        "isSimpleCounterLoop": false,
                        "nodeType": "ForStatement",
                        "src": "8571:869:0"
                      },
                      {
                        "expression": {
                          "id": 720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 713,
                                "name": "funded",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 63,
                                "src": "9458:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 717,
                              "indexExpression": {
                                "expression": {
                                  "id": 714,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "9465:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 715,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "9469:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "9465:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9458:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 718,
                            "indexExpression": {
                              "id": 716,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 595,
                              "src": "9477:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9458:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 719,
                            "name": "fundedBitmap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 628,
                            "src": "9486:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9458:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 721,
                        "nodeType": "ExpressionStatement",
                        "src": "9458:40:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 723,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "9525:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9529:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9525:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 725,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 595,
                              "src": "9537:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 726,
                              "name": "fundedCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 622,
                              "src": "9544:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 727,
                              "name": "insufficientCount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 625,
                              "src": "9557:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 722,
                            "name": "DayPrepared",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 115,
                            "src": "9513:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint64_$_t_uint32_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32,uint32)"
                            }
                          },
                          "id": 728,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9513:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 729,
                        "nodeType": "EmitStatement",
                        "src": "9508:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 593,
                    "nodeType": "StructuredDocumentation",
                    "src": "7975:232:0",
                    "text": " @notice Prepare the day by locking funds (funded stake) for active habits\n @param epoch The epoch to prepare (must be current day)\n @dev Moves funds from depositBalance to blockedBalance (funded stake)"
                  },
                  "functionSelector": "48cc36b8",
                  "id": 731,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "prepareDay",
                  "nameLocation": "8221:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 596,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 595,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "8239:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 731,
                        "src": "8232:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 594,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "8232:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8231:14:0"
                  },
                  "returnParameters": {
                    "id": 597,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8255:0:0"
                  },
                  "scope": 1052,
                  "src": "8212:1370:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 818,
                    "nodeType": "Block",
                    "src": "9821:507:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 739,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 736,
                            "src": "9835:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 740,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "9844:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9844:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "9835:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 746,
                        "nodeType": "IfStatement",
                        "src": "9831:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 743,
                              "name": "InvalidEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "9863:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 744,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9863:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 745,
                          "nodeType": "RevertStatement",
                          "src": "9856:21:0"
                        }
                      },
                      {
                        "assignments": [
                          749
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 749,
                            "mutability": "mutable",
                            "name": "habit",
                            "nameLocation": "9901:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 818,
                            "src": "9887:19:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                              "typeString": "struct HabitTracker.Habit"
                            },
                            "typeName": {
                              "id": 748,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 747,
                                "name": "Habit",
                                "nameLocations": [
                                  "9887:5:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 41,
                                "src": "9887:5:0"
                              },
                              "referencedDeclaration": 41,
                              "src": "9887:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 756,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 750,
                              "name": "habits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "9909:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                              }
                            },
                            "id": 753,
                            "indexExpression": {
                              "expression": {
                                "id": 751,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "9916:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 752,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9920:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9916:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9909:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                              "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                            }
                          },
                          "id": 755,
                          "indexExpression": {
                            "id": 754,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "9928:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9909:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Habit_$41_storage",
                            "typeString": "struct HabitTracker.Habit storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9887:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            "id": 760,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 757,
                                "name": "habit",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 749,
                                "src": "9950:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                  "typeString": "struct HabitTracker.Habit storage pointer"
                                }
                              },
                              "id": 758,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9956:14:0",
                              "memberName": "createdAtEpoch",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 38,
                              "src": "9950:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 759,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9974:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "9950:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "expression": {
                              "id": 761,
                              "name": "habit",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 749,
                              "src": "9979:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage_ptr",
                                "typeString": "struct HabitTracker.Habit storage pointer"
                              }
                            },
                            "id": 762,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "9985:8:0",
                            "memberName": "archived",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40,
                            "src": "9979:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9950:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 767,
                        "nodeType": "IfStatement",
                        "src": "9946:71:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 764,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "10002:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 765,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10002:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 766,
                          "nodeType": "RevertStatement",
                          "src": "9995:22:0"
                        }
                      },
                      {
                        "assignments": [
                          769
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 769,
                            "mutability": "mutable",
                            "name": "mask",
                            "nameLocation": "10044:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 818,
                            "src": "10036:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 768,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10036:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 773,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 772,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 770,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10051:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 771,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "10056:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "10051:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10036:27:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 781,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 774,
                                  "name": "funded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "10077:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 777,
                                "indexExpression": {
                                  "expression": {
                                    "id": 775,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "10084:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 776,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10088:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "10084:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10077:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 779,
                              "indexExpression": {
                                "id": 778,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 736,
                                "src": "10096:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10077:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 780,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 769,
                              "src": "10105:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "10077:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 782,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10113:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10077:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 787,
                        "nodeType": "IfStatement",
                        "src": "10073:64:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 784,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "10123:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 785,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10123:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 786,
                          "nodeType": "RevertStatement",
                          "src": "10116:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 797,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 788,
                                  "name": "checked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69,
                                  "src": "10151:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 791,
                                "indexExpression": {
                                  "expression": {
                                    "id": 789,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "10159:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10163:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "10159:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10151:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 793,
                              "indexExpression": {
                                "id": 792,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 736,
                                "src": "10171:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10151:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 794,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 769,
                              "src": "10180:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "10151:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 796,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10188:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10151:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 801,
                        "nodeType": "IfStatement",
                        "src": "10147:69:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 798,
                              "name": "AlreadyCheckedIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "10198:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 799,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10198:18:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 800,
                          "nodeType": "RevertStatement",
                          "src": "10191:25:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 802,
                                "name": "checked",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "10235:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 806,
                              "indexExpression": {
                                "expression": {
                                  "id": 803,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "10243:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10247:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "10243:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10235:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 807,
                            "indexExpression": {
                              "id": 805,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 736,
                              "src": "10255:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10235:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "|=",
                          "rightHandSide": {
                            "id": 808,
                            "name": "mask",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 769,
                            "src": "10265:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10235:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 810,
                        "nodeType": "ExpressionStatement",
                        "src": "10235:34:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 812,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "10294:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10298:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "10294:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 814,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 734,
                              "src": "10306:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 815,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 736,
                              "src": "10315:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "id": 811,
                            "name": "CheckedIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 123,
                            "src": "10284:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$returns$__$",
                              "typeString": "function (address,uint32,uint64)"
                            }
                          },
                          "id": 816,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10284:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 817,
                        "nodeType": "EmitStatement",
                        "src": "10279:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 732,
                    "nodeType": "StructuredDocumentation",
                    "src": "9592:168:0",
                    "text": " @notice Check in to a habit for the current day\n @param habitId ID of the habit\n @param epoch The epoch to check in (must be current day)"
                  },
                  "functionSelector": "a0145927",
                  "id": 819,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "checkIn",
                  "nameLocation": "9774:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 737,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 734,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "9789:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 819,
                        "src": "9782:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 733,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9782:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 736,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "9805:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 819,
                        "src": "9798:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 735,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "9798:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9781:30:0"
                  },
                  "returnParameters": {
                    "id": 738,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9821:0:0"
                  },
                  "scope": 1052,
                  "src": "9765:563:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 843,
                    "nodeType": "Block",
                    "src": "10624:120:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 832,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 829,
                            "name": "epoch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 824,
                            "src": "10638:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 830,
                              "name": "epochNow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "10647:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 831,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10647:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "10638:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 836,
                        "nodeType": "IfStatement",
                        "src": "10634:56:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 833,
                              "name": "CannotSettleCurrentDay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 171,
                              "src": "10666:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 834,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10666:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 835,
                          "nodeType": "RevertStatement",
                          "src": "10659:31:0"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 838,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 822,
                              "src": "10716:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 839,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 824,
                              "src": "10722:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 840,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 826,
                              "src": "10729:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 837,
                            "name": "_settleInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "10700:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32)"
                            }
                          },
                          "id": 841,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10700:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 842,
                        "nodeType": "ExpressionStatement",
                        "src": "10700:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 820,
                    "nodeType": "StructuredDocumentation",
                    "src": "10338:214:0",
                    "text": " @notice Settle a specific habit for a past day\n @param user Address of habit owner\n @param epoch The epoch to settle (must be past day)\n @param habitId ID of the habit to settle"
                  },
                  "functionSelector": "9c14eb6e",
                  "id": 844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "settle",
                  "nameLocation": "10566:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 827,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 822,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "10581:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "10573:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 821,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10573:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 824,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "10594:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "10587:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 823,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "10587:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 826,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "10608:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "10601:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 825,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "10601:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10572:44:0"
                  },
                  "returnParameters": {
                    "id": 828,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10624:0:0"
                  },
                  "scope": 1052,
                  "src": "10557:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 860,
                    "nodeType": "Block",
                    "src": "11173:54:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 855,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 847,
                              "src": "11199:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 856,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 849,
                              "src": "11205:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "id": 857,
                              "name": "habitId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 851,
                              "src": "11212:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "id": 854,
                            "name": "_settleInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "11183:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint64_$_t_uint32_$returns$__$",
                              "typeString": "function (address,uint64,uint32)"
                            }
                          },
                          "id": 858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11183:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 859,
                        "nodeType": "ExpressionStatement",
                        "src": "11183:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 845,
                    "nodeType": "StructuredDocumentation",
                    "src": "10754:342:0",
                    "text": " @notice Force settle a specific habit without epoch validation (TESTING ONLY)\n @dev Bypasses the \"cannot settle current day\" check - use with caution\n @param user Address of habit owner\n @param epoch The epoch to settle (can be any epoch, including current)\n @param habitId ID of the habit to settle"
                  },
                  "functionSelector": "68188762",
                  "id": 861,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "forceSettle",
                  "nameLocation": "11110:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 852,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 847,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "11130:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 861,
                        "src": "11122:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 846,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11122:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 849,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "11143:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 861,
                        "src": "11136:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 848,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "11136:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 851,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "11157:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 861,
                        "src": "11150:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 850,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11150:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11121:44:0"
                  },
                  "returnParameters": {
                    "id": 853,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11173:0:0"
                  },
                  "scope": 1052,
                  "src": "11101:126:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1004,
                    "nodeType": "Block",
                    "src": "11704:1386:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 878,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 871,
                                  "name": "habits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 53,
                                  "src": "11718:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct HabitTracker.Habit storage ref))"
                                  }
                                },
                                "id": 873,
                                "indexExpression": {
                                  "id": 872,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 864,
                                  "src": "11725:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11718:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Habit_$41_storage_$",
                                  "typeString": "mapping(uint32 => struct HabitTracker.Habit storage ref)"
                                }
                              },
                              "id": 875,
                              "indexExpression": {
                                "id": 874,
                                "name": "habitId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 868,
                                "src": "11731:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11718:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Habit_$41_storage",
                                "typeString": "struct HabitTracker.Habit storage ref"
                              }
                            },
                            "id": 876,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11740:14:0",
                            "memberName": "createdAtEpoch",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38,
                            "src": "11718:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 877,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11758:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11718:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 882,
                        "nodeType": "IfStatement",
                        "src": "11714:69:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 879,
                              "name": "HabitNotFound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "11768:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11768:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 881,
                          "nodeType": "RevertStatement",
                          "src": "11761:22:0"
                        }
                      },
                      {
                        "assignments": [
                          884
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 884,
                            "mutability": "mutable",
                            "name": "mask",
                            "nameLocation": "11810:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1004,
                            "src": "11802:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 883,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "11802:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 888,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 887,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 885,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11817:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "id": 886,
                            "name": "habitId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 868,
                            "src": "11822:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "11817:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11802:27:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 895,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 889,
                                  "name": "funded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "11843:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 891,
                                "indexExpression": {
                                  "id": 890,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 864,
                                  "src": "11850:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11843:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 893,
                              "indexExpression": {
                                "id": 892,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 866,
                                "src": "11856:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11843:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 894,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 884,
                              "src": "11865:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11843:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11873:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11843:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 901,
                        "nodeType": "IfStatement",
                        "src": "11839:58:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 898,
                              "name": "DayNotFunded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "11883:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 899,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11883:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 900,
                          "nodeType": "RevertStatement",
                          "src": "11876:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 908,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 902,
                                  "name": "settled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 75,
                                  "src": "11911:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 904,
                                "indexExpression": {
                                  "id": 903,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 864,
                                  "src": "11919:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11911:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 906,
                              "indexExpression": {
                                "id": 905,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 866,
                                "src": "11925:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11911:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 907,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 884,
                              "src": "11934:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11911:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 909,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11942:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11911:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 914,
                        "nodeType": "IfStatement",
                        "src": "11907:61:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 911,
                              "name": "AlreadySettled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "11952:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 912,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11952:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 913,
                          "nodeType": "RevertStatement",
                          "src": "11945:23:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 915,
                                "name": "settled",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 75,
                                "src": "11987:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint64 => uint256))"
                                }
                              },
                              "id": 918,
                              "indexExpression": {
                                "id": 916,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 864,
                                "src": "11995:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11987:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                "typeString": "mapping(uint64 => uint256)"
                              }
                            },
                            "id": 919,
                            "indexExpression": {
                              "id": 917,
                              "name": "epoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 866,
                              "src": "12001:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11987:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "|=",
                          "rightHandSide": {
                            "id": 920,
                            "name": "mask",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 884,
                            "src": "12011:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11987:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 922,
                        "nodeType": "ExpressionStatement",
                        "src": "11987:28:0"
                      },
                      {
                        "assignments": [
                          925
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 925,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "12043:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1004,
                            "src": "12025:23:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                              "typeString": "struct HabitTracker.UserState"
                            },
                            "typeName": {
                              "id": 924,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 923,
                                "name": "UserState",
                                "nameLocations": [
                                  "12025:9:0"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 34,
                                "src": "12025:9:0"
                              },
                              "referencedDeclaration": 34,
                              "src": "12025:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 929,
                        "initialValue": {
                          "baseExpression": {
                            "id": 926,
                            "name": "userStates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "12051:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$34_storage_$",
                              "typeString": "mapping(address => struct HabitTracker.UserState storage ref)"
                            }
                          },
                          "id": 928,
                          "indexExpression": {
                            "id": 927,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 864,
                            "src": "12062:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12051:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserState_$34_storage",
                            "typeString": "struct HabitTracker.UserState storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12025:42:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 933,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 930,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 925,
                              "src": "12143:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                "typeString": "struct HabitTracker.UserState storage pointer"
                              }
                            },
                            "id": 931,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12149:14:0",
                            "memberName": "blockedBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 29,
                            "src": "12143:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 932,
                            "name": "STAKE_PER_DAY",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6,
                            "src": "12166:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12143:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 937,
                        "nodeType": "IfStatement",
                        "src": "12139:70:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 934,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 155,
                              "src": "12188:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 935,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12188:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 936,
                          "nodeType": "RevertStatement",
                          "src": "12181:28:0"
                        }
                      },
                      {
                        "id": 944,
                        "nodeType": "UncheckedBlock",
                        "src": "12219:52:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 942,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 938,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 925,
                                  "src": "12231:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                    "typeString": "struct HabitTracker.UserState storage pointer"
                                  }
                                },
                                "id": 940,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "12237:14:0",
                                "memberName": "blockedBalance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 29,
                                "src": "12231:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 941,
                                "name": "STAKE_PER_DAY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 6,
                                "src": "12255:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12231:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 943,
                            "nodeType": "ExpressionStatement",
                            "src": "12231:37:0"
                          }
                        ]
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 953,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 951,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 945,
                                  "name": "checked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69,
                                  "src": "12293:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(uint64 => uint256))"
                                  }
                                },
                                "id": 947,
                                "indexExpression": {
                                  "id": 946,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 864,
                                  "src": "12301:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12293:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint64_$_t_uint256_$",
                                  "typeString": "mapping(uint64 => uint256)"
                                }
                              },
                              "id": 949,
                              "indexExpression": {
                                "id": 948,
                                "name": "epoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 866,
                                "src": "12307:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12293:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "id": 950,
                              "name": "mask",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 884,
                              "src": "12316:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12293:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 952,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12324:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "12293:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1002,
                          "nodeType": "Block",
                          "src": "12899:185:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 991,
                                    "name": "treasury",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 11,
                                    "src": "12982:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 992,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "12992:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 990,
                                  "name": "_transfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 476,
                                  "src": "12972:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 993,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12972:34:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 994,
                              "nodeType": "ExpressionStatement",
                              "src": "12972:34:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 996,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 864,
                                    "src": "13037:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 997,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 868,
                                    "src": "13043:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 998,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 866,
                                    "src": "13052:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 999,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "13059:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 995,
                                  "name": "SettledFail",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 143,
                                  "src": "13025:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 1000,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "13025:48:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1001,
                              "nodeType": "EmitStatement",
                              "src": "13020:53:0"
                            }
                          ]
                        },
                        "id": 1003,
                        "nodeType": "IfStatement",
                        "src": "12289:795:0",
                        "trueBody": {
                          "id": 989,
                          "nodeType": "Block",
                          "src": "12327:566:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 962,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 956,
                                      "name": "stakingAdapter",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 14,
                                      "src": "12506:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                        "typeString": "contract IStakingAdapter"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                        "typeString": "contract IStakingAdapter"
                                      }
                                    ],
                                    "id": 955,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12498:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 954,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12498:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 957,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12498:23:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 960,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12533:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 959,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12525:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 958,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12525:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 961,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12525:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "12498:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 980,
                                "nodeType": "Block",
                                "src": "12639:174:0",
                                "statements": [
                                  {
                                    "id": 979,
                                    "nodeType": "UncheckedBlock",
                                    "src": "12745:54:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "id": 977,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "expression": {
                                              "id": 973,
                                              "name": "state",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 925,
                                              "src": "12757:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_UserState_$34_storage_ptr",
                                                "typeString": "struct HabitTracker.UserState storage pointer"
                                              }
                                            },
                                            "id": 975,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "memberLocation": "12763:16:0",
                                            "memberName": "claimableBalance",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 31,
                                            "src": "12757:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "+=",
                                          "rightHandSide": {
                                            "id": 976,
                                            "name": "STAKE_PER_DAY",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 6,
                                            "src": "12783:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "12757:39:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 978,
                                        "nodeType": "ExpressionStatement",
                                        "src": "12757:39:0"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "id": 981,
                              "nodeType": "IfStatement",
                              "src": "12494:319:0",
                              "trueBody": {
                                "id": 972,
                                "nodeType": "Block",
                                "src": "12537:96:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 968,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 864,
                                          "src": "12598:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 969,
                                          "name": "STAKE_PER_DAY",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 6,
                                          "src": "12604:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 963,
                                            "name": "stakingAdapter",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 14,
                                            "src": "12555:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                              "typeString": "contract IStakingAdapter"
                                            }
                                          },
                                          "id": 965,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "12570:5:0",
                                          "memberName": "stake",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1420,
                                          "src": "12555:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$returns$__$",
                                            "typeString": "function (address,uint256) payable external"
                                          }
                                        },
                                        "id": 967,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "names": [
                                          "value"
                                        ],
                                        "nodeType": "FunctionCallOptions",
                                        "options": [
                                          {
                                            "id": 966,
                                            "name": "STAKE_PER_DAY",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 6,
                                            "src": "12583:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "src": "12555:42:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$returns$__$value",
                                          "typeString": "function (address,uint256) payable external"
                                        }
                                      },
                                      "id": 970,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "12555:63:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 971,
                                    "nodeType": "ExpressionStatement",
                                    "src": "12555:63:0"
                                  }
                                ]
                              }
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 983,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 864,
                                    "src": "12846:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 984,
                                    "name": "habitId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 868,
                                    "src": "12852:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "id": 985,
                                    "name": "epoch",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 866,
                                    "src": "12861:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 986,
                                    "name": "STAKE_PER_DAY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6,
                                    "src": "12868:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 982,
                                  "name": "SettledSuccess",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 133,
                                  "src": "12831:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint64_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint64,uint256)"
                                  }
                                },
                                "id": 987,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12831:51:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 988,
                              "nodeType": "EmitStatement",
                              "src": "12826:56:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 862,
                    "nodeType": "StructuredDocumentation",
                    "src": "11237:385:0",
                    "text": " @notice Internal settlement logic without epoch validation\n @param user Address of habit owner\n @param epoch The epoch to settle\n @param habitId ID of the habit to settle\n @dev Settlement flow:\n - SUCCESS: User reward is staked externally (yield stake) to generate yield rewards\n - FAIL: Funded stake is sent to treasury (slashed)"
                  },
                  "id": 1005,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_settleInternal",
                  "nameLocation": "11636:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 869,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 864,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "11660:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "11652:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 863,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11652:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 866,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nameLocation": "11673:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "11666:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 865,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "11666:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 868,
                        "mutability": "mutable",
                        "name": "habitId",
                        "nameLocation": "11687:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "11680:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 867,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11680:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11651:44:0"
                  },
                  "returnParameters": {
                    "id": 870,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11704:0:0"
                  },
                  "scope": 1052,
                  "src": "11627:1463:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1045,
                    "nodeType": "Block",
                    "src": "13450:392:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1019,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 1013,
                                "name": "stakingAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14,
                                "src": "13472:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                  "typeString": "contract IStakingAdapter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                  "typeString": "contract IStakingAdapter"
                                }
                              ],
                              "id": 1012,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13464:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1011,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13464:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13464:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1017,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "13499:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1016,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13491:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1015,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "13491:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1018,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13491:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "13464:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1023,
                        "nodeType": "IfStatement",
                        "src": "13460:73:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1020,
                              "name": "InvalidStakingAdapter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "13510:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1021,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13510:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1022,
                          "nodeType": "RevertStatement",
                          "src": "13503:30:0"
                        }
                      },
                      {
                        "expression": {
                          "id": 1030,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1024,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1009,
                            "src": "13619:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1027,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "13657:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1028,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "13661:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "13657:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 1025,
                                "name": "stakingAdapter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14,
                                "src": "13629:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStakingAdapter_$1453",
                                  "typeString": "contract IStakingAdapter"
                                }
                              },
                              "id": 1026,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "13644:12:0",
                              "memberName": "claimRewards",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1436,
                              "src": "13629:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) external returns (uint256)"
                              }
                            },
                            "id": 1029,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13629:39:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13619:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1031,
                        "nodeType": "ExpressionStatement",
                        "src": "13619:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1034,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1032,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1009,
                            "src": "13735:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1033,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13745:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "13735:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1042,
                        "nodeType": "IfStatement",
                        "src": "13731:72:0",
                        "trueBody": {
                          "id": 1041,
                          "nodeType": "Block",
                          "src": "13748:55:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1036,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "13772:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1037,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "13776:6:0",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "13772:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1038,
                                    "name": "claimed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1009,
                                    "src": "13784:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1035,
                                  "name": "_transfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 476,
                                  "src": "13762:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 1039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "13762:30:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1040,
                              "nodeType": "ExpressionStatement",
                              "src": "13762:30:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1043,
                          "name": "claimed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1009,
                          "src": "13828:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1010,
                        "id": 1044,
                        "nodeType": "Return",
                        "src": "13821:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1006,
                    "nodeType": "StructuredDocumentation",
                    "src": "13162:219:0",
                    "text": " @notice Claim yield rewards from external staking adapter\n @dev Claims yield rewards for msg.sender and sends them directly to their wallet\n @return claimed Amount of yield rewards claimed"
                  },
                  "functionSelector": "db0f53f9",
                  "id": 1046,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimYieldRewards",
                  "nameLocation": "13395:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1007,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13412:2:0"
                  },
                  "returnParameters": {
                    "id": 1010,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1009,
                        "mutability": "mutable",
                        "name": "claimed",
                        "nameLocation": "13441:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1046,
                        "src": "13433:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1008,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13433:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13432:17:0"
                  },
                  "scope": 1052,
                  "src": "13386:456:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1050,
                    "nodeType": "Block",
                    "src": "14016:2:0",
                    "statements": []
                  },
                  "documentation": {
                    "id": 1047,
                    "nodeType": "StructuredDocumentation",
                    "src": "13907:77:0",
                    "text": " @notice Allow receiving native tokens from staking adapter"
                  },
                  "id": 1051,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1048,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13996:2:0"
                  },
                  "returnParameters": {
                    "id": 1049,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14016:0:0"
                  },
                  "scope": 1052,
                  "src": "13989:29:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1053,
              "src": "761:13259:0",
              "usedErrors": [
                151,
                153,
                155,
                157,
                159,
                161,
                163,
                165,
                167,
                169,
                171,
                173,
                175,
                177,
                179,
                181
              ],
              "usedEvents": [
                81,
                91,
                99,
                105,
                115,
                123,
                133,
                143,
                149
              ]
            }
          ],
          "src": "32:13990:0"
        }
      },
      "contracts/adapters/MoonwellAdapter.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "contracts/adapters/MoonwellAdapter.sol",
          "exportedSymbols": {
            "IComptroller": [
              1125
            ],
            "IERC20": [
              1082
            ],
            "IMTokenNative": [
              1113
            ],
            "IStakingAdapter": [
              1453
            ],
            "MoonwellAdapter": [
              1409
            ]
          },
          "id": 1410,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1054,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
              "file": "../interfaces/IStakingAdapter.sol",
              "id": 1055,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1410,
              "sourceUnit": 1454,
              "src": "58:43:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1056,
                "nodeType": "StructuredDocumentation",
                "src": "103:42:1",
                "text": " @notice Minimal ERC20 interface"
              },
              "fullyImplemented": false,
              "id": 1082,
              "linearizedBaseContracts": [
                1082
              ],
              "name": "IERC20",
              "nameLocation": "156:6:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "095ea7b3",
                  "id": 1065,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "178:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1061,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1058,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "194:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1065,
                        "src": "186:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1057,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "186:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1060,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "211:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1065,
                        "src": "203:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1059,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "203:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "185:33:1"
                  },
                  "returnParameters": {
                    "id": 1064,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1063,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1065,
                        "src": "237:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1062,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "237:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "236:6:1"
                  },
                  "scope": 1082,
                  "src": "169:74:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 1072,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "257:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1068,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1067,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "275:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1072,
                        "src": "267:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1066,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "267:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "266:17:1"
                  },
                  "returnParameters": {
                    "id": 1071,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1070,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1072,
                        "src": "307:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1069,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "307:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "306:9:1"
                  },
                  "scope": 1082,
                  "src": "248:68:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "a9059cbb",
                  "id": 1081,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "330:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1077,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1074,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "347:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1081,
                        "src": "339:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "339:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1076,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "359:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1081,
                        "src": "351:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1075,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "351:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "338:28:1"
                  },
                  "returnParameters": {
                    "id": 1080,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1079,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1081,
                        "src": "385:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1078,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "385:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "384:6:1"
                  },
                  "scope": 1082,
                  "src": "321:70:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1410,
              "src": "146:247:1",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IMTokenNative",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1083,
                "nodeType": "StructuredDocumentation",
                "src": "395:81:1",
                "text": " @notice Moonwell mToken interface (native GLMR version - CEther-style)"
              },
              "fullyImplemented": false,
              "id": 1113,
              "linearizedBaseContracts": [
                1113
              ],
              "name": "IMTokenNative",
              "nameLocation": "487:13:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "1249c58b",
                  "id": 1086,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "516:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1084,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "520:2:1"
                  },
                  "returnParameters": {
                    "id": 1085,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "539:0:1"
                  },
                  "scope": 1113,
                  "src": "507:33:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "db006a75",
                  "id": 1093,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "redeem",
                  "nameLocation": "590:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1089,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1088,
                        "mutability": "mutable",
                        "name": "redeemTokens",
                        "nameLocation": "605:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1093,
                        "src": "597:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1087,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "597:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "596:22:1"
                  },
                  "returnParameters": {
                    "id": 1092,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1091,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1093,
                        "src": "637:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1090,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "637:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "636:9:1"
                  },
                  "scope": 1113,
                  "src": "581:65:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "852a12e3",
                  "id": 1100,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "redeemUnderlying",
                  "nameLocation": "660:16:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1096,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1095,
                        "mutability": "mutable",
                        "name": "redeemAmount",
                        "nameLocation": "685:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1100,
                        "src": "677:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1094,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "677:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "676:22:1"
                  },
                  "returnParameters": {
                    "id": 1099,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1098,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1100,
                        "src": "717:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1097,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "717:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "716:9:1"
                  },
                  "scope": 1113,
                  "src": "651:75:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 1107,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "740:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1103,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1102,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "758:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1107,
                        "src": "750:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1101,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "750:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "749:17:1"
                  },
                  "returnParameters": {
                    "id": 1106,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1105,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1107,
                        "src": "790:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1104,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "790:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "789:9:1"
                  },
                  "scope": 1113,
                  "src": "731:68:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "182df0f5",
                  "id": 1112,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "exchangeRateStored",
                  "nameLocation": "813:18:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1108,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "831:2:1"
                  },
                  "returnParameters": {
                    "id": 1111,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1110,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1112,
                        "src": "857:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "857:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "856:9:1"
                  },
                  "scope": 1113,
                  "src": "804:62:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1410,
              "src": "477:391:1",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IComptroller",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1114,
                "nodeType": "StructuredDocumentation",
                "src": "870:49:1",
                "text": " @notice Moonwell Comptroller interface"
              },
              "fullyImplemented": false,
              "id": 1125,
              "linearizedBaseContracts": [
                1125
              ],
              "name": "IComptroller",
              "nameLocation": "930:12:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "744532ae",
                  "id": 1124,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimReward",
                  "nameLocation": "958:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1116,
                        "mutability": "mutable",
                        "name": "rewardType",
                        "nameLocation": "976:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1124,
                        "src": "970:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1115,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "970:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1118,
                        "mutability": "mutable",
                        "name": "holder",
                        "nameLocation": "996:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1124,
                        "src": "988:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1117,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "988:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1121,
                        "mutability": "mutable",
                        "name": "mTokens",
                        "nameLocation": "1023:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1124,
                        "src": "1004:26:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1119,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1004:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1120,
                          "nodeType": "ArrayTypeName",
                          "src": "1004:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "969:62:1"
                  },
                  "returnParameters": {
                    "id": 1123,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1040:0:1"
                  },
                  "scope": 1125,
                  "src": "949:92:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1410,
              "src": "920:123:1",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1127,
                    "name": "IStakingAdapter",
                    "nameLocations": [
                      "1585:15:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1453,
                    "src": "1585:15:1"
                  },
                  "id": 1128,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1585:15:1"
                }
              ],
              "canonicalName": "MoonwellAdapter",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1126,
                "nodeType": "StructuredDocumentation",
                "src": "1045:511:1",
                "text": " @title MoonwellAdapter\n @notice Adapter for HabitTracker to create yield stakes in Moonwell on Moonbeam\n @dev Supports native GLMR staking via mGLMR market\n \n @dev Terminology:\n - Yield Stake: User rewards from successful habits staked here (userStakes)\n - Yield Rewards: Additional rewards generated from Moonwell (WELL tokens + supply APY)\n \n @dev When user completes a habit successfully, their reward is sent here as a yield stake\n to generate additional yield rewards over time"
              },
              "fullyImplemented": true,
              "id": 1409,
              "linearizedBaseContracts": [
                1409,
                1453
              ],
              "name": "MoonwellAdapter",
              "nameLocation": "1566:15:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "c3b6f939",
                  "id": 1130,
                  "mutability": "immutable",
                  "name": "mToken",
                  "nameLocation": "1632:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1409,
                  "src": "1607:31:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1129,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1607:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "5fe3b567",
                  "id": 1132,
                  "mutability": "immutable",
                  "name": "comptroller",
                  "nameLocation": "1693:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1409,
                  "src": "1668:36:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1131,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1668:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "836ee1c0",
                  "id": 1134,
                  "mutability": "immutable",
                  "name": "habitTracker",
                  "nameLocation": "1761:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1409,
                  "src": "1736:37:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1133,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da7ad23",
                  "id": 1138,
                  "mutability": "mutable",
                  "name": "userStakes",
                  "nameLocation": "1846:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1409,
                  "src": "1811:45:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 1137,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 1135,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1819:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1811:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 1136,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1830:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90",
                  "id": 1146,
                  "name": "Staked",
                  "nameLocation": "1912:6:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1145,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1140,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1935:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1146,
                        "src": "1919:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1139,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1919:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1142,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1949:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1146,
                        "src": "1941:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1141,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1941:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1144,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "mTokens",
                        "nameLocation": "1965:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1146,
                        "src": "1957:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1143,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1957:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1918:55:1"
                  },
                  "src": "1906:68:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e",
                  "id": 1154,
                  "name": "Unstaked",
                  "nameLocation": "1985:8:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1148,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2010:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1154,
                        "src": "1994:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1147,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1994:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1150,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2024:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1154,
                        "src": "2016:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1149,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2016:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1152,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "mTokens",
                        "nameLocation": "2040:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1154,
                        "src": "2032:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1151,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2032:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1993:55:1"
                  },
                  "src": "1979:70:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "fc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe",
                  "id": 1160,
                  "name": "RewardsClaimed",
                  "nameLocation": "2060:14:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1159,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1156,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2091:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1160,
                        "src": "2075:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1155,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2075:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1158,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2105:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1160,
                        "src": "2097:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1157,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2097:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2074:38:1"
                  },
                  "src": "2054:59:1"
                },
                {
                  "errorSelector": "c39fa004",
                  "id": 1162,
                  "name": "OnlyHabitTracker",
                  "nameLocation": "2125:16:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1161,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2141:2:1"
                  },
                  "src": "2119:25:1"
                },
                {
                  "errorSelector": "07637bd8",
                  "id": 1164,
                  "name": "MintFailed",
                  "nameLocation": "2155:10:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1163,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2165:2:1"
                  },
                  "src": "2149:19:1"
                },
                {
                  "errorSelector": "bb1205c2",
                  "id": 1166,
                  "name": "RedeemFailed",
                  "nameLocation": "2179:12:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1165,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2191:2:1"
                  },
                  "src": "2173:21:1"
                },
                {
                  "errorSelector": "2c5211c6",
                  "id": 1168,
                  "name": "InvalidAmount",
                  "nameLocation": "2205:13:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1167,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2218:2:1"
                  },
                  "src": "2199:22:1"
                },
                {
                  "body": {
                    "id": 1179,
                    "nodeType": "Block",
                    "src": "2255:85:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1173,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1170,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2269:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1171,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2273:6:1",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2269:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1172,
                            "name": "habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1134,
                            "src": "2283:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2269:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1177,
                        "nodeType": "IfStatement",
                        "src": "2265:57:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1174,
                              "name": "OnlyHabitTracker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1162,
                              "src": "2304:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1175,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2304:18:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1176,
                          "nodeType": "RevertStatement",
                          "src": "2297:25:1"
                        }
                      },
                      {
                        "id": 1178,
                        "nodeType": "PlaceholderStatement",
                        "src": "2332:1:1"
                      }
                    ]
                  },
                  "id": 1180,
                  "name": "onlyHabitTracker",
                  "nameLocation": "2236:16:1",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1169,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2252:2:1"
                  },
                  "src": "2227:113:1",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1202,
                    "nodeType": "Block",
                    "src": "2601:107:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 1192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1190,
                            "name": "mToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1130,
                            "src": "2611:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1191,
                            "name": "_mToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1183,
                            "src": "2620:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2611:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1193,
                        "nodeType": "ExpressionStatement",
                        "src": "2611:16:1"
                      },
                      {
                        "expression": {
                          "id": 1196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1194,
                            "name": "comptroller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1132,
                            "src": "2637:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1195,
                            "name": "_comptroller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1185,
                            "src": "2651:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2637:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1197,
                        "nodeType": "ExpressionStatement",
                        "src": "2637:26:1"
                      },
                      {
                        "expression": {
                          "id": 1200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1198,
                            "name": "habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1134,
                            "src": "2673:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1199,
                            "name": "_habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1187,
                            "src": "2688:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2673:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1201,
                        "nodeType": "ExpressionStatement",
                        "src": "2673:28:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1181,
                    "nodeType": "StructuredDocumentation",
                    "src": "2346:176:1",
                    "text": " @param _mToken Moonwell mGLMR token address\n @param _comptroller Moonwell Comptroller address\n @param _habitTracker HabitTracker contract address"
                  },
                  "id": 1203,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1188,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1183,
                        "mutability": "mutable",
                        "name": "_mToken",
                        "nameLocation": "2547:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1203,
                        "src": "2539:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1182,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2539:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1185,
                        "mutability": "mutable",
                        "name": "_comptroller",
                        "nameLocation": "2564:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1203,
                        "src": "2556:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1184,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2556:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1187,
                        "mutability": "mutable",
                        "name": "_habitTracker",
                        "nameLocation": "2586:13:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1203,
                        "src": "2578:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1186,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2578:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2538:62:1"
                  },
                  "returnParameters": {
                    "id": 1189,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2601:0:1"
                  },
                  "scope": 1409,
                  "src": "2527:181:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1420
                  ],
                  "body": {
                    "id": 1256,
                    "nodeType": "Block",
                    "src": "3159:403:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1216,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1213,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3173:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1214,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3177:5:1",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "3173:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1215,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1208,
                            "src": "3186:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3173:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1220,
                        "nodeType": "IfStatement",
                        "src": "3169:47:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1217,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1168,
                              "src": "3201:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1218,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3201:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1219,
                          "nodeType": "RevertStatement",
                          "src": "3194:22:1"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1221,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1208,
                            "src": "3230:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1222,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3240:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3230:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1227,
                        "nodeType": "IfStatement",
                        "src": "3226:39:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1224,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1168,
                              "src": "3250:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3250:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1226,
                          "nodeType": "RevertStatement",
                          "src": "3243:22:1"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1229,
                                    "name": "mToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1130,
                                    "src": "3350:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 1228,
                                  "name": "IMTokenNative",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1113,
                                  "src": "3336:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IMTokenNative_$1113_$",
                                    "typeString": "type(contract IMTokenNative)"
                                  }
                                },
                                "id": 1230,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3336:21:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IMTokenNative_$1113",
                                  "typeString": "contract IMTokenNative"
                                }
                              },
                              "id": 1231,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3358:4:1",
                              "memberName": "mint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1086,
                              "src": "3336:26:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$__$returns$__$",
                                "typeString": "function () payable external"
                              }
                            },
                            "id": 1233,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1232,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1208,
                                "src": "3370:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "3336:41:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                              "typeString": "function () payable external"
                            }
                          },
                          "id": 1234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3336:43:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1235,
                        "nodeType": "ExpressionStatement",
                        "src": "3336:43:1"
                      },
                      {
                        "expression": {
                          "id": 1240,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1236,
                              "name": "userStakes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1138,
                              "src": "3445:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1238,
                            "indexExpression": {
                              "id": 1237,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1206,
                              "src": "3456:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3445:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1239,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1208,
                            "src": "3465:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3445:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1241,
                        "nodeType": "ExpressionStatement",
                        "src": "3445:26:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1243,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1206,
                              "src": "3494:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1244,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1208,
                              "src": "3500:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1251,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967268,
                                      "src": "3548:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                        "typeString": "contract MoonwellAdapter"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                        "typeString": "contract MoonwellAdapter"
                                      }
                                    ],
                                    "id": 1250,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3540:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1249,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3540:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1252,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3540:13:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1246,
                                      "name": "mToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1130,
                                      "src": "3522:6:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 1245,
                                    "name": "IMTokenNative",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1113,
                                    "src": "3508:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IMTokenNative_$1113_$",
                                      "typeString": "type(contract IMTokenNative)"
                                    }
                                  },
                                  "id": 1247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3508:21:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IMTokenNative_$1113",
                                    "typeString": "contract IMTokenNative"
                                  }
                                },
                                "id": 1248,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3530:9:1",
                                "memberName": "balanceOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1107,
                                "src": "3508:31:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 1253,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3508:46:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1242,
                            "name": "Staked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1146,
                            "src": "3487:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 1254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3487:68:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1255,
                        "nodeType": "EmitStatement",
                        "src": "3482:73:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1204,
                    "nodeType": "StructuredDocumentation",
                    "src": "2714:361:1",
                    "text": " @notice Create yield stake by staking user rewards into Moonwell\n @param user Address of the user whose rewards are being staked\n @param amount Amount of GLMR to stake (user's earned reward)\n @dev msg.value must equal amount (native token)\n @dev This converts user rewards into yield stakes that generate yield rewards"
                  },
                  "functionSelector": "adc9772e",
                  "id": 1257,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1211,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1210,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "3142:16:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1180,
                        "src": "3142:16:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3142:16:1"
                    }
                  ],
                  "name": "stake",
                  "nameLocation": "3089:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1209,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1206,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "3103:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1257,
                        "src": "3095:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1205,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3095:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1208,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3117:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1257,
                        "src": "3109:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1207,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3109:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3094:30:1"
                  },
                  "returnParameters": {
                    "id": 1212,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3159:0:1"
                  },
                  "scope": 1409,
                  "src": "3080:482:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1428
                  ],
                  "body": {
                    "id": 1325,
                    "nodeType": "Block",
                    "src": "4021:606:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1267,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1262,
                            "src": "4035:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4045:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4035:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1273,
                        "nodeType": "IfStatement",
                        "src": "4031:39:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1270,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1168,
                              "src": "4055:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1271,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4055:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1272,
                          "nodeType": "RevertStatement",
                          "src": "4048:22:1"
                        }
                      },
                      {
                        "assignments": [
                          1275
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1275,
                            "mutability": "mutable",
                            "name": "err",
                            "nameLocation": "4153:3:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1325,
                            "src": "4145:11:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1274,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4145:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1282,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1280,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1262,
                              "src": "4198:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1277,
                                  "name": "mToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1130,
                                  "src": "4173:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1276,
                                "name": "IMTokenNative",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1113,
                                "src": "4159:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IMTokenNative_$1113_$",
                                  "typeString": "type(contract IMTokenNative)"
                                }
                              },
                              "id": 1278,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4159:21:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IMTokenNative_$1113",
                                "typeString": "contract IMTokenNative"
                              }
                            },
                            "id": 1279,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4181:16:1",
                            "memberName": "redeemUnderlying",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1100,
                            "src": "4159:38:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) external returns (uint256)"
                            }
                          },
                          "id": 1281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4159:46:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4145:60:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1283,
                            "name": "err",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1275,
                            "src": "4219:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1284,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4226:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4219:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1289,
                        "nodeType": "IfStatement",
                        "src": "4215:35:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1286,
                              "name": "RedeemFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1166,
                              "src": "4236:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4236:14:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1288,
                          "nodeType": "RevertStatement",
                          "src": "4229:21:1"
                        }
                      },
                      {
                        "expression": {
                          "id": 1294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1290,
                              "name": "userStakes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1138,
                              "src": "4308:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1292,
                            "indexExpression": {
                              "id": 1291,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1260,
                              "src": "4319:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4308:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 1293,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1262,
                            "src": "4328:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4308:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1295,
                        "nodeType": "ExpressionStatement",
                        "src": "4308:26:1"
                      },
                      {
                        "assignments": [
                          1297,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1297,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "4440:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1325,
                            "src": "4435:12:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1296,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "4435:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1304,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1302,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4486:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 1298,
                                "name": "habitTracker",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1134,
                                "src": "4453:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4466:4:1",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "4453:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1300,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1262,
                                "src": "4478:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "4453:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4453:36:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4434:55:1"
                      },
                      {
                        "condition": {
                          "id": 1306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "4503:8:1",
                          "subExpression": {
                            "id": 1305,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1297,
                            "src": "4504:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1310,
                        "nodeType": "IfStatement",
                        "src": "4499:35:1",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1307,
                              "name": "RedeemFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1166,
                              "src": "4520:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1308,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4520:14:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1309,
                          "nodeType": "RevertStatement",
                          "src": "4513:21:1"
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1312,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1260,
                              "src": "4559:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1313,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1262,
                              "src": "4565:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1320,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967268,
                                      "src": "4613:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                        "typeString": "contract MoonwellAdapter"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                        "typeString": "contract MoonwellAdapter"
                                      }
                                    ],
                                    "id": 1319,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4605:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1318,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4605:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1321,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4605:13:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1315,
                                      "name": "mToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1130,
                                      "src": "4587:6:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 1314,
                                    "name": "IMTokenNative",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1113,
                                    "src": "4573:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IMTokenNative_$1113_$",
                                      "typeString": "type(contract IMTokenNative)"
                                    }
                                  },
                                  "id": 1316,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4573:21:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IMTokenNative_$1113",
                                    "typeString": "contract IMTokenNative"
                                  }
                                },
                                "id": 1317,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4595:9:1",
                                "memberName": "balanceOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1107,
                                "src": "4573:31:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 1322,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4573:46:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1311,
                            "name": "Unstaked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1154,
                            "src": "4550:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 1323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4550:70:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1324,
                        "nodeType": "EmitStatement",
                        "src": "4545:75:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1258,
                    "nodeType": "StructuredDocumentation",
                    "src": "3568:375:1",
                    "text": " @notice Unstake GLMR from Moonwell (redeem yield stake + accumulated yield rewards)\n @param user Address of the user whose rewards are being unstaked\n @param amount Amount of underlying GLMR to unstake\n @dev Redeems mGLMR and sends GLMR back to HabitTracker\n @dev Returns both yield stake principal and any accumulated yield rewards"
                  },
                  "functionSelector": "c2a672e0",
                  "id": 1326,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1265,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1264,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "4004:16:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1180,
                        "src": "4004:16:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4004:16:1"
                    }
                  ],
                  "name": "unstake",
                  "nameLocation": "3957:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1263,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1260,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "3973:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1326,
                        "src": "3965:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1259,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3965:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1262,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3987:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1326,
                        "src": "3979:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1261,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3979:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3964:30:1"
                  },
                  "returnParameters": {
                    "id": 1266,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4021:0:1"
                  },
                  "scope": 1409,
                  "src": "3948:679:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1436
                  ],
                  "body": {
                    "id": 1378,
                    "nodeType": "Block",
                    "src": "5159:533:1",
                    "statements": [
                      {
                        "assignments": [
                          1340
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1340,
                            "mutability": "mutable",
                            "name": "markets",
                            "nameLocation": "5186:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1378,
                            "src": "5169:24:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1338,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5169:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1339,
                              "nodeType": "ArrayTypeName",
                              "src": "5169:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                "typeString": "address[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1346,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "31",
                              "id": 1344,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5210:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 1343,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "5196:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (address[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1341,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5200:7:1",
                                "stateMutability": "nonpayable",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1342,
                              "nodeType": "ArrayTypeName",
                              "src": "5200:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                "typeString": "address[]"
                              }
                            }
                          },
                          "id": 1345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5196:16:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5169:43:1"
                      },
                      {
                        "expression": {
                          "id": 1351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1347,
                              "name": "markets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1340,
                              "src": "5222:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 1349,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1348,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5230:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5222:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1350,
                            "name": "mToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1130,
                            "src": "5235:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5222:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1352,
                        "nodeType": "ExpressionStatement",
                        "src": "5222:19:1"
                      },
                      {
                        "clauses": [
                          {
                            "block": {
                              "id": 1371,
                              "nodeType": "Block",
                              "src": "5379:229:1",
                              "statements": [
                                {
                                  "eventCall": {
                                    "arguments": [
                                      {
                                        "id": 1365,
                                        "name": "user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1329,
                                        "src": "5532:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "hexValue": "30",
                                        "id": 1366,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5538:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 1364,
                                      "name": "RewardsClaimed",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1160,
                                      "src": "5517:14:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256)"
                                      }
                                    },
                                    "id": 1367,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5517:23:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 1368,
                                  "nodeType": "EmitStatement",
                                  "src": "5512:28:1"
                                },
                                {
                                  "expression": {
                                    "hexValue": "30",
                                    "id": 1369,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5561:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "functionReturnParameters": 1335,
                                  "id": 1370,
                                  "nodeType": "Return",
                                  "src": "5554:8:1"
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 1372,
                            "nodeType": "TryCatchClause",
                            "src": "5379:229:1"
                          },
                          {
                            "block": {
                              "id": 1375,
                              "nodeType": "Block",
                              "src": "5615:71:1",
                              "statements": [
                                {
                                  "expression": {
                                    "hexValue": "30",
                                    "id": 1373,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5636:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "functionReturnParameters": 1335,
                                  "id": 1374,
                                  "nodeType": "Return",
                                  "src": "5629:8:1"
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 1376,
                            "nodeType": "TryCatchClause",
                            "src": "5609:77:1"
                          }
                        ],
                        "externalCall": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1357,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5352:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1360,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "5363:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                    "typeString": "contract MoonwellAdapter"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MoonwellAdapter_$1409",
                                    "typeString": "contract MoonwellAdapter"
                                  }
                                ],
                                "id": 1359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5355:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1358,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5355:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5355:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1362,
                              "name": "markets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1340,
                              "src": "5370:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1354,
                                  "name": "comptroller",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1132,
                                  "src": "5327:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1353,
                                "name": "IComptroller",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1125,
                                "src": "5314:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IComptroller_$1125_$",
                                  "typeString": "type(contract IComptroller)"
                                }
                              },
                              "id": 1355,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5314:25:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IComptroller_$1125",
                                "typeString": "contract IComptroller"
                              }
                            },
                            "id": 1356,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5340:11:1",
                            "memberName": "claimReward",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1124,
                            "src": "5314:37:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint8_$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint8,address,address[] memory) external"
                            }
                          },
                          "id": 1363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5314:64:1",
                          "tryCall": true,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1377,
                        "nodeType": "TryStatement",
                        "src": "5310:376:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1327,
                    "nodeType": "StructuredDocumentation",
                    "src": "4633:433:1",
                    "text": " @notice Claim yield rewards (WELL tokens) from Moonwell\n @param user Address of the user (unused in Moonwell - claims for entire protocol)\n @return claimed Amount of yield rewards claimed (0 if none)\n @dev Best-effort claim; returns 0 if rewards not active\n @dev Yield rewards = WELL tokens earned from supplying to Moonwell\n @dev Note: Moonwell claims are protocol-wide, not per-user"
                  },
                  "functionSelector": "ef5cfb8c",
                  "id": 1379,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1332,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1331,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "5116:16:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1180,
                        "src": "5116:16:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "5116:16:1"
                    }
                  ],
                  "name": "claimRewards",
                  "nameLocation": "5080:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1329,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "5101:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1379,
                        "src": "5093:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1328,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5093:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5092:14:1"
                  },
                  "returnParameters": {
                    "id": 1335,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1334,
                        "mutability": "mutable",
                        "name": "claimed",
                        "nameLocation": "5150:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1379,
                        "src": "5142:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1333,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5142:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5141:17:1"
                  },
                  "scope": 1409,
                  "src": "5071:621:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1444
                  ],
                  "body": {
                    "id": 1391,
                    "nodeType": "Block",
                    "src": "5985:181:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 1387,
                            "name": "userStakes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1138,
                            "src": "6144:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1389,
                          "indexExpression": {
                            "id": 1388,
                            "name": "who",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1382,
                            "src": "6155:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6144:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1386,
                        "id": 1390,
                        "nodeType": "Return",
                        "src": "6137:22:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1380,
                    "nodeType": "StructuredDocumentation",
                    "src": "5698:205:1",
                    "text": " @notice Get user's yield stake amount (in underlying GLMR)\n @param who Address to check\n @return staked Amount of GLMR in yield stake (principal only, excludes yield rewards)"
                  },
                  "functionSelector": "4da6a556",
                  "id": 1392,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakedAmount",
                  "nameLocation": "5917:15:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1383,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1382,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "5941:3:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1392,
                        "src": "5933:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1381,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5933:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5932:13:1"
                  },
                  "returnParameters": {
                    "id": 1386,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1385,
                        "mutability": "mutable",
                        "name": "staked",
                        "nameLocation": "5977:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1392,
                        "src": "5969:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1384,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5969:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5968:16:1"
                  },
                  "scope": 1409,
                  "src": "5908:258:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1452
                  ],
                  "body": {
                    "id": 1402,
                    "nodeType": "Block",
                    "src": "6563:59:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 1400,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6580:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 1399,
                        "id": 1401,
                        "nodeType": "Return",
                        "src": "6573:8:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1393,
                    "nodeType": "StructuredDocumentation",
                    "src": "6172:300:1",
                    "text": " @notice Get pending yield rewards (not supported by Moonwell directly)\n @return pending Always returns 0\n @dev Moonwell doesn't expose claimable yield rewards on-chain; use off-chain calculation\n @dev Yield rewards accumulate automatically in mToken exchange rate"
                  },
                  "functionSelector": "f6ed2017",
                  "id": 1403,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPendingRewards",
                  "nameLocation": "6486:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1396,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1395,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1403,
                        "src": "6504:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1394,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6504:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6503:19:1"
                  },
                  "returnParameters": {
                    "id": 1399,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1398,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "6554:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1403,
                        "src": "6546:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1397,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6546:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6545:17:1"
                  },
                  "scope": 1409,
                  "src": "6477:145:1",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1407,
                    "nodeType": "Block",
                    "src": "6733:2:1",
                    "statements": []
                  },
                  "documentation": {
                    "id": 1404,
                    "nodeType": "StructuredDocumentation",
                    "src": "6628:73:1",
                    "text": " @notice Allow receiving GLMR from Moonwell redemptions"
                  },
                  "id": 1408,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1405,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6713:2:1"
                  },
                  "returnParameters": {
                    "id": 1406,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6733:0:1"
                  },
                  "scope": 1409,
                  "src": "6706:29:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1410,
              "src": "1557:5180:1",
              "usedErrors": [
                1162,
                1164,
                1166,
                1168
              ],
              "usedEvents": [
                1146,
                1154,
                1160
              ]
            }
          ],
          "src": "32:6707:1"
        }
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
          "exportedSymbols": {
            "IStakingAdapter": [
              1453
            ]
          },
          "id": 1454,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1411,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingAdapter",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1412,
                "nodeType": "StructuredDocumentation",
                "src": "58:335:2",
                "text": " @title IStakingAdapter\n @notice Chain-agnostic interface for external staking protocols\n @dev Allows HabitTracker to integrate with any staking protocol\n \n @dev Terminology:\n - Yield Stake: User rewards staked in external protocol (principal)\n - Yield Rewards: Additional rewards generated from external protocol"
              },
              "fullyImplemented": false,
              "id": 1453,
              "linearizedBaseContracts": [
                1453
              ],
              "name": "IStakingAdapter",
              "nameLocation": "404:15:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1413,
                    "nodeType": "StructuredDocumentation",
                    "src": "426:291:2",
                    "text": " @notice Create yield stake by staking user rewards into external protocol\n @param user Address of the user whose rewards are being staked\n @param amount Amount to stake (user's earned rewards)\n @dev For native token staking, msg.value should equal amount"
                  },
                  "functionSelector": "adc9772e",
                  "id": 1420,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake",
                  "nameLocation": "731:5:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1418,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1415,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "745:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "737:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1414,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "737:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1417,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "759:6:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "751:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1416,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "751:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "736:30:2"
                  },
                  "returnParameters": {
                    "id": 1419,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "783:0:2"
                  },
                  "scope": 1453,
                  "src": "722:62:2",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1421,
                    "nodeType": "StructuredDocumentation",
                    "src": "790:290:2",
                    "text": " @notice Unstake from external protocol (yield stake + yield rewards)\n @param user Address of the user whose rewards are being unstaked\n @param amount Amount to unstake\n @dev Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker"
                  },
                  "functionSelector": "c2a672e0",
                  "id": 1428,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unstake",
                  "nameLocation": "1094:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1426,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1423,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1110:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "1102:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1422,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1102:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1425,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1124:6:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "1116:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1424,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1116:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1101:30:2"
                  },
                  "returnParameters": {
                    "id": 1427,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1140:0:2"
                  },
                  "scope": 1453,
                  "src": "1085:56:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1429,
                    "nodeType": "StructuredDocumentation",
                    "src": "1147:357:2",
                    "text": " @notice Claim accumulated yield rewards from external protocol for a specific user\n @param user Address of the user whose yield rewards to claim\n @return claimed Amount of yield rewards claimed\n @dev Returns 0 if no yield rewards available or not supported\n @dev Claimed rewards should be sent back to HabitTracker"
                  },
                  "functionSelector": "ef5cfb8c",
                  "id": 1436,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimRewards",
                  "nameLocation": "1518:12:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1432,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1431,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1539:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1436,
                        "src": "1531:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1430,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1531:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1530:14:2"
                  },
                  "returnParameters": {
                    "id": 1435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1434,
                        "mutability": "mutable",
                        "name": "claimed",
                        "nameLocation": "1571:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1436,
                        "src": "1563:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1433,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1563:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1562:17:2"
                  },
                  "scope": 1453,
                  "src": "1509:71:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1437,
                    "nodeType": "StructuredDocumentation",
                    "src": "1586:198:2",
                    "text": " @notice Get total yield stake amount for an address (principal only)\n @param who Address to check\n @return staked Total yield stake by address (excludes yield rewards)"
                  },
                  "functionSelector": "4da6a556",
                  "id": 1444,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakedAmount",
                  "nameLocation": "1798:15:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1440,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1439,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "1822:3:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1444,
                        "src": "1814:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1438,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1814:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1813:13:2"
                  },
                  "returnParameters": {
                    "id": 1443,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1442,
                        "mutability": "mutable",
                        "name": "staked",
                        "nameLocation": "1858:6:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1444,
                        "src": "1850:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1441,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1850:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1849:16:2"
                  },
                  "scope": 1453,
                  "src": "1789:77:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1445,
                    "nodeType": "StructuredDocumentation",
                    "src": "1872:208:2",
                    "text": " @notice Get pending unclaimed yield rewards for an address\n @param who Address to check\n @return pending Pending yield rewards\n @dev Returns 0 if not supported by protocol"
                  },
                  "functionSelector": "f6ed2017",
                  "id": 1452,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPendingRewards",
                  "nameLocation": "2094:17:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1448,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1447,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "2120:3:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1452,
                        "src": "2112:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1446,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2112:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2111:13:2"
                  },
                  "returnParameters": {
                    "id": 1451,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1450,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "2156:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1452,
                        "src": "2148:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1449,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2148:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2147:17:2"
                  },
                  "scope": 1453,
                  "src": "2085:80:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1454,
              "src": "394:1773:2",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "32:2137:2"
        }
      },
      "contracts/mocks/MockStakingRewards.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "contracts/mocks/MockStakingRewards.sol",
          "exportedSymbols": {
            "IStakingAdapter": [
              1453
            ],
            "MockStakingRewards": [
              1813
            ]
          },
          "id": 1814,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1455,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:3"
            },
            {
              "absolutePath": "contracts/interfaces/IStakingAdapter.sol",
              "file": "../interfaces/IStakingAdapter.sol",
              "id": 1456,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1814,
              "sourceUnit": 1454,
              "src": "58:43:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1458,
                    "name": "IStakingAdapter",
                    "nameLocations": [
                      "311:15:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1453,
                    "src": "311:15:3"
                  },
                  "id": 1459,
                  "nodeType": "InheritanceSpecifier",
                  "src": "311:15:3"
                }
              ],
              "canonicalName": "MockStakingRewards",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1457,
                "nodeType": "StructuredDocumentation",
                "src": "103:176:3",
                "text": " @title MockStakingRewards\n @notice Simple mock staking contract for testing on Passet Hub\n @dev Linear reward rate: rewards = staked * ratePerSecond * timeStaked"
              },
              "fullyImplemented": true,
              "id": 1813,
              "linearizedBaseContracts": [
                1813,
                1453
              ],
              "name": "MockStakingRewards",
              "nameLocation": "289:18:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "8eff1a98",
                  "id": 1461,
                  "mutability": "immutable",
                  "name": "ratePerSecond",
                  "nameLocation": "358:13:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1813,
                  "src": "333:38:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "333:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "836ee1c0",
                  "id": 1463,
                  "mutability": "immutable",
                  "name": "habitTracker",
                  "nameLocation": "453:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1813,
                  "src": "428:37:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1462,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "428:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fc7e286d",
                  "id": 1467,
                  "mutability": "mutable",
                  "name": "deposits",
                  "nameLocation": "507:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1813,
                  "src": "472:43:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 1466,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 1464,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "480:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "472:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 1465,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "491:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "2ce9aead",
                  "id": 1471,
                  "mutability": "mutable",
                  "name": "lastUpdateTime",
                  "nameLocation": "556:14:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1813,
                  "src": "521:49:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 1470,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 1468,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "529:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "521:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 1469,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "540:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d",
                  "id": 1477,
                  "name": "Staked",
                  "nameLocation": "583:6:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1476,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1473,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "606:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1477,
                        "src": "590:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1472,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "590:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1475,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "620:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1477,
                        "src": "612:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1474,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "612:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "589:38:3"
                  },
                  "src": "577:51:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75",
                  "id": 1483,
                  "name": "Unstaked",
                  "nameLocation": "639:8:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1482,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1479,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "664:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1483,
                        "src": "648:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1478,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "648:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1481,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "678:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1483,
                        "src": "670:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1480,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "670:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "647:38:3"
                  },
                  "src": "633:53:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "fc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe",
                  "id": 1489,
                  "name": "RewardsClaimed",
                  "nameLocation": "697:14:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1488,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1485,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "728:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1489,
                        "src": "712:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1484,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "712:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1487,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "742:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1489,
                        "src": "734:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1486,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "734:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "711:38:3"
                  },
                  "src": "691:59:3"
                },
                {
                  "errorSelector": "c39fa004",
                  "id": 1491,
                  "name": "OnlyHabitTracker",
                  "nameLocation": "762:16:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1490,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "778:2:3"
                  },
                  "src": "756:25:3"
                },
                {
                  "errorSelector": "f4d678b8",
                  "id": 1493,
                  "name": "InsufficientBalance",
                  "nameLocation": "792:19:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1492,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "811:2:3"
                  },
                  "src": "786:28:3"
                },
                {
                  "errorSelector": "90b8ec18",
                  "id": 1495,
                  "name": "TransferFailed",
                  "nameLocation": "825:14:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1494,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "839:2:3"
                  },
                  "src": "819:23:3"
                },
                {
                  "errorSelector": "2c5211c6",
                  "id": 1497,
                  "name": "InvalidAmount",
                  "nameLocation": "853:13:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 1496,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "866:2:3"
                  },
                  "src": "847:22:3"
                },
                {
                  "body": {
                    "id": 1508,
                    "nodeType": "Block",
                    "src": "903:85:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1499,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "917:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1500,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "921:6:3",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "917:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1501,
                            "name": "habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1463,
                            "src": "931:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "917:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1506,
                        "nodeType": "IfStatement",
                        "src": "913:57:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1503,
                              "name": "OnlyHabitTracker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1491,
                              "src": "952:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "952:18:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1505,
                          "nodeType": "RevertStatement",
                          "src": "945:25:3"
                        }
                      },
                      {
                        "id": 1507,
                        "nodeType": "PlaceholderStatement",
                        "src": "980:1:3"
                      }
                    ]
                  },
                  "id": 1509,
                  "name": "onlyHabitTracker",
                  "nameLocation": "884:16:3",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1498,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "900:2:3"
                  },
                  "src": "875:113:3",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1525,
                    "nodeType": "Block",
                    "src": "1199:85:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 1519,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1517,
                            "name": "ratePerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1461,
                            "src": "1209:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1518,
                            "name": "_ratePerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1512,
                            "src": "1225:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1209:30:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1520,
                        "nodeType": "ExpressionStatement",
                        "src": "1209:30:3"
                      },
                      {
                        "expression": {
                          "id": 1523,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1521,
                            "name": "habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1463,
                            "src": "1249:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1522,
                            "name": "_habitTracker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1514,
                            "src": "1264:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1249:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1524,
                        "nodeType": "ExpressionStatement",
                        "src": "1249:28:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1510,
                    "nodeType": "StructuredDocumentation",
                    "src": "994:141:3",
                    "text": " @param _ratePerSecond Reward rate (e.g., 1e15 = 0.1% per second)\n @param _habitTracker HabitTracker contract address"
                  },
                  "id": 1526,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1515,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1512,
                        "mutability": "mutable",
                        "name": "_ratePerSecond",
                        "nameLocation": "1160:14:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "1152:22:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1511,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1152:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1514,
                        "mutability": "mutable",
                        "name": "_habitTracker",
                        "nameLocation": "1184:13:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "1176:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1513,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1176:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1151:47:3"
                  },
                  "returnParameters": {
                    "id": 1516,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1199:0:3"
                  },
                  "scope": 1813,
                  "src": "1140:144:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1420
                  ],
                  "body": {
                    "id": 1565,
                    "nodeType": "Block",
                    "src": "1369:214:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1535,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "1383:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1387:5:3",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "1383:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1537,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1530,
                            "src": "1396:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1383:19:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1542,
                        "nodeType": "IfStatement",
                        "src": "1379:47:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1539,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1497,
                              "src": "1411:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1540,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1411:15:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1541,
                          "nodeType": "RevertStatement",
                          "src": "1404:22:3"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1543,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1530,
                            "src": "1440:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1450:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1440:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1549,
                        "nodeType": "IfStatement",
                        "src": "1436:39:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1546,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1497,
                              "src": "1460:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1460:15:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1548,
                          "nodeType": "RevertStatement",
                          "src": "1453:22:3"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1551,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1528,
                              "src": "1501:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1550,
                            "name": "_updateRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1764,
                            "src": "1486:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 1552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1486:20:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1553,
                        "nodeType": "ExpressionStatement",
                        "src": "1486:20:3"
                      },
                      {
                        "expression": {
                          "id": 1558,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1554,
                              "name": "deposits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1467,
                              "src": "1516:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1556,
                            "indexExpression": {
                              "id": 1555,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1528,
                              "src": "1525:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1516:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1557,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1530,
                            "src": "1534:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1516:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1559,
                        "nodeType": "ExpressionStatement",
                        "src": "1516:24:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1561,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1528,
                              "src": "1563:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1562,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1530,
                              "src": "1569:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1560,
                            "name": "Staked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1477,
                            "src": "1556:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1563,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1556:20:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1564,
                        "nodeType": "EmitStatement",
                        "src": "1551:25:3"
                      }
                    ]
                  },
                  "functionSelector": "adc9772e",
                  "id": 1566,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1533,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1532,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "1352:16:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1509,
                        "src": "1352:16:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1352:16:3"
                    }
                  ],
                  "name": "stake",
                  "nameLocation": "1299:5:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1528,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1313:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1566,
                        "src": "1305:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1527,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1305:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1530,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1327:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1566,
                        "src": "1319:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1529,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1319:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1304:30:3"
                  },
                  "returnParameters": {
                    "id": 1534,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1369:0:3"
                  },
                  "scope": 1813,
                  "src": "1290:293:3",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1428
                  ],
                  "body": {
                    "id": 1621,
                    "nodeType": "Block",
                    "src": "1662:376:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1577,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1575,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1570,
                            "src": "1676:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1686:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1676:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1581,
                        "nodeType": "IfStatement",
                        "src": "1672:39:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1578,
                              "name": "InvalidAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1497,
                              "src": "1696:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1579,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1696:15:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1580,
                          "nodeType": "RevertStatement",
                          "src": "1689:22:3"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1586,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 1582,
                              "name": "deposits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1467,
                              "src": "1725:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1584,
                            "indexExpression": {
                              "id": 1583,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1568,
                              "src": "1734:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1725:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1585,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1570,
                            "src": "1742:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1725:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1590,
                        "nodeType": "IfStatement",
                        "src": "1721:57:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1587,
                              "name": "InsufficientBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1493,
                              "src": "1757:19:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1588,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1757:21:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1589,
                          "nodeType": "RevertStatement",
                          "src": "1750:28:3"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1592,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1568,
                              "src": "1804:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1591,
                            "name": "_updateRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1764,
                            "src": "1789:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 1593,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1789:20:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1594,
                        "nodeType": "ExpressionStatement",
                        "src": "1789:20:3"
                      },
                      {
                        "expression": {
                          "id": 1599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1595,
                              "name": "deposits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1467,
                              "src": "1819:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1597,
                            "indexExpression": {
                              "id": 1596,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1568,
                              "src": "1828:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1819:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 1598,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1570,
                            "src": "1837:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1819:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1600,
                        "nodeType": "ExpressionStatement",
                        "src": "1819:24:3"
                      },
                      {
                        "assignments": [
                          1602,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1602,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "1897:7:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 1621,
                            "src": "1892:12:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1601,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1892:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1609,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1943:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 1603,
                                "name": "habitTracker",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1463,
                                "src": "1910:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1604,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1923:4:3",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "1910:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1606,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1605,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1570,
                                "src": "1935:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "1910:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1608,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1910:36:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1891:55:3"
                      },
                      {
                        "condition": {
                          "id": 1611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "1960:8:3",
                          "subExpression": {
                            "id": 1610,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1602,
                            "src": "1961:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1615,
                        "nodeType": "IfStatement",
                        "src": "1956:37:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1612,
                              "name": "TransferFailed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1495,
                              "src": "1977:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 1613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1977:16:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 1614,
                          "nodeType": "RevertStatement",
                          "src": "1970:23:3"
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1617,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1568,
                              "src": "2018:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1618,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1570,
                              "src": "2024:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1616,
                            "name": "Unstaked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1483,
                            "src": "2009:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1619,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2009:22:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1620,
                        "nodeType": "EmitStatement",
                        "src": "2004:27:3"
                      }
                    ]
                  },
                  "functionSelector": "c2a672e0",
                  "id": 1622,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1573,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1572,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "1645:16:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1509,
                        "src": "1645:16:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1645:16:3"
                    }
                  ],
                  "name": "unstake",
                  "nameLocation": "1598:7:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1571,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1568,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1614:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1622,
                        "src": "1606:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1567,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1606:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1570,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1628:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1622,
                        "src": "1620:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1569,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1620:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1605:30:3"
                  },
                  "returnParameters": {
                    "id": 1574,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1662:0:3"
                  },
                  "scope": 1813,
                  "src": "1589:449:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1436
                  ],
                  "body": {
                    "id": 1707,
                    "nodeType": "Block",
                    "src": "2132:749:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 1635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1631,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1629,
                            "src": "2142:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1633,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1624,
                                "src": "2168:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1632,
                              "name": "_pendingRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1807,
                              "src": "2152:15:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view returns (uint256)"
                              }
                            },
                            "id": 1634,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2152:21:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2142:31:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1636,
                        "nodeType": "ExpressionStatement",
                        "src": "2142:31:3"
                      },
                      {
                        "assignments": [
                          1638
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1638,
                            "mutability": "mutable",
                            "name": "balance",
                            "nameLocation": "2244:7:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 1707,
                            "src": "2236:15:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1637,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2236:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1644,
                        "initialValue": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1641,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967268,
                                "src": "2262:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MockStakingRewards_$1813",
                                  "typeString": "contract MockStakingRewards"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MockStakingRewards_$1813",
                                  "typeString": "contract MockStakingRewards"
                                }
                              ],
                              "id": 1640,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2254:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1639,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2254:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1642,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2254:13:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2268:7:3",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "2254:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2236:39:3"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1645,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1638,
                            "src": "2289:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1646,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2300:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2289:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1650,
                        "nodeType": "IfStatement",
                        "src": "2285:26:3",
                        "trueBody": {
                          "expression": {
                            "hexValue": "30",
                            "id": 1648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2310:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 1630,
                          "id": 1649,
                          "nodeType": "Return",
                          "src": "2303:8:3"
                        }
                      },
                      {
                        "assignments": [
                          1652
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1652,
                            "mutability": "mutable",
                            "name": "maxClaim",
                            "nameLocation": "2389:8:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 1707,
                            "src": "2381:16:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1651,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2381:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1656,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1653,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1638,
                            "src": "2400:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "3130",
                            "id": 1654,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2410:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "src": "2400:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2381:31:3"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1657,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1629,
                            "src": "2426:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 1658,
                            "name": "maxClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1652,
                            "src": "2436:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2426:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1664,
                        "nodeType": "IfStatement",
                        "src": "2422:42:3",
                        "trueBody": {
                          "expression": {
                            "id": 1662,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 1660,
                              "name": "claimed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "2446:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "id": 1661,
                              "name": "maxClaim",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1652,
                              "src": "2456:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2446:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1663,
                          "nodeType": "ExpressionStatement",
                          "src": "2446:18:3"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1665,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1629,
                            "src": "2538:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 1666,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1638,
                            "src": "2548:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2538:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1672,
                        "nodeType": "IfStatement",
                        "src": "2534:40:3",
                        "trueBody": {
                          "expression": {
                            "id": 1670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 1668,
                              "name": "claimed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "2557:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "id": 1669,
                              "name": "balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1638,
                              "src": "2567:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2557:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1671,
                          "nodeType": "ExpressionStatement",
                          "src": "2557:17:3"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1675,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1673,
                            "name": "claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1629,
                            "src": "2597:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1674,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2607:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2597:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1704,
                        "nodeType": "IfStatement",
                        "src": "2593:249:3",
                        "trueBody": {
                          "id": 1703,
                          "nodeType": "Block",
                          "src": "2610:232:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1676,
                                    "name": "lastUpdateTime",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1471,
                                    "src": "2624:14:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 1678,
                                  "indexExpression": {
                                    "id": 1677,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1624,
                                    "src": "2639:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "2624:20:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1679,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "2647:5:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1680,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2653:9:3",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "2647:15:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2624:38:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1682,
                              "nodeType": "ExpressionStatement",
                              "src": "2624:38:3"
                            },
                            {
                              "assignments": [
                                1684,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1684,
                                  "mutability": "mutable",
                                  "name": "success",
                                  "nameLocation": "2682:7:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1703,
                                  "src": "2677:12:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 1683,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2677:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 1691,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "hexValue": "",
                                    "id": 1689,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2729:2:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    },
                                    "value": ""
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                        "typeString": "literal_string \"\""
                                      }
                                    ],
                                    "expression": {
                                      "id": 1685,
                                      "name": "habitTracker",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1463,
                                      "src": "2695:12:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "id": 1686,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2708:4:3",
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "src": "2695:17:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                    }
                                  },
                                  "id": 1688,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "names": [
                                    "value"
                                  ],
                                  "nodeType": "FunctionCallOptions",
                                  "options": [
                                    {
                                      "id": 1687,
                                      "name": "claimed",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1629,
                                      "src": "2720:7:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "src": "2695:33:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 1690,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2695:37:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2676:56:3"
                            },
                            {
                              "condition": {
                                "id": 1693,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "2750:8:3",
                                "subExpression": {
                                  "id": 1692,
                                  "name": "success",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1684,
                                  "src": "2751:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1697,
                              "nodeType": "IfStatement",
                              "src": "2746:37:3",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1694,
                                    "name": "TransferFailed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1495,
                                    "src": "2767:14:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                      "typeString": "function () pure returns (error)"
                                    }
                                  },
                                  "id": 1695,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2767:16:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_error",
                                    "typeString": "error"
                                  }
                                },
                                "id": 1696,
                                "nodeType": "RevertStatement",
                                "src": "2760:23:3"
                              }
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 1699,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1624,
                                    "src": "2817:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1700,
                                    "name": "claimed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1629,
                                    "src": "2823:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1698,
                                  "name": "RewardsClaimed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1489,
                                  "src": "2802:14:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 1701,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2802:29:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1702,
                              "nodeType": "EmitStatement",
                              "src": "2797:34:3"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1705,
                          "name": "claimed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1629,
                          "src": "2867:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1630,
                        "id": 1706,
                        "nodeType": "Return",
                        "src": "2860:14:3"
                      }
                    ]
                  },
                  "functionSelector": "ef5cfb8c",
                  "id": 1708,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1627,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1626,
                        "name": "onlyHabitTracker",
                        "nameLocations": [
                          "2089:16:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1509,
                        "src": "2089:16:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2089:16:3"
                    }
                  ],
                  "name": "claimRewards",
                  "nameLocation": "2053:12:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1625,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1624,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "2074:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1708,
                        "src": "2066:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1623,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2066:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2065:14:3"
                  },
                  "returnParameters": {
                    "id": 1630,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1629,
                        "mutability": "mutable",
                        "name": "claimed",
                        "nameLocation": "2123:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1708,
                        "src": "2115:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1628,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2115:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2114:17:3"
                  },
                  "scope": 1813,
                  "src": "2044:837:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1444
                  ],
                  "body": {
                    "id": 1719,
                    "nodeType": "Block",
                    "src": "2957:37:3",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 1715,
                            "name": "deposits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1467,
                            "src": "2974:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1717,
                          "indexExpression": {
                            "id": 1716,
                            "name": "who",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1710,
                            "src": "2983:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2974:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1714,
                        "id": 1718,
                        "nodeType": "Return",
                        "src": "2967:20:3"
                      }
                    ]
                  },
                  "functionSelector": "4da6a556",
                  "id": 1720,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakedAmount",
                  "nameLocation": "2896:15:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1711,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1710,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "2920:3:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1720,
                        "src": "2912:11:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1709,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2912:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2911:13:3"
                  },
                  "returnParameters": {
                    "id": 1714,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1713,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1720,
                        "src": "2948:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1712,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2948:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2947:9:3"
                  },
                  "scope": 1813,
                  "src": "2887:107:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1452
                  ],
                  "body": {
                    "id": 1731,
                    "nodeType": "Block",
                    "src": "3072:44:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1728,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1722,
                              "src": "3105:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1727,
                            "name": "_pendingRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1807,
                            "src": "3089:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 1729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3089:20:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1726,
                        "id": 1730,
                        "nodeType": "Return",
                        "src": "3082:27:3"
                      }
                    ]
                  },
                  "functionSelector": "f6ed2017",
                  "id": 1732,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPendingRewards",
                  "nameLocation": "3009:17:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1723,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1722,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "3035:3:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1732,
                        "src": "3027:11:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1721,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3027:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3026:13:3"
                  },
                  "returnParameters": {
                    "id": 1726,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1725,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1732,
                        "src": "3063:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1724,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3063:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3062:9:3"
                  },
                  "scope": 1813,
                  "src": "3000:116:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1743,
                    "nodeType": "Block",
                    "src": "3184:45:3",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1739,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967268,
                                "src": "3209:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MockStakingRewards_$1813",
                                  "typeString": "contract MockStakingRewards"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MockStakingRewards_$1813",
                                  "typeString": "contract MockStakingRewards"
                                }
                              ],
                              "id": 1738,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3201:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1737,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3201:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1740,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3201:13:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3215:7:3",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "3201:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1736,
                        "id": 1742,
                        "nodeType": "Return",
                        "src": "3194:28:3"
                      }
                    ]
                  },
                  "functionSelector": "6f9fb98a",
                  "id": 1744,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getContractBalance",
                  "nameLocation": "3131:18:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1733,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3149:2:3"
                  },
                  "returnParameters": {
                    "id": 1736,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1735,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1744,
                        "src": "3175:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1734,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3175:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3174:9:3"
                  },
                  "scope": 1813,
                  "src": "3122:107:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1763,
                    "nodeType": "Block",
                    "src": "3282:110:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1753,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 1749,
                              "name": "lastUpdateTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1471,
                              "src": "3296:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1751,
                            "indexExpression": {
                              "id": 1750,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1746,
                              "src": "3311:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3296:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1752,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3320:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3296:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1762,
                        "nodeType": "IfStatement",
                        "src": "3292:94:3",
                        "trueBody": {
                          "id": 1761,
                          "nodeType": "Block",
                          "src": "3323:63:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1759,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1754,
                                    "name": "lastUpdateTime",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1471,
                                    "src": "3337:14:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 1756,
                                  "indexExpression": {
                                    "id": 1755,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1746,
                                    "src": "3352:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "3337:20:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1757,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "3360:5:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1758,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3366:9:3",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "3360:15:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3337:38:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1760,
                              "nodeType": "ExpressionStatement",
                              "src": "3337:38:3"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1764,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_updateRewards",
                  "nameLocation": "3244:14:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1747,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1746,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "3267:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1764,
                        "src": "3259:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1745,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3259:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3258:14:3"
                  },
                  "returnParameters": {
                    "id": 1748,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3282:0:3"
                  },
                  "scope": 1813,
                  "src": "3235:157:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1806,
                    "nodeType": "Block",
                    "src": "3469:309:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1775,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 1771,
                                "name": "lastUpdateTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1471,
                                "src": "3483:14:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1773,
                              "indexExpression": {
                                "id": 1772,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1766,
                                "src": "3498:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3483:20:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1774,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3507:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3483:25:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1780,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 1776,
                                "name": "deposits",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1467,
                                "src": "3512:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1778,
                              "indexExpression": {
                                "id": 1777,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1766,
                                "src": "3521:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3512:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1779,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3530:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3512:19:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3483:48:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1785,
                        "nodeType": "IfStatement",
                        "src": "3479:87:3",
                        "trueBody": {
                          "id": 1784,
                          "nodeType": "Block",
                          "src": "3533:33:3",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 1782,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3554:1:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 1770,
                              "id": 1783,
                              "nodeType": "Return",
                              "src": "3547:8:3"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1787
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1787,
                            "mutability": "mutable",
                            "name": "timeElapsed",
                            "nameLocation": "3584:11:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 1806,
                            "src": "3576:19:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1786,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3576:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1794,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1788,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967292,
                              "src": "3598:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1789,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3604:9:3",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "3598:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "baseExpression": {
                              "id": 1790,
                              "name": "lastUpdateTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1471,
                              "src": "3616:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1792,
                            "indexExpression": {
                              "id": 1791,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1766,
                              "src": "3631:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3616:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3598:38:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3576:60:3"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1804,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1801,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1799,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 1795,
                                      "name": "deposits",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1467,
                                      "src": "3719:8:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 1797,
                                    "indexExpression": {
                                      "id": 1796,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1766,
                                      "src": "3728:4:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3719:14:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1798,
                                    "name": "ratePerSecond",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1461,
                                    "src": "3736:13:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "3719:30:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 1800,
                                  "name": "timeElapsed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1787,
                                  "src": "3752:11:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3719:44:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1802,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3718:46:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "31653138",
                            "id": 1803,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3767:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "value": "1e18"
                          },
                          "src": "3718:53:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1770,
                        "id": 1805,
                        "nodeType": "Return",
                        "src": "3711:60:3"
                      }
                    ]
                  },
                  "id": 1807,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_pendingRewards",
                  "nameLocation": "3407:15:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1767,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1766,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "3431:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1807,
                        "src": "3423:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1765,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3423:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3422:14:3"
                  },
                  "returnParameters": {
                    "id": 1770,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1769,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1807,
                        "src": "3460:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1768,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3460:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3459:9:3"
                  },
                  "scope": 1813,
                  "src": "3398:380:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1811,
                    "nodeType": "Block",
                    "src": "3878:2:3",
                    "statements": []
                  },
                  "documentation": {
                    "id": 1808,
                    "nodeType": "StructuredDocumentation",
                    "src": "3784:62:3",
                    "text": " @notice Allow receiving PAS for reward pool"
                  },
                  "id": 1812,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1809,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3858:2:3"
                  },
                  "returnParameters": {
                    "id": 1810,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3878:0:3"
                  },
                  "scope": 1813,
                  "src": "3851:29:3",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1814,
              "src": "280:3602:3",
              "usedErrors": [
                1491,
                1493,
                1495,
                1497
              ],
              "usedEvents": [
                1477,
                1483,
                1489
              ]
            }
          ],
          "src": "32:3852:3"
        }
      }
    },
    "contracts": {
      "contracts/HabitTracker.sol": {
        "HabitTracker": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_treasury",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_stakingAdapter",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AlreadyCheckedIn",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "AlreadySettled",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "CannotSettleCurrentDay",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "DayNotFunded",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitAlreadyArchived",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitIdTooLarge",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitNotFound",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "HabitTextTooLong",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidAmount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidBalanceType",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidEpoch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidStakingAdapter",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidTreasury",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OnlyOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint8",
                  "name": "from",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "uint8",
                  "name": "to",
                  "type": "uint8"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "BalanceMoved",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "CheckedIn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "fundedCount",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "uint32",
                  "name": "insufficientCount",
                  "type": "uint32"
                }
              ],
              "name": "DayPrepared",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Deposited",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "HabitArchived",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "HabitCreated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "slashed",
                  "type": "uint256"
                }
              ],
              "name": "SettledFail",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "indexed": true,
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                }
              ],
              "name": "SettledSuccess",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "oldAdapter",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newAdapter",
                  "type": "address"
                }
              ],
              "name": "StakingAdapterUpdated",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "STAKE_PER_DAY",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "archiveHabit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "checkIn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "checked",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "claimYieldRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "claimed",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                }
              ],
              "name": "createHabit",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "epochNow",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "forceSettle",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "funded",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "name": "habits",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "text",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "createdAtEpoch",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "archived",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "from",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "to",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "move",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                }
              ],
              "name": "prepareDay",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_newAdapter",
                  "type": "address"
                }
              ],
              "name": "setStakingAdapter",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "epoch",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "habitId",
                  "type": "uint32"
                }
              ],
              "name": "settle",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "name": "settled",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stakingAdapter",
              "outputs": [
                {
                  "internalType": "contract IStakingAdapter",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "treasury",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userHabitCounters",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userStates",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "depositBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "blockedBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimableBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "activeHabitCount",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAdapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyCheckedIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSettleCurrentDay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DayNotFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitAlreadyArchived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitIdTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HabitTextTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalanceType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"from\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"to\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fundedCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"insufficientCount\",\"type\":\"uint32\"}],\"name\":\"DayPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"HabitArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"HabitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashed\",\"type\":\"uint256\"}],\"name\":\"SettledFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SettledSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdapter\",\"type\":\"address\"}],\"name\":\"StakingAdapterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STAKE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"archiveHabit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"checked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"}],\"name\":\"createHabit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"forceSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"funded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"habits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"text\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"createdAtEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"archived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"from\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"to\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"prepareDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdapter\",\"type\":\"address\"}],\"name\":\"setStakingAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"habitId\",\"type\":\"uint32\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAdapter\",\"outputs\":[{\"internalType\":\"contract IStakingAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHabitCounters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activeHabitCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"HabitChain Team\",\"details\":\"Uses epoch-based time (86400-second days) for daily cyclesIntegrates with external staking via IStakingAdapter Two types of stakes: - Funded Stake: User deposits locked during day (blockedBalance) - Yield Stake: Successful rewards staked externally for yield generation Two types of rewards: - User Rewards: Base rewards from successful habit completion (claimableBalance) - Yield Rewards: Additional rewards generated from external staking (tracked in adapter) \",\"kind\":\"dev\",\"methods\":{\"archiveHabit(uint32)\":{\"params\":{\"habitId\":\"ID of the habit to archive\"}},\"checkIn(uint32,uint64)\":{\"params\":{\"epoch\":\"The epoch to check in (must be current day)\",\"habitId\":\"ID of the habit\"}},\"claimYieldRewards()\":{\"details\":\"Claims yield rewards for msg.sender and sends them directly to their wallet\",\"returns\":{\"claimed\":\"Amount of yield rewards claimed\"}},\"createHabit(bytes32)\":{\"params\":{\"text\":\"Description of the habit (up to 32 bytes)\"},\"returns\":{\"_0\":\"habitId The ID of the newly created habit\"}},\"forceSettle(address,uint64,uint32)\":{\"details\":\"Bypasses the \\\"cannot settle current day\\\" check - use with caution\",\"params\":{\"epoch\":\"The epoch to settle (can be any epoch, including current)\",\"habitId\":\"ID of the habit to settle\",\"user\":\"Address of habit owner\"}},\"move(uint8,uint8,uint256)\":{\"details\":\"Examples: withdraw from deposit: move(0,2,amt), claim: move(1,2,amt), redeposit: move(1,0,amt)\",\"params\":{\"amount\":\"Amount to move\",\"from\":\"Source balance type (0=deposit, 1=claimable)\",\"to\":\"Destination balance type (0=deposit, 1=claimable, 2=external/withdraw)\"}},\"prepareDay(uint64)\":{\"details\":\"Moves funds from depositBalance to blockedBalance (funded stake)\",\"params\":{\"epoch\":\"The epoch to prepare (must be current day)\"}},\"settle(address,uint64,uint32)\":{\"params\":{\"epoch\":\"The epoch to settle (must be past day)\",\"habitId\":\"ID of the habit to settle\",\"user\":\"Address of habit owner\"}}},\"title\":\"HabitTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"archiveHabit(uint32)\":{\"notice\":\"Archive a habit (soft delete)\"},\"checkIn(uint32,uint64)\":{\"notice\":\"Check in to a habit for the current day\"},\"claimYieldRewards()\":{\"notice\":\"Claim yield rewards from external staking adapter\"},\"createHabit(bytes32)\":{\"notice\":\"Create a new habit\"},\"forceSettle(address,uint64,uint32)\":{\"notice\":\"Force settle a specific habit without epoch validation (TESTING ONLY)\"},\"move(uint8,uint8,uint256)\":{\"notice\":\"Move funds between balance types\"},\"prepareDay(uint64)\":{\"notice\":\"Prepare the day by locking funds (funded stake) for active habits\"},\"settle(address,uint64,uint32)\":{\"notice\":\"Settle a specific habit for a past day\"}},\"notice\":\"Gamified habit tracking with financial commitment and yield generation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HabitTracker.sol\":\"HabitTracker\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HabitTracker.sol\":{\"keccak256\":\"0x85a74e1c78c530f72fea214761037e323eb10f3ab73385477ace0092356d2a3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c721daff967a92bffe001715082b504840a87383e6b86d2a351f1efb55bfe1cb\",\"dweb:/ipfs/QmbZDLezP2yKsyeogSYGdLghPR2EDuLTkfsMEmzbBLMnqL\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 332/65952 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 10353\n// Code size = 36362 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x20148\n    16: s0 = i32 [0x20148]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30180\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 7 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x20148]\n    41: u32 [0x20148] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x20148]\n    68: jump @57 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30180\n    77: i32 a0 = a0 + 0\n    79: ecalli 15 // 'set_immutable_data'\n    81: jump @57\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @20\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @20\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 8 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 16 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 [@dyn 3] (gas: 35)\n   874: a1 = u64 [sp]\n   876: a1 = reverse a1\n   878: a2 = u64 [sp + 0x8]\n   881: a2 = reverse a2\n   883: a3 = u64 [sp + 0x10]\n   886: a3 = reverse a3\n   888: a4 = u64 [sp + 0x18]\n   891: a4 = reverse a4\n   893: u64 [sp + 0x58] = a4\n   896: u64 [sp + 0x50] = a3\n   899: u64 [sp + 0x48] = a2\n   902: u64 [sp + 0x40] = a1\n   905: a1 = u64 [sp + 0x20]\n   908: a1 = reverse a1\n   910: a2 = u64 [sp + 0x28]\n   913: a2 = reverse a2\n   915: a3 = u64 [sp + 0x30]\n   918: a3 = reverse a3\n   920: a4 = u64 [sp + 0x38]\n   923: a4 = reverse a4\n   925: u64 [sp + 0x78] = a4\n   928: u64 [sp + 0x70] = a3\n   931: u64 [sp + 0x68] = a2\n   934: u64 [sp + 0x60] = a1\n   937: i32 a2 = a0 + 0\n   939: i32 a3 = s1 + 0\n   941: i32 a0 = sp + 0x40\n   944: a1 = 0x2\n   947: ecalli 6 // 'deposit_event'\n   949: sp = s0 + 0xffffffffffffff60\n   953: ra = u64 [sp + 0x98]\n   957: s0 = u64 [sp + 0x90]\n   961: s1 = u64 [sp + 0x88]\n   965: sp = sp + 0xa0\n   969: ret\n      : @14 (gas: 15)\n   971: sp = sp + 0xffffffffffffff20\n   975: u64 [sp + 0xd8] = ra\n   979: u64 [sp + 0xd0] = s0\n   983: u64 [sp + 0xc8] = s1\n   987: s0 = sp + 0xe0\n   991: sp = sp & 0xffffffffffffffe0\n   994: a5 = u64 [a4]\n   996: u64 [sp + 0x40] = a5\n   999: a5 = u64 [a4 + 0x8]\n  1002: u64 [sp + 0x48] = a5\n  1005: a5 = u64 [a4 + 0x10]\n  1008: u64 [sp + 0x50] = a5\n  1011: a4 = u64 [a4 + 0x18]\n  1014: u64 [sp + 0x58] = a4\n  1017: t0 = 8, jump @1350\n      : @15 [@dyn 4] (gas: 2)\n  1023: u64 [sp + 0x38] = a1\n  1026: ra = 10, jump @20\n      : @16 [@dyn 5] (gas: 46)\n  1031: a1 = reverse s1\n  1033: u64 [sp + 0x78] = a1\n  1036: a1 = u64 [sp]\n  1038: a1 = reverse a1\n  1040: u64 [sp + 0x70] = a1\n  1043: a1 = u64 [sp + 0x8]\n  1046: a1 = reverse a1\n  1048: u64 [sp + 0x68] = a1\n  1051: a1 = u64 [sp + 0x10]\n  1054: a1 = reverse a1\n  1056: u64 [sp + 0x60] = a1\n  1059: a1 = u64 [sp + 0x18]\n  1062: a1 = reverse a1\n  1064: u64 [sp + 0x98] = a1\n  1068: a1 = u64 [sp + 0x20]\n  1071: a1 = reverse a1\n  1073: u64 [sp + 0x90] = a1\n  1077: a1 = u64 [sp + 0x28]\n  1080: a1 = reverse a1\n  1082: u64 [sp + 0x88] = a1\n  1086: a1 = u64 [sp + 0x30]\n  1089: a1 = reverse a1\n  1091: u64 [sp + 0x80] = a1\n  1095: a1 = u64 [sp + 0x40]\n  1098: a1 = reverse a1\n  1100: u64 [sp + 0xb8] = a1\n  1104: a1 = u64 [sp + 0x48]\n  1107: a1 = reverse a1\n  1109: u64 [sp + 0xb0] = a1\n  1113: a1 = u64 [sp + 0x50]\n  1116: a1 = reverse a1\n  1118: u64 [sp + 0xa8] = a1\n  1122: a1 = u64 [sp + 0x58]\n  1125: a1 = reverse a1\n  1127: u64 [sp + 0xa0] = a1\n  1131: i32 a2 = a0 + 0\n  1133: a3 = i32 [sp + 0x38]\n  1136: i32 a0 = sp + 0x60\n  1139: a1 = 0x3\n  1142: ecalli 6 // 'deposit_event'\n  1144: sp = s0 + 0xffffffffffffff20\n  1148: ra = u64 [sp + 0xd8]\n  1152: s0 = u64 [sp + 0xd0]\n  1156: s1 = u64 [sp + 0xc8]\n  1160: sp = sp + 0xe0\n  1164: ret\n      : @17 (gas: 23)\n  1166: sp = sp + 0xfffffffffffffee0\n  1170: u64 [sp + 0x118] = ra\n  1174: u64 [sp + 0x110] = s0\n  1178: u64 [sp + 0x108] = s1\n  1182: s0 = sp + 0x120\n  1186: sp = sp & 0xffffffffffffffe0\n  1189: s1 = u64 [a5]\n  1191: u64 [sp + 0x60] = s1\n  1194: s1 = u64 [a5 + 0x8]\n  1197: u64 [sp + 0x68] = s1\n  1200: s1 = u64 [a5 + 0x10]\n  1203: u64 [sp + 0x70] = s1\n  1206: a5 = u64 [a5 + 0x18]\n  1209: u64 [sp + 0x78] = a5\n  1212: a5 = u64 [a4]\n  1214: u64 [sp + 0x38] = a5\n  1217: a5 = u64 [a4 + 0x8]\n  1220: u64 [sp + 0x40] = a5\n  1223: a5 = u64 [a4 + 0x10]\n  1226: u64 [sp + 0x48] = a5\n  1229: a4 = u64 [a4 + 0x18]\n  1232: u64 [sp + 0x50] = a4\n  1235: t0 = 12, jump @1350\n      : @18 [@dyn 6] (gas: 2)\n  1241: u64 [sp + 0x58] = a1\n  1244: ra = 14, jump @20\n      : @19 [@dyn 7] (gas: 58)\n  1249: a1 = reverse s1\n  1251: u64 [sp + 0x98] = a1\n  1255: a1 = u64 [sp]\n  1257: a1 = reverse a1\n  1259: u64 [sp + 0x90] = a1\n  1263: a1 = u64 [sp + 0x8]\n  1266: a1 = reverse a1\n  1268: u64 [sp + 0x88] = a1\n  1272: a1 = u64 [sp + 0x10]\n  1275: a1 = reverse a1\n  1277: u64 [sp + 0x80] = a1\n  1281: a1 = u64 [sp + 0x18]\n  1284: a1 = reverse a1\n  1286: u64 [sp + 0xb8] = a1\n  1290: a1 = u64 [sp + 0x20]\n  1293: a1 = reverse a1\n  1295: u64 [sp + 0xb0] = a1\n  1299: a1 = u64 [sp + 0x28]\n  1302: a1 = reverse a1\n  1304: u64 [sp + 0xa8] = a1\n  1308: a1 = u64 [sp + 0x30]\n  1311: a1 = reverse a1\n  1313: u64 [sp + 0xa0] = a1\n  1317: a1 = u64 [sp + 0x38]\n  1320: a1 = reverse a1\n  1322: u64 [sp + 0xd8] = a1\n  1326: a1 = u64 [sp + 0x40]\n  1329: a1 = reverse a1\n  1331: u64 [sp + 0xd0] = a1\n  1335: a1 = u64 [sp + 0x48]\n  1338: a1 = reverse a1\n  1340: u64 [sp + 0xc8] = a1\n  1344: a1 = u64 [sp + 0x50]\n  1347: a1 = reverse a1\n  1349: u64 [sp + 0xc0] = a1\n  1353: a1 = u64 [sp + 0x60]\n  1356: a1 = reverse a1\n  1358: u64 [sp + 0xf8] = a1\n  1362: a1 = u64 [sp + 0x68]\n  1365: a1 = reverse a1\n  1367: u64 [sp + 0xf0] = a1\n  1371: a1 = u64 [sp + 0x70]\n  1374: a1 = reverse a1\n  1376: u64 [sp + 0xe8] = a1\n  1380: a1 = u64 [sp + 0x78]\n  1383: a1 = reverse a1\n  1385: u64 [sp + 0xe0] = a1\n  1389: i32 a2 = a0 + 0\n  1391: a3 = i32 [sp + 0x58]\n  1394: i32 a0 = sp + 0x80\n  1398: a1 = 0x4\n  1401: ecalli 6 // 'deposit_event'\n  1403: sp = s0 + 0xfffffffffffffee0\n  1407: ra = u64 [sp + 0x118]\n  1411: s0 = u64 [sp + 0x110]\n  1415: s1 = u64 [sp + 0x108]\n  1419: sp = sp + 0x120\n  1423: ret\n      : @20 (gas: 2)\n  1425: i32 a2 = a0 >> 0x10\n  1428: jump @25 if a2 != 0\n      : @21 (gas: 4)\n  1431: a1 = a1 + a0\n  1434: i32 a1 = a1 + 0x1f\n  1437: a1 = a1 & 0xffffffffffffffe0\n  1440: jump @25 if a1 >u 65536\n      : @22 (gas: 3)\n  1446: a2 = 0x20150\n  1451: a3 = i32 [0x20150]\n  1456: jump @24 if a3 >=u a1\n      : @23 (gas: 2)\n  1459: u32 [0x20150] = a1\n  1464: fallthrough\n      : @24 (gas: 4)\n  1465: a1 = 0x20160\n  1470: i32 a0 = a0 + 0\n  1472: a0 = a0 + a1\n  1475: ret\n      : @25 (gas: 1)\n  1477: trap\n      : @26 (gas: 6)\n  1478: sp = sp + 0xfffffffffffffff0\n  1481: u64 [sp + 0x8] = ra\n  1484: u64 [sp] = s0\n  1486: s0 = a0 & 0x1\n  1489: ecalli 3 // 'call_data_size'\n  1491: fallthrough\n      : @27 (gas: 2)\n  1492: u32 [0x2014c] = a0\n  1497: jump @29 if s0 == 0\n      : @28 (gas: 1)\n  1500: ra = 16, jump @30\n      : @29 [@dyn 8] (gas: 1)\n  1504: ra = 18, jump @60\n      : @30 [@dyn 9] (gas: 14)\n  1509: sp = sp + 0xfffffffffffffd60\n  1513: a0 = sp + 0x200\n  1517: u64 [a0 + 0x98] = ra\n  1521: u64 [a0 + 0x90] = s0\n  1525: u64 [a0 + 0x88] = s1\n  1529: s0 = sp + 0x2a0\n  1533: sp = sp & 0xffffffffffffffe0\n  1536: u64 [sp + 440] = 0\n  1540: u64 [sp + 432] = 0\n  1544: u64 [sp + 424] = 0\n  1548: u64 [sp + 416] = 0\n  1552: i32 a0 = sp + 0x1a0\n  1556: ecalli 17 // 'value_transferred'\n  1558: fallthrough\n      : @31 (gas: 8)\n  1559: a0 = u64 [sp + 0x1b0]\n  1563: a1 = u64 [sp + 0x1b8]\n  1567: a2 = u64 [sp + 0x1a8]\n  1571: a3 = u64 [sp + 0x1a0]\n  1575: a1 = a1 | a2\n  1578: a0 = a0 | a3\n  1581: a0 = a0 | a1\n  1584: jump @48 if a0 != 0\n      : @32 (gas: 15)\n  1588: s1 = i32 [0x2014c]\n  1593: a0 = s1 << 0x20\n  1596: a0 = a0 >> 0x20\n  1599: a0 = a0 + 0x1f\n  1602: a0 = a0 & 0xffffffffffffffe0\n  1605: a1 = a0 + 0xa0\n  1609: a0 = a1 <u a0\n  1612: u64 [sp + 408] = 0\n  1616: u64 [sp + 0x180] = a1\n  1620: u64 [sp + 0x188] = a0\n  1624: a0 = 0 if a0 != 0\n  1626: u64 [sp + 0x190] = a0\n  1630: a0 = 0x40\n  1633: a1 = sp + 0x180\n  1637: ra = 20, jump @9\n      : @33 [@dyn 10] (gas: 3)\n  1642: a0 = 0xa0\n  1646: a1 = s1\n  1648: ra = 22, jump @20\n      : @34 [@dyn 11] (gas: 5)\n  1653: i32 a0 = a0 + 0\n  1655: a1 = s1\n  1657: a2 = 0\n  1659: ecalli 1 // 'call_data_copy'\n  1661: fallthrough\n      : @35 (gas: 1)\n  1662: jump @49 if s1 <u 64\n      : @36 (gas: 7)\n  1667: u64 [sp + 344] = 0\n  1671: u64 [sp + 336] = 0\n  1675: u64 [sp + 320] = 0xa0\n  1681: a0 = sp + 0x160\n  1685: a1 = sp + 0x140\n  1689: u64 [sp + 328] = 0\n  1693: ra = 24, jump @1098\n      : @37 [@dyn 12] (gas: 14)\n  1698: a0 = u64 [sp + 0x178]\n  1702: u64 [sp + 0x18] = a0\n  1705: a0 = u64 [sp + 0x170]\n  1709: u64 [sp + 0x10] = a0\n  1712: a0 = u64 [sp + 0x168]\n  1716: u64 [sp + 0x8] = a0\n  1719: s1 = u64 [sp + 0x160]\n  1723: u64 [sp + 280] = 0\n  1727: u64 [sp + 272] = 0\n  1731: u64 [sp + 256] = 0xc0\n  1737: a0 = sp + 0x120\n  1741: a1 = sp + 0x100\n  1745: u64 [sp + 264] = 0\n  1749: ra = 26, jump @1098\n      : @38 [@dyn 13] (gas: 7)\n  1754: a3 = u64 [sp + 0x8]\n  1757: a2 = u64 [sp + 0x10]\n  1760: a0 = a2 << 0x20\n  1763: a0 = a0 >> 0x20\n  1766: a1 = s1 | a3\n  1769: a0 = a0 | a1\n  1772: jump @50 if a0 == 0\n      : @39 (gas: 16)\n  1776: a0 = u64 [sp + 0x130]\n  1780: u64 [sp + 0x38] = a0\n  1783: a0 = u64 [sp + 0x128]\n  1787: u64 [sp + 0x28] = a0\n  1790: a0 = u64 [sp + 0x120]\n  1794: u64 [sp + 0x30] = a0\n  1797: a0 = 0xffffffff\n  1807: u64 [sp + 0x20] = a0\n  1810: u64 [sp + 0xe0] = s1\n  1814: u64 [sp + 0xe8] = a3\n  1818: u64 [sp + 0xf0] = a2\n  1822: a0 = 0x80\n  1826: a1 = sp + 0xe0\n  1830: a2 = u64 [sp + 0x18]\n  1833: u64 [sp + 0xf8] = a2\n  1837: ra = 28, jump @9\n      : @40 [@dyn 14] (gas: 25)\n  1842: s1 = 0x30160\n  1847: i32 a0 = s1 + 0\n  1849: ecalli 4 // 'caller'\n  1851: a0 = u64 [0x30168]\n  1856: a1 = i32 [0x30170]\n  1861: a2 = u64 [0x30160]\n  1866: a0 = reverse a0\n  1868: a3 = a0 << 0x20\n  1871: a1 = reverse a1\n  1873: a1 = a1 >> 0x20\n  1876: a1 = a1 | a3\n  1879: u64 [sp + 0x18] = a1\n  1882: a0 = a0 >> 0x20\n  1885: a1 = reverse a2\n  1887: s1 = a1 << 0x20\n  1890: a0 = a0 | s1\n  1893: u64 [sp + 0x10] = a0\n  1896: s1 = a1 >> 0x20\n  1899: u64 [sp + 472] = 0\n  1903: u64 [sp + 464] = 0\n  1907: u64 [sp + 456] = 0\n  1911: u64 [sp + 448] = 0x1\n  1916: a0 = sp + 0xc0\n  1920: a1 = sp + 0x1c0\n  1924: ra = 30, jump @11\n      : @41 [@dyn 15] (gas: 18)\n  1929: a0 = u32 [sp + 0xd4]\n  1933: a0 = a0 << 0x20\n  1936: a1 = u64 [sp + 0xd8]\n  1940: a0 = a0 | s1\n  1943: u64 [sp + 504] = 0\n  1947: u64 [sp + 496] = 0\n  1951: u64 [sp + 488] = 0\n  1955: u64 [sp + 480] = 0x1\n  1960: a2 = sp + 0x200\n  1964: u64 [a2 + 0x18] = a1\n  1967: a1 = u64 [sp + 0x10]\n  1970: u64 [a2 + 0x8] = a1\n  1973: a1 = u64 [sp + 0x18]\n  1976: u64 [a2] = a1\n  1978: u64 [a2 + 0x10] = a0\n  1981: a0 = sp + 0x1e0\n  1985: a1 = sp + 0x200\n  1989: ra = 32, jump @12\n      : @42 [@dyn 16] (gas: 10)\n  1994: a0 = u64 [sp + 0x28]\n  1997: a2 = a0 & 0xffffffffffffffff\n  2000: a0 = u64 [sp + 0x30]\n  2003: a1 = a0 & 0xffffffffffffffff\n  2006: a0 = u64 [sp + 0x38]\n  2009: s1 = u64 [sp + 0x20]\n  2012: s1 = s1 & a0\n  2015: a0 = a1 | s1\n  2018: a0 = a0 | a2\n  2021: jump @45 if a0 == 0\n      : @43 (gas: 12)\n  2024: a0 = 0xffffffff00000000\n  2034: u64 [sp + 0x38] = a0\n  2037: a0 = sp + 0x200\n  2041: u64 [a0 + 56] = 0\n  2044: u64 [a0 + 48] = 0\n  2047: u64 [a0 + 40] = 0\n  2050: u64 [a0 + 32] = 0\n  2053: a0 = sp + 0xa0\n  2057: u64 [sp + 0x30] = a1\n  2060: a1 = sp + 0x220\n  2064: u64 [sp + 0x28] = a2\n  2067: ra = 34, jump @11\n      : @44 [@dyn 17] (gas: 20)\n  2072: a0 = u64 [sp + 0xb8]\n  2076: a1 = u64 [sp + 0xb0]\n  2080: a0 = a0 & 0xffffffffffffffff\n  2083: a2 = u64 [sp + 0x38]\n  2086: a1 = a1 & a2\n  2089: a1 = a1 | s1\n  2092: a3 = sp + 0x200\n  2096: u64 [a3 + 88] = 0\n  2099: u64 [a3 + 80] = 0\n  2102: u64 [a3 + 72] = 0\n  2105: u64 [a3 + 64] = 0\n  2108: a2 = u64 [sp + 0x28]\n  2111: u64 [a3 + 0x68] = a2\n  2114: a2 = u64 [sp + 0x30]\n  2117: u64 [a3 + 0x60] = a2\n  2120: u64 [a3 + 0x78] = a0\n  2123: u64 [a3 + 0x70] = a1\n  2126: a0 = sp + 0x240\n  2130: a1 = sp + 0x260\n  2134: ra = 36, jump @12\n      : @45 [@dyn 18] (gas: 3)\n  2139: a0 = sp + 0x80\n  2143: a1 = 0x40\n  2146: ra = 38, jump @7\n      : @46 [@dyn 19] (gas: 12)\n  2151: a0 = u64 [sp + 0x98]\n  2155: a1 = u64 [sp + 0x90]\n  2159: a2 = u64 [sp + 0x88]\n  2163: s1 = u64 [sp + 0x80]\n  2167: a0 = a0 | a2\n  2170: a2 = s1 | a1\n  2173: a2 = a2 | a0\n  2176: a2 = a2 >> 0x20\n  2179: a0 = a0 | a1\n  2182: a0 = a0 << 0x20\n  2185: a0 = a0 | a2\n  2188: jump @54 if a0 == 0\n      : @47 (gas: 1)\n  2191: trap\n      : @48 (gas: 4)\n  2192: a1 = 0x20160\n  2197: i32 a1 = a1 + 0\n  2199: a0 = 0x1\n  2202: jump @59\n      : @49 (gas: 4)\n  2205: a1 = 0x20160\n  2210: i32 a1 = a1 + 0\n  2212: a0 = 0x1\n  2215: jump @59\n      : @50 (gas: 8)\n  2218: u64 [sp + 80] = 0\n  2221: u64 [sp + 72] = 0\n  2224: u64 [sp + 64] = 0\n  2227: a0 = 0x14bcf5c800000000\n  2237: a1 = sp + 0x40\n  2240: u64 [sp + 0x58] = a0\n  2243: a0 = 0\n  2245: ra = 40, jump @9\n      : @51 [@dyn 20] (gas: 2)\n  2250: a1 = i32 [0x20150]\n  2255: jump @53 if a1 >u 31\n      : @52 (gas: 2)\n  2259: u32 [0x20150] = 0x20\n  2265: fallthrough\n      : @53 (gas: 6)\n  2266: a1 = 0x20160\n  2271: i32 a1 = a1 + 0\n  2273: a0 = 0x1\n  2276: a2 = 0x4\n  2279: ecalli 14 // 'seal_return'\n  2281: fallthrough\n      : @54 (gas: 3)\n  2282: a0 = s1\n  2284: a1 = 0\n  2286: ra = 42, jump @20\n      : @55 [@dyn 21] (gas: 7)\n  2291: i32 a0 = a0 + 0\n  2293: a1 = 0\n  2295: a2 = 0\n  2297: ecalli 1 // 'call_data_copy'\n  2299: a0 = sp + 0x60\n  2302: a1 = 0x80\n  2306: ra = 44, jump @7\n      : @56 [@dyn 22] (gas: 9)\n  2311: a0 = u64 [sp + 0x78]\n  2314: a2 = u64 [sp + 0x70]\n  2317: a3 = u64 [sp + 0x68]\n  2320: a4 = u64 [sp + 0x60]\n  2323: u64 [0x30198] = a0\n  2328: u64 [0x30190] = a2\n  2333: u64 [0x30188] = a3\n  2338: u64 [0x30180] = a4\n  2343: jump @5\n      : @57 (gas: 3)\n  2346: a0 = s1\n  2348: a1 = 0\n  2350: ra = 46, jump @20\n      : @58 [@dyn 23] (gas: 6)\n  2355: i32 a1 = a0 + 0\n  2357: a0 = 0\n  2359: a2 = 0\n  2361: ra = 0x30\n  2364: ecalli 14 // 'seal_return'\n  2366: jump @60\n      : @59 (gas: 4)\n  2368: a2 = 0\n  2370: ra = 0x30\n  2373: ecalli 14 // 'seal_return'\n  2375: fallthrough\n      : @60 [@dyn 24] (gas: 11)\n  2376: sp = sp + 0xfffffffffffffe10\n  2380: u64 [sp + 0x1e8] = ra\n  2384: u64 [sp + 0x1e0] = s0\n  2388: u64 [sp + 0x1d8] = s1\n  2392: s0 = sp + 0x1f0\n  2396: sp = sp + 0xffffffffffffd970\n  2400: sp = sp & 0xffffffffffffffe0\n  2403: s1 = sp\n  2405: t0 = 0x32\n  2408: a2 = s1 + 0x1878\n  2412: fallthrough\n      : @61 [@dyn 25] (gas: 7)\n  2413: u64 [a2 + 1760] = 0\n  2417: u64 [a2 + 1752] = 0\n  2421: u64 [a2 + 1736] = 0x80\n  2427: a0 = 0x40\n  2430: a1 = s1 + 0x1f40\n  2434: u64 [a2 + 1744] = 0\n  2438: ra = 52, jump @9\n      : @62 [@dyn 26] (gas: 4)\n  2443: a0 = 0x2014c\n  2448: u64 [s1 + 0xf8] = a0\n  2452: a0 = i32 [0x2014c]\n  2457: jump @64 if a0 >=u 4\n      : @63 (gas: 1)\n  2461: jump @1070\n      : @64 (gas: 6)\n  2464: a0 = s1 + 0x2000\n  2468: i32 a0 = a0 + 0xffffffffffffff60\n  2472: a1 = 0\n  2474: ra = 0x36\n  2477: ecalli 2 // 'call_data_load'\n  2479: fallthrough\n      : @65 [@dyn 27] (gas: 3)\n  2480: a3 = s1 + 0x1878\n  2484: a0 = i32 [a3 + 0x704]\n  2488: jump @67 if a0 != 2376452955\n      : @66 (gas: 1)\n  2495: jump @289\n      : @67 (gas: 1)\n  2498: jump @155 if a0 == 2573362740\n      : @68 (gas: 2)\n  2506: a2 = s1 + 0x2078\n  2510: jump @70 if a0 != 2822282762\n      : @69 (gas: 1)\n  2517: jump @436\n      : @70 (gas: 1)\n  2520: jump @72 if a0 != 3504541104\n      : @71 (gas: 1)\n  2527: jump @405\n      : @72 (gas: 1)\n  2530: jump @74 if a0 != 3675214841\n      : @73 (gas: 1)\n  2537: jump @302\n      : @74 (gas: 1)\n  2540: jump @219 if a0 == 3916516871\n      : @75 (gas: 1)\n  2548: jump @122 if a0 == 248271711\n      : @76 (gas: 1)\n  2556: jump @191 if a0 == 573237126\n      : @77 (gas: 1)\n  2564: jump @79 if a0 != 832302164\n      : @78 (gas: 1)\n  2571: jump @379\n      : @79 (gas: 1)\n  2574: jump @81 if a0 != 969217301\n      : @80 (gas: 1)\n  2581: jump @342\n      : @81 (gas: 1)\n  2584: jump @83 if a0 != 1221342904\n      : @82 (gas: 1)\n  2591: jump @268\n      : @83 (gas: 1)\n  2594: jump @85 if a0 != 1251080110\n      : @84 (gas: 1)\n  2601: jump @256\n      : @85 (gas: 1)\n  2604: jump @87 if a0 != 1287362804\n      : @86 (gas: 1)\n  2611: jump @368\n      : @87 (gas: 1)\n  2614: jump @89 if a0 == 1326608131\n      : @88 (gas: 1)\n  2621: jump @471\n      : @89 (gas: 9)\n  2624: u64 [a2 + 576] = 0\n  2628: u64 [a2 + 568] = 0\n  2632: u64 [a2 + 560] = 0\n  2636: u64 [a2 + 552] = 0\n  2640: a0 = s1 + 0x2000\n  2644: i32 a0 = a0 + 0x2a0\n  2648: ecalli 17 // 'value_transferred'\n  2650: a3 = s1 + 0x2078\n  2654: fallthrough\n      : @90 (gas: 9)\n  2655: a4 = a3 + 0x200\n  2659: a0 = u64 [a4 + 0x38]\n  2662: a1 = u64 [a4 + 0x40]\n  2665: a2 = u64 [a4 + 0x30]\n  2668: a3 = u64 [a4 + 0x28]\n  2671: a1 = a1 | a2\n  2674: a0 = a0 | a3\n  2677: a0 = a0 | a1\n  2680: jump @92 if a0 == 0\n      : @91 (gas: 1)\n  2683: jump @697\n      : @92 (gas: 3)\n  2686: a0 = u64 [s1 + 0xf8]\n  2690: a0 = i32 [a0]\n  2692: jump @94 if a0 >u 99\n      : @93 (gas: 1)\n  2696: jump @698\n      : @94 (gas: 5)\n  2699: a0 = s1 + 0x2000\n  2703: i32 a0 = a0 + 0x2c0\n  2707: a1 = 0x4\n  2710: ecalli 2 // 'call_data_load'\n  2712: fallthrough\n      : @95 (gas: 12)\n  2713: a2 = s1 + 0x2078\n  2717: a4 = a2 + 0x200\n  2721: a0 = u64 [a4 + 0x60]\n  2724: a1 = u64 [a4 + 0x58]\n  2727: a3 = u64 [a4 + 0x48]\n  2730: a2 = u64 [a4 + 0x50]\n  2733: a0 = a0 | a1\n  2736: u64 [s1 + 0xf8] = a3\n  2740: a1 = a3 <u 0x100\n  2744: a1 = 0 if a2 != 0\n  2746: a1 = 0 if a0 != 0\n  2748: jump @97 if a1 != 0\n      : @96 (gas: 1)\n  2751: jump @699\n      : @97 (gas: 5)\n  2754: a0 = s1 + 0x2000\n  2758: i32 a0 = a0 + 0x2e0\n  2762: a1 = 0x24\n  2765: ecalli 2 // 'call_data_load'\n  2767: fallthrough\n      : @98 (gas: 12)\n  2768: a2 = s1 + 0x2078\n  2772: a4 = a2 + 0x200\n  2776: a0 = u64 [a4 + 0x80]\n  2780: a1 = u64 [a4 + 0x78]\n  2783: a3 = u64 [a4 + 0x68]\n  2786: a2 = u64 [a4 + 0x70]\n  2789: a0 = a0 | a1\n  2792: u64 [s1 + 0xe8] = a3\n  2796: a1 = a3 <u 0x100\n  2800: a1 = 0 if a2 != 0\n  2802: a1 = 0 if a0 != 0\n  2804: jump @100 if a1 != 0\n      : @99 (gas: 1)\n  2807: jump @700\n      : @100 (gas: 5)\n  2810: a0 = s1 + 0x2000\n  2814: i32 a0 = a0 + 0x300\n  2818: a1 = 0x44\n  2821: ecalli 2 // 'call_data_load'\n  2823: fallthrough\n      : @101 (gas: 10)\n  2824: a0 = s1 + 0x2078\n  2828: t0 = u64 [a0 + 0x2a0]\n  2832: a1 = a0 + 0x200\n  2836: a4 = u64 [a1 + 0x98]\n  2840: a5 = u64 [a1 + 0x90]\n  2844: a3 = u64 [a1 + 0x88]\n  2848: a0 = a5 | t0\n  2851: a1 = a3 | a4\n  2854: a0 = a0 | a1\n  2857: jump @103 if a0 != 0\n      : @102 (gas: 1)\n  2860: jump @701\n      : @103 (gas: 3)\n  2863: a1 = u8 [s1 + 0xf8]\n  2867: a2 = u8 [s1 + 0xe8]\n  2871: jump @105 if a1 != a2\n      : @104 (gas: 1)\n  2874: jump @705\n      : @105 (gas: 6)\n  2877: u64 [s1 + 0xf8] = a3\n  2881: u64 [s1 + 0xd0] = a5\n  2885: u64 [s1 + 0xd8] = a4\n  2889: u64 [s1 + 0xe0] = t0\n  2893: u64 [s1 + 0xc0] = a1\n  2897: jump @107 if a1 <=u 1\n      : @106 (gas: 1)\n  2901: jump @693\n      : @107 (gas: 1)\n  2904: jump @109 if a2 <u 3\n      : @108 (gas: 1)\n  2908: jump @693\n      : @109 (gas: 10)\n  2911: u64 [s1 + 0x80] = a2\n  2915: a0 = 0x30160\n  2920: u64 [s1 + 0xc8] = a0\n  2924: i32 a0 = a0 + 0\n  2926: u64 [s1 + 0xa0] = a0\n  2930: ra = 0x38\n  2933: ecalli 4 // 'caller'\n  2935: a2 = u64 [s1 + 0xc8]\n  2939: t0 = 0x3a\n  2942: jump @1322\n      : @110 [@dyn 28] (gas: 2)\n  2945: a2 = u64 [s1 + 0xc8]\n  2949: t0 = 58, jump @1322\n      : @111 [@dyn 29] (gas: 9)\n  2954: u64 [a2 + 1152] = 0\n  2958: a4 = a2 + 0x400\n  2962: u64 [a4 + 0x78] = a1\n  2965: u64 [a4 + 0x70] = a0\n  2968: a1 = s1 + 0x7ff\n  2972: a1 = a1 + 0x4e1\n  2976: u64 [a4 + 0x68] = a3\n  2979: a0 = 0\n  2981: ra = 60, jump @9\n      : @112 [@dyn 30] (gas: 11)\n  2986: a1 = s1 + 0x7ff\n  2990: a1 = a1 + 0x79\n  2993: u64 [a1 + 1120] = 0\n  2997: u64 [a1 + 1112] = 0\n  3001: u64 [a1 + 1096] = 0x2\n  3006: a2 = a1\n  3008: a0 = 0x20\n  3011: a1 = s1 + 0x7ff\n  3015: a1 = a1 + 0x4c1\n  3019: u64 [a2 + 1104] = 0\n  3023: ra = 62, jump @9\n      : @113 [@dyn 31] (gas: 7)\n  3028: a0 = sp + 0xffffffffffffffe0\n  3031: a0 = a0 & 0xffffffffffffffe0\n  3034: u64 [s1 + 0xf0] = a0\n  3038: sp = a0\n  3040: a2 = 0x20150\n  3045: a0 = i32 [0x20150]\n  3050: jump @115 if a0 >u 63\n      : @114 (gas: 2)\n  3054: u32 [0x20150] = 0x40\n  3060: fallthrough\n      : @115 (gas: 12)\n  3061: u64 [s1 + 0x78] = a2\n  3064: a0 = sp + 0xffffffffffffffe0\n  3067: a2 = a0 & 0xffffffffffffffe0\n  3070: u64 [s1 + 0xb8] = a2\n  3074: sp = a2\n  3076: a0 = 0x20160\n  3081: i32 a0 = a0 + 0\n  3083: i32 a2 = a2 + 0\n  3085: a1 = 0x40\n  3088: u64 [s1 + 0x88] = a0\n  3092: ecalli 9 // 'hash_keccak_256'\n  3094: fallthrough\n      : @116 (gas: 22)\n  3095: a2 = u64 [s1 + 0xb8]\n  3099: a0 = u64 [a2 + 0x18]\n  3102: a1 = u64 [a2 + 0x10]\n  3105: a4 = u64 [a2 + 0x8]\n  3108: a3 = u64 [a2]\n  3110: a2 = reverse a0\n  3112: a5 = reverse a1\n  3114: a4 = reverse a4\n  3116: a3 = reverse a3\n  3118: a1 = u64 [s1 + 0xf0]\n  3122: u64 [a1 + 0x18] = a3\n  3125: u64 [a1 + 0x10] = a4\n  3128: u64 [a1 + 0x8] = a5\n  3131: u64 [a1] = a2\n  3133: t1 = a2 + 0x2\n  3136: a0 = u64 [s1 + 0xc0]\n  3140: u64 [s1 + 0xb8] = a4\n  3144: u64 [s1 + 0x98] = a3\n  3148: u64 [s1 + 0xb0] = a5\n  3152: u64 [s1 + 0x90] = t1\n  3156: u64 [s1 + 0xa8] = a2\n  3160: jump @118 if a0 == 0\n      : @117 (gas: 1)\n  3163: jump @485\n      : @118 (gas: 3)\n  3166: a0 = s1 + 0x7ff\n  3170: a0 = a0 + 0x461\n  3174: ra = 64, jump @11\n      : @119 [@dyn 32] (gas: 25)\n  3179: a0 = s1 + 0x7ff\n  3183: a0 = a0 + 0x79\n  3186: ra = u64 [a0 + 0x3f0]\n  3190: t0 = u64 [a0 + 0x400]\n  3194: a1 = u64 [a0 + 0x3e8]\n  3198: a5 = u64 [a0 + 0x3f8]\n  3202: t2 = u64 [s1 + 0xd0]\n  3206: a0 = ra ^ t2\n  3209: a4 = ra <u t2\n  3212: u64 [s1 + 0x70] = a1\n  3215: a2 = u64 [s1 + 0xf8]\n  3219: a1 = a1 <u a2\n  3222: u64 [s1 + 0x68] = a1\n  3225: a4 = a1 if a0 == 0\n  3228: t1 = u64 [s1 + 0xd8]\n  3232: a1 = a5 <u t1\n  3235: a2 = u64 [s1 + 0xe0]\n  3239: a3 = t0 ^ a2\n  3242: a0 = t0 <u a2\n  3245: u64 [s1 + 0x60] = a1\n  3248: a0 = a1 if a3 == 0\n  3251: a1 = a5 ^ t1\n  3254: a1 = a1 | a3\n  3257: a0 = a4 if a1 == 0\n  3260: jump @121 if a0 == 0\n      : @120 (gas: 1)\n  3263: jump @783\n      : @121 (gas: 23)\n  3266: a0 = a5 - t1\n  3269: a1 = t0 - a2\n  3272: a2 = u64 [s1 + 0x60]\n  3275: a1 = a1 - a2\n  3278: a2 = a0 <u a4\n  3281: a1 = a1 - a2\n  3284: a0 = a0 - a4\n  3287: a2 = ra - t2\n  3290: a3 = u64 [s1 + 0x68]\n  3293: a2 = a2 - a3\n  3296: a3 = u64 [s1 + 0x70]\n  3299: a4 = u64 [s1 + 0xf8]\n  3303: a3 = a3 - a4\n  3306: a4 = s1 + 0x2078\n  3310: a5 = a4 + 0x200\n  3314: u64 [a5 + 0xc8] = a3\n  3318: u64 [a5 + 0xd0] = a2\n  3322: u64 [a5 + 0xd8] = a0\n  3326: u64 [a5 + 0xe0] = a1\n  3330: a1 = s1 + 0x2340\n  3334: a0 = u64 [s1 + 0xf0]\n  3338: ra = 0x1a8\n  3342: jump @12\n      : @122 (gas: 10)\n  3345: u64 [a3 + 1888] = 0\n  3349: u64 [a3 + 1880] = 0\n  3353: u64 [a3 + 1872] = 0\n  3357: u64 [a3 + 1864] = 0\n  3361: a0 = s1 + 0x2000\n  3365: i32 a0 = a0 + 0xffffffffffffffc0\n  3368: ra = 0x42\n  3371: ecalli 17 // 'value_transferred'\n  3373: t0 = 0x44\n  3376: jump @1371\n      : @123 [@dyn 33] (gas: 1)\n  3380: t0 = 68, jump @1371\n      : @124 [@dyn 34] (gas: 1)\n  3386: t0 = 70, jump @1359\n      : @125 [@dyn 35] (gas: 1)\n  3391: jump @127 if a0 == 0\n      : @126 (gas: 1)\n  3394: jump @709\n      : @127 (gas: 3)\n  3397: a0 = u64 [s1 + 0xf8]\n  3401: a0 = i32 [a0]\n  3403: jump @129 if a0 >u 35\n      : @128 (gas: 1)\n  3407: jump @710\n      : @129 (gas: 4)\n  3410: a0 = s1 + 0x300\n  3414: ra = 0x48\n  3417: t0 = 0x460\n  3421: jump @1366\n      : @130 [@dyn 36] (gas: 10)\n  3424: a0 = u64 [s1 + 0x300]\n  3428: a1 = u64 [s1 + 0x308]\n  3432: a2 = u32 [s1 + 0x310]\n  3436: u64 [s1 + 760] = 0\n  3440: u64 [s1 + 0x2f0] = a2\n  3444: u64 [s1 + 0x2e8] = a1\n  3448: a1 = s1 + 0x2e0\n  3452: u64 [s1 + 0x2e0] = a0\n  3456: a0 = 0\n  3458: ra = 74, jump @9\n      : @131 [@dyn 37] (gas: 7)\n  3463: u64 [s1 + 728] = 0\n  3467: u64 [s1 + 720] = 0\n  3471: u64 [s1 + 704] = 0x2\n  3476: a0 = 0x20\n  3479: a1 = s1 + 0x2c0\n  3483: u64 [s1 + 712] = 0\n  3487: ra = 76, jump @9\n      : @132 [@dyn 38] (gas: 6)\n  3492: a0 = sp + 0xffffffffffffffe0\n  3495: a0 = a0 & 0xffffffffffffffe0\n  3498: u64 [s1 + 0xd8] = a0\n  3502: sp = a0\n  3504: a1 = i32 [0x20150]\n  3509: jump @134 if a1 >u 63\n      : @133 (gas: 2)\n  3513: u32 [0x20150] = 0x40\n  3519: fallthrough\n      : @134 (gas: 13)\n  3520: a0 = sp + 0xffffffffffffffe0\n  3523: a2 = a0 & 0xffffffffffffffe0\n  3526: u64 [s1 + 0xf8] = a2\n  3530: sp = a2\n  3532: a0 = 0x20160\n  3537: i32 a0 = a0 + 0\n  3539: i32 a2 = a2 + 0\n  3541: a1 = 0x40\n  3544: ra = 0x4e\n  3547: ecalli 9 // 'hash_keccak_256'\n  3549: a3 = u64 [s1 + 0xf8]\n  3553: t0 = 0x50\n  3556: jump @1372\n      : @135 [@dyn 39] (gas: 2)\n  3559: a3 = u64 [s1 + 0xf8]\n  3563: t0 = 80, jump @1372\n      : @136 [@dyn 40] (gas: 14)\n  3568: u64 [s1 + 0xe8] = a5\n  3572: a4 = reverse a1\n  3574: u64 [s1 + 0xf0] = a4\n  3578: a2 = reverse a2\n  3580: u64 [s1 + 0xe0] = a2\n  3584: a0 = reverse a3\n  3586: u64 [s1 + 0xf8] = a0\n  3590: a1 = u64 [s1 + 0xd8]\n  3594: u64 [a1 + 0x18] = a0\n  3597: u64 [a1 + 0x10] = a2\n  3600: u64 [a1 + 0x8] = a4\n  3603: u64 [a1] = a5\n  3605: a0 = s1 + 0x2a0\n  3609: ra = 82, jump @11\n      : @137 [@dyn 41] (gas: 29)\n  3614: a0 = u64 [s1 + 0x2b8]\n  3618: u64 [s1 + 0xd8] = a0\n  3622: a0 = u64 [s1 + 0x2b0]\n  3626: u64 [s1 + 0xd0] = a0\n  3630: a0 = u64 [s1 + 0x2a8]\n  3634: u64 [s1 + 0xc8] = a0\n  3638: a0 = u64 [s1 + 0x2a0]\n  3642: u64 [s1 + 0xc0] = a0\n  3646: a0 = u64 [s1 + 0xe8]\n  3650: a0 = a0 + 0x1\n  3653: a1 = a0 <u 0x1\n  3656: a2 = u64 [s1 + 0xf0]\n  3660: a1 = a1 + a2\n  3663: a2 = s1 + 0x1878\n  3667: a3 = a2 + 0x700\n  3671: u64 [a3 + 0x70] = a1\n  3674: a1 = a1 | a0\n  3677: u64 [a3 + 0x68] = a0\n  3680: a0 = a1 <u 0x1\n  3683: a1 = u64 [s1 + 0xe0]\n  3687: a0 = a0 + a1\n  3690: u64 [a3 + 0x78] = a0\n  3693: a0 = a0 <u a1\n  3696: a1 = u64 [s1 + 0xf8]\n  3700: a0 = a0 + a1\n  3703: u64 [a3 + 0x80] = a0\n  3707: a0 = s1 + 0x280\n  3711: a1 = s1 + 0x1fe0\n  3715: ra = 84, jump @11\n      : @138 [@dyn 42] (gas: 29)\n  3720: a0 = u64 [s1 + 0x298]\n  3724: u64 [s1 + 0xb8] = a0\n  3728: a0 = u64 [s1 + 0x290]\n  3732: u64 [s1 + 0xb0] = a0\n  3736: a0 = u64 [s1 + 0x288]\n  3740: u64 [s1 + 0xa8] = a0\n  3744: a0 = u64 [s1 + 0x280]\n  3748: u64 [s1 + 0xa0] = a0\n  3752: a1 = u64 [s1 + 0xe8]\n  3756: a0 = a1 + 0x2\n  3759: a1 = a0 <u a1\n  3762: a3 = u64 [s1 + 0xf0]\n  3766: a2 = a3 + a1\n  3769: a3 = a2 <u a3\n  3772: a3 = a1 if a1 == 0\n  3775: a1 = u64 [s1 + 0xe0]\n  3779: a3 = a3 + a1\n  3782: a1 = a3 <u a1\n  3785: a4 = u64 [s1 + 0xf8]\n  3789: a1 = a1 + a4\n  3792: a4 = s1 + 0x1878\n  3796: a5 = a4 + 0x700\n  3800: u64 [a5 + 0xa0] = a1\n  3804: u64 [a5 + 0x98] = a3\n  3808: u64 [a5 + 0x90] = a2\n  3812: u64 [a5 + 0x88] = a0\n  3816: a0 = s1 + 0x260\n  3820: a1 = s1 + 0x2000\n  3824: ra = 86, jump @11\n      : @139 [@dyn 43] (gas: 29)\n  3829: a0 = u64 [s1 + 0x278]\n  3833: u64 [s1 + 0x98] = a0\n  3837: a0 = u64 [s1 + 0x270]\n  3841: u64 [s1 + 0x90] = a0\n  3845: a1 = u64 [s1 + 0xe8]\n  3849: a0 = a1 + 0x3\n  3852: a1 = a0 <u a1\n  3855: a3 = u64 [s1 + 0xf0]\n  3859: a2 = a3 + a1\n  3862: a3 = a2 <u a3\n  3865: a3 = a1 if a1 == 0\n  3868: a1 = u64 [s1 + 0x268]\n  3872: u64 [s1 + 0xe8] = a1\n  3876: a1 = u64 [s1 + 0xe0]\n  3880: a3 = a3 + a1\n  3883: a1 = a3 <u a1\n  3886: a4 = u64 [s1 + 0xf8]\n  3890: a1 = a1 + a4\n  3893: a4 = u64 [s1 + 0x260]\n  3897: u64 [s1 + 0xe0] = a4\n  3901: a4 = s1 + 0x1878\n  3905: a5 = a4 + 0x700\n  3909: u64 [a5 + 0xc0] = a1\n  3913: u64 [a5 + 0xb8] = a3\n  3917: u64 [a5 + 0xb0] = a2\n  3921: u64 [a5 + 0xa8] = a0\n  3925: a0 = s1 + 0x240\n  3929: a1 = s1 + 0x2020\n  3933: ra = 88, jump @11\n      : @140 [@dyn 44] (gas: 5)\n  3938: a0 = u64 [s1 + 0x240]\n  3942: u64 [s1 + 0x88] = a0\n  3946: a0 = s1 + 0x220\n  3950: a1 = 0x40\n  3953: ra = 90, jump @7\n      : @141 [@dyn 45] (gas: 13)\n  3958: a0 = s1 + 0x200\n  3962: a4 = u64 [a0 + 0x38]\n  3965: a5 = u64 [a0 + 0x30]\n  3968: a3 = u64 [a0 + 0x28]\n  3971: a2 = u64 [a0 + 0x20]\n  3974: a0 = a3 | a4\n  3977: a1 = a2 | a5\n  3980: a1 = a1 | a0\n  3983: a1 = a1 >> 0x20\n  3986: a0 = a0 | a5\n  3989: a0 = a0 << 0x20\n  3992: a0 = a0 | a1\n  3995: jump @143 if a0 == 0\n      : @142 (gas: 1)\n  3998: jump @692\n      : @143 (gas: 15)\n  4001: a0 = u64 [s1 + 0xc0]\n  4005: u64 [s1 + 0x200] = a0\n  4009: a0 = u64 [s1 + 0xc8]\n  4013: u64 [s1 + 0x208] = a0\n  4017: a0 = u64 [s1 + 0xd0]\n  4021: u64 [s1 + 0x210] = a0\n  4025: a1 = s1 + 0x200\n  4029: a0 = u64 [s1 + 0xd8]\n  4033: u64 [s1 + 0x218] = a0\n  4037: a0 = a2\n  4039: u64 [s1 + 0xf8] = a2\n  4043: u64 [s1 + 0xf0] = a3\n  4047: u64 [s1 + 0xd8] = a4\n  4051: u64 [s1 + 0xd0] = a5\n  4055: ra = 92, jump @9\n      : @144 [@dyn 46] (gas: 11)\n  4060: a1 = u64 [s1 + 0xf8]\n  4064: a0 = u64 [s1 + 0xd8]\n  4068: a3 = u64 [s1 + 0xd0]\n  4072: a3 = a3 | a0\n  4075: a4 = 0x100000000\n  4085: a0 = 0xffffffe0\n  4095: a0 = a1 <u a0\n  4098: a2 = u64 [s1 + 0xf0]\n  4102: a0 = 0 if a2 != 0\n  4104: a0 = 0 if a3 != 0\n  4106: jump @146 if a0 != 0\n      : @145 (gas: 1)\n  4109: jump @692\n      : @146 (gas: 14)\n  4112: i32 a0 = a1 + 0x20\n  4115: a1 = u64 [s1 + 0xa0]\n  4119: a5 = s1 + 0x100\n  4123: u64 [a5 + 0xe0] = a1\n  4127: a1 = u64 [s1 + 0xa8]\n  4131: u64 [a5 + 0xe8] = a1\n  4135: a1 = u64 [s1 + 0xb0]\n  4139: u64 [a5 + 0xf0] = a1\n  4143: a1 = s1 + 0x1e0\n  4147: a2 = u64 [s1 + 0xb8]\n  4151: u64 [a5 + 0xf8] = a2\n  4155: u64 [s1 + 0xd8] = a3\n  4159: u64 [s1 + 0xd0] = a4\n  4163: ra = 94, jump @9\n      : @147 [@dyn 47] (gas: 9)\n  4168: a4 = u64 [s1 + 0xd8]\n  4172: a3 = u64 [s1 + 0xf0]\n  4176: a1 = u64 [s1 + 0xf8]\n  4180: a0 = u64 [s1 + 0xd0]\n  4184: a0 = a0 + 0xffffffffffffffc0\n  4187: a0 = a1 <u a0\n  4190: a0 = 0 if a3 != 0\n  4192: a0 = 0 if a4 != 0\n  4194: jump @149 if a0 != 0\n      : @148 (gas: 1)\n  4197: jump @692\n      : @149 (gas: 12)\n  4200: i32 a0 = a1 + 0x40\n  4203: a1 = u64 [s1 + 0xe0]\n  4207: a3 = s1 + 0x100\n  4211: u64 [a3 + 0xc0] = a1\n  4215: a1 = u64 [s1 + 0xe8]\n  4219: u64 [a3 + 0xc8] = a1\n  4223: a1 = u64 [s1 + 0x90]\n  4227: u64 [a3 + 0xd0] = a1\n  4231: a1 = s1 + 0x1c0\n  4235: a2 = u64 [s1 + 0x98]\n  4239: u64 [a3 + 0xd8] = a2\n  4243: ra = 96, jump @9\n      : @150 [@dyn 48] (gas: 8)\n  4248: a2 = u64 [s1 + 0xf8]\n  4252: a0 = 0xffffffa0\n  4262: a0 = a2 <u a0\n  4265: a1 = u64 [s1 + 0xf0]\n  4269: a0 = 0 if a1 != 0\n  4271: a1 = u64 [s1 + 0xd8]\n  4275: a0 = 0 if a1 != 0\n  4277: jump @152 if a0 != 0\n      : @151 (gas: 1)\n  4280: jump @692\n      : @152 (gas: 10)\n  4283: a0 = u64 [s1 + 0x88]\n  4287: a0 = a0 << 0x20\n  4290: a1 = a0 >> 0x20\n  4293: i32 a0 = a2 + 0x60\n  4296: u64 [s1 + 440] = 0\n  4300: u64 [s1 + 432] = 0\n  4304: u64 [s1 + 0x1a0] = a1\n  4308: a1 = s1 + 0x1a0\n  4312: u64 [s1 + 424] = 0\n  4316: ra = 98, jump @9\n      : @153 [@dyn 49] (gas: 3)\n  4321: a1 = 0x80\n  4325: a0 = u64 [s1 + 0xf8]\n  4329: ra = 100, jump @20\n      : @154 [@dyn 50] (gas: 6)\n  4334: i32 a1 = a0 + 0\n  4336: a2 = 0x80\n  4340: a0 = 0\n  4342: ra = 0x19a\n  4346: ecalli 14 // 'seal_return'\n  4348: jump @471\n      : @155 (gas: 11)\n  4351: a0 = s1 + 0x2078\n  4355: u64 [a0 + 960] = 0\n  4359: u64 [a0 + 952] = 0\n  4363: u64 [a0 + 944] = 0\n  4367: u64 [a0 + 936] = 0\n  4371: a0 = s1 + 0x2000\n  4375: i32 a0 = a0 + 0x420\n  4379: ra = 0x66\n  4382: ecalli 17 // 'value_transferred'\n  4384: t0 = 0x68\n  4387: jump @1355\n      : @156 [@dyn 51] (gas: 1)\n  4390: t0 = 104, jump @1355\n      : @157 [@dyn 52] (gas: 8)\n  4395: a0 = u64 [a4 + 0xb8]\n  4399: a1 = u64 [a4 + 0xc0]\n  4403: a2 = u64 [a4 + 0xb0]\n  4407: a3 = u64 [a4 + 0xa8]\n  4411: a1 = a1 | a2\n  4414: a0 = a0 | a3\n  4417: a0 = a0 | a1\n  4420: jump @159 if a0 == 0\n      : @158 (gas: 1)\n  4423: jump @711\n      : @159 (gas: 3)\n  4426: a0 = u64 [s1 + 0xf8]\n  4430: a0 = i32 [a0]\n  4432: jump @161 if a0 >u 67\n      : @160 (gas: 1)\n  4436: jump @712\n      : @161 (gas: 5)\n  4439: a0 = s1 + 0x7ff\n  4443: a0 = a0 + 0x7c1\n  4447: ra = 0x6a\n  4450: t0 = 0x460\n  4454: jump @1366\n      : @162 [@dyn 53] (gas: 14)\n  4457: a0 = s1 + 0x7ff\n  4461: a0 = a0 + 0x79\n  4464: a2 = a0 + 0x700\n  4468: a1 = u64 [a2 + 0x58]\n  4471: u64 [s1 + 0xc8] = a1\n  4475: a1 = u64 [a2 + 0x50]\n  4478: u64 [s1 + 0xd8] = a1\n  4482: a0 = u64 [a2 + 0x48]\n  4485: u64 [s1 + 0xd0] = a0\n  4489: a0 = s1 + 0x2000\n  4493: i32 a0 = a0 + 0x440\n  4497: a1 = 0x24\n  4500: ecalli 2 // 'call_data_load'\n  4502: fallthrough\n      : @163 (gas: 18)\n  4503: a0 = s1 + 0x2078\n  4507: a5 = a0 + 0x300\n  4511: a4 = u64 [a5 + 0xe0]\n  4515: a3 = u64 [a5 + 0xd8]\n  4519: a2 = u64 [a5 + 0xd0]\n  4523: a1 = u64 [a5 + 0xc8]\n  4527: u64 [s1 + 0xf0] = a2\n  4531: u64 [s1 + 0xe0] = a4\n  4535: a0 = a2 | a4\n  4538: u64 [s1 + 0xf8] = a1\n  4542: a1 = a1 | a3\n  4545: a1 = a1 | a0\n  4548: a1 = a1 >> 0x20\n  4551: u64 [s1 + 0xe8] = a3\n  4555: a0 = a0 | a3\n  4558: a0 = a0 << 0x20\n  4561: a0 = a0 | a1\n  4564: jump @165 if a0 == 0\n      : @164 (gas: 1)\n  4567: jump @713\n      : @165 (gas: 16)\n  4570: a0 = u64 [s1 + 0xc8]\n  4574: a0 = a0 << 0x20\n  4577: a0 = a0 >> 0x20\n  4580: a2 = s1 + 0x7ff\n  4584: a2 = a2 + 0x79\n  4587: u64 [a2 + 1856] = 0\n  4591: a1 = u64 [s1 + 0xd0]\n  4595: a3 = a2 + 0x700\n  4599: u64 [a3 + 0x28] = a1\n  4602: a1 = u64 [s1 + 0xd8]\n  4606: u64 [a3 + 0x30] = a1\n  4609: a1 = s1 + 0x7ff\n  4613: a1 = a1 + 0x7a1\n  4617: u64 [a3 + 0x38] = a0\n  4620: a0 = 0\n  4622: ra = 108, jump @9\n      : @166 [@dyn 54] (gas: 11)\n  4627: a1 = s1 + 0x7ff\n  4631: a1 = a1 + 0x79\n  4634: u64 [a1 + 1824] = 0\n  4638: u64 [a1 + 1816] = 0\n  4642: u64 [a1 + 1800] = 0x3\n  4647: a2 = a1\n  4649: a0 = 0x20\n  4652: a1 = s1 + 0x7ff\n  4656: a1 = a1 + 0x781\n  4660: u64 [a2 + 1808] = 0\n  4664: ra = 110, jump @9\n      : @167 [@dyn 55] (gas: 3)\n  4669: a1 = 0x20150\n  4674: a0 = i32 [0x20150]\n  4679: jump @169 if a0 >u 63\n      : @168 (gas: 2)\n  4683: u32 [0x20150] = 0x40\n  4689: fallthrough\n      : @169 (gas: 14)\n  4690: a0 = sp + 0xffffffffffffffe0\n  4693: a2 = a0 & 0xffffffffffffffe0\n  4696: u64 [s1 + 0xc8] = a2\n  4700: sp = a2\n  4702: a0 = 0x20160\n  4707: i32 a0 = a0 + 0\n  4709: i32 a2 = a2 + 0\n  4711: u64 [s1 + 0xd8] = a1\n  4715: a1 = 0x40\n  4718: u64 [s1 + 0xd0] = a0\n  4722: ra = 0x70\n  4725: ecalli 9 // 'hash_keccak_256'\n  4727: t0 = 0x72\n  4730: jump @1356\n      : @170 [@dyn 56] (gas: 1)\n  4733: t0 = 114, jump @1356\n      : @171 [@dyn 57] (gas: 22)\n  4738: u64 [s1 + 0xb0] = a0\n  4742: a0 = reverse a3\n  4744: u64 [s1 + 0xa8] = a0\n  4748: a0 = sp + 0xffffffffffffffe0\n  4751: a0 = a0 & 0xffffffffffffffe0\n  4754: u64 [s1 + 0xc8] = a0\n  4758: sp = a0\n  4760: a2 = s1 + 0x7ff\n  4764: a2 = a2 + 0x79\n  4767: a0 = u64 [s1 + 0xe0]\n  4771: u64 [a2 + 0x700] = a0\n  4775: a0 = u64 [s1 + 0xe8]\n  4779: a3 = a2 + 0x600\n  4783: u64 [a3 + 0xf8] = a0\n  4787: a0 = u64 [s1 + 0xf0]\n  4791: u64 [a3 + 0xf0] = a0\n  4795: a1 = s1 + 0x7ff\n  4799: a1 = a1 + 0x761\n  4803: a0 = u64 [s1 + 0xf8]\n  4807: u64 [a3 + 0xe8] = a0\n  4811: a0 = 0\n  4813: ra = 116, jump @9\n      : @172 [@dyn 58] (gas: 16)\n  4818: a1 = s1 + 0x7ff\n  4822: a1 = a1 + 0x79\n  4825: a0 = u64 [s1 + 0xa8]\n  4829: a2 = a1 + 0x600\n  4833: u64 [a2 + 0xe0] = a0\n  4837: a0 = u64 [s1 + 0xb0]\n  4841: u64 [a2 + 0xd8] = a0\n  4845: a0 = u64 [s1 + 0xb8]\n  4849: u64 [a2 + 0xd0] = a0\n  4853: a3 = a1\n  4855: a0 = 0x20\n  4858: a1 = s1 + 0x7ff\n  4862: a1 = a1 + 0x741\n  4866: a2 = u64 [s1 + 0xc0]\n  4870: u64 [a3 + 0x6c8] = a2\n  4874: ra = 118, jump @9\n      : @173 [@dyn 59] (gas: 3)\n  4879: a1 = u64 [s1 + 0xd8]\n  4883: a0 = i32 [a1]\n  4885: jump @175 if a0 >u 63\n      : @174 (gas: 2)\n  4889: u32 [a1 + 0] = 0x40\n  4892: fallthrough\n      : @175 (gas: 12)\n  4893: a0 = sp + 0xffffffffffffffe0\n  4896: a0 = a0 & 0xffffffffffffffe0\n  4899: u64 [s1 + 0xf8] = a0\n  4903: sp = a0\n  4905: i32 a2 = a0 + 0\n  4907: a1 = 0x40\n  4910: a0 = u64 [s1 + 0xd0]\n  4914: ra = 0x78\n  4917: ecalli 9 // 'hash_keccak_256'\n  4919: a3 = u64 [s1 + 0xf8]\n  4923: t0 = 0x7a\n  4926: jump @1372\n      : @176 [@dyn 60] (gas: 2)\n  4929: a3 = u64 [s1 + 0xf8]\n  4933: t0 = 122, jump @1372\n      : @177 [@dyn 61] (gas: 15)\n  4938: u64 [s1 + 0xe0] = a5\n  4942: a4 = reverse a1\n  4944: u64 [s1 + 0xe8] = a4\n  4948: a2 = reverse a2\n  4950: u64 [s1 + 0xf0] = a2\n  4954: a0 = reverse a3\n  4956: u64 [s1 + 0xf8] = a0\n  4960: a1 = u64 [s1 + 0xc8]\n  4964: u64 [a1 + 0x18] = a0\n  4967: u64 [a1 + 0x10] = a2\n  4970: u64 [a1 + 0x8] = a4\n  4973: u64 [a1] = a5\n  4975: a0 = s1 + 0x7ff\n  4979: a0 = a0 + 0x721\n  4983: ra = 124, jump @11\n      : @178 [@dyn 62] (gas: 34)\n  4988: a1 = s1 + 0x7ff\n  4992: a1 = a1 + 0x79\n  4995: a2 = a1 + 0x600\n  4999: a0 = u64 [a2 + 0xc0]\n  5003: u64 [s1 + 0xd8] = a0\n  5007: a0 = u64 [a2 + 0xb8]\n  5011: u64 [s1 + 0xd0] = a0\n  5015: a0 = u64 [a2 + 0xb0]\n  5019: a5 = a1\n  5021: u64 [s1 + 0xc8] = a0\n  5025: a0 = u64 [s1 + 0xe0]\n  5029: a0 = a0 + 0x1\n  5032: a1 = a0 <u 0x1\n  5035: a2 = u64 [s1 + 0xe8]\n  5039: a1 = a1 + a2\n  5042: a2 = a0 | a1\n  5045: a2 = a2 <u 0x1\n  5048: a3 = u64 [s1 + 0xf0]\n  5052: a2 = a2 + a3\n  5055: a3 = a2 <u a3\n  5058: a4 = u64 [s1 + 0xf8]\n  5062: a3 = a3 + a4\n  5065: a4 = u64 [a5 + 0x6a8]\n  5069: u64 [s1 + 0xf8] = a4\n  5073: a4 = s1 + 0x2078\n  5077: a5 = a4 + 0x300\n  5081: u64 [a5 + 0xf0] = a1\n  5085: u64 [a5 + 0xe8] = a0\n  5089: u64 [a5 + 0xf8] = a2\n  5093: u64 [a4 + 0x400] = a3\n  5097: a0 = s1 + 0x7ff\n  5101: a0 = a0 + 0x701\n  5105: a1 = s1 + 0x2460\n  5109: ra = 126, jump @11\n      : @179 [@dyn 63] (gas: 10)\n  5114: a1 = s1 + 0x7ff\n  5118: a1 = a1 + 0x79\n  5121: a0 = u64 [a1 + 0x690]\n  5125: u64 [s1 + 0xc0] = a0\n  5129: a0 = u64 [a1 + 0x688]\n  5133: u64 [s1 + 0xe0] = a0\n  5137: a0 = s1 + 0x7ff\n  5141: a0 = a0 + 0x6e1\n  5145: a1 = 0x40\n  5148: ra = 128, jump @7\n      : @180 [@dyn 64] (gas: 15)\n  5154: a2 = s1 + 0x7ff\n  5158: a2 = a2 + 0x79\n  5161: t0 = u64 [a2 + 0x680]\n  5165: a1 = a2 + 0x600\n  5169: a5 = u64 [a1 + 0x78]\n  5172: a4 = u64 [a1 + 0x70]\n  5175: a0 = u64 [a1 + 0x68]\n  5178: a3 = a4 | t0\n  5181: a1 = a0 | a5\n  5184: a1 = a1 | a3\n  5187: a1 = a1 >> 0x20\n  5190: a3 = a3 | a5\n  5193: a3 = a3 << 0x20\n  5196: a1 = a1 | a3\n  5199: jump @182 if a1 == 0\n      : @181 (gas: 1)\n  5202: jump @692\n      : @182 (gas: 15)\n  5205: a1 = u64 [s1 + 0xf8]\n  5209: u64 [a2 + 0x648] = a1\n  5213: a1 = u64 [s1 + 0xc8]\n  5217: u64 [a2 + 0x650] = a1\n  5221: a1 = u64 [s1 + 0xd0]\n  5225: u64 [a2 + 0x658] = a1\n  5229: a1 = s1 + 0x7ff\n  5233: a1 = a1 + 0x6c1\n  5237: a3 = u64 [s1 + 0xd8]\n  5241: u64 [a2 + 0x660] = a3\n  5245: u64 [s1 + 0xf0] = a0\n  5249: u64 [s1 + 0xe8] = a4\n  5253: u64 [s1 + 0xd8] = t0\n  5257: u64 [s1 + 0xf8] = a5\n  5261: ra = 130, jump @9\n      : @183 [@dyn 65] (gas: 11)\n  5267: a2 = u64 [s1 + 0xe8]\n  5271: a1 = u64 [s1 + 0xf0]\n  5275: a0 = u64 [s1 + 0xf8]\n  5279: a3 = u64 [s1 + 0xd8]\n  5283: a3 = a3 | a0\n  5286: a4 = 0x100000000\n  5296: a0 = 0xffffffe0\n  5306: a0 = a1 <u a0\n  5309: a0 = 0 if a2 != 0\n  5311: a0 = 0 if a3 != 0\n  5313: jump @185 if a0 != 0\n      : @184 (gas: 1)\n  5316: jump @692\n      : @185 (gas: 14)\n  5319: i32 a0 = a1 + 0x20\n  5322: a1 = s1 + 0x7ff\n  5326: a1 = a1 + 0x79\n  5329: u64 [s1 + 0xf8] = a3\n  5333: a3 = a1\n  5335: u64 [a1 + 1600] = 0\n  5339: u64 [a1 + 1592] = 0\n  5343: a1 = u64 [s1 + 0xe0]\n  5347: u64 [a3 + 0x628] = a1\n  5351: a1 = s1 + 0x7ff\n  5355: a1 = a1 + 0x6a1\n  5359: u64 [a3 + 1584] = 0\n  5363: u64 [s1 + 0xe0] = a4\n  5367: ra = 132, jump @9\n      : @186 [@dyn 66] (gas: 9)\n  5373: a2 = u64 [s1 + 0xf0]\n  5377: a0 = u64 [s1 + 0xe0]\n  5381: a0 = a0 + 0xffffffffffffffc0\n  5384: a0 = a2 <u a0\n  5387: a1 = u64 [s1 + 0xe8]\n  5391: a0 = 0 if a1 != 0\n  5393: a1 = u64 [s1 + 0xf8]\n  5397: a0 = 0 if a1 != 0\n  5399: jump @188 if a0 != 0\n      : @187 (gas: 1)\n  5402: jump @692\n      : @188 (gas: 12)\n  5405: a0 = u8 [s1 + 0xc0]\n  5409: a1 = a0 >u 0\n  5411: i32 a0 = a2 + 0x40\n  5414: a3 = s1 + 0x7ff\n  5418: a3 = a3 + 0x79\n  5421: u64 [a3 + 1568] = 0\n  5425: u64 [a3 + 1560] = 0\n  5429: u64 [a3 + 0x608] = a1\n  5433: a1 = s1 + 0x7ff\n  5437: a1 = a1 + 0x681\n  5441: u64 [a3 + 1552] = 0\n  5445: ra = 134, jump @9\n      : @189 [@dyn 67] (gas: 3)\n  5451: a1 = 0x60\n  5454: a0 = u64 [s1 + 0xf0]\n  5458: ra = 136, jump @20\n      : @190 [@dyn 68] (gas: 6)\n  5464: i32 a1 = a0 + 0\n  5466: a2 = 0x60\n  5469: a0 = 0\n  5471: ra = 0x19a\n  5475: ecalli 14 // 'seal_return'\n  5477: jump @471\n      : @191 (gas: 10)\n  5480: u64 [a3 + 2016] = 0\n  5484: u64 [a3 + 2008] = 0\n  5488: u64 [a3 + 2000] = 0\n  5492: u64 [a3 + 1992] = 0\n  5496: a0 = s1 + 0x2000\n  5500: i32 a0 = a0 + 0x40\n  5503: ra = 0x8a\n  5507: ecalli 17 // 'value_transferred'\n  5509: t0 = 0x8c\n  5513: jump @1371\n      : @192 [@dyn 69] (gas: 1)\n  5516: t0 = 140, jump @1371\n      : @193 [@dyn 70] (gas: 1)\n  5522: t0 = 142, jump @1368\n      : @194 [@dyn 71] (gas: 1)\n  5528: jump @196 if a0 == 0\n      : @195 (gas: 1)\n  5531: jump @714\n      : @196 (gas: 3)\n  5534: a0 = u64 [s1 + 0xf8]\n  5538: a0 = i32 [a0]\n  5540: jump @198 if a0 >u 3\n      : @197 (gas: 1)\n  5544: jump @715\n      : @198 (gas: 16)\n  5547: a0 = s1 + 0x2000\n  5551: i32 a0 = a0 + 0x60\n  5554: ecalli 10 // 'now'\n  5556: a0 = s1 + 0x2078\n  5560: a1 = u64 [a0]\n  5562: u64 [s1 + 0xb8] = a1\n  5566: a2 = a0 + 0xffffffffffffff00\n  5570: a1 = u64 [a2 + 0xf8]\n  5574: u64 [s1 + 0xb0] = a1\n  5578: a1 = u64 [a2 + 0xf0]\n  5582: u64 [s1 + 0xf8] = a1\n  5586: a0 = u64 [a2 + 0xe8]\n  5590: u64 [s1 + 0xf0] = a0\n  5594: a0 = s1 + 0x340\n  5598: a1 = 0x40\n  5601: ra = 144, jump @7\n      : @199 [@dyn 72] (gas: 6)\n  5607: a4 = s1 + 0x300\n  5611: a0 = u64 [a4 + 0x58]\n  5614: a1 = u64 [a4 + 0x50]\n  5617: a2 = u64 [a4 + 0x48]\n  5620: a3 = u64 [a4 + 0x40]\n  5623: t0 = 146, jump @1334\n      : @200 [@dyn 73] (gas: 1)\n  5629: jump @202 if a0 == 0\n      : @201 (gas: 1)\n  5632: jump @692\n      : @202 (gas: 46)\n  5635: u64 [s1 + 0x78] = a3\n  5638: t1 = u64 [s1 + 0xb0]\n  5642: a0 = clz t1\n  5644: a0 = a0 + 0x40\n  5647: ra = u64 [s1 + 0xb8]\n  5651: a2 = clz ra\n  5653: a2 = a0 if ra == 0\n  5656: t2 = u64 [s1 + 0xf0]\n  5660: a0 = clz t2\n  5662: a0 = a0 + 0x40\n  5665: t0 = u64 [s1 + 0xf8]\n  5669: a1 = clz t0\n  5671: a1 = a0 if t0 == 0\n  5674: a0 = a1 + 0x80\n  5678: a3 = t1 | ra\n  5681: a2 = a0 if a3 == 0\n  5684: a5 = a0 <u a1\n  5687: a5 = 0 if a3 != 0\n  5689: a4 = a5 >u 0\n  5691: a0 = a2 <u 0xf0\n  5695: a3 = a0 ^ 0x1\n  5698: a4 = a3 if a5 == 0\n  5701: a0 = a4 <u 0x1\n  5704: a0 = a0 + 0xffffffffffffffff\n  5707: a1 = -a4\n  5709: a5 = -a5\n  5711: a3 = a5 - a3\n  5714: a2 = 0xef - a2\n  5718: u64 [s1 + 0xd8] = a1\n  5722: a5 = a1 >u 0\n  5724: a1 = a0 >u 0\n  5726: a1 = a5 if a0 == 0\n  5729: a5 = a3 >u 0\n  5731: u64 [s1 + 0xc8] = a2\n  5735: a2 = a2 <u 0x100\n  5739: a2 = a2 ^ 0x1\n  5742: a2 = a5 if a3 != 0\n  5745: a2 = a1 if a4 != 0\n  5748: a1 = t2 | t1\n  5751: a4 = t0 | ra\n  5754: a1 = a1 | a4\n  5757: a1 = a1 <u 0x1\n  5760: a1 = a1 | a2\n  5763: a4 = t2\n  5765: a4 = 0 if a1 != 0\n  5767: jump @204 if a1 == 0\n      : @203 (gas: 1)\n  5770: jump @796\n      : @204 (gas: 7)\n  5773: a1 = u64 [s1 + 0xc8]\n  5777: a1 = a1 ^ 0xff\n  5781: a2 = u64 [s1 + 0xd8]\n  5785: a1 = a1 | a2\n  5788: a2 = a3 | a0\n  5791: a1 = a1 | a2\n  5794: jump @206 if a1 != 0\n      : @205 (gas: 1)\n  5797: jump @796\n      : @206 (gas: 20)\n  5800: a4 = u64 [s1 + 0xc8]\n  5804: a2 = a4 + 0x1\n  5807: u64 [s1 + 0xe8] = a2\n  5811: a1 = a2 <u 0x1\n  5814: a1 = a1 + a3\n  5817: u64 [s1 + 0xe0] = a1\n  5821: a1 = a1 | a2\n  5824: a1 = a1 <u 0x1\n  5827: a3 = u64 [s1 + 0xd8]\n  5831: a1 = a1 + a3\n  5834: u64 [s1 + 0xd0] = a1\n  5838: a1 = a1 <u a3\n  5841: a0 = a0 + a1\n  5844: u64 [s1 + 0xd8] = a0\n  5848: a1 = 0xff - a4\n  5852: u64 [s1 + 0xa0] = a1\n  5856: a2 = 0x80 - a1\n  5860: a0 = u64 [s1 + 0xf0]\n  5864: a1 = u64 [s1 + 0xf8]\n  5868: ra = 148, jump @1376\n      : @207 [@dyn 74] (gas: 6)\n  5874: u64 [s1 + 0x90] = a0\n  5878: u64 [s1 + 0xa8] = a1\n  5882: a0 = u64 [s1 + 0xb0]\n  5886: a1 = u64 [s1 + 0xb8]\n  5890: a2 = u64 [s1 + 0xa0]\n  5894: ra = 150, jump @1381\n      : @208 [@dyn 75] (gas: 7)\n  5900: u64 [s1 + 0x88] = a0\n  5904: u64 [s1 + 0x80] = a1\n  5908: a0 = u64 [s1 + 0xa0]\n  5912: a2 = a0 + 0xffffffffffffff80\n  5915: a0 = u64 [s1 + 0xf0]\n  5919: a1 = u64 [s1 + 0xf8]\n  5923: ra = 152, jump @1381\n      : @209 [@dyn 76] (gas: 8)\n  5929: u64 [s1 + 0x70] = a0\n  5932: u64 [s1 + 0x68] = a1\n  5935: a2 = u64 [s1 + 0xa0]\n  5939: a0 = a2 <u 0x80\n  5943: u64 [s1 + 0x98] = a0\n  5947: a0 = u64 [s1 + 0xf0]\n  5951: a1 = u64 [s1 + 0xf8]\n  5955: ra = 154, jump @1381\n      : @210 [@dyn 77] (gas: 12)\n  5961: u64 [s1 + 0xc0] = a1\n  5965: a1 = u64 [s1 + 0xe0]\n  5969: a2 = u64 [s1 + 0xd8]\n  5973: a2 = a2 | a1\n  5976: a1 = u64 [s1 + 0xe8]\n  5980: a3 = u64 [s1 + 0xd0]\n  5984: a1 = a1 | a3\n  5987: a1 = a1 | a2\n  5990: a3 = u64 [s1 + 0x98]\n  5994: a0 = 0 if a3 == 0\n  5996: u64 [s1 + 0xc8] = a0\n  6000: jump @212 if a1 != 0\n      : @211 (gas: 1)\n  6003: jump @794\n      : @212 (gas: 30)\n  6006: a2 = a3\n  6008: a0 = u64 [s1 + 0xa8]\n  6012: a1 = u64 [s1 + 0x80]\n  6016: a0 = a0 | a1\n  6019: a5 = a3\n  6021: a1 = u64 [s1 + 0x68]\n  6024: a0 = a1 if a2 == 0\n  6027: a2 = u64 [s1 + 0xb8]\n  6031: a3 = a2\n  6033: a1 = a2\n  6035: a2 = u64 [s1 + 0xa0]\n  6039: a3 = a0 if a2 != 0\n  6042: u64 [s1 + 0xa8] = a3\n  6046: a0 = u64 [s1 + 0x90]\n  6050: a3 = u64 [s1 + 0x88]\n  6054: a0 = a0 | a3\n  6057: a3 = u64 [s1 + 0x70]\n  6060: a0 = a3 if a5 == 0\n  6063: a4 = u64 [s1 + 0xb0]\n  6067: a3 = a4\n  6069: a3 = a0 if a2 != 0\n  6072: u64 [s1 + 0xa0] = a3\n  6076: a0 = u64 [s1 + 0xc0]\n  6080: a0 = 0 if a5 == 0\n  6082: u64 [s1 + 0xc0] = a0\n  6086: u64 [s1 + 144] = 0x15180\n  6093: a0 = u64 [s1 + 0xe8]\n  6097: a2 = a0 + 0xffffffffffffff80\n  6100: a0 = a4\n  6102: ra = 156, jump @1376\n      : @213 [@dyn 78] (gas: 6)\n  6108: u64 [s1 + 0x98] = a0\n  6112: u64 [s1 + 0x80] = a1\n  6116: a0 = u64 [s1 + 0xf0]\n  6120: a1 = u64 [s1 + 0xf8]\n  6124: a2 = u64 [s1 + 0xe8]\n  6128: ra = 158, jump @1376\n      : @214 [@dyn 79] (gas: 7)\n  6134: u64 [s1 + 0x70] = a0\n  6137: u64 [s1 + 0x88] = a1\n  6141: a1 = u64 [s1 + 0xe8]\n  6145: a2 = 0x80 - a1\n  6149: a0 = u64 [s1 + 0xb0]\n  6153: a1 = u64 [s1 + 0xb8]\n  6157: ra = 160, jump @1381\n      : @215 [@dyn 80] (gas: 20)\n  6163: a2 = u64 [s1 + 0x88]\n  6167: a1 = a1 | a2\n  6170: a2 = u64 [s1 + 0xe8]\n  6174: a3 = a2 <u 0x80\n  6178: u64 [s1 + 0x88] = a3\n  6182: a4 = u64 [s1 + 0x80]\n  6186: a1 = a4 if a3 == 0\n  6189: a4 = u64 [s1 + 0xf8]\n  6193: a4 = a1 if a2 != 0\n  6196: u64 [s1 + 0xf8] = a4\n  6200: a1 = u64 [s1 + 0x70]\n  6203: a0 = a0 | a1\n  6206: a1 = u64 [s1 + 0x98]\n  6210: a0 = a1 if a3 == 0\n  6213: a1 = u64 [s1 + 0xf0]\n  6217: a1 = a0 if a2 != 0\n  6220: u64 [s1 + 0xf0] = a1\n  6224: a0 = u64 [s1 + 0xb0]\n  6228: a1 = u64 [s1 + 0xb8]\n  6232: ra = 162, jump @1376\n      : @216 [@dyn 81] (gas: 15)\n  6238: t2 = u64 [s1 + 0xf0]\n  6242: t1 = u64 [s1 + 0xf8]\n  6246: u64 [s1 + 184] = 0\n  6250: u64 [s1 + 176] = 0\n  6254: a2 = u64 [s1 + 0x88]\n  6258: a1 = 0 if a2 == 0\n  6260: a0 = 0 if a2 == 0\n  6262: u64 [s1 + 0x98] = a0\n  6266: a3 = u64 [s1 + 0x90]\n  6270: a2 = a3 + 0xffffffffffffffff\n  6273: u64 [s1 + 0x88] = a2\n  6277: a2 = a3 >u 0\n  6279: a2 = a2 + 0xffffffffffffffff\n  6282: u64 [s1 + 0x80] = a2\n  6286: fallthrough\n      : @217 (gas: 88)\n  6287: a2 = t2 >> 0x3f\n  6290: a3 = t1 << 0x1\n  6293: a2 = a2 | a3\n  6296: a3 = t2 << 0x1\n  6299: t2 = u64 [s1 + 0xa8]\n  6303: a4 = t2 >> 0x3f\n  6306: a3 = a3 | a4\n  6309: u64 [s1 + 0xf8] = a3\n  6313: ra = u64 [s1 + 0x80]\n  6317: a0 = t1\n  6319: t1 = ra ^ a2\n  6322: t0 = ra <u a2\n  6325: a4 = u64 [s1 + 0x88]\n  6329: a5 = a4 <u a3\n  6332: a5 = t0 if t1 != 0\n  6335: a1 = a1 << 0x1\n  6338: a4 = u64 [s1 + 0x98]\n  6342: a3 = a4 >> 0x3f\n  6345: a1 = a1 | a3\n  6348: u64 [s1 + 0xf0] = a1\n  6352: a3 = a0 >> 0x3f\n  6355: a0 = a4 << 0x1\n  6358: a3 = a3 | a0\n  6361: a0 = t2 << 0x1\n  6364: a4 = u64 [s1 + 0xa0]\n  6368: a1 = a4 >> 0x3f\n  6371: t0 = a0 | a1\n  6374: a1 = a4 << 0x1\n  6377: a4 = u64 [s1 + 0xc0]\n  6381: t1 = a4 >> 0x3f\n  6384: t1 = a1 | t1\n  6387: a1 = a4 << 0x1\n  6390: a4 = u64 [s1 + 0xc8]\n  6394: t2 = a4 >> 0x3f\n  6397: a1 = a1 | t2\n  6400: a4 = a4 << 0x1\n  6403: a0 = u64 [s1 + 0xb8]\n  6407: a4 = a4 | a0\n  6410: u64 [s1 + 0xc8] = a4\n  6414: a0 = u64 [s1 + 0xb0]\n  6418: a1 = a1 | a0\n  6421: u64 [s1 + 0xc0] = a1\n  6425: a1 = a0 | t1\n  6428: u64 [s1 + 0xa0] = a1\n  6432: a0 = a0 | t0\n  6435: u64 [s1 + 0xa8] = a0\n  6439: a0 = ra - a3\n  6442: a0 = a0 <u a5\n  6445: a1 = ra <u a3\n  6448: a5 = u64 [s1 + 0xf0]\n  6452: a4 = ra - a5\n  6455: a4 = a4 - a1\n  6458: a4 = a4 - a0\n  6461: ra = a4 >>a 0x3f\n  6464: a0 = u64 [s1 + 0x90]\n  6468: a0 = ra & a0\n  6471: a1 = u64 [s1 + 0xf8]\n  6475: t2 = a1 - a0\n  6478: a1 = a1 <u a0\n  6481: t1 = a2 - a1\n  6484: a1 = 0 if a2 != 0\n  6486: a0 = a3 - a1\n  6489: u64 [s1 + 0x98] = a0\n  6493: a1 = a3 <u a1\n  6496: a1 = a5 - a1\n  6499: a3 = u64 [s1 + 0xe8]\n  6503: a5 = u64 [s1 + 0xe0]\n  6507: a2 = a3 | a5\n  6510: a2 = a2 <u 0x1\n  6513: a4 = u64 [s1 + 0xd0]\n  6517: t0 = a4 <u a2\n  6520: a2 = a4 - a2\n  6523: a4 = a3 <u 0x1\n  6526: a5 = a5 - a4\n  6529: a4 = u64 [s1 + 0xd8]\n  6533: a4 = a4 - t0\n  6536: a3 = a3 + 0xffffffffffffffff\n  6539: u64 [s1 + 0xe0] = a5\n  6543: u64 [s1 + 0xd8] = a4\n  6547: t0 = a5 | a4\n  6550: u64 [s1 + 0xe8] = a3\n  6554: a4 = a3 | a2\n  6557: a3 = a4 | t0\n  6560: a4 = ra & 0x1\n  6563: u64 [s1 + 0xb8] = a4\n  6567: u64 [s1 + 0xd0] = a2\n  6571: u64 [s1 + 176] = 0\n  6575: jump @217 if a3 != 0\n      : @218 (gas: 1)\n  6579: jump @795\n      : @219 (gas: 12)\n  6582: u64 [a2 + 1664] = 0\n  6586: u64 [a2 + 1656] = 0\n  6590: u64 [a2 + 1648] = 0\n  6594: u64 [a2 + 1640] = 0\n  6598: a0 = s1 + 0x2000\n  6602: i32 a0 = a0 + 0x6e0\n  6606: ra = 0xa4\n  6610: ecalli 17 // 'value_transferred'\n  6612: a3 = s1 + 0x2078\n  6616: a4 = a3 + 0x600\n  6620: t0 = 0xa6\n  6624: jump @1375\n      : @220 [@dyn 82] (gas: 3)\n  6627: a3 = s1 + 0x2078\n  6631: a4 = a3 + 0x600\n  6635: t0 = 166, jump @1375\n      : @221 [@dyn 83] (gas: 1)\n  6641: jump @223 if a0 == 0\n      : @222 (gas: 1)\n  6644: jump @716\n      : @223 (gas: 3)\n  6647: a0 = u64 [s1 + 0xf8]\n  6651: a0 = i32 [a0]\n  6653: jump @225 if a0 >u 35\n      : @224 (gas: 1)\n  6657: jump @717\n      : @225 (gas: 5)\n  6660: a0 = s1 + 0x2000\n  6664: i32 a0 = a0 + 0x700\n  6668: a1 = 0x4\n  6671: ecalli 2 // 'call_data_load'\n  6673: fallthrough\n      : @226 (gas: 14)\n  6674: a0 = s1 + 0x2078\n  6678: a5 = a0 + 0x600\n  6682: a1 = u64 [a5 + 0xa0]\n  6686: a2 = u64 [a5 + 0x98]\n  6690: a3 = u64 [a5 + 0x90]\n  6694: a4 = u64 [a5 + 0x88]\n  6698: u64 [s1 + 0x58] = a1\n  6701: u64 [s1 + 0x48] = a3\n  6704: a0 = a3 | a1\n  6707: u64 [s1 + 0x50] = a2\n  6710: u64 [s1 + 0x40] = a4\n  6713: a1 = a4 | a2\n  6716: a0 = a0 | a1\n  6719: jump @228 if a0 != 0\n      : @227 (gas: 1)\n  6722: jump @718\n      : @228 (gas: 9)\n  6725: a0 = 0x30160\n  6730: u64 [s1 + 0x80] = a0\n  6734: i32 a0 = a0 + 0\n  6736: u64 [s1 + 0x28] = a0\n  6739: ra = 0xa8\n  6743: ecalli 4 // 'caller'\n  6745: a2 = u64 [s1 + 0x80]\n  6749: t0 = 0xaa\n  6753: jump @1321\n      : @229 [@dyn 84] (gas: 2)\n  6756: a2 = u64 [s1 + 0x80]\n  6760: t0 = 170, jump @1321\n      : @230 [@dyn 85] (gas: 8)\n  6766: u64 [a2 + 1600] = 0\n  6770: a4 = a2 + 0x600\n  6774: u64 [a4 + 0x38] = a1\n  6777: u64 [a4 + 0x30] = a0\n  6780: a1 = s1 + 0x1ea0\n  6784: u64 [a4 + 0x28] = a3\n  6787: a0 = 0\n  6789: ra = 172, jump @9\n      : @231 [@dyn 86] (gas: 3)\n  6795: t0 = 0xae\n  6799: a1 = s1 + 0x1878\n  6803: fallthrough\n      : @232 [@dyn 87] (gas: 8)\n  6804: u64 [a1 + 1568] = 0\n  6808: u64 [a1 + 1560] = 0\n  6812: u64 [a1 + 1544] = 0x4\n  6817: a2 = a1\n  6819: a0 = 0x20\n  6822: a1 = s1 + 0x1e80\n  6826: u64 [a2 + 1552] = 0\n  6830: ra = 176, jump @9\n      : @233 [@dyn 88] (gas: 7)\n  6836: a0 = sp + 0xffffffffffffffe0\n  6839: a0 = a0 & 0xffffffffffffffe0\n  6842: u64 [s1 + 0xf8] = a0\n  6846: sp = a0\n  6848: a2 = 0x20150\n  6853: a0 = i32 [0x20150]\n  6858: jump @235 if a0 >u 63\n      : @234 (gas: 2)\n  6862: u32 [0x20150] = 0x40\n  6868: fallthrough\n      : @235 (gas: 16)\n  6869: u64 [s1 + 0x30] = a2\n  6872: a0 = 0xffffffff\n  6882: u64 [s1 + 0x60] = a0\n  6885: a0 = sp + 0xffffffffffffffe0\n  6888: a2 = a0 & 0xffffffffffffffe0\n  6891: u64 [s1 + 0xf0] = a2\n  6895: sp = a2\n  6897: a0 = 0x20160\n  6902: i32 a0 = a0 + 0\n  6904: i32 a2 = a2 + 0\n  6906: a1 = 0x40\n  6909: u64 [s1 + 0x38] = a0\n  6912: ra = 0xb2\n  6916: ecalli 9 // 'hash_keccak_256'\n  6918: t0 = 0xb4\n  6922: jump @1340\n      : @236 [@dyn 89] (gas: 1)\n  6925: t0 = 180, jump @1340\n      : @237 [@dyn 90] (gas: 3)\n  6931: i32 a0 = a0 + 0xfffffffffffffe60\n  6935: a0 = a0 + s1\n  6938: ra = 182, jump @11\n      : @238 [@dyn 91] (gas: 4)\n  6944: a0 = s1 + 0x1878\n  6948: a2 = u32 [a0 + 0x5e8]\n  6952: a0 = u64 [s1 + 0x60]\n  6955: jump @240 if a2 != a0\n      : @239 (gas: 1)\n  6958: jump @723\n      : @240 (gas: 11)\n  6961: a1 = a2 + 0x1\n  6964: u64 [s1 + 0x70] = a1\n  6967: a0 = a1 <u 0x1\n  6970: u64 [s1 + 0x68] = a0\n  6973: a0 = a0 | a1\n  6976: a0 = a0 <u 0x1\n  6979: u64 [s1 + 0x78] = a0\n  6982: a0 = s1 + 0x1e40\n  6986: u64 [s1 + 0xf0] = a2\n  6990: a1 = u64 [s1 + 0xf8]\n  6994: ra = 184, jump @11\n      : @241 [@dyn 92] (gas: 22)\n  7000: a3 = s1 + 0x1878\n  7004: a0 = u32 [a3 + 0x5cc]\n  7008: a4 = a3 + 0x500\n  7012: a1 = u64 [a4 + 0xd8]\n  7016: a0 = a0 << 0x20\n  7019: a2 = u64 [a4 + 0xd0]\n  7023: a3 = u64 [a4 + 0xe0]\n  7027: a4 = u64 [s1 + 0x78]\n  7030: a1 = a1 | a4\n  7033: a4 = u64 [s1 + 0x70]\n  7036: a0 = a0 | a4\n  7039: a4 = u64 [s1 + 0x68]\n  7042: a2 = a2 | a4\n  7045: a4 = s1 + 0x2078\n  7049: a5 = a4 + 0x600\n  7053: u64 [a5 + 0xc0] = a3\n  7057: u64 [a5 + 0xb0] = a2\n  7061: u64 [a5 + 0xa8] = a0\n  7065: u64 [a5 + 0xb8] = a1\n  7069: a1 = s1 + 0x2720\n  7073: a0 = u64 [s1 + 0xf8]\n  7077: ra = 186, jump @12\n      : @242 [@dyn 93] (gas: 2)\n  7083: a1 = u64 [s1 + 0xf0]\n  7087: jump @244 if a1 <=u 254\n      : @243 (gas: 1)\n  7092: jump @726\n      : @244 (gas: 4)\n  7095: a0 = s1 + 0x2000\n  7099: i32 a0 = a0 + 0x740\n  7103: ecalli 10 // 'now'\n  7105: fallthrough\n      : @245 (gas: 49)\n  7106: a0 = s1 + 0x2078\n  7110: t2 = u64 [a0 + 0x6e0]\n  7114: a3 = u64 [a0 + 0x6d8]\n  7118: u64 [s1 + 0xb8] = a3\n  7122: t0 = u64 [a0 + 0x6d0]\n  7126: ra = u64 [a0 + 0x6c8]\n  7130: a0 = clz t2\n  7132: a1 = clz a3\n  7134: a2 = a1 + 0x40\n  7137: a2 = a0 if t2 != 0\n  7140: a0 = clz t0\n  7142: a1 = clz ra\n  7144: a1 = a1 + 0x40\n  7147: a1 = a0 if t0 != 0\n  7150: a0 = a1 + 0x80\n  7154: a3 = a3 | t2\n  7157: a2 = a0 if a3 == 0\n  7160: a5 = a0 <u a1\n  7163: a5 = 0 if a3 != 0\n  7165: a4 = a5 >u 0\n  7167: a0 = a2 <u 0xf0\n  7171: a3 = a0 ^ 0x1\n  7174: a4 = a3 if a5 == 0\n  7177: a0 = a4 <u 0x1\n  7180: a0 = a0 + 0xffffffffffffffff\n  7183: a1 = -a4\n  7185: a5 = -a5\n  7187: a3 = a5 - a3\n  7190: t1 = 0xef - a2\n  7194: u64 [s1 + 0xf8] = a1\n  7198: a5 = a1 >u 0\n  7200: a1 = a0 >u 0\n  7202: a1 = a5 if a0 == 0\n  7205: a5 = t1 <u 0x100\n  7209: a5 = a5 ^ 0x1\n  7212: a2 = a3 >u 0\n  7214: a5 = a2 if a3 != 0\n  7217: a5 = a1 if a4 != 0\n  7220: u64 [s1 + 0xa0] = t2\n  7224: a1 = t0 | t2\n  7227: t2 = t0\n  7229: a4 = u64 [s1 + 0xb8]\n  7233: a2 = ra | a4\n  7236: a1 = a1 | a2\n  7239: a1 = a1 <u 0x1\n  7242: a1 = a1 | a5\n  7245: t0 = ra\n  7247: ra = 0 if a1 != 0\n  7249: jump @247 if a1 == 0\n      : @246 (gas: 1)\n  7252: jump @624\n      : @247 (gas: 6)\n  7255: a1 = t1 ^ 0xff\n  7259: a5 = u64 [s1 + 0xf8]\n  7263: a1 = a1 | a5\n  7266: a2 = a3 | a0\n  7269: a1 = a1 | a2\n  7272: jump @249 if a1 != 0\n      : @248 (gas: 1)\n  7275: jump @624\n      : @249 (gas: 20)\n  7278: a2 = t1 + 0x1\n  7281: u64 [s1 + 0xf0] = a2\n  7285: a1 = a2 <u 0x1\n  7288: a1 = a1 + a3\n  7291: u64 [s1 + 0xe0] = a1\n  7295: a1 = a1 | a2\n  7298: a1 = a1 <u 0x1\n  7301: a1 = a1 + a5\n  7304: u64 [s1 + 0xd0] = a1\n  7308: a1 = a1 <u a5\n  7311: a0 = a0 + a1\n  7314: u64 [s1 + 0xd8] = a0\n  7318: a1 = 0xff - t1\n  7322: u64 [s1 + 0xc8] = a1\n  7326: a2 = 0x80 - a1\n  7330: a0 = t0\n  7332: u64 [s1 + 0xb0] = t0\n  7336: a1 = t2\n  7338: u64 [s1 + 0xa8] = t2\n  7342: ra = 188, jump @1376\n      : @250 [@dyn 94] (gas: 6)\n  7348: u64 [s1 + 0xc0] = a0\n  7352: u64 [s1 + 0xf8] = a1\n  7356: a0 = u64 [s1 + 0xb8]\n  7360: a1 = u64 [s1 + 0xa0]\n  7364: a2 = u64 [s1 + 0xc8]\n  7368: ra = 190, jump @1381\n      : @251 [@dyn 95] (gas: 7)\n  7374: u64 [s1 + 0x90] = a0\n  7378: u64 [s1 + 0x88] = a1\n  7382: a0 = u64 [s1 + 0xc8]\n  7386: a2 = a0 + 0xffffffffffffff80\n  7389: a0 = u64 [s1 + 0xb0]\n  7393: a1 = u64 [s1 + 0xa8]\n  7397: ra = 192, jump @1381\n      : @252 [@dyn 96] (gas: 8)\n  7403: u64 [s1 + 0x20] = a0\n  7406: u64 [s1 + 0x18] = a1\n  7409: a2 = u64 [s1 + 0xc8]\n  7413: a0 = a2 <u 0x80\n  7417: u64 [s1 + 0x98] = a0\n  7421: a0 = u64 [s1 + 0xb0]\n  7425: a1 = u64 [s1 + 0xa8]\n  7429: ra = 194, jump @1381\n      : @253 [@dyn 97] (gas: 11)\n  7435: a4 = u64 [s1 + 0x98]\n  7439: t0 = u64 [s1 + 0xd0]\n  7443: a5 = u64 [s1 + 0xd8]\n  7447: a2 = u64 [s1 + 0xe0]\n  7451: a5 = a5 | a2\n  7454: a3 = u64 [s1 + 0xf0]\n  7458: a3 = a3 | t0\n  7461: a3 = a3 | a5\n  7464: a0 = 0 if a4 == 0\n  7466: u64 [s1 + 0xe8] = a0\n  7470: jump @255 if a3 == 0\n      : @254 (gas: 1)\n  7473: jump @615\n      : @255 (gas: 2)\n  7476: a5 = 0\n  7478: jump @623\n      : @256 (gas: 11)\n  7481: u64 [a2 + 480] = 0\n  7485: u64 [a2 + 472] = 0\n  7489: u64 [a2 + 464] = 0\n  7493: u64 [a2 + 456] = 0\n  7497: a0 = s1 + 0x2000\n  7501: i32 a0 = a0 + 0x240\n  7505: ra = 0xc4\n  7509: ecalli 17 // 'value_transferred'\n  7511: a0 = 0x2000\n  7515: t0 = 0xc6\n  7519: jump @1367\n      : @257 [@dyn 98] (gas: 2)\n  7522: a0 = 0x2000\n  7526: t0 = 198, jump @1367\n      : @258 [@dyn 99] (gas: 1)\n  7532: t0 = 200, jump @1368\n      : @259 [@dyn 100] (gas: 1)\n  7538: jump @261 if a0 == 0\n      : @260 (gas: 1)\n  7541: jump @731\n      : @261 (gas: 3)\n  7544: a0 = u64 [s1 + 0xf8]\n  7548: a0 = i32 [a0]\n  7550: jump @263 if a0 >u 3\n      : @262 (gas: 1)\n  7554: jump @732\n      : @263 (gas: 4)\n  7557: a0 = s1 + 0x7ff\n  7561: a0 = a0 + 0x241\n  7565: a1 = 0x40\n  7568: ra = 202, jump @7\n      : @264 [@dyn 101] (gas: 4)\n  7574: a3 = s1 + 0x7ff\n  7578: a3 = a3 + 0x79\n  7581: a5 = a3 + 0x100\n  7585: t0 = 204, jump @1361\n      : @265 [@dyn 102] (gas: 1)\n  7591: jump @267 if a1 == 0\n      : @266 (gas: 1)\n  7594: jump @692\n      : @267 (gas: 10)\n  7597: a1 = u64 [0x200a0]\n  7602: u64 [a3 + 448] = 0\n  7606: u64 [a3 + 440] = 0\n  7610: u64 [a3 + 0x1a8] = a1\n  7614: a1 = s1 + 0x7ff\n  7618: a1 = a1 + 0x221\n  7622: u64 [a3 + 432] = 0\n  7626: u64 [s1 + 0xf8] = a0\n  7630: ra = 0x196\n  7634: jump @9\n      : @268 (gas: 9)\n  7637: u64 [a2 + 256] = 0\n  7641: u64 [a2 + 248] = 0\n  7645: u64 [a2 + 240] = 0\n  7649: u64 [a2 + 232] = 0\n  7653: a0 = s1 + 0x2000\n  7657: i32 a0 = a0 + 0x160\n  7661: ecalli 17 // 'value_transferred'\n  7663: a3 = s1 + 0x2078\n  7667: fallthrough\n      : @269 (gas: 8)\n  7668: a0 = u64 [a3 + 0xf8]\n  7672: a1 = u64 [a3 + 0x100]\n  7676: a2 = u64 [a3 + 0xf0]\n  7680: a3 = u64 [a3 + 0xe8]\n  7684: a1 = a1 | a2\n  7687: a0 = a0 | a3\n  7690: a0 = a0 | a1\n  7693: jump @271 if a0 == 0\n      : @270 (gas: 1)\n  7696: jump @733\n      : @271 (gas: 3)\n  7699: a0 = u64 [s1 + 0xf8]\n  7703: a0 = i32 [a0]\n  7705: jump @273 if a0 >u 35\n      : @272 (gas: 1)\n  7709: jump @734\n      : @273 (gas: 8)\n  7712: a0 = s1 + 0x2000\n  7716: i32 a0 = a0 + 0x180\n  7720: a1 = 0x4\n  7723: ra = 0xce\n  7727: ecalli 2 // 'call_data_load'\n  7729: a0 = 0x2000\n  7733: t0 = 0xd0\n  7737: jump @1367\n      : @274 [@dyn 103] (gas: 2)\n  7740: a0 = 0x2000\n  7744: t0 = 208, jump @1367\n      : @275 [@dyn 104] (gas: 7)\n  7750: a0 = u64 [a4 + 0x20]\n  7753: a1 = u64 [a4 + 0x18]\n  7756: a2 = u64 [a4 + 0x10]\n  7759: a0 = a0 | a1\n  7762: a1 = a2 <u 0x1\n  7765: a1 = 0 if a0 != 0\n  7767: jump @277 if a1 != 0\n      : @276 (gas: 1)\n  7770: jump @735\n      : @277 (gas: 6)\n  7773: a0 = u64 [a3 + 0x108]\n  7777: u64 [s1 + 0x38] = a0\n  7780: a0 = s1 + 0x2000\n  7784: i32 a0 = a0 + 0x1a0\n  7788: ecalli 10 // 'now'\n  7790: fallthrough\n      : @278 (gas: 49)\n  7791: a0 = s1 + 0x2078\n  7795: t2 = u64 [a0 + 0x140]\n  7799: a3 = u64 [a0 + 0x138]\n  7803: u64 [s1 + 0xb0] = a3\n  7807: t0 = u64 [a0 + 0x130]\n  7811: ra = u64 [a0 + 0x128]\n  7815: a0 = clz t2\n  7817: a1 = clz a3\n  7819: a2 = a1 + 0x40\n  7822: a2 = a0 if t2 != 0\n  7825: a0 = clz t0\n  7827: a1 = clz ra\n  7829: a1 = a1 + 0x40\n  7832: a1 = a0 if t0 != 0\n  7835: a0 = a1 + 0x80\n  7839: a3 = a3 | t2\n  7842: a2 = a0 if a3 == 0\n  7845: a5 = a0 <u a1\n  7848: a5 = 0 if a3 != 0\n  7850: a4 = a5 >u 0\n  7852: a0 = a2 <u 0xf0\n  7856: a3 = a0 ^ 0x1\n  7859: a4 = a3 if a5 == 0\n  7862: a0 = a4 <u 0x1\n  7865: a0 = a0 + 0xffffffffffffffff\n  7868: a1 = -a4\n  7870: a5 = -a5\n  7872: a3 = a5 - a3\n  7875: t1 = 0xef - a2\n  7879: u64 [s1 + 0xf8] = a1\n  7883: a5 = a1 >u 0\n  7885: a1 = a0 >u 0\n  7887: a1 = a5 if a0 == 0\n  7890: a5 = t1 <u 0x100\n  7894: a5 = a5 ^ 0x1\n  7897: a2 = a3 >u 0\n  7899: a5 = a2 if a3 != 0\n  7902: a5 = a1 if a4 != 0\n  7905: u64 [s1 + 0xa0] = t2\n  7909: u64 [s1 + 0xb8] = t0\n  7913: a1 = t0 | t2\n  7916: t2 = u64 [s1 + 0xb0]\n  7920: a2 = ra | t2\n  7923: a1 = a1 | a2\n  7926: a1 = a1 <u 0x1\n  7929: a1 = a1 | a5\n  7932: a4 = ra\n  7934: a4 = 0 if a1 != 0\n  7936: jump @280 if a1 == 0\n      : @279 (gas: 1)\n  7939: jump @518\n      : @280 (gas: 6)\n  7942: a1 = t1 ^ 0xff\n  7946: a5 = u64 [s1 + 0xf8]\n  7950: a1 = a1 | a5\n  7953: a2 = a3 | a0\n  7956: a1 = a1 | a2\n  7959: jump @282 if a1 != 0\n      : @281 (gas: 1)\n  7962: jump @518\n      : @282 (gas: 20)\n  7965: t0 = ra\n  7967: a2 = t1 + 0x1\n  7970: u64 [s1 + 0xf0] = a2\n  7974: a1 = a2 <u 0x1\n  7977: a1 = a1 + a3\n  7980: u64 [s1 + 0xe0] = a1\n  7984: a1 = a1 | a2\n  7987: a1 = a1 <u 0x1\n  7990: a1 = a1 + a5\n  7993: u64 [s1 + 0xd0] = a1\n  7997: a1 = a1 <u a5\n  8000: a0 = a0 + a1\n  8003: u64 [s1 + 0xd8] = a0\n  8007: a1 = 0xff - t1\n  8011: u64 [s1 + 0xc8] = a1\n  8015: a2 = 0x80 - a1\n  8019: a0 = ra\n  8021: u64 [s1 + 0xa8] = t0\n  8025: a1 = u64 [s1 + 0xb8]\n  8029: ra = 210, jump @1376\n      : @283 [@dyn 105] (gas: 6)\n  8035: u64 [s1 + 0xc0] = a0\n  8039: u64 [s1 + 0xf8] = a1\n  8043: a0 = u64 [s1 + 0xb0]\n  8047: a1 = u64 [s1 + 0xa0]\n  8051: a2 = u64 [s1 + 0xc8]\n  8055: ra = 212, jump @1381\n      : @284 [@dyn 106] (gas: 7)\n  8061: u64 [s1 + 0x90] = a0\n  8065: u64 [s1 + 0x88] = a1\n  8069: a0 = u64 [s1 + 0xc8]\n  8073: a2 = a0 + 0xffffffffffffff80\n  8076: a0 = u64 [s1 + 0xa8]\n  8080: a1 = u64 [s1 + 0xb8]\n  8084: ra = 214, jump @1381\n      : @285 [@dyn 107] (gas: 8)\n  8090: u64 [s1 + 0x80] = a0\n  8094: u64 [s1 + 0x78] = a1\n  8097: a2 = u64 [s1 + 0xc8]\n  8101: a0 = a2 <u 0x80\n  8105: u64 [s1 + 0x98] = a0\n  8109: a0 = u64 [s1 + 0xa8]\n  8113: a1 = u64 [s1 + 0xb8]\n  8117: ra = 216, jump @1381\n      : @286 [@dyn 108] (gas: 11)\n  8123: a4 = u64 [s1 + 0x98]\n  8127: t0 = u64 [s1 + 0xd0]\n  8131: a5 = u64 [s1 + 0xd8]\n  8135: a2 = u64 [s1 + 0xe0]\n  8139: a5 = a5 | a2\n  8142: a3 = u64 [s1 + 0xf0]\n  8146: a3 = a3 | t0\n  8149: a3 = a3 | a5\n  8152: a0 = 0 if a4 == 0\n  8154: u64 [s1 + 0xe8] = a0\n  8158: jump @288 if a3 == 0\n      : @287 (gas: 1)\n  8161: jump @509\n      : @288 (gas: 2)\n  8164: a4 = 0\n  8166: jump @517\n      : @289 (gas: 11)\n  8169: a0 = s1 + 0x2078\n  8173: u64 [a0 + 896] = 0\n  8177: u64 [a0 + 888] = 0\n  8181: u64 [a0 + 880] = 0\n  8185: u64 [a0 + 872] = 0\n  8189: a0 = s1 + 0x2000\n  8193: i32 a0 = a0 + 0x3e0\n  8197: ra = 0xda\n  8201: ecalli 17 // 'value_transferred'\n  8203: t0 = 0xdc\n  8207: jump @1355\n      : @290 [@dyn 109] (gas: 1)\n  8210: t0 = 220, jump @1355\n      : @291 [@dyn 110] (gas: 1)\n  8216: t0 = 222, jump @1375\n      : @292 [@dyn 111] (gas: 1)\n  8222: jump @294 if a0 == 0\n      : @293 (gas: 1)\n  8225: jump @736\n      : @294 (gas: 3)\n  8228: a0 = u64 [s1 + 0xf8]\n  8232: a0 = i32 [a0]\n  8234: jump @296 if a0 >u 3\n      : @295 (gas: 1)\n  8238: jump @737\n      : @296 (gas: 9)\n  8241: a1 = s1 + 0x2078\n  8245: u64 [a1 + 928] = 0\n  8249: u64 [a1 + 920] = 0\n  8253: u64 [a1 + 912] = 0\n  8257: u64 [a1 + 904] = 0x1\n  8262: a0 = s1 + 0x7ff\n  8266: a0 = a0 + 0x661\n  8270: a1 = s1 + 0x2400\n  8274: ra = 224, jump @11\n      : @297 [@dyn 112] (gas: 13)\n  8280: a1 = s1 + 0x7ff\n  8284: a1 = a1 + 0x79\n  8287: a2 = a1 + 0x500\n  8291: a0 = u64 [a2 + 0xf8]\n  8295: u64 [s1 + 0xe8] = a0\n  8299: a0 = u64 [a2 + 0xf0]\n  8303: u64 [s1 + 0xf8] = a0\n  8307: a0 = u64 [a2 + 0xe8]\n  8311: u64 [s1 + 0xf0] = a0\n  8315: a0 = s1 + 0x7ff\n  8319: a0 = a0 + 0x641\n  8323: a1 = 0x40\n  8326: ra = 226, jump @7\n      : @298 [@dyn 113] (gas: 4)\n  8332: a3 = s1 + 0x7ff\n  8336: a3 = a3 + 0x79\n  8339: a5 = a3 + 0x500\n  8343: t0 = 228, jump @1361\n      : @299 [@dyn 114] (gas: 1)\n  8349: jump @301 if a1 == 0\n      : @300 (gas: 1)\n  8352: jump @692\n      : @301 (gas: 15)\n  8355: a1 = u64 [s1 + 0xe8]\n  8359: a1 = a1 << 0x20\n  8362: a2 = a1 >> 0x20\n  8365: u64 [a3 + 1472] = 0\n  8369: a1 = u64 [s1 + 0xf0]\n  8373: a4 = a3 + 0x500\n  8377: u64 [a4 + 0xa8] = a1\n  8381: a1 = u64 [s1 + 0xf8]\n  8385: u64 [a4 + 0xb0] = a1\n  8389: a1 = s1 + 0x7ff\n  8393: a1 = a1 + 0x621\n  8397: u64 [a4 + 0xb8] = a2\n  8401: u64 [s1 + 0xf8] = a0\n  8405: ra = 0x196\n  8409: jump @9\n      : @302 (gas: 10)\n  8412: u64 [a2 + 1472] = 0\n  8416: u64 [a2 + 1464] = 0\n  8420: u64 [a2 + 1456] = 0\n  8424: u64 [a2 + 1448] = 0\n  8428: a0 = s1 + 0x2000\n  8432: i32 a0 = a0 + 0x620\n  8436: ra = 0xe6\n  8440: ecalli 17 // 'value_transferred'\n  8442: t0 = 0xe8\n  8446: jump @1369\n      : @303 [@dyn 115] (gas: 1)\n  8449: t0 = 232, jump @1369\n      : @304 [@dyn 116] (gas: 8)\n  8455: a0 = u64 [a4 + 0xb8]\n  8459: a1 = u64 [a4 + 0xc0]\n  8463: a2 = u64 [a4 + 0xb0]\n  8467: a3 = u64 [a4 + 0xa8]\n  8471: a1 = a1 | a2\n  8474: a0 = a0 | a3\n  8477: a0 = a0 | a1\n  8480: jump @306 if a0 == 0\n      : @305 (gas: 1)\n  8483: jump @738\n      : @306 (gas: 3)\n  8486: a0 = u64 [s1 + 0xf8]\n  8490: a0 = i32 [a0]\n  8492: jump @308 if a0 >u 3\n      : @307 (gas: 1)\n  8496: jump @739\n      : @308 (gas: 8)\n  8499: a0 = s1 + 0x2078\n  8503: u64 [a0 + 1504] = 0\n  8507: u64 [a0 + 1496] = 0\n  8511: u64 [a0 + 1488] = 0\n  8515: u64 [a0 + 1480] = 0\n  8519: a0 = s1 + 0x1a40\n  8523: a1 = s1 + 0x2640\n  8527: ra = 234, jump @11\n      : @309 [@dyn 117] (gas: 3)\n  8533: t0 = 0xec\n  8537: a1 = s1 + 0x1878\n  8541: fallthrough\n      : @310 [@dyn 118] (gas: 12)\n  8542: a3 = a1 + 0x100\n  8546: a0 = u64 [a3 + 0xd8]\n  8550: a2 = u64 [a3 + 0xd0]\n  8554: a1 = u64 [a3 + 0xc8]\n  8558: u64 [s1 + 0xe0] = a0\n  8562: a0 = a0 << 0x20\n  8565: a0 = a0 >> 0x20\n  8568: u64 [s1 + 0xe8] = a1\n  8572: u64 [s1 + 0xd8] = a2\n  8576: a1 = a1 | a2\n  8579: a0 = a0 | a1\n  8582: jump @312 if a0 != 0\n      : @311 (gas: 1)\n  8585: jump @740\n      : @312 (gas: 3)\n  8588: a0 = s1 + 0x1a20\n  8592: a1 = 0x40\n  8595: ra = 238, jump @7\n      : @313 [@dyn 119] (gas: 14)\n  8601: a4 = s1 + 0x1878\n  8605: t1 = u64 [a4 + 0x1c0]\n  8609: a1 = a4 + 0x100\n  8613: a5 = u64 [a1 + 0xb8]\n  8617: a3 = u64 [a1 + 0xb0]\n  8621: a0 = u64 [a1 + 0xa8]\n  8625: a2 = a3 | t1\n  8628: a1 = a0 | a5\n  8631: a1 = a1 | a2\n  8634: a1 = a1 >> 0x20\n  8637: a2 = a2 | a5\n  8640: a2 = a2 << 0x20\n  8643: a1 = a1 | a2\n  8646: jump @315 if a1 == 0\n      : @314 (gas: 1)\n  8649: jump @692\n      : @315 (gas: 11)\n  8652: u64 [a4 + 408] = 0\n  8656: u64 [a4 + 400] = 0\n  8660: u64 [a4 + 392] = 0\n  8664: t0 = 0xef5cfb8c00000000\n  8674: a1 = s1 + 0x1a00\n  8678: u64 [a4 + 0x1a0] = t0\n  8682: u64 [s1 + 0xf8] = a0\n  8686: u64 [s1 + 0xd0] = t1\n  8690: u64 [s1 + 0xc8] = a5\n  8694: u64 [s1 + 0xc0] = a3\n  8698: ra = 240, jump @9\n      : @316 [@dyn 120] (gas: 6)\n  8704: a0 = 0x30160\n  8709: u64 [s1 + 0xf0] = a0\n  8713: i32 a0 = a0 + 0\n  8715: u64 [s1 + 0xb8] = a0\n  8719: ecalli 4 // 'caller'\n  8721: fallthrough\n      : @317 (gas: 10)\n  8722: a4 = u64 [s1 + 0xf8]\n  8726: a0 = u64 [s1 + 0xd0]\n  8730: a1 = u64 [s1 + 0xc8]\n  8734: a0 = a0 | a1\n  8737: a1 = 0xfffffffc\n  8747: a1 = a4 <u a1\n  8750: a2 = u64 [s1 + 0xc0]\n  8754: a1 = 0 if a2 != 0\n  8756: a1 = 0 if a0 != 0\n  8758: jump @319 if a1 != 0\n      : @318 (gas: 1)\n  8761: jump @692\n      : @319 (gas: 23)\n  8764: a2 = u64 [s1 + 0xf0]\n  8768: a0 = u64 [a2 + 0x8]\n  8771: a1 = i32 [a2 + 0x10]\n  8774: a2 = u64 [a2]\n  8776: a0 = reverse a0\n  8778: a3 = a0 << 0x20\n  8781: a1 = reverse a1\n  8783: a1 = a1 >> 0x20\n  8786: a3 = a3 | a1\n  8789: a0 = a0 >> 0x20\n  8792: a1 = reverse a2\n  8794: a2 = a1 << 0x20\n  8797: a2 = a2 | a0\n  8800: a1 = a1 >> 0x20\n  8803: i32 a0 = a4 + 0x4\n  8806: a5 = s1 + 0x1878\n  8810: u64 [a5 + 384] = 0\n  8814: a4 = a5 + 0x100\n  8818: u64 [a4 + 0x78] = a1\n  8821: u64 [a4 + 0x70] = a2\n  8824: a1 = s1 + 0x19e0\n  8828: u64 [a4 + 0x68] = a3\n  8831: ra = 242, jump @9\n      : @320 [@dyn 121] (gas: 26)\n  8837: ecalli 11 // 'ref_time_left'\n  8839: a0 = u64 [s1 + 0xd8]\n  8843: a0 = reverse a0\n  8845: a1 = a0 << 0x20\n  8848: a2 = u64 [s1 + 0xe0]\n  8852: a2 = reverse a2\n  8854: a2 = a2 >> 0x20\n  8857: a1 = a1 | a2\n  8860: a2 = u64 [s1 + 0xe8]\n  8864: a2 = reverse a2\n  8866: a3 = a2 << 0x20\n  8869: a0 = a0 >> 0x20\n  8872: a0 = a0 | a3\n  8875: a2 = a2 >> 0x20\n  8878: a3 = u64 [s1 + 0xf0]\n  8882: u64 [a3 + 0x8] = a0\n  8885: u64 [a3] = a1\n  8887: u32 [a3 + 0x10] = a2\n  8890: a0 = s1 + 0x2078\n  8894: u64 [a0 + 1536] = 0\n  8898: u64 [a0 + 1528] = 0\n  8902: u64 [a0 + 1520] = 0\n  8906: u64 [a0 + 1512] = 0\n  8910: a1 = 0x24\n  8913: a0 = u64 [s1 + 0xf8]\n  8917: ra = 244, jump @20\n      : @321 [@dyn 122] (gas: 4)\n  8923: u64 [s1 + 0xe8] = a0\n  8927: a1 = 0x20\n  8930: a0 = u64 [s1 + 0xf8]\n  8934: ra = 246, jump @20\n      : @322 [@dyn 123] (gas: 33)\n  8940: a2 = s1 + 0x2078\n  8944: a3 = a2 + 0x600\n  8948: u32 [a3 + 8] = 0x20\n  8952: u64 [a3 + 64] = 0xffffffffffffffff\n  8956: u64 [a3 + 56] = 0xffffffffffffffff\n  8960: u64 [a3 + 48] = 0xffffffffffffffff\n  8964: u64 [a3 + 40] = 0xffffffffffffffff\n  8968: a1 = u64 [s1 + 0xf0]\n  8972: a1 = a1 << 0x20\n  8975: a1 = a1 >> 0x20\n  8978: a2 = 0x800000000\n  8988: t0 = a1 | a2\n  8991: a1 = s1 + 0x2660\n  8995: a1 = a1 << 0x20\n  8998: a1 = a1 >> 0x20\n  9001: a2 = s1 + 0x26a0\n  9005: a2 = a2 << 0x20\n  9008: a3 = a2 | a1\n  9011: a1 = u64 [s1 + 0xe8]\n  9015: a1 = a1 << 0x20\n  9018: a1 = a1 >> 0x20\n  9021: a2 = 0x2400000000\n  9031: a4 = a1 | a2\n  9034: a0 = a0 << 0x20\n  9037: a0 = a0 >> 0x20\n  9040: a1 = s1 + 0x2680\n  9044: a1 = a1 << 0x20\n  9047: a5 = a1 | a0\n  9050: a1 = 0xffffffffffffffff\n  9053: a2 = 0xffffffffffffffff\n  9056: a0 = t0\n  9058: ecalli 0 // 'call'\n  9059: fallthrough\n      : @323 (gas: 1)\n  9060: jump @325 if a0 == 0\n      : @324 (gas: 1)\n  9063: jump @683\n      : @325 (gas: 2)\n  9066: ecalli 13 // 'return_data_size'\n  9068: fallthrough\n      : @326 (gas: 2)\n  9069: a5 = 0x20\n  9072: jump @328 if a0 >=u a5\n      : @327 (gas: 4)\n  9075: ecalli 13 // 'return_data_size'\n  9077: a5 = a0\n  9079: a2 = s1 + 0x1878\n  9083: jump @329\n      : @328 (gas: 2)\n  9085: a2 = s1 + 0x1878\n  9089: fallthrough\n      : @329 (gas: 18)\n  9090: a3 = u64 [s1 + 0xf8]\n  9094: t0 = u64 [s1 + 0xd0]\n  9098: a0 = u64 [s1 + 0xc8]\n  9102: a1 = u64 [s1 + 0xc0]\n  9106: u64 [s1 + 224] = 0\n  9110: u64 [s1 + 0xe8] = a5\n  9114: a4 = a2 + 0x100\n  9118: u64 [a4 + 0x8] = a5\n  9121: u64 [a4 + 0x28] = a3\n  9124: u64 [a2 + 272] = 0\n  9128: u64 [a4 + 0x30] = a1\n  9131: u64 [a2 + 280] = 0\n  9135: u64 [a4 + 0x38] = a0\n  9138: u64 [a2 + 288] = 0\n  9142: a0 = s1 + 0x19a0\n  9146: a1 = s1 + 0x1980\n  9150: u64 [a2 + 0x140] = t0\n  9154: ra = 248, jump @1133\n      : @330 [@dyn 124] (gas: 12)\n  9160: a3 = u64 [s1 + 0xe0]\n  9164: a0 = a3 >u 0\n  9166: a1 = u64 [s1 + 0xe8]\n  9170: a1 = a1 <u 0x20\n  9173: a1 = a1 ^ 0x1\n  9176: a1 = a0 if a3 != 0\n  9179: a0 = a3 >u 0\n  9181: a2 = a3 >u 0\n  9183: a2 = a0 if a3 == 0\n  9186: a0 = a3 | a3\n  9189: a2 = a1 if a0 == 0\n  9192: jump @332 if a2 != 0\n      : @331 (gas: 1)\n  9195: jump @798\n      : @332 (gas: 3)\n  9198: a0 = s1 + 0x1960\n  9202: a1 = u64 [s1 + 0xf8]\n  9206: ra = 250, jump @7\n      : @333 [@dyn 125] (gas: 13)\n  9212: a0 = s1 + 0x1878\n  9216: a1 = u64 [a0 + 0x100]\n  9220: a2 = u64 [a0 + 0xf8]\n  9224: a3 = u64 [a0 + 0xf0]\n  9228: a4 = u64 [a0 + 0xe8]\n  9232: u64 [s1 + 0xf8] = a1\n  9236: u64 [s1 + 0xe0] = a3\n  9240: a0 = a3 | a1\n  9243: u64 [s1 + 0xe8] = a2\n  9247: u64 [s1 + 0xd8] = a4\n  9251: a1 = a4 | a2\n  9254: a0 = a0 | a1\n  9257: jump @337 if a0 == 0\n      : @334 (gas: 6)\n  9260: a0 = u64 [s1 + 0xb8]\n  9264: ra = 0xfc\n  9268: ecalli 4 // 'caller'\n  9270: a2 = u64 [s1 + 0xf0]\n  9274: t0 = 0xfe\n  9278: jump @1321\n      : @335 [@dyn 126] (gas: 2)\n  9281: a2 = u64 [s1 + 0xf0]\n  9285: t0 = 254, jump @1321\n      : @336 [@dyn 127] (gas: 15)\n  9291: a4 = u64 [s1 + 0xf8]\n  9295: u64 [a2 + 0xc0] = a4\n  9299: a4 = u64 [s1 + 0xe8]\n  9303: u64 [a2 + 0xb8] = a4\n  9307: a4 = u64 [s1 + 0xe0]\n  9311: u64 [a2 + 0xb0] = a4\n  9315: a4 = u64 [s1 + 0xd8]\n  9319: u64 [a2 + 0xa8] = a4\n  9323: u64 [a2 + 224] = 0\n  9327: u64 [a2 + 0xd8] = a1\n  9331: u64 [a2 + 0xd0] = a0\n  9335: a0 = s1 + 0x1940\n  9339: a1 = s1 + 0x1920\n  9343: u64 [a2 + 0xc8] = a3\n  9347: ra = 256, jump @1142\n      : @337 [@dyn 128] (gas: 3)\n  9353: a0 = s1 + 0x1900\n  9357: a1 = 0x40\n  9360: ra = 258, jump @7\n      : @338 [@dyn 129] (gas: 6)\n  9366: a3 = s1 + 0x1878\n  9370: a0 = u64 [a3 + 0xa0]\n  9374: a1 = u64 [a3 + 0x98]\n  9378: a2 = u64 [a3 + 0x90]\n  9382: a4 = u64 [a3 + 0x88]\n  9386: t0 = 260, jump @1349\n      : @339 [@dyn 130] (gas: 1)\n  9392: jump @341 if a0 == 0\n      : @340 (gas: 1)\n  9395: jump @692\n      : @341 (gas: 13)\n  9398: a0 = u64 [s1 + 0xd8]\n  9402: u64 [a3 + 0x68] = a0\n  9405: a0 = u64 [s1 + 0xe0]\n  9409: u64 [a3 + 0x70] = a0\n  9412: a0 = u64 [s1 + 0xe8]\n  9416: u64 [a3 + 0x78] = a0\n  9419: a1 = s1 + 0x18e0\n  9423: a0 = u64 [s1 + 0xf8]\n  9427: u64 [a3 + 0x80] = a0\n  9431: a0 = a4\n  9433: u64 [s1 + 0xf8] = a4\n  9437: ra = 0x196\n  9441: jump @9\n      : @342 (gas: 9)\n  9444: u64 [a2 + 64] = 0\n  9447: u64 [a2 + 56] = 0\n  9450: u64 [a2 + 48] = 0\n  9453: u64 [a2 + 40] = 0\n  9456: a0 = s1 + 0x2000\n  9460: i32 a0 = a0 + 0xa0\n  9464: ecalli 17 // 'value_transferred'\n  9466: a3 = s1 + 0x2078\n  9470: fallthrough\n      : @343 (gas: 8)\n  9471: a0 = u64 [a3 + 0x38]\n  9474: a1 = u64 [a3 + 0x40]\n  9477: a2 = u64 [a3 + 0x30]\n  9480: a3 = u64 [a3 + 0x28]\n  9483: a1 = a1 | a2\n  9486: a0 = a0 | a3\n  9489: a0 = a0 | a1\n  9492: jump @345 if a0 == 0\n      : @344 (gas: 1)\n  9495: jump @745\n      : @345 (gas: 3)\n  9498: a0 = u64 [s1 + 0xf8]\n  9502: a0 = i32 [a0]\n  9504: jump @347 if a0 >u 67\n      : @346 (gas: 1)\n  9508: jump @746\n      : @347 (gas: 4)\n  9511: a0 = s1 + 0x580\n  9515: ra = 0x106\n  9519: t0 = 0x460\n  9523: jump @1366\n      : @348 [@dyn 131] (gas: 10)\n  9526: a0 = u64 [s1 + 0x580]\n  9530: u64 [s1 + 0xf0] = a0\n  9534: a0 = u64 [s1 + 0x588]\n  9538: u64 [s1 + 0xe8] = a0\n  9542: a0 = u32 [s1 + 0x590]\n  9546: u64 [s1 + 0xe0] = a0\n  9550: a0 = s1 + 0x560\n  9554: ra = 0x108\n  9558: t0 = 0x46a\n  9562: jump @1374\n      : @349 [@dyn 132] (gas: 12)\n  9565: a0 = u64 [s1 + 0x560]\n  9569: u64 [s1 + 0xf8] = a0\n  9573: u64 [s1 + 1368] = 0\n  9577: a0 = u64 [s1 + 0xe0]\n  9581: u64 [s1 + 0x550] = a0\n  9585: a0 = u64 [s1 + 0xe8]\n  9589: u64 [s1 + 0x548] = a0\n  9593: a1 = s1 + 0x540\n  9597: a0 = u64 [s1 + 0xf0]\n  9601: u64 [s1 + 0x540] = a0\n  9605: a0 = 0\n  9607: ra = 266, jump @9\n      : @350 [@dyn 133] (gas: 7)\n  9613: u64 [s1 + 1336] = 0\n  9617: u64 [s1 + 1328] = 0\n  9621: u64 [s1 + 1312] = 0x7\n  9626: a0 = 0x20\n  9629: a1 = s1 + 0x520\n  9633: u64 [s1 + 1320] = 0\n  9637: ra = 268, jump @9\n      : @351 [@dyn 134] (gas: 3)\n  9643: a1 = 0x20150\n  9648: a0 = i32 [0x20150]\n  9653: jump @353 if a0 >u 63\n      : @352 (gas: 2)\n  9657: u32 [0x20150] = 0x40\n  9663: fallthrough\n      : @353 (gas: 14)\n  9664: a0 = sp + 0xffffffffffffffe0\n  9667: a2 = a0 & 0xffffffffffffffe0\n  9670: u64 [s1 + 0xe0] = a2\n  9674: sp = a2\n  9676: a0 = 0x20160\n  9681: i32 a0 = a0 + 0\n  9683: i32 a2 = a2 + 0\n  9685: u64 [s1 + 0xf0] = a1\n  9689: a1 = 0x40\n  9692: u64 [s1 + 0xe8] = a0\n  9696: ra = 0x10e\n  9700: ecalli 9 // 'hash_keccak_256'\n  9702: t0 = 0x110\n  9706: jump @1325\n      : @354 [@dyn 135] (gas: 1)\n  9709: t0 = 272, jump @1325\n      : @355 [@dyn 136] (gas: 8)\n  9715: u64 [s1 + 1304] = 0\n  9719: u64 [s1 + 1296] = 0\n  9723: u64 [s1 + 1288] = 0\n  9727: a1 = s1 + 0x500\n  9731: a0 = u64 [s1 + 0xf8]\n  9735: u64 [s1 + 0x500] = a0\n  9739: a0 = 0\n  9741: ra = 274, jump @9\n      : @356 [@dyn 137] (gas: 12)\n  9747: a0 = u64 [s1 + 0xc0]\n  9751: a3 = s1 + 0x400\n  9755: u64 [a3 + 0xf8] = a0\n  9759: a0 = u64 [s1 + 0xc8]\n  9763: u64 [a3 + 0xf0] = a0\n  9767: a0 = u64 [s1 + 0xd0]\n  9771: u64 [a3 + 0xe8] = a0\n  9775: a0 = 0x20\n  9778: a1 = s1 + 0x4e0\n  9782: a2 = u64 [s1 + 0xd8]\n  9786: u64 [a3 + 0xe0] = a2\n  9790: ra = 276, jump @9\n      : @357 [@dyn 138] (gas: 3)\n  9796: a1 = u64 [s1 + 0xf0]\n  9800: a0 = i32 [a1]\n  9802: jump @359 if a0 >u 63\n      : @358 (gas: 2)\n  9806: u32 [a1 + 0] = 0x40\n  9809: fallthrough\n      : @359 (gas: 4)\n  9810: a0 = sp + 0xffffffffffffffe0\n  9813: a0 = a0 & 0xffffffffffffffe0\n  9816: u64 [s1 + 0xf8] = a0\n  9820: t0 = 278, jump @1335\n      : @360 [@dyn 139] (gas: 4)\n  9826: ra = 0x118\n  9830: ecalli 9 // 'hash_keccak_256'\n  9832: t0 = 0x11a\n  9836: jump @1329\n      : @361 [@dyn 140] (gas: 1)\n  9839: t0 = 282, jump @1329\n      : @362 [@dyn 141] (gas: 2)\n  9845: a0 = s1 + 0x4c0\n  9849: ra = 284, jump @11\n      : @363 [@dyn 142] (gas: 11)\n  9855: a0 = u64 [s1 + 0x4d8]\n  9859: u64 [s1 + 0xf8] = a0\n  9863: a0 = u64 [s1 + 0x4d0]\n  9867: u64 [s1 + 0xf0] = a0\n  9871: a0 = u64 [s1 + 0x4c8]\n  9875: u64 [s1 + 0xe8] = a0\n  9879: a0 = u64 [s1 + 0x4c0]\n  9883: u64 [s1 + 0xe0] = a0\n  9887: a0 = s1 + 0x4a0\n  9891: a1 = 0x40\n  9894: ra = 286, jump @7\n      : @364 [@dyn 143] (gas: 6)\n  9900: a4 = s1 + 0x400\n  9904: a0 = u64 [a4 + 0xb8]\n  9908: a1 = u64 [a4 + 0xb0]\n  9912: a2 = u64 [a4 + 0xa8]\n  9916: a3 = u64 [a4 + 0xa0]\n  9920: t0 = 288, jump @1334\n      : @365 [@dyn 144] (gas: 1)\n  9926: jump @367 if a0 == 0\n      : @366 (gas: 1)\n  9929: jump @692\n      : @367 (gas: 14)\n  9932: a0 = u64 [s1 + 0xe0]\n  9936: a2 = s1 + 0x400\n  9940: u64 [a2 + 0x80] = a0\n  9944: a0 = u64 [s1 + 0xe8]\n  9948: u64 [a2 + 0x88] = a0\n  9952: a0 = u64 [s1 + 0xf0]\n  9956: u64 [a2 + 0x90] = a0\n  9960: a1 = s1 + 0x480\n  9964: a0 = u64 [s1 + 0xf8]\n  9968: u64 [a2 + 0x98] = a0\n  9972: a0 = a3\n  9974: u64 [s1 + 0xf8] = a3\n  9978: ra = 0x196\n  9982: jump @9\n      : @368 (gas: 11)\n  9985: u64 [a2 + 512] = 0\n  9989: u64 [a2 + 504] = 0\n  9993: u64 [a2 + 496] = 0\n  9997: u64 [a2 + 488] = 0\n 10001: a0 = s1 + 0x2000\n 10005: i32 a0 = a0 + 0x260\n 10009: ra = 0x122\n 10013: ecalli 17 // 'value_transferred'\n 10015: a0 = 0x2000\n 10019: t0 = 0x124\n 10023: jump @1367\n      : @369 [@dyn 145] (gas: 2)\n 10026: a0 = 0x2000\n 10030: t0 = 292, jump @1367\n      : @370 [@dyn 146] (gas: 8)\n 10036: a0 = u64 [a4 + 0xf8]\n 10040: a1 = u64 [a3 + 0x200]\n 10044: a2 = u64 [a4 + 0xf0]\n 10048: a3 = u64 [a4 + 0xe8]\n 10052: a1 = a1 | a2\n 10055: a0 = a0 | a3\n 10058: a0 = a0 | a1\n 10061: jump @372 if a0 == 0\n      : @371 (gas: 1)\n 10064: jump @747\n      : @372 (gas: 3)\n 10067: a0 = u64 [s1 + 0xf8]\n 10071: a0 = i32 [a0]\n 10073: jump @374 if a0 >u 3\n      : @373 (gas: 1)\n 10077: jump @748\n      : @374 (gas: 9)\n 10080: a0 = s1 + 0x2078\n 10084: u64 [a0 + 544] = 0\n 10088: u64 [a0 + 536] = 0\n 10092: u64 [a0 + 528] = 0\n 10096: u64 [a0 + 520] = 0\n 10100: a0 = s1 + 0x7ff\n 10104: a0 = a0 + 0x2a1\n 10108: a1 = s1 + 0x2280\n 10112: ra = 294, jump @11\n      : @375 [@dyn 147] (gas: 13)\n 10118: a1 = s1 + 0x7ff\n 10122: a1 = a1 + 0x79\n 10125: a2 = a1 + 0x200\n 10129: a0 = u64 [a2 + 0x38]\n 10132: u64 [s1 + 0xe8] = a0\n 10136: a0 = u64 [a2 + 0x30]\n 10139: u64 [s1 + 0xf8] = a0\n 10143: a0 = u64 [a2 + 0x28]\n 10146: u64 [s1 + 0xf0] = a0\n 10150: a0 = s1 + 0x7ff\n 10154: a0 = a0 + 0x281\n 10158: a1 = 0x40\n 10161: ra = 296, jump @7\n      : @376 [@dyn 148] (gas: 15)\n 10167: a3 = s1 + 0x7ff\n 10171: a3 = a3 + 0x79\n 10174: a5 = a3 + 0x200\n 10178: a4 = u64 [a5 + 0x20]\n 10181: a1 = u64 [a5 + 0x18]\n 10184: a2 = u64 [a5 + 0x10]\n 10187: a0 = u64 [a5 + 0x8]\n 10190: a4 = a4 | a2\n 10193: a2 = a0 | a1\n 10196: a2 = a2 | a4\n 10199: a2 = a2 >> 0x20\n 10202: a1 = a1 | a4\n 10205: a1 = a1 << 0x20\n 10208: a1 = a1 | a2\n 10211: jump @378 if a1 == 0\n      : @377 (gas: 1)\n 10214: jump @692\n      : @378 (gas: 15)\n 10217: a1 = u64 [s1 + 0xe8]\n 10221: a1 = a1 << 0x20\n 10224: a2 = a1 >> 0x20\n 10227: u64 [a3 + 512] = 0\n 10231: a1 = u64 [s1 + 0xf0]\n 10235: a4 = a3 + 0x100\n 10239: u64 [a4 + 0xe8] = a1\n 10243: a1 = u64 [s1 + 0xf8]\n 10247: u64 [a4 + 0xf0] = a1\n 10251: a1 = s1 + 0x7ff\n 10255: a1 = a1 + 0x261\n 10259: u64 [a4 + 0xf8] = a2\n 10263: u64 [s1 + 0xf8] = a0\n 10267: ra = 0x196\n 10271: jump @9\n      : @379 (gas: 9)\n 10274: u64 [a2 + 32] = 0\n 10277: u64 [a2 + 24] = 0\n 10280: u64 [a2 + 16] = 0\n 10283: u64 [a2 + 8] = 0\n 10286: a0 = s1 + 0x2000\n 10290: i32 a0 = a0 + 0x80\n 10294: ecalli 17 // 'value_transferred'\n 10296: a3 = s1 + 0x2078\n 10300: fallthrough\n      : @380 (gas: 8)\n 10301: a0 = u64 [a3 + 0x18]\n 10304: a1 = u64 [a3 + 0x20]\n 10307: a2 = u64 [a3 + 0x10]\n 10310: a3 = u64 [a3 + 0x8]\n 10313: a1 = a1 | a2\n 10316: a0 = a0 | a3\n 10319: a0 = a0 | a1\n 10322: jump @382 if a0 == 0\n      : @381 (gas: 1)\n 10325: jump @767\n      : @382 (gas: 3)\n 10328: a0 = u64 [s1 + 0xf8]\n 10332: a0 = i32 [a0]\n 10334: jump @384 if a0 >u 67\n      : @383 (gas: 1)\n 10338: jump @749\n      : @384 (gas: 4)\n 10341: a0 = s1 + 0x460\n 10345: ra = 0x12a\n 10349: t0 = 0x460\n 10353: jump @1366\n      : @385 [@dyn 149] (gas: 10)\n 10356: a0 = u64 [s1 + 0x460]\n 10360: u64 [s1 + 0xf0] = a0\n 10364: a0 = u64 [s1 + 0x468]\n 10368: u64 [s1 + 0xe8] = a0\n 10372: a0 = u32 [s1 + 0x470]\n 10376: u64 [s1 + 0xe0] = a0\n 10380: a0 = s1 + 0x440\n 10384: ra = 0x12c\n 10388: t0 = 0x46a\n 10392: jump @1374\n      : @386 [@dyn 150] (gas: 12)\n 10395: a0 = u64 [s1 + 0x440]\n 10399: u64 [s1 + 0xf8] = a0\n 10403: u64 [s1 + 1080] = 0\n 10407: a0 = u64 [s1 + 0xe0]\n 10411: u64 [s1 + 0x430] = a0\n 10415: a0 = u64 [s1 + 0xe8]\n 10419: u64 [s1 + 0x428] = a0\n 10423: a1 = s1 + 0x420\n 10427: a0 = u64 [s1 + 0xf0]\n 10431: u64 [s1 + 0x420] = a0\n 10435: a0 = 0\n 10437: ra = 302, jump @9\n      : @387 [@dyn 151] (gas: 7)\n 10443: u64 [s1 + 1048] = 0\n 10447: u64 [s1 + 1040] = 0\n 10451: u64 [s1 + 1024] = 0x5\n 10456: a0 = 0x20\n 10459: a1 = s1 + 0x400\n 10463: u64 [s1 + 1032] = 0\n 10467: ra = 304, jump @9\n      : @388 [@dyn 152] (gas: 3)\n 10473: a1 = 0x20150\n 10478: a0 = i32 [0x20150]\n 10483: jump @390 if a0 >u 63\n      : @389 (gas: 2)\n 10487: u32 [0x20150] = 0x40\n 10493: fallthrough\n      : @390 (gas: 14)\n 10494: a0 = sp + 0xffffffffffffffe0\n 10497: a2 = a0 & 0xffffffffffffffe0\n 10500: u64 [s1 + 0xe0] = a2\n 10504: sp = a2\n 10506: a0 = 0x20160\n 10511: i32 a0 = a0 + 0\n 10513: i32 a2 = a2 + 0\n 10515: u64 [s1 + 0xf0] = a1\n 10519: a1 = 0x40\n 10522: u64 [s1 + 0xe8] = a0\n 10526: ra = 0x132\n 10530: ecalli 9 // 'hash_keccak_256'\n 10532: t0 = 0x134\n 10536: jump @1325\n      : @391 [@dyn 153] (gas: 1)\n 10539: t0 = 308, jump @1325\n      : @392 [@dyn 154] (gas: 8)\n 10545: u64 [s1 + 1016] = 0\n 10549: u64 [s1 + 1008] = 0\n 10553: u64 [s1 + 1000] = 0\n 10557: a1 = s1 + 0x3e0\n 10561: a0 = u64 [s1 + 0xf8]\n 10565: u64 [s1 + 0x3e0] = a0\n 10569: a0 = 0\n 10571: ra = 310, jump @9\n      : @393 [@dyn 155] (gas: 12)\n 10577: a0 = u64 [s1 + 0xc0]\n 10581: a3 = s1 + 0x300\n 10585: u64 [a3 + 0xd8] = a0\n 10589: a0 = u64 [s1 + 0xc8]\n 10593: u64 [a3 + 0xd0] = a0\n 10597: a0 = u64 [s1 + 0xd0]\n 10601: u64 [a3 + 0xc8] = a0\n 10605: a0 = 0x20\n 10608: a1 = s1 + 0x3c0\n 10612: a2 = u64 [s1 + 0xd8]\n 10616: u64 [a3 + 0xc0] = a2\n 10620: ra = 312, jump @9\n      : @394 [@dyn 156] (gas: 3)\n 10626: a1 = u64 [s1 + 0xf0]\n 10630: a0 = i32 [a1]\n 10632: jump @396 if a0 >u 63\n      : @395 (gas: 2)\n 10636: u32 [a1 + 0] = 0x40\n 10639: fallthrough\n      : @396 (gas: 4)\n 10640: a0 = sp + 0xffffffffffffffe0\n 10643: a0 = a0 & 0xffffffffffffffe0\n 10646: u64 [s1 + 0xf8] = a0\n 10650: t0 = 314, jump @1335\n      : @397 [@dyn 157] (gas: 4)\n 10656: ra = 0x13c\n 10660: ecalli 9 // 'hash_keccak_256'\n 10662: t0 = 0x13e\n 10666: jump @1329\n      : @398 [@dyn 158] (gas: 1)\n 10669: t0 = 318, jump @1329\n      : @399 [@dyn 159] (gas: 2)\n 10675: a0 = s1 + 0x3a0\n 10679: ra = 320, jump @11\n      : @400 [@dyn 160] (gas: 11)\n 10685: a0 = u64 [s1 + 0x3b8]\n 10689: u64 [s1 + 0xf8] = a0\n 10693: a0 = u64 [s1 + 0x3b0]\n 10697: u64 [s1 + 0xf0] = a0\n 10701: a0 = u64 [s1 + 0x3a8]\n 10705: u64 [s1 + 0xe8] = a0\n 10709: a0 = u64 [s1 + 0x3a0]\n 10713: u64 [s1 + 0xe0] = a0\n 10717: a0 = s1 + 0x380\n 10721: a1 = 0x40\n 10724: ra = 322, jump @7\n      : @401 [@dyn 161] (gas: 6)\n 10730: a4 = s1 + 0x300\n 10734: a0 = u64 [a4 + 0x98]\n 10738: a1 = u64 [a4 + 0x90]\n 10742: a2 = u64 [a4 + 0x88]\n 10746: a3 = u64 [a4 + 0x80]\n 10750: t0 = 324, jump @1334\n      : @402 [@dyn 162] (gas: 1)\n 10756: jump @404 if a0 == 0\n      : @403 (gas: 1)\n 10759: jump @692\n      : @404 (gas: 14)\n 10762: a0 = u64 [s1 + 0xe0]\n 10766: a2 = s1 + 0x300\n 10770: u64 [a2 + 0x60] = a0\n 10773: a0 = u64 [s1 + 0xe8]\n 10777: u64 [a2 + 0x68] = a0\n 10780: a0 = u64 [s1 + 0xf0]\n 10784: u64 [a2 + 0x70] = a0\n 10787: a1 = s1 + 0x360\n 10791: a0 = u64 [s1 + 0xf8]\n 10795: u64 [a2 + 0x78] = a0\n 10798: a0 = a3\n 10800: u64 [s1 + 0xf8] = a3\n 10804: ra = 0x196\n 10808: jump @9\n      : @405 (gas: 3)\n 10811: a0 = u64 [s1 + 0xf8]\n 10815: a0 = i32 [a0]\n 10817: jump @407 if a0 >u 3\n      : @406 (gas: 1)\n 10821: jump @750\n      : @407 (gas: 10)\n 10824: u64 [a2 + 1376] = 0\n 10828: u64 [a2 + 1368] = 0\n 10832: u64 [a2 + 1360] = 0\n 10836: u64 [a2 + 1352] = 0\n 10840: a0 = s1 + 0x2000\n 10844: i32 a0 = a0 + 0x5c0\n 10848: ra = 0x146\n 10852: ecalli 17 // 'value_transferred'\n 10854: t0 = 0x148\n 10858: jump @1369\n      : @408 [@dyn 163] (gas: 1)\n 10861: t0 = 328, jump @1369\n      : @409 [@dyn 164] (gas: 1)\n 10867: t0 = 330, jump @1359\n      : @410 [@dyn 165] (gas: 1)\n 10873: jump @412 if a0 != 0\n      : @411 (gas: 1)\n 10876: jump @751\n      : @412 (gas: 9)\n 10879: a0 = 0x30160\n 10884: u64 [s1 + 0xe0] = a0\n 10888: i32 a0 = a0 + 0\n 10890: u64 [s1 + 0xb8] = a0\n 10894: ra = 0x14c\n 10898: ecalli 4 // 'caller'\n 10900: a2 = u64 [s1 + 0xe0]\n 10904: t0 = 0x14e\n 10908: jump @1321\n      : @413 [@dyn 166] (gas: 2)\n 10911: a2 = u64 [s1 + 0xe0]\n 10915: t0 = 334, jump @1321\n      : @414 [@dyn 167] (gas: 7)\n 10921: u64 [a2 + 64] = 0\n 10924: u64 [a2 + 0x38] = a1\n 10927: u64 [a2 + 0x30] = a0\n 10930: a1 = s1 + 0x18a0\n 10934: u64 [a2 + 0x28] = a3\n 10937: a0 = 0\n 10939: ra = 336, jump @9\n      : @415 [@dyn 168] (gas: 3)\n 10945: t0 = 0x152\n 10949: a1 = s1 + 0x1878\n 10953: fallthrough\n      : @416 [@dyn 169] (gas: 8)\n 10954: u64 [a1 + 32] = 0\n 10957: u64 [a1 + 24] = 0\n 10960: u64 [a1 + 8] = 0x2\n 10964: a2 = a1\n 10966: a0 = 0x20\n 10969: a1 = s1 + 0x1880\n 10973: u64 [a2 + 16] = 0\n 10976: ra = 340, jump @9\n      : @417 [@dyn 170] (gas: 7)\n 10982: a0 = sp + 0xffffffffffffffe0\n 10985: a0 = a0 & 0xffffffffffffffe0\n 10988: u64 [s1 + 0xf8] = a0\n 10992: sp = a0\n 10994: a2 = 0x20150\n 10999: a0 = i32 [0x20150]\n 11004: jump @419 if a0 >u 63\n      : @418 (gas: 2)\n 11008: u32 [0x20150] = 0x40\n 11014: fallthrough\n      : @419 (gas: 14)\n 11015: u64 [s1 + 0xb0] = a2\n 11019: a0 = sp + 0xffffffffffffffe0\n 11022: a2 = a0 & 0xffffffffffffffe0\n 11025: u64 [s1 + 0xf0] = a2\n 11029: sp = a2\n 11031: a0 = 0x20160\n 11036: i32 a0 = a0 + 0\n 11038: i32 a2 = a2 + 0\n 11040: a1 = 0x40\n 11043: u64 [s1 + 0xc0] = a0\n 11047: ra = 0x156\n 11051: ecalli 9 // 'hash_keccak_256'\n 11053: t0 = 0x158\n 11057: jump @1340\n      : @420 [@dyn 171] (gas: 1)\n 11060: t0 = 344, jump @1340\n      : @421 [@dyn 172] (gas: 3)\n 11066: i32 a0 = a0 + 0xfffffffffffff860\n 11070: a0 = a0 + s1\n 11073: ra = 346, jump @11\n      : @422 [@dyn 173] (gas: 23)\n 11079: a0 = s1 + 0x1878\n 11083: a1 = u64 [a0]\n 11085: u64 [s1 + 0xd0] = a1\n 11089: a2 = a0 + 0xffffffffffffff00\n 11093: a1 = u64 [a2 + 0xf8]\n 11097: u64 [s1 + 0xf0] = a1\n 11101: a1 = u64 [a2 + 0xe8]\n 11105: u64 [s1 + 0xc8] = a1\n 11109: a0 = u64 [a2 + 0xf0]\n 11113: u64 [s1 + 0xe8] = a0\n 11117: a0 = sp + 0xffffffffffffffe0\n 11120: a0 = a0 & 0xffffffffffffffe0\n 11123: u64 [s1 + 0xd8] = a0\n 11127: sp = a0\n 11129: a0 = s1 + 0x2078\n 11133: u64 [a0 + 1408] = 0\n 11137: u64 [a0 + 1400] = 0\n 11141: u64 [a0 + 1392] = 0\n 11145: u64 [a0 + 1384] = 0\n 11149: a0 = s1 + 0x2000\n 11153: i32 a0 = a0 + 0x5e0\n 11157: ecalli 17 // 'value_transferred'\n 11159: fallthrough\n      : @423 (gas: 43)\n 11160: a0 = s1 + 0x2078\n 11164: a3 = a0 + 0x500\n 11168: a2 = u64 [a3 + 0x70]\n 11171: a1 = u64 [a3 + 0x68]\n 11174: t0 = u64 [a0 + 0x580]\n 11178: a4 = u64 [a3 + 0x78]\n 11181: a5 = u64 [s1 + 0xe8]\n 11185: a5 = a5 + a2\n 11188: a0 = u64 [s1 + 0xc8]\n 11192: t1 = a1 + a0\n 11195: a1 = t1 <u a1\n 11198: a5 = a5 + a1\n 11201: a3 = a5 ^ a2\n 11204: a2 = a5 <u a2\n 11207: a2 = a1 if a3 == 0\n 11210: a1 = u64 [s1 + 0xf0]\n 11214: a1 = a1 + a4\n 11217: ra = u64 [s1 + 0xd0]\n 11221: t0 = t0 + ra\n 11224: a3 = a1 <u a4\n 11227: a3 = a3 + t0\n 11230: a2 = a2 + a1\n 11233: a1 = a2 <u a1\n 11236: t2 = a3 + a1\n 11239: a3 = u64 [s1 + 0xe8]\n 11243: a1 = a3 ^ a5\n 11246: a4 = a5 <u a3\n 11249: a0 = t1 <u a0\n 11252: a0 = a4 if a1 != 0\n 11255: a3 = u64 [s1 + 0xf0]\n 11259: t0 = a2 <u a3\n 11262: a4 = ra ^ t2\n 11265: a1 = t2 <u ra\n 11268: a1 = t0 if a4 == 0\n 11271: a3 = a3 ^ a2\n 11274: a3 = a3 | a4\n 11277: a0 = a1 if a3 != 0\n 11280: a1 = u64 [s1 + 0xd8]\n 11284: u64 [a1] = t1\n 11286: u64 [a1 + 0x8] = a5\n 11289: u64 [a1 + 0x10] = a2\n 11292: u64 [a1 + 0x18] = t2\n 11295: jump @425 if a0 == 0\n      : @424 (gas: 1)\n 11298: jump @768\n      : @425 (gas: 2)\n 11301: a0 = u64 [s1 + 0xf8]\n 11305: ra = 348, jump @12\n      : @426 [@dyn 174] (gas: 3)\n 11311: a0 = s1 + 0x1840\n 11315: a1 = 0x40\n 11318: ra = 350, jump @7\n      : @427 [@dyn 175] (gas: 20)\n 11324: a0 = s1 + 0x1078\n 11328: a2 = a0 + 0x700\n 11332: a1 = u64 [a2 + 0xe0]\n 11336: u64 [s1 + 0xf0] = a1\n 11340: a1 = u64 [a2 + 0xd8]\n 11344: u64 [s1 + 0xe8] = a1\n 11348: a1 = u64 [a2 + 0xd0]\n 11352: u64 [s1 + 0xd8] = a1\n 11356: a0 = u64 [a2 + 0xc8]\n 11360: u64 [s1 + 0xf8] = a0\n 11364: a0 = s1 + 0x2078\n 11368: u64 [a0 + 1440] = 0\n 11372: u64 [a0 + 1432] = 0\n 11376: u64 [a0 + 1424] = 0\n 11380: u64 [a0 + 1416] = 0\n 11384: a0 = s1 + 0x2000\n 11388: i32 a0 = a0 + 0x600\n 11392: ra = 0x160\n 11396: ecalli 17 // 'value_transferred'\n 11398: fallthrough\n      : @428 [@dyn 176] (gas: 13)\n 11399: a0 = u64 [s1 + 0xf0]\n 11403: a1 = u64 [s1 + 0xd8]\n 11407: a0 = a0 | a1\n 11410: a1 = u64 [s1 + 0xf8]\n 11414: a5 = a1\n 11416: a2 = u64 [s1 + 0xe8]\n 11420: a1 = a1 | a2\n 11423: a1 = a1 | a0\n 11426: a1 = a1 >> 0x20\n 11429: a0 = a0 | a2\n 11432: a0 = a0 << 0x20\n 11435: a0 = a0 | a1\n 11438: jump @430 if a0 == 0\n      : @429 (gas: 1)\n 11441: jump @692\n      : @430 (gas: 1)\n 11444: t0 = 354, jump @1369\n      : @431 [@dyn 177] (gas: 13)\n 11450: a0 = u64 [a4 + 0x88]\n 11454: a1 = u64 [a4 + 0x90]\n 11458: a2 = u64 [a4 + 0x98]\n 11462: a3 = u64 [a4 + 0xa0]\n 11466: a4 = s1 + 0x1078\n 11470: u64 [a4 + 0x7c0] = a3\n 11474: a3 = a4 + 0x700\n 11478: u64 [a3 + 0xb8] = a2\n 11482: u64 [a3 + 0xb0] = a1\n 11486: a1 = s1 + 0x1820\n 11490: u64 [a3 + 0xa8] = a0\n 11494: a0 = a5\n 11496: ra = 356, jump @9\n      : @432 [@dyn 178] (gas: 6)\n 11502: a0 = u64 [s1 + 0xb8]\n 11506: ra = 0x166\n 11510: ecalli 4 // 'caller'\n 11512: a2 = u64 [s1 + 0xe0]\n 11516: t0 = 0x168\n 11520: jump @1337\n      : @433 [@dyn 179] (gas: 2)\n 11523: a2 = u64 [s1 + 0xe0]\n 11527: t0 = 360, jump @1337\n      : @434 [@dyn 180] (gas: 50)\n 11533: t0 = a1 | a0\n 11536: a3 = a3 >> 0x20\n 11539: a2 = reverse a2\n 11541: a1 = a2 << 0x20\n 11544: a1 = a1 | a3\n 11547: a2 = a2 >> 0x20\n 11550: a3 = u64 [0x20020]\n 11555: a0 = s1 + 0x1078\n 11559: u64 [a0 + 0x7a0] = a3\n 11563: a3 = u64 [0x20028]\n 11568: a4 = u64 [0x20030]\n 11573: a5 = u64 [0x20038]\n 11578: u64 [a0 + 0x798] = a3\n 11582: a3 = a0 + 0x700\n 11586: u64 [a3 + 0x90] = a4\n 11590: u64 [a0 + 1920] = 0\n 11594: u64 [a3 + 0x88] = a5\n 11598: u64 [a3 + 0x78] = a2\n 11601: u64 [a3 + 0x70] = a1\n 11604: a1 = 0x20\n 11607: a2 = s1 + 0x1800\n 11611: a3 = s1 + 0x17e0\n 11615: u64 [a0 + 0x768] = t0\n 11619: a0 = u64 [s1 + 0xf8]\n 11623: ra = 0x16a\n 11627: sp = sp + 0xffffffffffffff60\n 11631: u64 [sp + 0x98] = ra\n 11635: u64 [sp + 0x90] = s0\n 11639: u64 [sp + 0x88] = s1\n 11643: s0 = sp + 0xa0\n 11647: sp = sp & 0xffffffffffffffe0\n 11650: a4 = u64 [a3]\n 11652: u64 [sp + 0x38] = a4\n 11655: a4 = u64 [a3 + 0x8]\n 11658: u64 [sp + 0x30] = a4\n 11661: a4 = u64 [a3 + 0x10]\n 11664: u64 [sp + 0x28] = a4\n 11667: a3 = u64 [a3 + 0x18]\n 11670: u64 [sp + 0x20] = a3\n 11673: a3 = u64 [a2]\n 11675: u64 [sp + 0x18] = a3\n 11678: a3 = u64 [a2 + 0x8]\n 11681: u64 [sp + 0x10] = a3\n 11684: a3 = u64 [a2 + 0x10]\n 11687: u64 [sp + 0x8] = a3\n 11690: a2 = u64 [a2 + 0x18]\n 11693: u64 [sp] = a2\n 11695: s1 = a1\n 11697: ra = 0x6\n 11700: jump @20\n      : @435 [@dyn 181] (gas: 5)\n 11703: a0 = 0\n 11705: a1 = u64 [s1 + 0xc0]\n 11709: a2 = 0\n 11711: ecalli 14 // 'seal_return'\n 11713: jump @1072\n      : @436 (gas: 10)\n 11716: u64 [a2 + 1248] = 0\n 11720: u64 [a2 + 1240] = 0\n 11724: u64 [a2 + 1232] = 0\n 11728: u64 [a2 + 1224] = 0\n 11732: a0 = s1 + 0x2000\n 11736: i32 a0 = a0 + 0x540\n 11740: ra = 0x16c\n 11744: ecalli 17 // 'value_transferred'\n 11746: t0 = 0x16e\n 11750: jump @1354\n      : @437 [@dyn 182] (gas: 1)\n 11753: t0 = 366, jump @1354\n      : @438 [@dyn 183] (gas: 1)\n 11759: t0 = 368, jump @1368\n      : @439 [@dyn 184] (gas: 1)\n 11765: jump @441 if a0 == 0\n      : @440 (gas: 1)\n 11768: jump @774\n      : @441 (gas: 3)\n 11771: a0 = u64 [s1 + 0xf8]\n 11775: a0 = i32 [a0]\n 11777: jump @443 if a0 >u 67\n      : @442 (gas: 1)\n 11781: jump @775\n      : @443 (gas: 4)\n 11784: a0 = s1 + 0x1580\n 11788: ra = 0x172\n 11792: t0 = 0x460\n 11796: jump @1366\n      : @444 [@dyn 185] (gas: 11)\n 11799: a1 = s1 + 0x1078\n 11803: a0 = u64 [a1 + 0x508]\n 11807: u64 [s1 + 0xf0] = a0\n 11811: a0 = u64 [a1 + 0x510]\n 11815: u64 [s1 + 0xe8] = a0\n 11819: a0 = u32 [a1 + 0x518]\n 11823: u64 [s1 + 0xe0] = a0\n 11827: a0 = s1 + 0x1560\n 11831: ra = 0x174\n 11835: t0 = 0x46a\n 11839: jump @1374\n      : @445 [@dyn 186] (gas: 3)\n 11842: t0 = 0x176\n 11846: a2 = s1 + 0x1078\n 11850: fallthrough\n      : @446 [@dyn 187] (gas: 13)\n 11851: a3 = a2 + 0x400\n 11855: a0 = u64 [a3 + 0xe8]\n 11859: u64 [s1 + 0xf8] = a0\n 11863: u64 [a2 + 1248] = 0\n 11867: a0 = u64 [s1 + 0xe0]\n 11871: u64 [a3 + 0xd8] = a0\n 11875: a0 = u64 [s1 + 0xe8]\n 11879: u64 [a3 + 0xd0] = a0\n 11883: a1 = s1 + 0x1540\n 11887: a0 = u64 [s1 + 0xf0]\n 11891: u64 [a3 + 0xc8] = a0\n 11895: a0 = 0\n 11897: ra = 376, jump @9\n      : @447 [@dyn 188] (gas: 3)\n 11903: t0 = 0x17a\n 11907: a1 = s1 + 0x1078\n 11911: fallthrough\n      : @448 [@dyn 189] (gas: 8)\n 11912: u64 [a1 + 1216] = 0\n 11916: u64 [a1 + 1208] = 0\n 11920: u64 [a1 + 1192] = 0x6\n 11925: a2 = a1\n 11927: a0 = 0x20\n 11930: a1 = s1 + 0x1520\n 11934: u64 [a2 + 1200] = 0\n 11938: ra = 380, jump @9\n      : @449 [@dyn 190] (gas: 3)\n 11944: a1 = 0x20150\n 11949: a0 = i32 [0x20150]\n 11954: jump @451 if a0 >u 63\n      : @450 (gas: 2)\n 11958: u32 [0x20150] = 0x40\n 11964: fallthrough\n      : @451 (gas: 14)\n 11965: a0 = sp + 0xffffffffffffffe0\n 11968: a2 = a0 & 0xffffffffffffffe0\n 11971: u64 [s1 + 0xe0] = a2\n 11975: sp = a2\n 11977: a0 = 0x20160\n 11982: i32 a0 = a0 + 0\n 11984: i32 a2 = a2 + 0\n 11986: u64 [s1 + 0xf0] = a1\n 11990: a1 = 0x40\n 11993: u64 [s1 + 0xe8] = a0\n 11997: ra = 0x17e\n 12001: ecalli 9 // 'hash_keccak_256'\n 12003: t0 = 0x180\n 12007: jump @1325\n      : @452 [@dyn 191] (gas: 1)\n 12010: t0 = 384, jump @1325\n      : @453 [@dyn 192] (gas: 3)\n 12016: t0 = 0x182\n 12020: a2 = s1 + 0x1078\n 12024: fallthrough\n      : @454 [@dyn 193] (gas: 8)\n 12025: u64 [a2 + 1184] = 0\n 12029: u64 [a2 + 1176] = 0\n 12033: u64 [a2 + 1168] = 0\n 12037: a1 = s1 + 0x1500\n 12041: a0 = u64 [s1 + 0xf8]\n 12045: u64 [a2 + 0x488] = a0\n 12049: a0 = 0\n 12051: ra = 388, jump @9\n      : @455 [@dyn 194] (gas: 14)\n 12057: a0 = u64 [s1 + 0xc0]\n 12061: a1 = s1 + 0x1078\n 12065: a2 = a1 + 0x400\n 12069: u64 [a2 + 0x80] = a0\n 12073: a0 = u64 [s1 + 0xc8]\n 12077: u64 [a2 + 0x78] = a0\n 12080: a0 = u64 [s1 + 0xd0]\n 12084: u64 [a2 + 0x70] = a0\n 12087: a3 = a1\n 12089: a0 = 0x20\n 12092: a1 = s1 + 0x14e0\n 12096: a2 = u64 [s1 + 0xd8]\n 12100: u64 [a3 + 0x468] = a2\n 12104: ra = 390, jump @9\n      : @456 [@dyn 195] (gas: 3)\n 12110: a1 = u64 [s1 + 0xf0]\n 12114: a0 = i32 [a1]\n 12116: jump @458 if a0 >u 63\n      : @457 (gas: 2)\n 12120: u32 [a1 + 0] = 0x40\n 12123: fallthrough\n      : @458 (gas: 4)\n 12124: a0 = sp + 0xffffffffffffffe0\n 12127: a0 = a0 & 0xffffffffffffffe0\n 12130: u64 [s1 + 0xf8] = a0\n 12134: t0 = 392, jump @1335\n      : @459 [@dyn 196] (gas: 4)\n 12140: ra = 0x18a\n 12144: ecalli 9 // 'hash_keccak_256'\n 12146: t0 = 0x18c\n 12150: jump @1329\n      : @460 [@dyn 197] (gas: 1)\n 12153: t0 = 396, jump @1329\n      : @461 [@dyn 198] (gas: 2)\n 12159: a0 = s1 + 0x14c0\n 12163: ra = 398, jump @11\n      : @462 [@dyn 199] (gas: 3)\n 12169: t0 = 0x190\n 12173: a1 = s1 + 0x1078\n 12177: fallthrough\n      : @463 [@dyn 200] (gas: 12)\n 12178: a2 = a1 + 0x400\n 12182: a0 = u64 [a2 + 0x60]\n 12185: u64 [s1 + 0xf8] = a0\n 12189: a0 = u64 [a2 + 0x58]\n 12192: u64 [s1 + 0xf0] = a0\n 12196: a0 = u64 [a2 + 0x50]\n 12199: u64 [s1 + 0xe8] = a0\n 12203: a0 = u64 [a2 + 0x48]\n 12206: u64 [s1 + 0xe0] = a0\n 12210: a0 = s1 + 0x14a0\n 12214: a1 = 0x40\n 12217: ra = 402, jump @7\n      : @464 [@dyn 201] (gas: 7)\n 12223: a3 = s1 + 0x1078\n 12227: a5 = a3 + 0x400\n 12231: a0 = u64 [a5 + 0x40]\n 12234: a1 = u64 [a5 + 0x38]\n 12237: a2 = u64 [a5 + 0x30]\n 12240: a4 = u64 [a5 + 0x28]\n 12243: t0 = 404, jump @1349\n      : @465 [@dyn 202] (gas: 1)\n 12249: jump @467 if a0 == 0\n      : @466 (gas: 1)\n 12252: jump @692\n      : @467 (gas: 13)\n 12255: a0 = u64 [s1 + 0xe0]\n 12259: a2 = a3 + 0x400\n 12263: u64 [a2 + 0x8] = a0\n 12266: a0 = u64 [s1 + 0xe8]\n 12270: u64 [a2 + 0x10] = a0\n 12273: a0 = u64 [s1 + 0xf0]\n 12277: u64 [a2 + 0x18] = a0\n 12280: a1 = s1 + 0x1480\n 12284: a0 = u64 [s1 + 0xf8]\n 12288: u64 [a2 + 0x20] = a0\n 12291: a0 = a4\n 12293: u64 [s1 + 0xf8] = a4\n 12297: ra = 406, jump @9\n      : @468 [@dyn 203] (gas: 3)\n 12303: a1 = 0x20\n 12306: a0 = u64 [s1 + 0xf8]\n 12310: ra = 408, jump @20\n      : @469 [@dyn 204] (gas: 6)\n 12316: i32 a1 = a0 + 0\n 12318: a2 = 0x20\n 12321: a0 = 0\n 12323: ra = 0x19a\n 12327: ecalli 14 // 'seal_return'\n 12329: jump @471\n      : @470 (gas: 5)\n 12331: a2 = 0x20\n 12334: a0 = 0\n 12336: ra = 0x19a\n 12340: ecalli 14 // 'seal_return'\n 12342: fallthrough\n      : @471 [@dyn 205] (gas: 1)\n 12343: jump @473 if a0 == 1641031603\n      : @472 (gas: 1)\n 12350: jump @776\n      : @473 (gas: 10)\n 12353: u64 [a2 + 832] = 0\n 12357: u64 [a2 + 824] = 0\n 12361: u64 [a2 + 816] = 0\n 12365: u64 [a2 + 808] = 0\n 12369: a0 = s1 + 0x2000\n 12373: i32 a0 = a0 + 0x3a0\n 12377: ra = 0x19c\n 12381: ecalli 17 // 'value_transferred'\n 12383: t0 = 0x19e\n 12387: jump @1355\n      : @474 [@dyn 206] (gas: 1)\n 12390: t0 = 414, jump @1355\n      : @475 [@dyn 207] (gas: 8)\n 12396: a0 = u64 [a4 + 0x38]\n 12399: a1 = u64 [a4 + 0x40]\n 12402: a2 = u64 [a4 + 0x30]\n 12405: a3 = u64 [a4 + 0x28]\n 12408: a1 = a1 | a2\n 12411: a0 = a0 | a3\n 12414: a0 = a0 | a1\n 12417: jump @477 if a0 == 0\n      : @476 (gas: 1)\n 12420: jump @781\n      : @477 (gas: 3)\n 12423: a0 = u64 [s1 + 0xf8]\n 12427: a0 = i32 [a0]\n 12429: jump @479 if a0 >u 3\n      : @478 (gas: 1)\n 12433: jump @782\n      : @479 (gas: 4)\n 12436: a0 = s1 + 0x7ff\n 12440: a0 = a0 + 0x541\n 12444: a1 = 0x40\n 12447: ra = 416, jump @7\n      : @480 [@dyn 208] (gas: 12)\n 12453: a0 = s1 + 0x7ff\n 12457: a0 = a0 + 0x79\n 12460: a2 = a0 + 0x400\n 12464: a1 = u64 [a2 + 0xe0]\n 12468: u64 [s1 + 0xf8] = a1\n 12472: a1 = u64 [a2 + 0xd8]\n 12476: u64 [s1 + 0xf0] = a1\n 12480: a1 = u64 [a2 + 0xd0]\n 12484: u64 [s1 + 0xe0] = a1\n 12488: a0 = u64 [a2 + 0xc8]\n 12492: u64 [s1 + 0xe8] = a0\n 12496: ra = 418, jump @0\n      : @481 [@dyn 209] (gas: 13)\n 12502: a0 = u64 [s1 + 0xf8]\n 12506: a1 = u64 [s1 + 0xe0]\n 12510: a0 = a0 | a1\n 12513: a1 = u64 [s1 + 0xe8]\n 12517: a3 = a1\n 12519: a2 = u64 [s1 + 0xf0]\n 12523: a1 = a1 | a2\n 12526: a1 = a1 | a0\n 12529: a1 = a1 >> 0x20\n 12532: a0 = a0 | a2\n 12535: a0 = a0 << 0x20\n 12538: a0 = a0 | a1\n 12541: jump @483 if a0 == 0\n      : @482 (gas: 1)\n 12544: jump @692\n      : @483 (gas: 14)\n 12547: a2 = u64 [0x30180]\n 12552: a1 = u64 [0x30188]\n 12557: a0 = u32 [0x30190]\n 12562: a4 = s1 + 0x7ff\n 12566: a4 = a4 + 0x79\n 12569: u64 [a4 + 1216] = 0\n 12573: a5 = a4 + 0x400\n 12577: u64 [a5 + 0xb8] = a0\n 12581: u64 [a5 + 0xb0] = a1\n 12585: a1 = s1 + 0x7ff\n 12589: a1 = a1 + 0x521\n 12593: u64 [a5 + 0xa8] = a2\n 12597: a0 = a3\n 12599: ra = 420, jump @9\n      : @484 [@dyn 210] (gas: 4)\n 12605: a1 = 0x20\n 12608: a0 = u64 [s1 + 0xe8]\n 12612: ra = 0x198\n 12616: jump @20\n      : @485 (gas: 18)\n 12619: a0 = sp + 0xffffffffffffffe0\n 12622: a1 = a0 & 0xffffffffffffffe0\n 12625: sp = a1\n 12627: a0 = t1 <u a2\n 12630: t0 = a5 + a0\n 12633: a2 = t0 <u a5\n 12636: a2 = a0 if a0 == 0\n 12639: a2 = a2 + a4\n 12642: a0 = a2 <u a4\n 12645: a0 = a0 + a3\n 12648: u64 [a1 + 0x8] = t0\n 12651: u64 [a1] = t1\n 12653: u64 [a1 + 0x10] = a2\n 12656: u64 [a1 + 0x18] = a0\n 12659: a0 = s1 + 0x7ff\n 12663: a0 = a0 + 0x4a1\n 12667: u64 [s1 + 0x70] = a1\n 12670: ra = 422, jump @11\n      : @486 [@dyn 211] (gas: 27)\n 12676: a1 = s1 + 0x7ff\n 12680: a1 = a1 + 0x79\n 12683: a2 = a1 + 0x400\n 12687: a3 = u64 [a2 + 0x40]\n 12690: ra = u64 [a1 + 0x438]\n 12694: a0 = u64 [a2 + 0x30]\n 12697: a1 = u64 [a2 + 0x28]\n 12700: a4 = u64 [s1 + 0xe0]\n 12704: a2 = a3 ^ a4\n 12707: u64 [s1 + 0x50] = a3\n 12710: a5 = a3 <u a4\n 12713: t1 = u64 [s1 + 0xd8]\n 12717: a3 = ra <u t1\n 12720: u64 [s1 + 0x58] = a3\n 12723: a5 = a3 if a2 == 0\n 12726: t2 = u64 [s1 + 0xd0]\n 12730: a3 = a0 ^ t2\n 12733: u64 [s1 + 0x60] = a0\n 12736: a0 = a0 <u t2\n 12739: u64 [s1 + 0x68] = a1\n 12742: t0 = u64 [s1 + 0xf8]\n 12746: t0 = a1 <u t0\n 12749: a0 = t0 if a3 == 0\n 12752: a1 = ra ^ t1\n 12755: a1 = a1 | a2\n 12758: a5 = a0 if a1 == 0\n 12761: jump @488 if a5 == 0\n      : @487 (gas: 1)\n 12764: jump @784\n      : @488 (gas: 23)\n 12767: a1 = ra - t1\n 12770: a2 = u64 [s1 + 0x50]\n 12773: a2 = a2 - a4\n 12776: a3 = u64 [s1 + 0x58]\n 12779: a2 = a2 - a3\n 12782: a3 = a1 <u a0\n 12785: a2 = a2 - a3\n 12788: a1 = a1 - a0\n 12791: a0 = u64 [s1 + 0x60]\n 12794: a0 = a0 - t2\n 12797: a0 = a0 - t0\n 12800: a3 = u64 [s1 + 0x68]\n 12803: a4 = u64 [s1 + 0xf8]\n 12807: a3 = a3 - a4\n 12810: a4 = s1 + 0x2078\n 12814: a5 = a4 + 0x200\n 12818: u64 [a5 + 0xa8] = a3\n 12822: u64 [a5 + 0xb0] = a0\n 12826: u64 [a5 + 0xb8] = a1\n 12830: u64 [a5 + 0xc0] = a2\n 12834: a1 = s1 + 0x2320\n 12838: a0 = u64 [s1 + 0x70]\n 12841: ra = 424, jump @12\n      : @489 [@dyn 212] (gas: 6)\n 12847: a0 = u64 [s1 + 0xe8]\n 12851: a0 = a0 & 0x3\n 12854: a3 = u64 [s1 + 0xb8]\n 12858: a2 = u64 [s1 + 0xb0]\n 12862: a5 = u64 [s1 + 0xa8]\n 12866: jump @493 if a0 == 0\n      : @490 (gas: 1)\n 12870: jump @497 if a0 != 1\n      : @491 (gas: 20)\n 12875: a0 = sp + 0xffffffffffffffe0\n 12878: a1 = a0 & 0xffffffffffffffe0\n 12881: sp = a1\n 12883: a4 = u64 [s1 + 0x90]\n 12887: a0 = a4 <u a5\n 12890: a5 = a2 + a0\n 12893: a2 = a5 <u a2\n 12896: a2 = a0 if a0 == 0\n 12899: a2 = a2 + a3\n 12902: a0 = a2 <u a3\n 12905: a3 = u64 [s1 + 0x98]\n 12909: a0 = a0 + a3\n 12912: u64 [s1 + 0xf0] = a1\n 12916: u64 [a1 + 0x8] = a5\n 12919: u64 [a1] = a4\n 12921: u64 [a1 + 0x10] = a2\n 12924: u64 [a1 + 0x18] = a0\n 12927: a0 = s1 + 0x7ff\n 12931: a0 = a0 + 0x441\n 12935: ra = 426, jump @11\n      : @492 [@dyn 213] (gas: 33)\n 12941: a2 = s1 + 0x7ff\n 12945: a2 = a2 + 0x79\n 12948: a4 = a2 + 0x300\n 12952: a0 = u64 [a4 + 0xd0]\n 12956: a1 = u64 [a4 + 0xc8]\n 12960: t0 = u64 [a2 + 0x3e0]\n 12964: a3 = u64 [a4 + 0xd8]\n 12968: a4 = u64 [s1 + 0xd0]\n 12972: a4 = a4 + a0\n 12975: a5 = u64 [s1 + 0xf8]\n 12979: a5 = a5 + a1\n 12982: a1 = a5 <u a1\n 12985: a4 = a4 + a1\n 12988: a2 = a4 ^ a0\n 12991: a0 = a4 <u a0\n 12994: a0 = a1 if a2 == 0\n 12997: a1 = u64 [s1 + 0xd8]\n 13001: a1 = a1 + a3\n 13004: a2 = u64 [s1 + 0xe0]\n 13008: t0 = t0 + a2\n 13011: a2 = a1 <u a3\n 13014: a2 = a2 + t0\n 13017: a0 = a0 + a1\n 13020: a1 = a0 <u a1\n 13023: a1 = a1 + a2\n 13026: a2 = s1 + 0x2078\n 13030: a3 = a2 + 0x200\n 13034: u64 [a3 + 0xe8] = a5\n 13038: u64 [a3 + 0xf0] = a4\n 13042: u64 [a3 + 0xf8] = a0\n 13046: u64 [a2 + 0x300] = a1\n 13050: a0 = 0x2360\n 13054: jump @495\n      : @493 (gas: 4)\n 13057: a0 = s1 + 0x7ff\n 13061: a0 = a0 + 0x421\n 13065: a1 = u64 [s1 + 0xf0]\n 13069: ra = 428, jump @11\n      : @494 [@dyn 214] (gas: 33)\n 13075: a2 = s1 + 0x7ff\n 13079: a2 = a2 + 0x79\n 13082: a4 = a2 + 0x300\n 13086: a0 = u64 [a4 + 0xb0]\n 13090: a1 = u64 [a4 + 0xa8]\n 13094: t0 = u64 [a2 + 0x3c0]\n 13098: a3 = u64 [a4 + 0xb8]\n 13102: a4 = u64 [s1 + 0xd0]\n 13106: a4 = a4 + a0\n 13109: a5 = u64 [s1 + 0xf8]\n 13113: a5 = a5 + a1\n 13116: a1 = a5 <u a1\n 13119: a4 = a4 + a1\n 13122: a2 = a4 ^ a0\n 13125: a0 = a4 <u a0\n 13128: a0 = a1 if a2 == 0\n 13131: a1 = u64 [s1 + 0xd8]\n 13135: a1 = a1 + a3\n 13138: a2 = a1 <u a3\n 13141: a3 = u64 [s1 + 0xe0]\n 13145: t0 = t0 + a3\n 13148: a2 = a2 + t0\n 13151: a0 = a0 + a1\n 13154: a1 = a0 <u a1\n 13157: a1 = a1 + a2\n 13160: a2 = s1 + 0x2078\n 13164: a3 = a2 + 0x300\n 13168: u64 [a3 + 0x8] = a5\n 13171: u64 [a3 + 0x10] = a4\n 13174: u64 [a3 + 0x18] = a0\n 13177: u64 [a3 + 0x20] = a1\n 13180: a0 = 0x2380\n 13184: fallthrough\n      : @495 (gas: 3)\n 13185: a1 = s1 + a0\n 13188: a0 = u64 [s1 + 0xf0]\n 13192: ra = 430, jump @12\n      : @496 [@dyn 215] (gas: 1)\n 13198: jump @500\n      : @497 (gas: 6)\n 13200: a0 = u64 [s1 + 0xa0]\n 13204: ra = 0x1b0\n 13208: ecalli 4 // 'caller'\n 13210: a2 = u64 [s1 + 0xc8]\n 13214: t0 = 0x1b2\n 13218: jump @1343\n      : @498 [@dyn 216] (gas: 2)\n 13221: a2 = u64 [s1 + 0xc8]\n 13225: t0 = 434, jump @1343\n      : @499 [@dyn 217] (gas: 20)\n 13231: a4 = s1 + 0x7ff\n 13235: a4 = a4 + 0x79\n 13238: a2 = u64 [s1 + 0xe0]\n 13242: a5 = a4 + 0x300\n 13246: u64 [a5 + 0x80] = a2\n 13250: a2 = u64 [s1 + 0xd8]\n 13254: u64 [a5 + 0x78] = a2\n 13257: a2 = u64 [s1 + 0xd0]\n 13261: u64 [a5 + 0x70] = a2\n 13264: a2 = u64 [s1 + 0xf8]\n 13268: u64 [a5 + 0x68] = a2\n 13271: u64 [a4 + 928] = 0\n 13275: u64 [a5 + 0x98] = a1\n 13279: u64 [a5 + 0x90] = a0\n 13283: a0 = s1 + 0x7ff\n 13287: a0 = a0 + 0x401\n 13291: a1 = s1 + 0x7ff\n 13295: a1 = a1 + 0x3e1\n 13299: u64 [a5 + 0x88] = a3\n 13303: ra = 436, jump @1142\n      : @500 [@dyn 218] (gas: 4)\n 13309: a0 = s1 + 0x7ff\n 13313: a0 = a0 + 0x3c1\n 13317: a1 = 0x40\n 13320: ra = 438, jump @7\n      : @501 [@dyn 219] (gas: 8)\n 13326: a3 = s1 + 0x7ff\n 13330: a3 = a3 + 0x79\n 13333: a4 = a3 + 0x300\n 13337: a0 = u64 [a4 + 0x60]\n 13340: a1 = u64 [a4 + 0x58]\n 13343: a2 = u64 [a4 + 0x50]\n 13346: a3 = u64 [a4 + 0x48]\n 13349: t0 = 440, jump @1334\n      : @502 [@dyn 220] (gas: 1)\n 13355: jump @504 if a0 == 0\n      : @503 (gas: 1)\n 13358: jump @692\n      : @504 (gas: 16)\n 13361: a0 = u64 [s1 + 0xf8]\n 13365: a2 = s1 + 0x7ff\n 13369: a2 = a2 + 0x79\n 13372: a4 = a2 + 0x300\n 13376: u64 [a4 + 0x28] = a0\n 13379: a0 = u64 [s1 + 0xd0]\n 13383: u64 [a4 + 0x30] = a0\n 13386: a0 = u64 [s1 + 0xd8]\n 13390: u64 [a4 + 0x38] = a0\n 13393: a1 = s1 + 0x7ff\n 13397: a1 = a1 + 0x3a1\n 13401: a0 = u64 [s1 + 0xe0]\n 13405: u64 [a4 + 0x40] = a0\n 13408: a0 = a3\n 13410: u64 [s1 + 0xf8] = a3\n 13414: ra = 442, jump @9\n      : @505 [@dyn 221] (gas: 6)\n 13420: a0 = u64 [s1 + 0xa0]\n 13424: ra = 0x1bc\n 13428: ecalli 4 // 'caller'\n 13430: a2 = u64 [s1 + 0xc8]\n 13434: t0 = 0x1be\n 13438: jump @1342\n      : @506 [@dyn 222] (gas: 2)\n 13441: a2 = u64 [s1 + 0xc8]\n 13445: t0 = 446, jump @1342\n      : @507 [@dyn 223] (gas: 37)\n 13451: a5 = s1 + 0x7ff\n 13455: a5 = a5 + 0x79\n 13458: u64 [a5 + 704] = 0\n 13462: u64 [a5 + 696] = 0\n 13466: a3 = u64 [s1 + 0x80]\n 13470: u64 [a5 + 0x2a8] = a3\n 13474: a3 = u64 [s1 + 0xc0]\n 13478: u64 [a5 + 0x2c8] = a3\n 13482: a3 = u64 [0x20080]\n 13487: a4 = u64 [0x20088]\n 13492: u64 [a5 + 688] = 0\n 13496: u64 [a5 + 736] = 0\n 13500: u64 [a5 + 0x320] = a3\n 13504: u64 [a5 + 0x318] = a4\n 13508: a3 = u64 [0x20090]\n 13513: a4 = u64 [0x20098]\n 13518: u64 [a5 + 728] = 0\n 13522: u64 [a5 + 720] = 0\n 13526: u64 [a5 + 0x310] = a3\n 13530: u64 [a5 + 0x308] = a4\n 13534: a3 = a5 + 0x200\n 13538: u64 [a3 + 0xf8] = a2\n 13542: u64 [a3 + 0xf0] = a1\n 13546: u64 [a3 + 0xe8] = a0\n 13550: a0 = a5\n 13552: a1 = 0x20\n 13555: a2 = s1 + 0x7ff\n 13559: a2 = a2 + 0x381\n 13563: a3 = s1 + 0x7ff\n 13567: a3 = a3 + 0x361\n 13571: a4 = s1 + 0x7ff\n 13575: a4 = a4 + 0x341\n 13579: a5 = s1 + 0x7ff\n 13583: a5 = a5 + 0x321\n 13587: u64 [a0 + 768] = 0\n 13591: a0 = u64 [s1 + 0xf8]\n 13595: ra = 448, jump @17\n      : @508 [@dyn 224] (gas: 5)\n 13601: a0 = 0\n 13603: a1 = u64 [s1 + 0x88]\n 13607: a2 = 0\n 13609: ecalli 14 // 'seal_return'\n 13611: jump @1072\n      : @509 (gas: 19)\n 13614: a0 = u64 [s1 + 0xf8]\n 13618: a2 = u64 [s1 + 0x88]\n 13622: a0 = a0 | a2\n 13625: a2 = u64 [s1 + 0x78]\n 13628: a0 = a2 if a4 == 0\n 13631: t1 = u64 [s1 + 0xa0]\n 13635: a3 = t1\n 13637: t0 = u64 [s1 + 0xc8]\n 13641: a3 = a0 if t0 != 0\n 13644: u64 [s1 + 0xf8] = a3\n 13648: a0 = u64 [s1 + 0xc0]\n 13652: a2 = u64 [s1 + 0x90]\n 13656: a0 = a0 | a2\n 13659: a2 = u64 [s1 + 0x80]\n 13663: a0 = a2 if a4 == 0\n 13666: a5 = u64 [s1 + 0xb0]\n 13670: a3 = a5\n 13672: a3 = a0 if t0 != 0\n 13675: t0 = 450, jump @1357\n      : @510 [@dyn 225] (gas: 1)\n 13681: ra = 452, jump @1376\n      : @511 [@dyn 226] (gas: 6)\n 13687: u64 [s1 + 0x90] = a0\n 13691: u64 [s1 + 0x80] = a1\n 13695: a0 = u64 [s1 + 0xa8]\n 13699: a1 = u64 [s1 + 0xb8]\n 13703: a2 = u64 [s1 + 0xf0]\n 13707: ra = 454, jump @1376\n      : @512 [@dyn 227] (gas: 7)\n 13713: u64 [s1 + 0x78] = a0\n 13716: u64 [s1 + 0x88] = a1\n 13720: a1 = u64 [s1 + 0xf0]\n 13724: a2 = 0x80 - a1\n 13728: a0 = u64 [s1 + 0xb0]\n 13732: a1 = u64 [s1 + 0xa0]\n 13736: ra = 456, jump @1381\n      : @513 [@dyn 228] (gas: 21)\n 13742: a2 = u64 [s1 + 0x88]\n 13746: a1 = a1 | a2\n 13749: a3 = u64 [s1 + 0xf0]\n 13753: a4 = a3 <u 0x80\n 13757: u64 [s1 + 0x88] = a4\n 13761: a2 = u64 [s1 + 0x80]\n 13765: a1 = a2 if a4 == 0\n 13768: a2 = u64 [s1 + 0xb8]\n 13772: a2 = a1 if a3 != 0\n 13775: u64 [s1 + 0xb8] = a2\n 13779: a1 = u64 [s1 + 0x78]\n 13782: a0 = a0 | a1\n 13785: a1 = u64 [s1 + 0x90]\n 13789: a0 = a1 if a4 == 0\n 13792: a1 = u64 [s1 + 0xa8]\n 13796: a1 = a0 if a3 != 0\n 13799: a2 = a3\n 13801: u64 [s1 + 0xa8] = a1\n 13805: a0 = u64 [s1 + 0xb0]\n 13809: a1 = u64 [s1 + 0xa0]\n 13813: ra = 458, jump @1376\n      : @514 [@dyn 229] (gas: 3)\n 13819: a4 = 0\n 13821: a5 = 0\n 13823: t0 = 460, jump @1353\n      : @515 [@dyn 230] (gas: 3)\n 13829: t1 = u64 [s1 + 0xb8]\n 13833: t2 = u64 [s1 + 0xa8]\n 13837: fallthrough\n      : @516 (gas: 89)\n 13838: u64 [s1 + 0xb8] = a4\n 13842: a2 = t2 >> 0x3f\n 13845: a3 = t1 << 0x1\n 13848: t0 = a3 | a2\n 13851: a3 = t2 << 0x1\n 13854: a4 = u64 [s1 + 0xf8]\n 13858: a4 = a4 >> 0x3f\n 13861: a3 = a3 | a4\n 13864: u64 [s1 + 0xa8] = a3\n 13868: a2 = u64 [s1 + 0x88]\n 13872: t2 = a1\n 13874: u64 [s1 + 0xb0] = t0\n 13878: a1 = a2 ^ t0\n 13881: ra = t1\n 13883: t1 = a2 <u t0\n 13886: a4 = u64 [s1 + 0x90]\n 13890: t0 = a4 <u a3\n 13893: t0 = t1 if a1 != 0\n 13896: a1 = t2 << 0x1\n 13899: a3 = a0 >> 0x3f\n 13902: a1 = a1 | a3\n 13905: u64 [s1 + 0xa0] = a1\n 13909: a3 = ra >> 0x3f\n 13912: a0 = a0 << 0x1\n 13915: a3 = a3 | a0\n 13918: a0 = u64 [s1 + 0xf8]\n 13922: a0 = a0 << 0x1\n 13925: a4 = u64 [s1 + 0xc0]\n 13929: a1 = a4 >> 0x3f\n 13932: ra = a0 | a1\n 13935: a1 = a4 << 0x1\n 13938: a4 = u64 [s1 + 0xc8]\n 13942: t1 = a4 >> 0x3f\n 13945: t1 = a1 | t1\n 13948: a1 = a4 << 0x1\n 13951: a4 = u64 [s1 + 0xe8]\n 13955: t2 = a4 >> 0x3f\n 13958: a1 = a1 | t2\n 13961: a4 = a4 << 0x1\n 13964: a0 = u64 [s1 + 0xb8]\n 13968: a4 = a4 | a0\n 13971: u64 [s1 + 0xe8] = a4\n 13975: a1 = a1 | a5\n 13978: u64 [s1 + 0xc8] = a1\n 13982: a1 = a5 | t1\n 13985: u64 [s1 + 0xc0] = a1\n 13989: a0 = a5 | ra\n 13992: u64 [s1 + 0xf8] = a0\n 13996: a0 = a2 - a3\n 13999: a0 = a0 <u t0\n 14002: a1 = a2 <u a3\n 14005: t0 = u64 [s1 + 0xa0]\n 14009: a4 = a2 - t0\n 14012: a4 = a4 - a1\n 14015: a4 = a4 - a0\n 14018: a5 = a4 >>a 0x3f\n 14021: a0 = u64 [s1 + 0x98]\n 14025: a0 = a0 & a5\n 14028: a1 = u64 [s1 + 0xa8]\n 14032: t2 = a1 - a0\n 14035: a1 = a1 <u a0\n 14038: a0 = u64 [s1 + 0xb0]\n 14042: t1 = a0 - a1\n 14045: a1 = 0 if a0 != 0\n 14047: a0 = a3 - a1\n 14050: a1 = a3 <u a1\n 14053: a1 = t0 - a1\n 14056: a3 = u64 [s1 + 0xf0]\n 14060: ra = u64 [s1 + 0xe0]\n 14064: a2 = a3 | ra\n 14067: a2 = a2 <u 0x1\n 14070: a4 = u64 [s1 + 0xd0]\n 14074: t0 = a4 <u a2\n 14077: a2 = a4 - a2\n 14080: a4 = a3 <u 0x1\n 14083: ra = ra - a4\n 14086: a4 = u64 [s1 + 0xd8]\n 14090: a4 = a4 - t0\n 14093: a3 = a3 + 0xffffffffffffffff\n 14096: u64 [s1 + 0xe0] = ra\n 14100: u64 [s1 + 0xd8] = a4\n 14104: t0 = ra | a4\n 14107: u64 [s1 + 0xf0] = a3\n 14111: a4 = a3 | a2\n 14114: a3 = a4 | t0\n 14117: a4 = a5 & 0x1\n 14120: u64 [s1 + 0xd0] = a2\n 14124: a5 = 0\n 14126: jump @516 if a3 != 0\n      : @517 (gas: 4)\n 14130: a0 = u64 [s1 + 0xe8]\n 14134: a0 = a0 << 0x1\n 14137: a4 = a4 | a0\n 14140: fallthrough\n      : @518 (gas: 3)\n 14141: a0 = a4 & 0xffffffffffffffff\n 14144: a1 = u64 [s1 + 0x38]\n 14147: jump @520 if a1 == a0\n      : @519 (gas: 1)\n 14150: jump @756\n      : @520 (gas: 9)\n 14153: a0 = 0x30160\n 14158: u64 [s1 + 0xb0] = a0\n 14162: i32 a0 = a0 + 0\n 14164: u64 [s1 + 0xa8] = a0\n 14168: ra = 0x1ce\n 14172: ecalli 4 // 'caller'\n 14174: a2 = u64 [s1 + 0xb0]\n 14178: t0 = 0x1d0\n 14182: jump @1322\n      : @521 [@dyn 231] (gas: 2)\n 14185: a2 = u64 [s1 + 0xb0]\n 14189: t0 = 464, jump @1322\n      : @522 [@dyn 232] (gas: 9)\n 14195: u64 [a2 + 384] = 0\n 14199: a4 = a2 + 0x100\n 14203: u64 [a4 + 0x78] = a1\n 14206: u64 [a4 + 0x70] = a0\n 14209: a1 = s1 + 0x7ff\n 14213: a1 = a1 + 0x1e1\n 14217: u64 [a4 + 0x68] = a3\n 14220: a0 = 0\n 14222: ra = 466, jump @9\n      : @523 [@dyn 233] (gas: 11)\n 14228: a1 = s1 + 0x7ff\n 14232: a1 = a1 + 0x79\n 14235: u64 [a1 + 352] = 0\n 14239: u64 [a1 + 344] = 0\n 14243: u64 [a1 + 328] = 0x2\n 14248: a2 = a1\n 14250: a0 = 0x20\n 14253: a1 = s1 + 0x7ff\n 14257: a1 = a1 + 0x1c1\n 14261: u64 [a2 + 336] = 0\n 14265: ra = 468, jump @9\n      : @524 [@dyn 234] (gas: 7)\n 14271: a0 = sp + 0xffffffffffffffe0\n 14274: a0 = a0 & 0xffffffffffffffe0\n 14277: u64 [s1 + 0x70] = a0\n 14280: sp = a0\n 14282: a1 = 0x20150\n 14287: a0 = i32 [0x20150]\n 14292: jump @526 if a0 >u 63\n      : @525 (gas: 2)\n 14296: u32 [0x20150] = 0x40\n 14302: fallthrough\n      : @526 (gas: 15)\n 14303: a0 = sp + 0xffffffffffffffe0\n 14306: a2 = a0 & 0xffffffffffffffe0\n 14309: u64 [s1 + 0xf8] = a2\n 14313: sp = a2\n 14315: a0 = 0x20160\n 14320: i32 a0 = a0 + 0\n 14322: i32 a2 = a2 + 0\n 14324: u64 [s1 + 0xe0] = a1\n 14328: a1 = 0x40\n 14331: u64 [s1 + 0xe8] = a0\n 14335: ra = 0x1d6\n 14339: ecalli 9 // 'hash_keccak_256'\n 14341: a3 = u64 [s1 + 0xf8]\n 14345: t0 = 0x1d8\n 14349: jump @1372\n      : @527 [@dyn 235] (gas: 2)\n 14352: a3 = u64 [s1 + 0xf8]\n 14356: t0 = 472, jump @1372\n      : @528 [@dyn 236] (gas: 18)\n 14362: a4 = reverse a1\n 14364: a1 = reverse a2\n 14366: a2 = reverse a3\n 14368: a0 = u64 [s1 + 0x70]\n 14371: u64 [s1 + 0xf0] = a2\n 14375: u64 [a0 + 0x18] = a2\n 14378: u64 [s1 + 0xf8] = a1\n 14382: u64 [a0 + 0x10] = a1\n 14385: u64 [s1 + 0xd8] = a4\n 14389: u64 [a0 + 0x8] = a4\n 14392: u64 [s1 + 0xd0] = a5\n 14396: u64 [a0] = a5\n 14398: a0 = u64 [s1 + 0xa8]\n 14402: ra = 0x1da\n 14406: ecalli 4 // 'caller'\n 14408: a2 = u64 [s1 + 0xb0]\n 14412: t0 = 0x1dc\n 14416: jump @1322\n      : @529 [@dyn 237] (gas: 2)\n 14419: a2 = u64 [s1 + 0xb0]\n 14423: t0 = 476, jump @1322\n      : @530 [@dyn 238] (gas: 9)\n 14429: u64 [a2 + 320] = 0\n 14433: a4 = a2 + 0x100\n 14437: u64 [a4 + 0x38] = a1\n 14440: u64 [a4 + 0x30] = a0\n 14443: a1 = s1 + 0x7ff\n 14447: a1 = a1 + 0x1a1\n 14451: u64 [a4 + 0x28] = a3\n 14454: a0 = 0\n 14456: ra = 478, jump @9\n      : @531 [@dyn 239] (gas: 11)\n 14462: a1 = s1 + 0x7ff\n 14466: a1 = a1 + 0x79\n 14469: u64 [a1 + 288] = 0\n 14473: u64 [a1 + 280] = 0\n 14477: u64 [a1 + 264] = 0x4\n 14482: a2 = a1\n 14484: a0 = 0x20\n 14487: a1 = s1 + 0x7ff\n 14491: a1 = a1 + 0x181\n 14495: u64 [a2 + 272] = 0\n 14499: ra = 480, jump @9\n      : @532 [@dyn 240] (gas: 3)\n 14505: a1 = u64 [s1 + 0xe0]\n 14509: a0 = i32 [a1]\n 14511: jump @534 if a0 >u 63\n      : @533 (gas: 2)\n 14515: u32 [a1 + 0] = 0x40\n 14518: fallthrough\n      : @534 (gas: 4)\n 14519: a0 = sp + 0xffffffffffffffe0\n 14522: a0 = a0 & 0xffffffffffffffe0\n 14525: u64 [s1 + 0xc8] = a0\n 14529: t0 = 482, jump @1335\n      : @535 [@dyn 241] (gas: 5)\n 14535: ra = 0x1e4\n 14539: ecalli 9 // 'hash_keccak_256'\n 14541: a3 = u64 [s1 + 0xc8]\n 14545: t0 = 0x1e6\n 14549: jump @1358\n      : @536 [@dyn 242] (gas: 2)\n 14552: a3 = u64 [s1 + 0xc8]\n 14556: t0 = 486, jump @1358\n      : @537 [@dyn 243] (gas: 11)\n 14562: i32 a4 = a4 + 0x78\n 14565: a4 = a4 + s1\n 14568: a5 = a4 + 0x100\n 14572: u64 [a5 + 0x60] = a3\n 14575: u64 [a5 + 0x58] = a2\n 14578: u64 [a5 + 0x50] = a1\n 14581: u64 [a5 + 0x48] = a0\n 14584: a0 = s1 + 0x7ff\n 14588: a0 = a0 + 0x161\n 14592: a1 = s1 + 0x21c0\n 14596: ra = 488, jump @11\n      : @538 [@dyn 244] (gas: 10)\n 14602: a0 = s1 + 0x7ff\n 14606: a0 = a0 + 0x79\n 14609: a0 = u32 [a0 + 0xe8]\n 14613: u64 [s1 + 0xa0] = a0\n 14617: a0 = u64 [s1 + 0xa8]\n 14621: ra = 0x1ea\n 14625: ecalli 4 // 'caller'\n 14627: a2 = u64 [s1 + 0xb0]\n 14631: t0 = 0x1ec\n 14635: jump @1322\n      : @539 [@dyn 245] (gas: 2)\n 14638: a2 = u64 [s1 + 0xb0]\n 14642: t0 = 492, jump @1322\n      : @540 [@dyn 246] (gas: 8)\n 14648: u64 [a2 + 224] = 0\n 14652: u64 [a2 + 0xd8] = a1\n 14656: u64 [a2 + 0xd0] = a0\n 14660: a1 = s1 + 0x7ff\n 14664: a1 = a1 + 0x141\n 14668: u64 [a2 + 0xc8] = a3\n 14672: a0 = 0\n 14674: ra = 494, jump @9\n      : @541 [@dyn 247] (gas: 11)\n 14680: a1 = s1 + 0x7ff\n 14684: a1 = a1 + 0x79\n 14687: u64 [a1 + 192] = 0\n 14691: u64 [a1 + 184] = 0\n 14695: u64 [a1 + 168] = 0x5\n 14700: a2 = a1\n 14702: a0 = 0x20\n 14705: a1 = s1 + 0x7ff\n 14709: a1 = a1 + 0x121\n 14713: u64 [a2 + 176] = 0\n 14717: ra = 496, jump @9\n      : @542 [@dyn 248] (gas: 3)\n 14723: a1 = u64 [s1 + 0xe0]\n 14727: a0 = i32 [a1]\n 14729: jump @544 if a0 >u 63\n      : @543 (gas: 2)\n 14733: u32 [a1 + 0] = 0x40\n 14736: fallthrough\n      : @544 (gas: 4)\n 14737: a0 = sp + 0xffffffffffffffe0\n 14740: a0 = a0 & 0xffffffffffffffe0\n 14743: u64 [s1 + 0xc8] = a0\n 14747: t0 = 498, jump @1335\n      : @545 [@dyn 249] (gas: 4)\n 14753: ra = 0x1f4\n 14757: ecalli 9 // 'hash_keccak_256'\n 14759: t0 = 0x1f6\n 14763: jump @1356\n      : @546 [@dyn 250] (gas: 1)\n 14766: t0 = 502, jump @1356\n      : @547 [@dyn 251] (gas: 18)\n 14772: u64 [s1 + 0x98] = a0\n 14776: a0 = reverse a3\n 14778: u64 [s1 + 0x90] = a0\n 14782: a0 = sp + 0xffffffffffffffe0\n 14785: a0 = a0 & 0xffffffffffffffe0\n 14788: u64 [s1 + 0xc8] = a0\n 14792: sp = a0\n 14794: a2 = s1 + 0x7ff\n 14798: a2 = a2 + 0x79\n 14801: u64 [a2 + 160] = 0\n 14805: u64 [a2 + 152] = 0\n 14809: u64 [a2 + 144] = 0\n 14813: a1 = s1 + 0x7ff\n 14817: a1 = a1 + 0x101\n 14821: a0 = u64 [s1 + 0x38]\n 14824: u64 [a2 + 0x88] = a0\n 14828: a0 = 0\n 14830: ra = 504, jump @9\n      : @548 [@dyn 252] (gas: 15)\n 14836: a0 = u64 [s1 + 0x90]\n 14840: a1 = s1 + 0x7ff\n 14844: a1 = a1 + 0x79\n 14847: u64 [a1 + 0x80] = a0\n 14851: a0 = u64 [s1 + 0x98]\n 14855: u64 [a1 + 0x78] = a0\n 14858: a0 = u64 [s1 + 0xb8]\n 14862: u64 [a1 + 0x70] = a0\n 14865: a3 = a1\n 14867: a0 = 0x20\n 14870: a1 = s1 + 0x7ff\n 14874: a1 = a1 + 0xe1\n 14878: a2 = u64 [s1 + 0xc0]\n 14882: u64 [a3 + 0x68] = a2\n 14885: ra = 506, jump @9\n      : @549 [@dyn 253] (gas: 3)\n 14891: a1 = u64 [s1 + 0xe0]\n 14895: a0 = i32 [a1]\n 14897: jump @551 if a0 >u 63\n      : @550 (gas: 2)\n 14901: u32 [a1 + 0] = 0x40\n 14904: fallthrough\n      : @551 (gas: 6)\n 14905: a0 = 0xffffffff\n 14915: u64 [s1 + 0x98] = a0\n 14919: a0 = sp + 0xffffffffffffffe0\n 14922: a0 = a0 & 0xffffffffffffffe0\n 14925: u64 [s1 + 0xc0] = a0\n 14929: t0 = 508, jump @1335\n      : @552 [@dyn 254] (gas: 5)\n 14935: ra = 0x1fe\n 14939: ecalli 9 // 'hash_keccak_256'\n 14941: a3 = u64 [s1 + 0xc0]\n 14945: t0 = 0x200\n 14949: jump @1363\n      : @553 [@dyn 255] (gas: 2)\n 14952: a3 = u64 [s1 + 0xc0]\n 14956: t0 = 512, jump @1363\n      : @554 [@dyn 256] (gas: 12)\n 14962: a1 = u64 [s1 + 0xc8]\n 14966: u64 [a1 + 0x18] = a3\n 14969: u64 [a1 + 0x10] = a2\n 14972: u64 [a1 + 0x8] = a4\n 14975: u64 [a1] = a0\n 14977: a0 = sp + 0xffffffffffffffe0\n 14980: a0 = a0 & 0xffffffffffffffe0\n 14983: u64 [s1 + 0x30] = a0\n 14986: sp = a0\n 14988: a0 = s1 + 0x7ff\n 14992: a0 = a0 + 0xc1\n 14996: ra = 514, jump @11\n      : @555 [@dyn 257] (gas: 31)\n 15002: a3 = 0x1\n 15005: u64 [s1 + 96] = 0\n 15008: u64 [s1 + 104] = 0\n 15011: a5 = 0\n 15013: a1 = s1 + 0x7ff\n 15017: a1 = a1 + 0x79\n 15020: a0 = u64 [a1 + 0x60]\n 15023: u64 [s1 + 0x90] = a0\n 15027: a0 = u64 [a1 + 0x58]\n 15030: u64 [s1 + 0x88] = a0\n 15034: a2 = u64 [s1 + 0xd0]\n 15038: a2 = a2 + a3\n 15041: a0 = a2 <u a3\n 15044: a4 = u64 [s1 + 0xd8]\n 15048: a0 = a0 + a4\n 15051: u64 [s1 + 0x58] = a2\n 15054: u64 [s1 + 0x50] = a0\n 15057: a0 = a0 | a2\n 15060: a0 = a0 <u a3\n 15063: a2 = u64 [s1 + 0xf8]\n 15067: a0 = a0 + a2\n 15070: u64 [s1 + 0x48] = a0\n 15073: a0 = a0 <u a2\n 15076: a2 = u64 [s1 + 0xf0]\n 15080: a0 = a0 + a2\n 15083: u64 [s1 + 0x40] = a0\n 15086: a0 = u64 [a1 + 0x50]\n 15089: u64 [s1 + 0x80] = a0\n 15093: a0 = u64 [a1 + 0x48]\n 15096: u64 [s1 + 0x78] = a0\n 15099: fallthrough\n      : @556 (gas: 10)\n 15100: a1 = 0x1\n 15103: a1 = a1 if a5 == 0\n 15106: a0 = u64 [s1 + 0xa0]\n 15110: a0 = a0 <u a3\n 15113: a0 = a0 ^ 0x1\n 15116: a2 = 0x1\n 15119: a2 = a0 if a5 == 0\n 15122: a0 = 0\n 15124: a2 = a1 if a0 != 0\n 15127: jump @591 if a2 == 0\n      : @557 (gas: 9)\n 15131: u64 [s1 + 184] = 0\n 15135: u64 [s1 + 240] = 0\n 15139: u64 [s1 + 0xf8] = a3\n 15143: a0 = u64 [s1 + 0xa8]\n 15147: ra = 0x204\n 15151: ecalli 4 // 'caller'\n 15153: a2 = u64 [s1 + 0xb0]\n 15157: t0 = 0x206\n 15161: jump @1322\n      : @558 [@dyn 258] (gas: 2)\n 15164: a2 = u64 [s1 + 0xb0]\n 15168: t0 = 518, jump @1322\n      : @559 [@dyn 259] (gas: 8)\n 15174: u64 [a2 + 64] = 0\n 15177: u64 [a2 + 0x38] = a1\n 15180: u64 [a2 + 0x30] = a0\n 15183: a1 = s1 + 0x7ff\n 15187: a1 = a1 + 0xa1\n 15191: u64 [a2 + 0x28] = a3\n 15194: a0 = 0\n 15196: ra = 520, jump @9\n      : @560 [@dyn 260] (gas: 11)\n 15202: a0 = s1 + 0x7ff\n 15206: a0 = a0 + 0x79\n 15209: u64 [a0 + 32] = 0\n 15212: u64 [a0 + 24] = 0\n 15215: u64 [a0 + 16] = 0\n 15218: a3 = a0\n 15220: a0 = 0x20\n 15223: a1 = s1 + 0x7ff\n 15227: a1 = a1 + 0x81\n 15231: u64 [a3 + 8] = 0x3\n 15235: ra = 522, jump @9\n      : @561 [@dyn 261] (gas: 3)\n 15241: a1 = u64 [s1 + 0xe0]\n 15245: a0 = i32 [a1]\n 15247: jump @563 if a0 >u 63\n      : @562 (gas: 2)\n 15251: u32 [a1 + 0] = 0x40\n 15254: fallthrough\n      : @563 (gas: 4)\n 15255: a0 = sp + 0xffffffffffffffe0\n 15258: a0 = a0 & 0xffffffffffffffe0\n 15261: u64 [s1 + 0xd8] = a0\n 15265: t0 = 524, jump @1335\n      : @564 [@dyn 262] (gas: 4)\n 15271: ra = 0x20e\n 15275: ecalli 9 // 'hash_keccak_256'\n 15277: t0 = 0x210\n 15281: jump @1346\n      : @565 [@dyn 263] (gas: 1)\n 15284: t0 = 528, jump @1346\n      : @566 [@dyn 264] (gas: 14)\n 15290: a0 = s1 + 0x7ff\n 15294: a0 = a0 + 0x79\n 15297: a1 = u64 [s1 + 0xf0]\n 15301: u64 [a0] = a1\n 15303: u64 [a0 + 0xfffffffffffffff8] = a1\n 15306: a0 = s1 + 0x1000\n 15310: u64 [a0 + 0xfffffffffffff868] = a1\n 15314: a1 = s1 + 0x7ff\n 15318: a1 = a1 + 0x61\n 15321: a0 = u64 [s1 + 0xf8]\n 15325: a2 = s1 + 0x1000\n 15329: u64 [a2 + 0xfffffffffffff860] = a0\n 15333: a0 = 0\n 15335: ra = 530, jump @9\n      : @567 [@dyn 265] (gas: 16)\n 15341: a0 = u64 [s1 + 0xc0]\n 15345: a1 = s1 + 0x1000\n 15349: u64 [a1 + 0xfffffffffffff858] = a0\n 15353: a0 = u64 [s1 + 0xc8]\n 15357: a1 = s1 + 0x1000\n 15361: u64 [a1 + 0xfffffffffffff850] = a0\n 15365: a0 = u64 [s1 + 0xd0]\n 15369: a1 = s1 + 0x1000\n 15373: u64 [a1 + 0xfffffffffffff848] = a0\n 15377: a0 = 0x20\n 15380: a1 = s1 + 0x7ff\n 15384: a1 = a1 + 0x41\n 15387: a2 = u64 [s1 + 0xd8]\n 15391: a3 = s1 + 0x1000\n 15395: u64 [a3 + 0xfffffffffffff840] = a2\n 15399: ra = 532, jump @9\n      : @568 [@dyn 266] (gas: 3)\n 15405: a1 = u64 [s1 + 0xe0]\n 15409: a0 = i32 [a1]\n 15411: jump @570 if a0 >u 63\n      : @569 (gas: 2)\n 15415: u32 [a1 + 0] = 0x40\n 15418: fallthrough\n      : @570 (gas: 4)\n 15419: a0 = sp + 0xffffffffffffffe0\n 15422: a0 = a0 & 0xffffffffffffffe0\n 15425: u64 [s1 + 0xd8] = a0\n 15429: t0 = 534, jump @1335\n      : @571 [@dyn 267] (gas: 4)\n 15435: ra = 0x218\n 15439: ecalli 9 // 'hash_keccak_256'\n 15441: t0 = 0x21a\n 15445: jump @1331\n      : @572 [@dyn 268] (gas: 1)\n 15448: t0 = 538, jump @1331\n      : @573 [@dyn 269] (gas: 9)\n 15454: a5 = a1 + 0x100\n 15458: u64 [a5 + 0x68] = a3\n 15461: u64 [a5 + 0x70] = a2\n 15464: u64 [a5 + 0x78] = a4\n 15467: u64 [a5 + 0x80] = a0\n 15471: a0 = s1 + 0x7ff\n 15475: a0 = a0 + 0x21\n 15478: a1 = s1 + 0x21e0\n 15482: ra = 540, jump @11\n      : @574 [@dyn 270] (gas: 4)\n 15488: a0 = s1 + 0x1000\n 15492: a0 = u64 [a0 + 0xfffffffffffff828]\n 15496: a0 = a0 & 0xff\n 15500: jump @581 if a0 != 0\n      : @575 (gas: 5)\n 15504: a0 = s1 + 0x1000\n 15508: a0 = u64 [a0 + 0xfffffffffffff820]\n 15512: a0 = a0 & 0xffffffffffffffff\n 15515: a3 = u64 [s1 + 0xf8]\n 15519: jump @582 if a0 == 0\n      : @576 (gas: 15)\n 15523: a2 = u64 [s1 + 0xf0]\n 15527: a0 = a2 >u 0\n 15529: a1 = a3 <u 0x100\n 15533: a1 = a1 ^ 0x1\n 15536: a1 = a0 if a2 != 0\n 15539: a0 = a2 >u 0\n 15541: a4 = a2 >u 0\n 15543: a4 = a0 if a2 == 0\n 15546: a0 = u64 [s1 + 0xb8]\n 15550: a4 = a1 if a0 == 0\n 15553: u64 [s1 + 0xd0] = a4\n 15557: i32 a2 = a3 + 0xffffffffffffff80\n 15560: a0 = 0x1\n 15563: a1 = 0\n 15565: ra = 542, jump @1381\n      : @577 [@dyn 271] (gas: 7)\n 15571: u64 [s1 + 0xf0] = a0\n 15575: u64 [s1 + 0xd8] = a1\n 15579: a1 = u64 [s1 + 0xf8]\n 15583: i32 a2 = 0x80 - a1\n 15587: a0 = 0x1\n 15590: a1 = 0\n 15592: ra = 544, jump @1376\n      : @578 [@dyn 272] (gas: 7)\n 15598: u64 [s1 + 0xb8] = a0\n 15602: u64 [s1 + 0xc0] = a1\n 15606: a2 = i32 [s1 + 0xf8]\n 15610: u64 [s1 + 0xc8] = a2\n 15614: a0 = 0\n 15616: a1 = 0\n 15618: ra = 546, jump @1381\n      : @579 [@dyn 273] (gas: 19)\n 15624: a4 = u64 [s1 + 0xb8]\n 15628: a4 = a4 | a0\n 15631: a0 = u64 [s1 + 0xf8]\n 15635: a3 = a0 <u 0x80\n 15639: u64 [s1 + 0xb8] = a3\n 15643: a2 = u64 [s1 + 0xf0]\n 15647: a4 = a2 if a3 == 0\n 15650: a4 = 0 if a0 == 0\n 15652: u64 [s1 + 0xf0] = a4\n 15656: a2 = u64 [s1 + 0xc0]\n 15660: a2 = a2 | a1\n 15663: a1 = u64 [s1 + 0xd8]\n 15667: a2 = a1 if a3 == 0\n 15670: a2 = 0 if a0 == 0\n 15672: u64 [s1 + 0xd8] = a2\n 15676: a0 = 0x1\n 15679: a1 = 0\n 15681: a2 = u64 [s1 + 0xc8]\n 15685: ra = 548, jump @1381\n      : @580 [@dyn 274] (gas: 24)\n 15691: a4 = u64 [s1 + 0xd8]\n 15695: t0 = u64 [s1 + 0xf0]\n 15699: a5 = a0\n 15701: a3 = a1\n 15703: a0 = u64 [s1 + 0xb8]\n 15707: a5 = 0 if a0 == 0\n 15709: a3 = 0 if a0 == 0\n 15711: a0 = u64 [s1 + 0xd0]\n 15715: a4 = 0 if a0 != 0\n 15717: t0 = 0 if a0 != 0\n 15719: a3 = 0 if a0 != 0\n 15721: a5 = 0 if a0 != 0\n 15723: a0 = u64 [s1 + 0x88]\n 15727: a0 = a0 & t0\n 15730: a1 = u64 [s1 + 0x90]\n 15734: a1 = a1 & a4\n 15737: a2 = u64 [s1 + 0x80]\n 15741: a2 = a2 & a3\n 15744: a1 = a1 | a2\n 15747: a2 = u64 [s1 + 0x78]\n 15750: a2 = a2 & a5\n 15753: a0 = a0 | a2\n 15756: a0 = a0 | a1\n 15759: jump @584 if a0 == 0\n      : @581 (gas: 3)\n 15762: a1 = u64 [s1 + 0x98]\n 15766: a3 = u64 [s1 + 0xf8]\n 15770: jump @583\n      : @582 (gas: 2)\n 15772: a1 = u64 [s1 + 0x98]\n 15776: fallthrough\n      : @583 (gas: 4)\n 15777: a5 = 0\n 15779: a0 = a3 + 0x1\n 15782: a3 = a0 & a1\n 15785: jump @556\n      : @584 (gas: 8)\n 15788: u64 [s1 + 0xc8] = a3\n 15792: u64 [s1 + 0xd0] = a5\n 15796: u64 [s1 + 0xd8] = a4\n 15800: u64 [s1 + 0xf0] = t0\n 15804: a0 = s1 + 0x7ff\n 15808: a0 = a0 + 0x1\n 15811: a1 = u64 [s1 + 0x70]\n 15814: ra = 550, jump @11\n      : @585 [@dyn 275] (gas: 18)\n 15820: a0 = s1 + 0x1000\n 15824: a0 = u64 [a0 + 0xfffffffffffff818]\n 15828: a1 = s1 + 0x1000\n 15832: a1 = u64 [a1 + 0xfffffffffffff810]\n 15836: a2 = s1 + 0x1000\n 15840: a2 = u64 [a2 + 0xfffffffffffff808]\n 15844: a3 = s1 + 0x1000\n 15848: t0 = u64 [a3 + 0xfffffffffffff800]\n 15852: a4 = u64 [0x200a8]\n 15857: a5 = a0 >u 0\n 15859: a3 = a1 >u 0\n 15861: a3 = a5 if a0 != 0\n 15864: a4 = a4 <u t0\n 15867: a5 = a2 >u 0\n 15869: a5 = a4 if a2 == 0\n 15872: a4 = a1 | a0\n 15875: a5 = a3 if a4 != 0\n 15878: jump @587 if a5 != 0\n      : @586 (gas: 7)\n 15881: a0 = u64 [s1 + 0x60]\n 15884: a0 = a0 + 0x1\n 15887: a1 = u64 [s1 + 0x98]\n 15891: a0 = a0 & a1\n 15894: u64 [s1 + 0x60] = a0\n 15897: a3 = u64 [s1 + 0xf8]\n 15901: jump @583\n      : @587 (gas: 23)\n 15903: a3 = u64 [0x200b0]\n 15908: a3 = a3 + t0\n 15911: a4 = a3 <u t0\n 15914: a5 = a2 + a4\n 15917: a5 = a5 + 0xffffffffffffffff\n 15920: t0 = a5 ^ a2\n 15923: a2 = a5 <u a2\n 15926: a2 = a4 if t0 == 0\n 15929: a4 = a1 + 0xffffffffffffffff\n 15932: a2 = a2 + a4\n 15935: a4 = a2 <u a4\n 15938: a1 = a1 <u 0x1\n 15941: a0 = a0 - a1\n 15944: a0 = a0 + a4\n 15947: a1 = s1 + 0x2078\n 15951: a4 = a1 + 0x100\n 15955: u64 [a4 + 0x88] = a3\n 15959: u64 [a4 + 0x90] = a5\n 15963: u64 [a4 + 0x98] = a2\n 15967: u64 [a4 + 0xa0] = a0\n 15971: a1 = s1 + 0x2200\n 15975: a0 = u64 [s1 + 0x70]\n 15978: ra = 552, jump @12\n      : @588 [@dyn 276] (gas: 14)\n 15984: a0 = sp + 0xffffffffffffffe0\n 15987: a1 = a0 & 0xffffffffffffffe0\n 15990: u64 [s1 + 0xc0] = a1\n 15994: sp = a1\n 15996: a0 = u64 [s1 + 0x40]\n 15999: u64 [a1 + 0x18] = a0\n 16002: a0 = u64 [s1 + 0x48]\n 16005: u64 [a1 + 0x10] = a0\n 16008: a0 = u64 [s1 + 0x50]\n 16011: u64 [a1 + 0x8] = a0\n 16014: a0 = u64 [s1 + 0x58]\n 16017: u64 [a1] = a0\n 16019: a0 = s1 + 0x7e0\n 16023: ra = 554, jump @11\n      : @589 [@dyn 277] (gas: 23)\n 16029: a5 = s1 + 0x700\n 16033: a0 = u64 [a5 + 0xe0]\n 16037: a1 = u64 [0x200a0]\n 16042: a2 = u64 [a5 + 0xf8]\n 16046: a3 = u64 [a5 + 0xe8]\n 16050: a4 = u64 [a5 + 0xf0]\n 16054: a1 = a1 + a0\n 16057: a0 = a1 <u a0\n 16060: a5 = a3 + a0\n 16063: a3 = a5 <u a3\n 16066: a3 = a0 if a0 == 0\n 16069: a3 = a3 + a4\n 16072: a0 = a3 <u a4\n 16075: a0 = a0 + a2\n 16078: a2 = s1 + 0x2078\n 16082: a4 = a2 + 0x100\n 16086: u64 [a4 + 0xa8] = a1\n 16090: u64 [a4 + 0xb0] = a5\n 16094: u64 [a4 + 0xb8] = a3\n 16098: u64 [a4 + 0xc0] = a0\n 16102: a1 = s1 + 0x2220\n 16106: a0 = u64 [s1 + 0xc0]\n 16110: ra = 556, jump @12\n      : @590 [@dyn 278] (gas: 23)\n 16116: a0 = u64 [s1 + 0x68]\n 16119: a0 = a0 + 0x1\n 16122: a1 = u64 [s1 + 0x98]\n 16126: a0 = a0 & a1\n 16129: u64 [s1 + 0x68] = a0\n 16132: a0 = u64 [s1 + 0x78]\n 16135: a2 = u64 [s1 + 0xd0]\n 16139: a0 = a0 | a2\n 16142: u64 [s1 + 0x78] = a0\n 16145: a0 = u64 [s1 + 0x80]\n 16149: a2 = u64 [s1 + 0xc8]\n 16153: a0 = a0 | a2\n 16156: u64 [s1 + 0x80] = a0\n 16160: a0 = u64 [s1 + 0x88]\n 16164: a2 = u64 [s1 + 0xf0]\n 16168: a0 = a0 | a2\n 16171: u64 [s1 + 0x88] = a0\n 16175: a0 = u64 [s1 + 0x90]\n 16179: a2 = u64 [s1 + 0xd8]\n 16183: a0 = a0 | a2\n 16186: u64 [s1 + 0x90] = a0\n 16190: a3 = u64 [s1 + 0xf8]\n 16194: jump @583\n      : @591 (gas: 15)\n 16197: a0 = u64 [s1 + 0x30]\n 16200: a1 = u64 [s1 + 0x78]\n 16203: u64 [a0] = a1\n 16205: a1 = u64 [s1 + 0x80]\n 16209: u64 [a0 + 0x8] = a1\n 16212: a1 = u64 [s1 + 0x88]\n 16216: u64 [a0 + 0x10] = a1\n 16219: a1 = u64 [s1 + 0x90]\n 16223: u64 [a0 + 0x18] = a1\n 16226: a0 = u64 [s1 + 0xa8]\n 16230: ra = 0x22e\n 16234: ecalli 4 // 'caller'\n 16236: a2 = u64 [s1 + 0xb0]\n 16240: t0 = 0x230\n 16244: jump @1343\n      : @592 [@dyn 279] (gas: 2)\n 16247: a2 = u64 [s1 + 0xb0]\n 16251: t0 = 560, jump @1343\n      : @593 [@dyn 280] (gas: 7)\n 16257: u64 [s1 + 2008] = 0\n 16261: u64 [s1 + 0x7d0] = a1\n 16265: u64 [s1 + 0x7c8] = a0\n 16269: a1 = s1 + 0x7c0\n 16273: u64 [s1 + 0x7c0] = a3\n 16277: a0 = 0\n 16279: ra = 562, jump @9\n      : @594 [@dyn 281] (gas: 7)\n 16285: u64 [s1 + 1976] = 0\n 16289: u64 [s1 + 1968] = 0\n 16293: u64 [s1 + 1952] = 0x5\n 16298: a0 = 0x20\n 16301: a1 = s1 + 0x7a0\n 16305: u64 [s1 + 1960] = 0\n 16309: ra = 564, jump @9\n      : @595 [@dyn 282] (gas: 3)\n 16315: a1 = u64 [s1 + 0xe0]\n 16319: a0 = i32 [a1]\n 16321: jump @597 if a0 >u 63\n      : @596 (gas: 2)\n 16325: u32 [a1 + 0] = 0x40\n 16328: fallthrough\n      : @597 (gas: 4)\n 16329: a0 = sp + 0xffffffffffffffe0\n 16332: a0 = a0 & 0xffffffffffffffe0\n 16335: u64 [s1 + 0xf8] = a0\n 16339: t0 = 566, jump @1335\n      : @598 [@dyn 283] (gas: 5)\n 16345: ra = 0x238\n 16349: ecalli 9 // 'hash_keccak_256'\n 16351: a3 = u64 [s1 + 0xf8]\n 16355: t0 = 0x23a\n 16359: jump @1362\n      : @599 [@dyn 284] (gas: 2)\n 16362: a3 = u64 [s1 + 0xf8]\n 16366: t0 = 570, jump @1362\n      : @600 [@dyn 285] (gas: 19)\n 16372: u64 [s1 + 0xf0] = a0\n 16376: a0 = reverse a1\n 16378: u64 [s1 + 0xd8] = a0\n 16382: a0 = reverse a2\n 16384: u64 [s1 + 0xd0] = a0\n 16388: a0 = reverse a3\n 16390: u64 [s1 + 0xc8] = a0\n 16394: a0 = sp + 0xffffffffffffffe0\n 16397: a0 = a0 & 0xffffffffffffffe0\n 16400: u64 [s1 + 0xf8] = a0\n 16404: sp = a0\n 16406: u64 [s1 + 1944] = 0\n 16410: u64 [s1 + 1936] = 0\n 16414: u64 [s1 + 1928] = 0\n 16418: a1 = s1 + 0x780\n 16422: a0 = u64 [s1 + 0x38]\n 16425: u64 [s1 + 0x780] = a0\n 16429: a0 = 0\n 16431: ra = 572, jump @9\n      : @601 [@dyn 286] (gas: 12)\n 16437: a0 = u64 [s1 + 0xc8]\n 16441: a3 = s1 + 0x700\n 16445: u64 [a3 + 0x78] = a0\n 16448: a0 = u64 [s1 + 0xd0]\n 16452: u64 [a3 + 0x70] = a0\n 16455: a0 = u64 [s1 + 0xd8]\n 16459: u64 [a3 + 0x68] = a0\n 16462: a0 = 0x20\n 16465: a1 = s1 + 0x760\n 16469: a2 = u64 [s1 + 0xf0]\n 16473: u64 [a3 + 0x60] = a2\n 16476: ra = 574, jump @9\n      : @602 [@dyn 287] (gas: 3)\n 16482: a1 = u64 [s1 + 0xe0]\n 16486: a0 = i32 [a1]\n 16488: jump @604 if a0 >u 63\n      : @603 (gas: 2)\n 16492: u32 [a1 + 0] = 0x40\n 16495: fallthrough\n      : @604 (gas: 4)\n 16496: a0 = sp + 0xffffffffffffffe0\n 16499: a0 = a0 & 0xffffffffffffffe0\n 16502: u64 [s1 + 0xf0] = a0\n 16506: t0 = 576, jump @1335\n      : @605 [@dyn 288] (gas: 17)\n 16512: ecalli 9 // 'hash_keccak_256'\n 16514: a3 = u64 [s1 + 0xf0]\n 16518: a0 = u64 [a3 + 0x18]\n 16521: a1 = u64 [a3 + 0x10]\n 16524: a2 = u64 [a3 + 0x8]\n 16527: a3 = u64 [a3]\n 16529: a4 = reverse a0\n 16531: a1 = reverse a1\n 16533: a2 = reverse a2\n 16535: a3 = reverse a3\n 16537: a0 = u64 [s1 + 0xf8]\n 16541: u64 [a0 + 0x18] = a3\n 16544: u64 [a0 + 0x10] = a2\n 16547: u64 [a0 + 0x8] = a1\n 16550: u64 [a0] = a4\n 16552: a1 = u64 [s1 + 0x30]\n 16555: ra = 578, jump @12\n      : @606 [@dyn 289] (gas: 3)\n 16561: a0 = s1 + 0x740\n 16565: a1 = 0x40\n 16568: ra = 580, jump @7\n      : @607 [@dyn 290] (gas: 13)\n 16574: a0 = s1 + 0x700\n 16578: a4 = u64 [a0 + 0x58]\n 16581: a5 = u64 [a0 + 0x50]\n 16584: a3 = u64 [a0 + 0x48]\n 16587: a2 = u64 [a0 + 0x40]\n 16590: a0 = a3 | a4\n 16593: a1 = a2 | a5\n 16596: a1 = a1 | a0\n 16599: a1 = a1 >> 0x20\n 16602: a0 = a0 | a5\n 16605: a0 = a0 << 0x20\n 16608: a0 = a0 | a1\n 16611: jump @692 if a0 != 0\n      : @608 (gas: 14)\n 16615: a0 = u64 [s1 + 0x68]\n 16618: a1 = u64 [s1 + 0x98]\n 16622: a0 = a0 & a1\n 16625: u64 [s1 + 1848] = 0\n 16629: u64 [s1 + 1840] = 0\n 16633: u64 [s1 + 1832] = 0\n 16637: a1 = s1 + 0x720\n 16641: u64 [s1 + 0x720] = a0\n 16645: a0 = a2\n 16647: u64 [s1 + 0xf8] = a2\n 16651: u64 [s1 + 0xf0] = a3\n 16655: u64 [s1 + 0xe0] = a4\n 16659: u64 [s1 + 0xd8] = a5\n 16663: ra = 582, jump @9\n      : @609 [@dyn 291] (gas: 10)\n 16669: a2 = u64 [s1 + 0xf8]\n 16673: a0 = u64 [s1 + 0xe0]\n 16677: a1 = u64 [s1 + 0xd8]\n 16681: a0 = a0 | a1\n 16684: a1 = 0xffffffe0\n 16694: a1 = a2 <u a1\n 16697: a3 = u64 [s1 + 0xf0]\n 16701: a1 = 0 if a3 != 0\n 16703: a1 = 0 if a0 != 0\n 16705: jump @692 if a1 == 0\n      : @610 (gas: 10)\n 16709: a0 = u64 [s1 + 0x60]\n 16712: a1 = u64 [s1 + 0x98]\n 16716: a1 = a1 & a0\n 16719: i32 a0 = a2 + 0x20\n 16722: u64 [s1 + 1816] = 0\n 16726: u64 [s1 + 1808] = 0\n 16730: u64 [s1 + 0x700] = a1\n 16734: a1 = s1 + 0x700\n 16738: u64 [s1 + 1800] = 0\n 16742: ra = 584, jump @9\n      : @611 [@dyn 292] (gas: 6)\n 16748: a0 = u64 [s1 + 0xa8]\n 16752: ra = 0x24a\n 16756: ecalli 4 // 'caller'\n 16758: a2 = u64 [s1 + 0xb0]\n 16762: t0 = 0x24c\n 16766: jump @1337\n      : @612 [@dyn 293] (gas: 2)\n 16769: a2 = u64 [s1 + 0xb0]\n 16773: t0 = 588, jump @1337\n      : @613 [@dyn 294] (gas: 30)\n 16779: t0 = a1 | a0\n 16782: a3 = a3 >> 0x20\n 16785: a2 = reverse a2\n 16787: a1 = a2 << 0x20\n 16790: a1 = a1 | a3\n 16793: a2 = a2 >> 0x20\n 16796: u64 [s1 + 1720] = 0\n 16800: u64 [s1 + 1712] = 0\n 16804: u64 [s1 + 1704] = 0\n 16808: a0 = u64 [s1 + 0x38]\n 16811: u64 [s1 + 0x6a0] = a0\n 16815: u64 [s1 + 1752] = 0\n 16819: a3 = u64 [0x200b8]\n 16824: a4 = u64 [0x200c0]\n 16829: a5 = u64 [0x200c8]\n 16834: a0 = u64 [0x200d0]\n 16839: u64 [s1 + 0x6f8] = a3\n 16843: a3 = s1 + 0x600\n 16847: u64 [a3 + 0xf0] = a4\n 16851: u64 [a3 + 0xe8] = a5\n 16855: u64 [a3 + 0xe0] = a0\n 16859: u64 [a3 + 0xd0] = a2\n 16863: u64 [a3 + 0xc8] = a1\n 16867: a1 = 0x40\n 16870: a2 = s1 + 0x6e0\n 16874: a3 = s1 + 0x6c0\n 16878: a4 = s1 + 0x6a0\n 16882: u64 [s1 + 0x6c0] = t0\n 16886: a0 = u64 [s1 + 0xf8]\n 16890: ra = 590, jump @14\n      : @614 [@dyn 295] (gas: 5)\n 16896: a0 = 0\n 16898: a1 = u64 [s1 + 0xe8]\n 16902: a2 = 0\n 16904: ecalli 14 // 'seal_return'\n 16906: jump @1072\n      : @615 (gas: 19)\n 16909: a0 = u64 [s1 + 0xf8]\n 16913: a2 = u64 [s1 + 0x88]\n 16917: a0 = a0 | a2\n 16920: a2 = u64 [s1 + 0x18]\n 16923: a0 = a2 if a4 == 0\n 16926: t1 = u64 [s1 + 0xa0]\n 16930: a3 = t1\n 16932: t0 = u64 [s1 + 0xc8]\n 16936: a3 = a0 if t0 != 0\n 16939: u64 [s1 + 0xf8] = a3\n 16943: a0 = u64 [s1 + 0xc0]\n 16947: a2 = u64 [s1 + 0x90]\n 16951: a0 = a0 | a2\n 16954: a2 = u64 [s1 + 0x20]\n 16957: a0 = a2 if a4 == 0\n 16960: a5 = u64 [s1 + 0xb8]\n 16964: a3 = a5\n 16966: a3 = a0 if t0 != 0\n 16969: t0 = 592, jump @1357\n      : @616 [@dyn 296] (gas: 1)\n 16975: ra = 594, jump @1376\n      : @617 [@dyn 297] (gas: 6)\n 16981: u64 [s1 + 0x90] = a0\n 16985: u64 [s1 + 0x20] = a1\n 16988: a0 = u64 [s1 + 0xb0]\n 16992: a1 = u64 [s1 + 0xa8]\n 16996: a2 = u64 [s1 + 0xf0]\n 17000: ra = 596, jump @1376\n      : @618 [@dyn 298] (gas: 7)\n 17006: u64 [s1 + 0x18] = a0\n 17009: u64 [s1 + 0x88] = a1\n 17013: a1 = u64 [s1 + 0xf0]\n 17017: a2 = 0x80 - a1\n 17021: a0 = u64 [s1 + 0xb8]\n 17025: a1 = u64 [s1 + 0xa0]\n 17029: ra = 598, jump @1381\n      : @619 [@dyn 299] (gas: 21)\n 17035: a2 = u64 [s1 + 0x88]\n 17039: a1 = a1 | a2\n 17042: a3 = u64 [s1 + 0xf0]\n 17046: a4 = a3 <u 0x80\n 17050: u64 [s1 + 0x88] = a4\n 17054: a2 = u64 [s1 + 0x20]\n 17057: a1 = a2 if a4 == 0\n 17060: a2 = u64 [s1 + 0xa8]\n 17064: a2 = a1 if a3 != 0\n 17067: u64 [s1 + 0xa8] = a2\n 17071: a1 = u64 [s1 + 0x18]\n 17074: a0 = a0 | a1\n 17077: a1 = u64 [s1 + 0x90]\n 17081: a0 = a1 if a4 == 0\n 17084: a1 = u64 [s1 + 0xb0]\n 17088: a1 = a0 if a3 != 0\n 17091: a2 = a3\n 17093: u64 [s1 + 0xb0] = a1\n 17097: a0 = u64 [s1 + 0xb8]\n 17101: a1 = u64 [s1 + 0xa0]\n 17105: ra = 600, jump @1376\n      : @620 [@dyn 300] (gas: 3)\n 17111: a5 = 0\n 17113: ra = 0\n 17115: t0 = 602, jump @1353\n      : @621 [@dyn 301] (gas: 3)\n 17121: t1 = u64 [s1 + 0xa8]\n 17125: t2 = u64 [s1 + 0xb0]\n 17129: fallthrough\n      : @622 (gas: 88)\n 17130: u64 [s1 + 0xb8] = a5\n 17134: a2 = t2 >> 0x3f\n 17137: a3 = t1 << 0x1\n 17140: a5 = a3 | a2\n 17143: a3 = t2 << 0x1\n 17146: a4 = u64 [s1 + 0xf8]\n 17150: a4 = a4 >> 0x3f\n 17153: a3 = a3 | a4\n 17156: u64 [s1 + 0xa8] = a3\n 17160: a2 = u64 [s1 + 0x88]\n 17164: u64 [s1 + 0xb0] = a5\n 17168: t2 = t1\n 17170: t1 = a2 ^ a5\n 17173: t0 = a2 <u a5\n 17176: a4 = u64 [s1 + 0x90]\n 17180: a5 = a4 <u a3\n 17183: a5 = t0 if t1 != 0\n 17186: a1 = a1 << 0x1\n 17189: a3 = a0 >> 0x3f\n 17192: a1 = a1 | a3\n 17195: u64 [s1 + 0xa0] = a1\n 17199: a3 = t2 >> 0x3f\n 17202: a0 = a0 << 0x1\n 17205: a3 = a3 | a0\n 17208: a0 = u64 [s1 + 0xf8]\n 17212: a0 = a0 << 0x1\n 17215: a4 = u64 [s1 + 0xc0]\n 17219: a1 = a4 >> 0x3f\n 17222: t0 = a0 | a1\n 17225: a1 = a4 << 0x1\n 17228: a4 = u64 [s1 + 0xc8]\n 17232: t1 = a4 >> 0x3f\n 17235: t1 = a1 | t1\n 17238: a1 = a4 << 0x1\n 17241: a4 = u64 [s1 + 0xe8]\n 17245: t2 = a4 >> 0x3f\n 17248: a1 = a1 | t2\n 17251: a4 = a4 << 0x1\n 17254: a0 = u64 [s1 + 0xb8]\n 17258: a4 = a4 | a0\n 17261: u64 [s1 + 0xe8] = a4\n 17265: a1 = ra | a1\n 17268: u64 [s1 + 0xc8] = a1\n 17272: a1 = ra | t1\n 17275: u64 [s1 + 0xc0] = a1\n 17279: a0 = ra | t0\n 17282: u64 [s1 + 0xf8] = a0\n 17286: a0 = a2 - a3\n 17289: a0 = a0 <u a5\n 17292: a1 = a2 <u a3\n 17295: t0 = u64 [s1 + 0xa0]\n 17299: a4 = a2 - t0\n 17302: a4 = a4 - a1\n 17305: a4 = a4 - a0\n 17308: a5 = a4 >>a 0x3f\n 17311: a0 = u64 [s1 + 0x98]\n 17315: a0 = a0 & a5\n 17318: a1 = u64 [s1 + 0xa8]\n 17322: t2 = a1 - a0\n 17325: a1 = a1 <u a0\n 17328: a0 = u64 [s1 + 0xb0]\n 17332: t1 = a0 - a1\n 17335: a1 = 0 if a0 != 0\n 17337: a0 = a3 - a1\n 17340: a1 = a3 <u a1\n 17343: a1 = t0 - a1\n 17346: a3 = u64 [s1 + 0xf0]\n 17350: ra = u64 [s1 + 0xe0]\n 17354: a2 = a3 | ra\n 17357: a2 = a2 <u 0x1\n 17360: a4 = u64 [s1 + 0xd0]\n 17364: t0 = a4 <u a2\n 17367: a2 = a4 - a2\n 17370: a4 = a3 <u 0x1\n 17373: ra = ra - a4\n 17376: a4 = u64 [s1 + 0xd8]\n 17380: a4 = a4 - t0\n 17383: a3 = a3 + 0xffffffffffffffff\n 17386: u64 [s1 + 0xe0] = ra\n 17390: u64 [s1 + 0xd8] = a4\n 17394: t0 = ra | a4\n 17397: u64 [s1 + 0xf0] = a3\n 17401: a4 = a3 | a2\n 17404: a3 = a4 | t0\n 17407: a5 = a5 & 0x1\n 17410: u64 [s1 + 0xd0] = a2\n 17414: ra = 0\n 17416: jump @622 if a3 != 0\n      : @623 (gas: 4)\n 17420: a0 = u64 [s1 + 0xe8]\n 17424: a0 = a0 << 0x1\n 17427: ra = a5 | a0\n 17430: fallthrough\n      : @624 (gas: 4)\n 17431: u64 [s1 + 0xd0] = ra\n 17435: a0 = s1 + 0x1e20\n 17439: a1 = 0x40\n 17442: ra = 604, jump @7\n      : @625 [@dyn 302] (gas: 18)\n 17448: t0 = s1 + 0x1878\n 17452: t1 = u64 [t0 + 0x5c0]\n 17456: a0 = t0 + 0x500\n 17460: a5 = u64 [a0 + 0xb8]\n 17464: a4 = u64 [a0 + 0xb0]\n 17468: a3 = u64 [a0 + 0xa8]\n 17472: a0 = t1 >u 0\n 17474: a1 = a5 >u 0\n 17476: a1 = a0 if t1 != 0\n 17479: a0 = a4 >u 0\n 17481: a2 = a3 <u 0xffffffffffffffa0\n 17484: a2 = a2 ^ 0x1\n 17487: u64 [s1 + 0xf8] = a4\n 17491: a2 = a0 if a4 != 0\n 17494: a0 = a5 | t1\n 17497: u64 [s1 + 0xd8] = a0\n 17501: a2 = a1 if a0 != 0\n 17504: jump @761 if a2 != 0\n      : @626 (gas: 19)\n 17508: a0 = a3 + 0x60\n 17511: a1 = a0 <u a3\n 17514: a4 = u64 [s1 + 0xf8]\n 17518: a2 = a4 + a1\n 17521: u64 [s1 + 0xf0] = a3\n 17525: a3 = a2 <u a4\n 17528: a3 = a1 if a1 == 0\n 17531: a3 = a3 + a5\n 17534: a1 = a3 <u a5\n 17537: a4 = t1 + a1\n 17540: u64 [t0 + 0x588] = a0\n 17544: u64 [t0 + 0x590] = a2\n 17548: u64 [t0 + 0x598] = a3\n 17552: a0 = 0x40\n 17555: a1 = s1 + 0x1e00\n 17559: u64 [t0 + 0x5a0] = a4\n 17563: u64 [s1 + 0xe0] = a5\n 17567: u64 [s1 + 0xe8] = t1\n 17571: ra = 606, jump @9\n      : @627 [@dyn 303] (gas: 12)\n 17577: a2 = u64 [s1 + 0xf0]\n 17581: a3 = u64 [s1 + 0xe0]\n 17585: a0 = a2 | a3\n 17588: a1 = u64 [s1 + 0xf8]\n 17592: a4 = u64 [s1 + 0xe8]\n 17596: a1 = a1 | a4\n 17599: a0 = a0 | a1\n 17602: a0 = a0 >> 0x20\n 17605: a1 = a1 | a3\n 17608: a1 = a1 << 0x20\n 17611: a0 = a0 | a1\n 17614: jump @692 if a0 != 0\n      : @628 (gas: 13)\n 17618: a0 = u64 [s1 + 0x40]\n 17621: a3 = s1 + 0x1878\n 17625: a4 = a3 + 0x500\n 17629: u64 [a4 + 0x68] = a0\n 17632: a0 = u64 [s1 + 0x48]\n 17635: u64 [a4 + 0x70] = a0\n 17638: a0 = u64 [s1 + 0x50]\n 17641: u64 [a4 + 0x78] = a0\n 17644: a1 = s1 + 0x1de0\n 17648: a0 = u64 [s1 + 0x58]\n 17651: u64 [a4 + 0x80] = a0\n 17655: a0 = a2\n 17657: ra = 608, jump @9\n      : @629 [@dyn 304] (gas: 9)\n 17663: a1 = u64 [s1 + 0xf0]\n 17667: a3 = 0x100000000\n 17677: a0 = 0xffffffe0\n 17687: a0 = a1 <u a0\n 17690: a2 = u64 [s1 + 0xf8]\n 17694: a0 = 0 if a2 != 0\n 17696: a2 = u64 [s1 + 0xd8]\n 17700: a0 = 0 if a2 != 0\n 17702: jump @692 if a0 == 0\n      : @630 (gas: 11)\n 17706: i32 a0 = a1 + 0x20\n 17709: a2 = s1 + 0x1878\n 17713: u64 [a2 + 1376] = 0\n 17717: u64 [a2 + 1368] = 0\n 17721: u64 [a2 + 1360] = 0\n 17725: a1 = s1 + 0x1dc0\n 17729: u64 [s1 + 0xe8] = a3\n 17733: a3 = u64 [s1 + 0xd0]\n 17737: u64 [a2 + 0x548] = a3\n 17741: u64 [s1 + 0xe0] = a0\n 17745: ra = 610, jump @9\n      : @631 [@dyn 305] (gas: 9)\n 17751: a1 = u64 [s1 + 0xf0]\n 17755: a0 = u64 [s1 + 0xe8]\n 17759: a0 = a0 + 0xffffffffffffffc0\n 17762: a0 = a1 <u a0\n 17765: a2 = u64 [s1 + 0xf8]\n 17769: a0 = 0 if a2 != 0\n 17771: a2 = u64 [s1 + 0xd8]\n 17775: a0 = 0 if a2 != 0\n 17777: jump @692 if a0 == 0\n      : @632 (gas: 9)\n 17781: i32 a0 = a1 + 0x40\n 17784: a2 = s1 + 0x1878\n 17788: u64 [a2 + 1344] = 0\n 17792: u64 [a2 + 1336] = 0\n 17796: u64 [a2 + 1328] = 0\n 17800: a1 = s1 + 0x1da0\n 17804: u64 [a2 + 1320] = 0\n 17808: u64 [s1 + 0xd8] = a0\n 17812: ra = 612, jump @9\n      : @633 [@dyn 306] (gas: 6)\n 17818: a0 = u64 [s1 + 0x28]\n 17821: ra = 0x266\n 17825: ecalli 4 // 'caller'\n 17827: a2 = u64 [s1 + 0x80]\n 17831: t0 = 0x268\n 17835: jump @1321\n      : @634 [@dyn 307] (gas: 2)\n 17838: a2 = u64 [s1 + 0x80]\n 17842: t0 = 616, jump @1321\n      : @635 [@dyn 308] (gas: 8)\n 17848: u64 [a2 + 1312] = 0\n 17852: a4 = a2 + 0x500\n 17856: u64 [a4 + 0x18] = a1\n 17859: u64 [a4 + 0x10] = a0\n 17862: a1 = s1 + 0x1d80\n 17866: u64 [a4 + 0x8] = a3\n 17869: a0 = 0\n 17871: ra = 618, jump @9\n      : @636 [@dyn 309] (gas: 3)\n 17877: t0 = 0x26c\n 17881: a1 = s1 + 0x1878\n 17885: fallthrough\n      : @637 [@dyn 310] (gas: 8)\n 17886: u64 [a1 + 1280] = 0\n 17890: u64 [a1 + 1272] = 0\n 17894: u64 [a1 + 1256] = 0x3\n 17899: a2 = a1\n 17901: a0 = 0x20\n 17904: a1 = s1 + 0x1d60\n 17908: u64 [a2 + 1264] = 0\n 17912: ra = 622, jump @9\n      : @638 [@dyn 311] (gas: 3)\n 17918: a1 = u64 [s1 + 0x30]\n 17921: a0 = i32 [a1]\n 17923: jump @640 if a0 >u 63\n      : @639 (gas: 2)\n 17927: u32 [a1 + 0] = 0x40\n 17930: fallthrough\n      : @640 (gas: 12)\n 17931: a0 = sp + 0xffffffffffffffe0\n 17934: a0 = a0 & 0xffffffffffffffe0\n 17937: u64 [s1 + 0xf8] = a0\n 17941: sp = a0\n 17943: i32 a2 = a0 + 0\n 17945: a1 = 0x40\n 17948: a0 = u64 [s1 + 0x38]\n 17951: ra = 0x270\n 17955: ecalli 9 // 'hash_keccak_256'\n 17957: a3 = u64 [s1 + 0xf8]\n 17961: t0 = 0x272\n 17965: jump @1362\n      : @641 [@dyn 312] (gas: 2)\n 17968: a3 = u64 [s1 + 0xf8]\n 17972: t0 = 626, jump @1362\n      : @642 [@dyn 313] (gas: 14)\n 17978: u64 [s1 + 0xe8] = a0\n 17982: a0 = reverse a1\n 17984: u64 [s1 + 0xd0] = a0\n 17988: a0 = reverse a2\n 17990: u64 [s1 + 0xc8] = a0\n 17994: a0 = reverse a3\n 17996: u64 [s1 + 0xc0] = a0\n 18000: a0 = sp + 0xffffffffffffffe0\n 18003: a0 = a0 & 0xffffffffffffffe0\n 18006: u64 [s1 + 0xf8] = a0\n 18010: sp = a0\n 18012: t0 = 0x274\n 18016: a2 = s1 + 0x1878\n 18020: fallthrough\n      : @643 [@dyn 314] (gas: 11)\n 18021: u64 [a2 + 1248] = 0\n 18025: a0 = u64 [s1 + 0x78]\n 18028: a3 = a2 + 0x400\n 18032: u64 [a3 + 0xd8] = a0\n 18036: a0 = u64 [s1 + 0x68]\n 18039: u64 [a3 + 0xd0] = a0\n 18043: a1 = s1 + 0x1d40\n 18047: a0 = u64 [s1 + 0x70]\n 18050: u64 [a3 + 0xc8] = a0\n 18054: a0 = 0\n 18056: ra = 630, jump @9\n      : @644 [@dyn 315] (gas: 14)\n 18062: a0 = u64 [s1 + 0xc0]\n 18066: a1 = s1 + 0x1878\n 18070: a2 = a1 + 0x400\n 18074: u64 [a2 + 0xc0] = a0\n 18078: a0 = u64 [s1 + 0xc8]\n 18082: u64 [a2 + 0xb8] = a0\n 18086: a0 = u64 [s1 + 0xd0]\n 18090: u64 [a2 + 0xb0] = a0\n 18094: a3 = a1\n 18096: a0 = 0x20\n 18099: a1 = s1 + 0x1d20\n 18103: a2 = u64 [s1 + 0xe8]\n 18107: u64 [a3 + 0x4a8] = a2\n 18111: ra = 632, jump @9\n      : @645 [@dyn 316] (gas: 3)\n 18117: a1 = u64 [s1 + 0x30]\n 18120: a0 = i32 [a1]\n 18122: jump @647 if a0 >u 63\n      : @646 (gas: 2)\n 18126: u32 [a1 + 0] = 0x40\n 18129: fallthrough\n      : @647 (gas: 14)\n 18130: a0 = 0xffffffff00000000\n 18140: u64 [s1 + 0xe8] = a0\n 18144: a0 = sp + 0xffffffffffffffe0\n 18147: a0 = a0 & 0xffffffffffffffe0\n 18150: u64 [s1 + 0xd0] = a0\n 18154: sp = a0\n 18156: i32 a2 = a0 + 0\n 18158: a1 = 0x40\n 18161: a0 = u64 [s1 + 0x38]\n 18164: ra = 0x27a\n 18168: ecalli 9 // 'hash_keccak_256'\n 18170: a3 = u64 [s1 + 0xd0]\n 18174: t0 = 0x27c\n 18178: jump @1372\n      : @648 [@dyn 317] (gas: 2)\n 18181: a3 = u64 [s1 + 0xd0]\n 18185: t0 = 636, jump @1372\n      : @649 [@dyn 318] (gas: 15)\n 18191: u64 [s1 + 0xb8] = a5\n 18195: a4 = reverse a1\n 18197: u64 [s1 + 0xc0] = a4\n 18201: a1 = reverse a2\n 18203: u64 [s1 + 0xc8] = a1\n 18207: a0 = reverse a3\n 18209: u64 [s1 + 0xd0] = a0\n 18213: a2 = u64 [s1 + 0xf8]\n 18217: u64 [a2 + 0x18] = a0\n 18220: u64 [a2 + 0x10] = a1\n 18223: u64 [a2 + 0x8] = a4\n 18226: u64 [a2] = a5\n 18228: a0 = s1 + 0x1d00\n 18232: a1 = u64 [s1 + 0xf0]\n 18236: ra = 638, jump @7\n      : @650 [@dyn 319] (gas: 1)\n 18242: t0 = 640, jump @1370\n      : @651 [@dyn 320] (gas: 13)\n 18248: a0 = u64 [a4 + 0xa0]\n 18252: a1 = u64 [a4 + 0x98]\n 18256: a2 = u64 [a4 + 0x90]\n 18260: a3 = u64 [a4 + 0x88]\n 18264: a4 = s1 + 0x2078\n 18268: u64 [a4 + 0x700] = a0\n 18272: a0 = a4 + 0x600\n 18276: u64 [a0 + 0xf8] = a1\n 18280: u64 [a0 + 0xf0] = a2\n 18284: u64 [a0 + 0xe8] = a3\n 18288: a1 = s1 + 0x2760\n 18292: a0 = u64 [s1 + 0xf8]\n 18296: ra = 642, jump @12\n      : @652 [@dyn 321] (gas: 23)\n 18302: a0 = sp + 0xffffffffffffffe0\n 18305: a4 = a0 & 0xffffffffffffffe0\n 18308: u64 [s1 + 0xf8] = a4\n 18312: sp = a4\n 18314: a0 = u64 [s1 + 0xb8]\n 18318: a0 = a0 + 0x1\n 18321: a1 = a0 <u 0x1\n 18324: a2 = u64 [s1 + 0xc0]\n 18328: a1 = a1 + a2\n 18331: a2 = a0 | a1\n 18334: a2 = a2 <u 0x1\n 18337: a3 = u64 [s1 + 0xc8]\n 18341: a2 = a2 + a3\n 18344: a3 = a2 <u a3\n 18347: a5 = u64 [s1 + 0xd0]\n 18351: a3 = a3 + a5\n 18354: u64 [a4 + 0x18] = a3\n 18357: u64 [a4 + 0x10] = a2\n 18360: u64 [a4 + 0x8] = a1\n 18363: u64 [a4] = a0\n 18365: a0 = s1 + 0x1ce0\n 18369: a1 = u64 [s1 + 0xe0]\n 18373: ra = 644, jump @7\n      : @653 [@dyn 322] (gas: 7)\n 18379: a0 = s1 + 0x1878\n 18383: a0 = u64 [a0 + 0x468]\n 18387: a0 = a0 & 0xffffffffffffffff\n 18390: u64 [s1 + 0xf0] = a0\n 18394: a0 = s1 + 0x1cc0\n 18398: a1 = u64 [s1 + 0xf8]\n 18402: ra = 646, jump @11\n      : @654 [@dyn 323] (gas: 15)\n 18408: a2 = s1 + 0x1878\n 18412: a3 = a2 + 0x400\n 18416: a0 = u64 [a3 + 0x60]\n 18419: a1 = u64 [a3 + 0x58]\n 18422: a2 = u64 [a3 + 0x50]\n 18425: a3 = s1 + 0x2078\n 18429: a4 = u64 [s1 + 0xf0]\n 18433: a5 = a3 + 0x700\n 18437: u64 [a5 + 0x8] = a4\n 18440: u64 [a5 + 0x20] = a0\n 18443: u64 [a5 + 0x18] = a1\n 18446: u64 [a5 + 0x10] = a2\n 18449: a1 = s1 + 0x2780\n 18453: a0 = u64 [s1 + 0xf8]\n 18457: ra = 648, jump @12\n      : @655 [@dyn 324] (gas: 3)\n 18463: a0 = s1 + 0x1ca0\n 18467: a1 = u64 [s1 + 0xd8]\n 18471: ra = 650, jump @7\n      : @656 [@dyn 325] (gas: 1)\n 18477: t0 = 652, jump @1370\n      : @657 [@dyn 326] (gas: 12)\n 18483: a0 = u64 [a4 + 0x40]\n 18486: a1 = u64 [a4 + 0x30]\n 18489: a2 = u64 [a4 + 0x38]\n 18492: a3 = u64 [a4 + 0x28]\n 18495: a0 = a0 | a1\n 18498: a2 = a2 | a3\n 18501: a0 = a0 | a2\n 18504: a0 = a0 >u 0\n 18506: u64 [s1 + 0xf0] = a0\n 18510: a0 = s1 + 0x1c80\n 18514: a1 = u64 [s1 + 0xf8]\n 18518: ra = 654, jump @11\n      : @658 [@dyn 327] (gas: 1)\n 18524: t0 = 656, jump @1370\n      : @659 [@dyn 328] (gas: 16)\n 18530: a0 = u64 [a4 + 0x10]\n 18533: a1 = u64 [a4 + 0x8]\n 18536: a2 = u64 [a4 + 0x20]\n 18539: a3 = u64 [a4 + 0x18]\n 18542: a0 = a0 & 0xffffffffffffff00\n 18546: a4 = u64 [s1 + 0xf0]\n 18550: a0 = a0 | a4\n 18553: a4 = s1 + 0x2078\n 18557: a5 = a4 + 0x700\n 18561: u64 [a5 + 0x40] = a2\n 18564: u64 [a5 + 0x38] = a3\n 18567: u64 [a5 + 0x28] = a1\n 18570: u64 [a5 + 0x30] = a0\n 18573: a1 = s1 + 0x27a0\n 18577: a0 = u64 [s1 + 0xf8]\n 18581: ra = 658, jump @12\n      : @660 [@dyn 329] (gas: 6)\n 18587: a0 = u64 [s1 + 0x28]\n 18590: ra = 0x294\n 18594: ecalli 4 // 'caller'\n 18596: a2 = u64 [s1 + 0x80]\n 18600: t0 = 0x296\n 18604: jump @1321\n      : @661 [@dyn 330] (gas: 2)\n 18607: a2 = u64 [s1 + 0x80]\n 18611: t0 = 662, jump @1321\n      : @662 [@dyn 331] (gas: 8)\n 18617: u64 [a2 + 1024] = 0\n 18621: a4 = a2 + 0x300\n 18625: u64 [a4 + 0xf8] = a1\n 18629: u64 [a4 + 0xf0] = a0\n 18633: a1 = s1 + 0x1c60\n 18637: u64 [a4 + 0xe8] = a3\n 18641: a0 = 0\n 18643: ra = 664, jump @9\n      : @663 [@dyn 332] (gas: 3)\n 18649: t0 = 0x29a\n 18653: a1 = s1 + 0x1878\n 18657: fallthrough\n      : @664 [@dyn 333] (gas: 8)\n 18658: u64 [a1 + 992] = 0\n 18662: u64 [a1 + 984] = 0\n 18666: u64 [a1 + 968] = 0x2\n 18671: a2 = a1\n 18673: a0 = 0x20\n 18676: a1 = s1 + 0x1c40\n 18680: u64 [a2 + 976] = 0\n 18684: ra = 668, jump @9\n      : @665 [@dyn 334] (gas: 7)\n 18690: a1 = u64 [s1 + 0x30]\n 18693: a0 = sp + 0xffffffffffffffe0\n 18696: a0 = a0 & 0xffffffffffffffe0\n 18699: u64 [s1 + 0xf8] = a0\n 18703: sp = a0\n 18705: a0 = i32 [a1]\n 18707: jump @667 if a0 >=u 64\n      : @666 (gas: 2)\n 18711: u32 [a1 + 0] = 0x40\n 18714: fallthrough\n      : @667 (gas: 12)\n 18715: a0 = sp + 0xffffffffffffffe0\n 18718: a0 = a0 & 0xffffffffffffffe0\n 18721: u64 [s1 + 0xf0] = a0\n 18725: sp = a0\n 18727: i32 a2 = a0 + 0\n 18729: a1 = 0x40\n 18732: a0 = u64 [s1 + 0x38]\n 18735: ra = 0x29e\n 18739: ecalli 9 // 'hash_keccak_256'\n 18741: a3 = u64 [s1 + 0xf0]\n 18745: t0 = 0x2a0\n 18749: jump @1333\n      : @668 [@dyn 335] (gas: 2)\n 18752: a3 = u64 [s1 + 0xf0]\n 18756: t0 = 672, jump @1333\n      : @669 [@dyn 336] (gas: 7)\n 18762: a1 = u64 [s1 + 0xf8]\n 18766: u64 [a1] = a4\n 18768: u64 [a1 + 0x8] = a5\n 18771: u64 [a1 + 0x10] = a2\n 18774: u64 [a1 + 0x18] = a0\n 18777: a0 = s1 + 0x1c20\n 18781: ra = 674, jump @11\n      : @670 [@dyn 337] (gas: 9)\n 18787: a0 = s1 + 0x1878\n 18791: a0 = u64 [a0 + 0x3a8]\n 18795: a0 = a0 + 0x1\n 18798: a1 = u64 [s1 + 0x60]\n 18801: a0 = a0 & a1\n 18804: u64 [s1 + 0xf0] = a0\n 18808: a0 = s1 + 0x1c00\n 18812: a1 = u64 [s1 + 0xf8]\n 18816: ra = 676, jump @11\n      : @671 [@dyn 338] (gas: 22)\n 18822: a3 = s1 + 0x1878\n 18826: a4 = a3 + 0x300\n 18830: a0 = u64 [a4 + 0x90]\n 18834: a1 = u64 [a4 + 0x98]\n 18838: a2 = u64 [a4 + 0xa0]\n 18842: a3 = u64 [a4 + 0x88]\n 18846: a0 = a0 & 0xffffffffffffffff\n 18849: a1 = a1 & 0xffffffffffffffff\n 18852: a2 = a2 & 0xffffffffffffffff\n 18855: a4 = u64 [s1 + 0xe8]\n 18859: a3 = a3 & a4\n 18862: a4 = u64 [s1 + 0xf0]\n 18866: a3 = a3 | a4\n 18869: a4 = s1 + 0x2078\n 18873: a5 = a4 + 0x700\n 18877: u64 [a5 + 0x60] = a2\n 18880: u64 [a5 + 0x58] = a1\n 18883: u64 [a5 + 0x50] = a0\n 18886: u64 [a5 + 0x48] = a3\n 18889: a1 = s1 + 0x27c0\n 18893: a0 = u64 [s1 + 0xf8]\n 18897: ra = 678, jump @12\n      : @672 [@dyn 339] (gas: 3)\n 18903: a0 = s1 + 0x1be0\n 18907: a1 = 0x40\n 18910: ra = 680, jump @7\n      : @673 [@dyn 340] (gas: 7)\n 18916: a3 = s1 + 0x1878\n 18920: a5 = a3 + 0x300\n 18924: a0 = u64 [a5 + 0x80]\n 18928: a1 = u64 [a5 + 0x78]\n 18931: a2 = u64 [a5 + 0x70]\n 18934: a4 = u64 [a5 + 0x68]\n 18937: t0 = 682, jump @1349\n      : @674 [@dyn 341] (gas: 1)\n 18943: jump @692 if a0 != 0\n      : @675 (gas: 13)\n 18947: a0 = u64 [s1 + 0x40]\n 18950: a2 = a3 + 0x300\n 18954: u64 [a2 + 0x48] = a0\n 18957: a0 = u64 [s1 + 0x48]\n 18960: u64 [a2 + 0x50] = a0\n 18963: a0 = u64 [s1 + 0x50]\n 18966: u64 [a2 + 0x58] = a0\n 18969: a1 = s1 + 0x1bc0\n 18973: a0 = u64 [s1 + 0x58]\n 18976: u64 [a2 + 0x60] = a0\n 18979: a0 = a4\n 18981: u64 [s1 + 0xf8] = a4\n 18985: ra = 684, jump @9\n      : @676 [@dyn 342] (gas: 6)\n 18991: a0 = u64 [s1 + 0x28]\n 18994: ra = 0x2ae\n 18998: ecalli 4 // 'caller'\n 19000: a2 = u64 [s1 + 0x80]\n 19004: t0 = 0x2b0\n 19008: jump @1337\n      : @677 [@dyn 343] (gas: 2)\n 19011: a2 = u64 [s1 + 0x80]\n 19015: t0 = 688, jump @1337\n      : @678 [@dyn 344] (gas: 43)\n 19021: t0 = a1 | a0\n 19024: a3 = a3 >> 0x20\n 19027: a2 = reverse a2\n 19029: a1 = a2 << 0x20\n 19032: a1 = a1 | a3\n 19035: a2 = a2 >> 0x20\n 19038: a3 = u64 [0x20000]\n 19043: a4 = u64 [0x20008]\n 19048: a5 = u64 [0x20010]\n 19053: a0 = s1 + 0x1878\n 19057: u64 [a0 + 0x340] = a3\n 19061: a0 = s1 + 0x1878\n 19065: u64 [a0 + 0x338] = a4\n 19069: a3 = s1 + 0x1878\n 19073: u64 [a3 + 768] = 0\n 19077: a0 = s1 + 0x1878\n 19081: u64 [a0 + 0x330] = a5\n 19085: a3 = u64 [0x20018]\n 19090: a4 = s1 + 0x1878\n 19094: a0 = u64 [s1 + 0x78]\n 19097: u64 [a4 + 0x2f8] = a0\n 19101: a4 = s1 + 0x1878\n 19105: a0 = u64 [s1 + 0x68]\n 19108: u64 [a4 + 0x2f0] = a0\n 19112: a4 = s1 + 0x1878\n 19116: a0 = u64 [s1 + 0x70]\n 19119: u64 [a4 + 0x2e8] = a0\n 19123: a0 = s1 + 0x1878\n 19127: u64 [a0 + 0x328] = a3\n 19131: a3 = s1 + 0x1878\n 19135: u64 [a3 + 0x318] = a2\n 19139: a2 = s1 + 0x1878\n 19143: u64 [a2 + 0x310] = a1\n 19147: a1 = s1 + 0x1878\n 19151: u64 [a1 + 0x308] = t0\n 19155: a1 = 0x20\n 19158: a2 = s1 + 0x1ba0\n 19162: a3 = s1 + 0x1b80\n 19166: a4 = s1 + 0x1b60\n 19170: a0 = s1 + 0x1878\n 19174: u64 [a0 + 800] = 0\n 19178: a0 = u64 [s1 + 0xf8]\n 19182: ra = 690, jump @14\n      : @679 [@dyn 345] (gas: 3)\n 19188: a0 = s1 + 0x1b40\n 19192: a1 = 0x40\n 19195: ra = 692, jump @7\n      : @680 [@dyn 346] (gas: 7)\n 19201: a3 = s1 + 0x1878\n 19205: a5 = a3 + 0x200\n 19209: a0 = u64 [a5 + 0xe0]\n 19213: a1 = u64 [a5 + 0xd8]\n 19217: a2 = u64 [a5 + 0xd0]\n 19221: a4 = u64 [a5 + 0xc8]\n 19225: t0 = 694, jump @1349\n      : @681 [@dyn 347] (gas: 1)\n 19231: jump @692 if a0 != 0\n      : @682 (gas: 13)\n 19235: u64 [a3 + 704] = 0\n 19239: a0 = u64 [s1 + 0x70]\n 19242: a2 = a3 + 0x200\n 19246: u64 [a2 + 0xa8] = a0\n 19250: a0 = u64 [s1 + 0x68]\n 19253: u64 [a2 + 0xb0] = a0\n 19257: a1 = s1 + 0x1b20\n 19261: a0 = u64 [s1 + 0x78]\n 19264: u64 [a2 + 0xb8] = a0\n 19268: a0 = a4\n 19270: u64 [s1 + 0xf8] = a4\n 19274: ra = 0x196\n 19278: jump @9\n      : @683 (gas: 3)\n 19281: a0 = s1 + 0x19c0\n 19285: a1 = 0x40\n 19288: ra = 696, jump @7\n      : @684 [@dyn 348] (gas: 12)\n 19294: a0 = s1 + 0x1878\n 19298: a2 = a0 + 0x100\n 19302: a1 = u64 [a2 + 0x60]\n 19305: u64 [s1 + 0xf0] = a1\n 19309: a1 = u64 [a2 + 0x58]\n 19312: u64 [s1 + 0xe8] = a1\n 19316: a1 = u64 [a2 + 0x50]\n 19319: u64 [s1 + 0xe0] = a1\n 19323: a0 = u64 [a2 + 0x48]\n 19326: u64 [s1 + 0xf8] = a0\n 19330: ecalli 13 // 'return_data_size'\n 19332: fallthrough\n      : @685 (gas: 12)\n 19333: a1 = u64 [s1 + 0xf0]\n 19337: a2 = u64 [s1 + 0xe0]\n 19341: a1 = a1 | a2\n 19344: a3 = u64 [s1 + 0xe8]\n 19348: a2 = u64 [s1 + 0xf8]\n 19352: a2 = a2 | a3\n 19355: a2 = a2 | a1\n 19358: a2 = a2 >> 0x20\n 19361: a1 = a1 | a3\n 19364: a1 = a1 << 0x20\n 19367: a1 = a1 | a2\n 19370: jump @692 if a1 != 0\n      : @686 (gas: 3)\n 19373: a2 = a0\n 19375: a0 = a0 >> 0x20\n 19378: jump @692 if a0 != 0\n      : @687 (gas: 6)\n 19381: i32 a0 = a2 + 0\n 19383: u64 [s1 + 0xf0] = a0\n 19387: a0 = u64 [s1 + 0xf8]\n 19391: a1 = a2\n 19393: u64 [s1 + 0xe8] = a2\n 19397: ra = 698, jump @20\n      : @688 [@dyn 349] (gas: 9)\n 19403: a1 = s1 + 0x2078\n 19407: a2 = u64 [s1 + 0xe8]\n 19411: u32 [a1 + 0x648] = a2\n 19415: i32 a0 = a0 + 0\n 19417: a1 = s1 + 0x2000\n 19421: i32 a1 = a1 + 0x6c0\n 19425: a2 = 0\n 19427: ecalli 12 // 'return_data_copy'\n 19429: fallthrough\n      : @689 (gas: 4)\n 19430: a0 = s1 + 0x2078\n 19434: a0 = i32 [a0 + 0x648]\n 19438: a1 = u64 [s1 + 0xf0]\n 19442: jump @692 if a0 <u a1\n      : @690 (gas: 2)\n 19445: ecalli 13 // 'return_data_size'\n 19447: fallthrough\n      : @691 (gas: 3)\n 19448: a1 = a0\n 19450: a0 = a0 >> 0x20\n 19453: jump @799 if a0 == 0\n      : @692 (gas: 1)\n 19457: trap\n      : @693 (gas: 11)\n 19458: a2 = s1 + 0x7ff\n 19462: a2 = a2 + 0x79\n 19465: u64 [a2 + 1176] = 0\n 19469: u64 [a2 + 1168] = 0\n 19473: a0 = 0xfcb63a2200000000\n 19483: u64 [a2 + 0x4a0] = a0\n 19487: a1 = s1 + 0x7ff\n 19491: a1 = a1 + 0x501\n 19495: u64 [a2 + 1160] = 0\n 19499: a0 = 0\n 19501: ra = 700, jump @9\n      : @694 [@dyn 350] (gas: 2)\n 19507: a1 = i32 [0x20150]\n 19512: jump @696 if a1 >u 31\n      : @695 (gas: 3)\n 19516: u32 [0x20150] = 0x20\n 19522: a1 = 0x20160\n 19527: jump @760\n      : @696 (gas: 2)\n 19530: a1 = 0x20160\n 19535: jump @760\n      : @697 (gas: 6)\n 19538: a1 = 0x20160\n 19543: i32 a1 = a1 + 0\n 19545: a0 = 0x1\n 19548: a2 = 0\n 19550: ecalli 14 // 'seal_return'\n 19552: jump @1072\n      : @698 (gas: 6)\n 19555: a1 = 0x20160\n 19560: i32 a1 = a1 + 0\n 19562: a0 = 0x1\n 19565: a2 = 0\n 19567: ecalli 14 // 'seal_return'\n 19569: jump @1072\n      : @699 (gas: 6)\n 19572: a1 = 0x20160\n 19577: i32 a1 = a1 + 0\n 19579: a0 = 0x1\n 19582: a2 = 0\n 19584: ecalli 14 // 'seal_return'\n 19586: jump @1072\n      : @700 (gas: 6)\n 19589: a1 = 0x20160\n 19594: i32 a1 = a1 + 0\n 19596: a0 = 0x1\n 19599: a2 = 0\n 19601: ecalli 14 // 'seal_return'\n 19603: jump @1072\n      : @701 (gas: 11)\n 19606: a2 = s1 + 0x7ff\n 19610: a2 = a2 + 0x79\n 19613: u64 [a2 + 600] = 0\n 19617: u64 [a2 + 592] = 0\n 19621: a0 = 0x2c5211c600000000\n 19631: u64 [a2 + 0x260] = a0\n 19635: a1 = s1 + 0x7ff\n 19639: a1 = a1 + 0x2c1\n 19643: u64 [a2 + 584] = 0\n 19647: a0 = 0\n 19649: ra = 702, jump @9\n      : @702 [@dyn 351] (gas: 2)\n 19655: a1 = i32 [0x20150]\n 19660: jump @704 if a1 >u 31\n      : @703 (gas: 3)\n 19664: u32 [0x20150] = 0x20\n 19670: a1 = 0x20160\n 19675: jump @760\n      : @704 (gas: 2)\n 19678: a1 = 0x20160\n 19683: jump @760\n      : @705 (gas: 11)\n 19686: a2 = s1 + 0x7ff\n 19690: a2 = a2 + 0x79\n 19693: u64 [a2 + 632] = 0\n 19697: u64 [a2 + 624] = 0\n 19701: a0 = 0xfcb63a2200000000\n 19711: u64 [a2 + 0x280] = a0\n 19715: a1 = s1 + 0x7ff\n 19719: a1 = a1 + 0x2e1\n 19723: u64 [a2 + 616] = 0\n 19727: a0 = 0\n 19729: ra = 704, jump @9\n      : @706 [@dyn 352] (gas: 2)\n 19735: a1 = i32 [0x20150]\n 19740: jump @708 if a1 >u 31\n      : @707 (gas: 3)\n 19744: u32 [0x20150] = 0x20\n 19750: a1 = 0x20160\n 19755: jump @760\n      : @708 (gas: 2)\n 19758: a1 = 0x20160\n 19763: jump @760\n      : @709 (gas: 6)\n 19766: a1 = 0x20160\n 19771: i32 a1 = a1 + 0\n 19773: a0 = 0x1\n 19776: a2 = 0\n 19778: ecalli 14 // 'seal_return'\n 19780: jump @1072\n      : @710 (gas: 6)\n 19783: a1 = 0x20160\n 19788: i32 a1 = a1 + 0\n 19790: a0 = 0x1\n 19793: a2 = 0\n 19795: ecalli 14 // 'seal_return'\n 19797: jump @1072\n      : @711 (gas: 6)\n 19800: a1 = 0x20160\n 19805: i32 a1 = a1 + 0\n 19807: a0 = 0x1\n 19810: a2 = 0\n 19812: ecalli 14 // 'seal_return'\n 19814: jump @1072\n      : @712 (gas: 6)\n 19817: a1 = 0x20160\n 19822: i32 a1 = a1 + 0\n 19824: a0 = 0x1\n 19827: a2 = 0\n 19829: ecalli 14 // 'seal_return'\n 19831: jump @1072\n      : @713 (gas: 6)\n 19834: a1 = 0x20160\n 19839: i32 a1 = a1 + 0\n 19841: a0 = 0x1\n 19844: a2 = 0\n 19846: ecalli 14 // 'seal_return'\n 19848: jump @1072\n      : @714 (gas: 6)\n 19851: a1 = 0x20160\n 19856: i32 a1 = a1 + 0\n 19858: a0 = 0x1\n 19861: a2 = 0\n 19863: ecalli 14 // 'seal_return'\n 19865: jump @1072\n      : @715 (gas: 6)\n 19868: a1 = 0x20160\n 19873: i32 a1 = a1 + 0\n 19875: a0 = 0x1\n 19878: a2 = 0\n 19880: ecalli 14 // 'seal_return'\n 19882: jump @1072\n      : @716 (gas: 6)\n 19885: a1 = 0x20160\n 19890: i32 a1 = a1 + 0\n 19892: a0 = 0x1\n 19895: a2 = 0\n 19897: ecalli 14 // 'seal_return'\n 19899: jump @1072\n      : @717 (gas: 6)\n 19902: a1 = 0x20160\n 19907: i32 a1 = a1 + 0\n 19909: a0 = 0x1\n 19912: a2 = 0\n 19914: ecalli 14 // 'seal_return'\n 19916: jump @1072\n      : @718 (gas: 3)\n 19919: t0 = 0x2c2\n 19923: a2 = s1 + 0x1878\n 19927: fallthrough\n      : @719 [@dyn 353] (gas: 8)\n 19928: u64 [a2 + 504] = 0\n 19932: u64 [a2 + 496] = 0\n 19936: a0 = 0xcc67c13b00000000\n 19946: u64 [a2 + 0x200] = a0\n 19950: a1 = s1 + 0x1a60\n 19954: u64 [a2 + 488] = 0\n 19958: a0 = 0\n 19960: ra = 708, jump @9\n      : @720 [@dyn 354] (gas: 2)\n 19966: a1 = i32 [0x20150]\n 19971: jump @722 if a1 >u 31\n      : @721 (gas: 3)\n 19975: u32 [0x20150] = 0x20\n 19981: a1 = 0x20160\n 19986: jump @760\n      : @722 (gas: 2)\n 19989: a1 = 0x20160\n 19994: jump @760\n      : @723 (gas: 10)\n 19997: a0 = s1 + 0x1878\n 20001: u64 [a0 + 568] = 0\n 20005: u64 [a0 + 560] = 0\n 20009: u64 [a0 + 552] = 0\n 20013: a2 = a0\n 20015: a0 = 0x4e487b7100000000\n 20025: a1 = s1 + 0x1aa0\n 20029: u64 [a2 + 0x240] = a0\n 20033: a0 = 0\n 20035: ra = 710, jump @9\n      : @724 [@dyn 355] (gas: 3)\n 20041: t0 = 0x2c8\n 20045: a1 = s1 + 0x1878\n 20049: fallthrough\n      : @725 [@dyn 356] (gas: 9)\n 20050: u64 [a1 + 544] = 0\n 20054: u64 [a1 + 536] = 0\n 20058: u64 [a1 + 520] = 0x11\n 20063: a2 = a1\n 20065: a0 = 0x4\n 20068: a1 = s1 + 0x1a80\n 20072: u64 [a2 + 528] = 0\n 20076: ra = 0x2dc\n 20080: jump @9\n      : @726 (gas: 3)\n 20083: t0 = 0x2ca\n 20087: a2 = s1 + 0x1878\n 20091: fallthrough\n      : @727 [@dyn 357] (gas: 8)\n 20092: u64 [a2 + 600] = 0\n 20096: u64 [a2 + 592] = 0\n 20100: a0 = 0xe9987cdd00000000\n 20110: u64 [a2 + 0x260] = a0\n 20114: a1 = s1 + 0x1ac0\n 20118: u64 [a2 + 584] = 0\n 20122: a0 = 0\n 20124: ra = 716, jump @9\n      : @728 [@dyn 358] (gas: 3)\n 20130: a0 = u64 [s1 + 0x30]\n 20133: a0 = i32 [a0]\n 20135: jump @730 if a0 >u 31\n      : @729 (gas: 7)\n 20139: a1 = u64 [s1 + 0x30]\n 20142: u32 [a1 + 0] = 0x20\n 20145: a0 = 0x1\n 20148: a2 = 0x4\n 20151: a1 = u64 [s1 + 0x38]\n 20154: ecalli 14 // 'seal_return'\n 20156: jump @767\n      : @730 (gas: 5)\n 20159: a0 = 0x1\n 20162: a2 = 0x4\n 20165: a1 = u64 [s1 + 0x38]\n 20168: ecalli 14 // 'seal_return'\n 20170: jump @767\n      : @731 (gas: 6)\n 20173: a1 = 0x20160\n 20178: i32 a1 = a1 + 0\n 20180: a0 = 0x1\n 20183: a2 = 0\n 20185: ecalli 14 // 'seal_return'\n 20187: jump @1072\n      : @732 (gas: 6)\n 20190: a1 = 0x20160\n 20195: i32 a1 = a1 + 0\n 20197: a0 = 0x1\n 20200: a2 = 0\n 20202: ecalli 14 // 'seal_return'\n 20204: jump @1072\n      : @733 (gas: 6)\n 20207: a1 = 0x20160\n 20212: i32 a1 = a1 + 0\n 20214: a0 = 0x1\n 20217: a2 = 0\n 20219: ecalli 14 // 'seal_return'\n 20221: jump @1072\n      : @734 (gas: 6)\n 20224: a1 = 0x20160\n 20229: i32 a1 = a1 + 0\n 20231: a0 = 0x1\n 20234: a2 = 0\n 20236: ecalli 14 // 'seal_return'\n 20238: jump @1072\n      : @735 (gas: 6)\n 20241: a1 = 0x20160\n 20246: i32 a1 = a1 + 0\n 20248: a0 = 0x1\n 20251: a2 = 0\n 20253: ecalli 14 // 'seal_return'\n 20255: jump @1072\n      : @736 (gas: 6)\n 20258: a1 = 0x20160\n 20263: i32 a1 = a1 + 0\n 20265: a0 = 0x1\n 20268: a2 = 0\n 20270: ecalli 14 // 'seal_return'\n 20272: jump @1072\n      : @737 (gas: 6)\n 20275: a1 = 0x20160\n 20280: i32 a1 = a1 + 0\n 20282: a0 = 0x1\n 20285: a2 = 0\n 20287: ecalli 14 // 'seal_return'\n 20289: jump @1072\n      : @738 (gas: 6)\n 20292: a1 = 0x20160\n 20297: i32 a1 = a1 + 0\n 20299: a0 = 0x1\n 20302: a2 = 0\n 20304: ecalli 14 // 'seal_return'\n 20306: jump @1072\n      : @739 (gas: 6)\n 20309: a1 = 0x20160\n 20314: i32 a1 = a1 + 0\n 20316: a0 = 0x1\n 20319: a2 = 0\n 20321: ecalli 14 // 'seal_return'\n 20323: jump @1072\n      : @740 (gas: 3)\n 20326: t0 = 0x2ce\n 20330: a2 = s1 + 0x1878\n 20334: fallthrough\n      : @741 [@dyn 359] (gas: 8)\n 20335: u64 [a2 + 88] = 0\n 20338: u64 [a2 + 80] = 0\n 20341: a0 = 0xdd75059200000000\n 20351: u64 [a2 + 0x60] = a0\n 20354: a1 = s1 + 0x18c0\n 20358: u64 [a2 + 72] = 0\n 20361: a0 = 0\n 20363: ra = 720, jump @9\n      : @742 [@dyn 360] (gas: 2)\n 20369: a1 = i32 [0x20150]\n 20374: jump @744 if a1 >u 31\n      : @743 (gas: 3)\n 20378: u32 [0x20150] = 0x20\n 20384: a1 = 0x20160\n 20389: jump @760\n      : @744 (gas: 2)\n 20392: a1 = 0x20160\n 20397: jump @760\n      : @745 (gas: 6)\n 20400: a1 = 0x20160\n 20405: i32 a1 = a1 + 0\n 20407: a0 = 0x1\n 20410: a2 = 0\n 20412: ecalli 14 // 'seal_return'\n 20414: jump @1072\n      : @746 (gas: 6)\n 20417: a1 = 0x20160\n 20422: i32 a1 = a1 + 0\n 20424: a0 = 0x1\n 20427: a2 = 0\n 20429: ecalli 14 // 'seal_return'\n 20431: jump @1072\n      : @747 (gas: 6)\n 20434: a1 = 0x20160\n 20439: i32 a1 = a1 + 0\n 20441: a0 = 0x1\n 20444: a2 = 0\n 20446: ecalli 14 // 'seal_return'\n 20448: jump @1072\n      : @748 (gas: 6)\n 20451: a1 = 0x20160\n 20456: i32 a1 = a1 + 0\n 20458: a0 = 0x1\n 20461: a2 = 0\n 20463: ecalli 14 // 'seal_return'\n 20465: jump @1072\n      : @749 (gas: 6)\n 20468: a1 = 0x20160\n 20473: i32 a1 = a1 + 0\n 20475: a0 = 0x1\n 20478: a2 = 0\n 20480: ecalli 14 // 'seal_return'\n 20482: jump @1072\n      : @750 (gas: 6)\n 20485: a1 = 0x20160\n 20490: i32 a1 = a1 + 0\n 20492: a0 = 0x1\n 20495: a2 = 0\n 20497: ecalli 14 // 'seal_return'\n 20499: jump @1072\n      : @751 (gas: 3)\n 20502: t0 = 0x2d2\n 20506: a2 = s1 + 0x1078\n 20510: fallthrough\n      : @752 [@dyn 361] (gas: 8)\n 20511: u64 [a2 + 1816] = 0\n 20515: u64 [a2 + 1808] = 0\n 20519: a0 = 0x2c5211c600000000\n 20529: u64 [a2 + 0x720] = a0\n 20533: a1 = s1 + 0x1780\n 20537: u64 [a2 + 1800] = 0\n 20541: a0 = 0\n 20543: ra = 724, jump @9\n      : @753 [@dyn 362] (gas: 2)\n 20549: a1 = i32 [0x20150]\n 20554: jump @755 if a1 >u 31\n      : @754 (gas: 3)\n 20558: u32 [0x20150] = 0x20\n 20564: a1 = 0x20160\n 20569: jump @760\n      : @755 (gas: 2)\n 20571: a1 = 0x20160\n 20576: jump @760\n      : @756 (gas: 11)\n 20578: a2 = s1 + 0x7ff\n 20582: a2 = a2 + 0x79\n 20585: u64 [a2 + 408] = 0\n 20589: u64 [a2 + 400] = 0\n 20593: a0 = 0xd5b25b6300000000\n 20603: u64 [a2 + 0x1a0] = a0\n 20607: a1 = s1 + 0x7ff\n 20611: a1 = a1 + 0x201\n 20615: u64 [a2 + 392] = 0\n 20619: a0 = 0\n 20621: ra = 726, jump @9\n      : @757 [@dyn 363] (gas: 2)\n 20627: a1 = i32 [0x20150]\n 20632: jump @759 if a1 >u 31\n      : @758 (gas: 3)\n 20636: u32 [0x20150] = 0x20\n 20642: a1 = 0x20160\n 20647: jump @760\n      : @759 (gas: 2)\n 20649: a1 = 0x20160\n 20654: fallthrough\n      : @760 (gas: 5)\n 20655: i32 a1 = a1 + 0\n 20657: a0 = 0x1\n 20660: a2 = 0x4\n 20663: ecalli 14 // 'seal_return'\n 20665: fallthrough\n      : @761 (gas: 8)\n 20666: u64 [t0 + 664] = 0\n 20670: u64 [t0 + 656] = 0\n 20674: u64 [t0 + 648] = 0\n 20678: a0 = 0x4e487b7100000000\n 20688: a1 = s1 + 0x1b00\n 20692: u64 [t0 + 0x2a0] = a0\n 20696: a0 = 0\n 20698: ra = 728, jump @9\n      : @762 [@dyn 364] (gas: 3)\n 20704: t0 = 0x2da\n 20708: a1 = s1 + 0x1878\n 20712: fallthrough\n      : @763 [@dyn 365] (gas: 8)\n 20713: u64 [a1 + 640] = 0\n 20717: u64 [a1 + 632] = 0\n 20721: u64 [a1 + 616] = 0x41\n 20726: a2 = a1\n 20728: a0 = 0x4\n 20731: a1 = s1 + 0x1ae0\n 20735: u64 [a2 + 624] = 0\n 20739: ra = 732, jump @9\n      : @764 [@dyn 366] (gas: 3)\n 20745: a0 = u64 [s1 + 0x30]\n 20748: a0 = i32 [a0]\n 20750: jump @766 if a0 >u 63\n      : @765 (gas: 7)\n 20754: a1 = u64 [s1 + 0x30]\n 20757: u32 [a1 + 0] = 0x40\n 20760: a0 = 0x1\n 20763: a2 = 0x24\n 20766: a1 = u64 [s1 + 0x38]\n 20769: ecalli 14 // 'seal_return'\n 20771: jump @767\n      : @766 (gas: 5)\n 20773: a0 = 0x1\n 20776: a2 = 0x24\n 20779: a1 = u64 [s1 + 0x38]\n 20782: ecalli 14 // 'seal_return'\n 20784: fallthrough\n      : @767 (gas: 6)\n 20785: a1 = 0x20160\n 20790: i32 a1 = a1 + 0\n 20792: a0 = 0x1\n 20795: a2 = 0\n 20797: ecalli 14 // 'seal_return'\n 20799: jump @1072\n      : @768 (gas: 10)\n 20802: a0 = s1 + 0x1078\n 20806: u64 [a0 + 1880] = 0\n 20810: u64 [a0 + 1872] = 0\n 20814: u64 [a0 + 1864] = 0\n 20818: a2 = a0\n 20820: a0 = 0x4e487b7100000000\n 20830: a1 = s1 + 0x17c0\n 20834: u64 [a2 + 0x760] = a0\n 20838: a0 = 0\n 20840: ra = 734, jump @9\n      : @769 [@dyn 367] (gas: 3)\n 20846: t0 = 0x2e0\n 20850: a1 = s1 + 0x1078\n 20854: fallthrough\n      : @770 [@dyn 368] (gas: 8)\n 20855: u64 [a1 + 1856] = 0\n 20859: u64 [a1 + 1848] = 0\n 20863: u64 [a1 + 1832] = 0x11\n 20868: a2 = a1\n 20870: a0 = 0x4\n 20873: a1 = s1 + 0x17a0\n 20877: u64 [a2 + 1840] = 0\n 20881: ra = 738, jump @9\n      : @771 [@dyn 369] (gas: 3)\n 20887: a0 = u64 [s1 + 0xb0]\n 20891: a0 = i32 [a0]\n 20893: jump @773 if a0 >u 63\n      : @772 (gas: 3)\n 20897: a1 = u64 [s1 + 0xb0]\n 20901: u32 [a1 + 0] = 0x40\n 20904: fallthrough\n      : @773 (gas: 5)\n 20905: a0 = 0x1\n 20908: a2 = 0x24\n 20911: a1 = u64 [s1 + 0xc0]\n 20915: ecalli 14 // 'seal_return'\n 20917: fallthrough\n      : @774 (gas: 6)\n 20918: a1 = 0x20160\n 20923: i32 a1 = a1 + 0\n 20925: a0 = 0x1\n 20928: a2 = 0\n 20930: ecalli 14 // 'seal_return'\n 20932: jump @1072\n      : @775 (gas: 6)\n 20935: a1 = 0x20160\n 20940: i32 a1 = a1 + 0\n 20942: a0 = 0x1\n 20945: a2 = 0\n 20947: ecalli 14 // 'seal_return'\n 20949: jump @1072\n      : @776 (gas: 1)\n 20952: jump @788 if a0 != 2618616686\n      : @777 (gas: 11)\n 20960: a0 = s1 + 0x2078\n 20964: u64 [a0 + 1056] = 0\n 20968: u64 [a0 + 1048] = 0\n 20972: u64 [a0 + 1040] = 0\n 20976: u64 [a0 + 1032] = 0\n 20980: a0 = s1 + 0x2000\n 20984: i32 a0 = a0 + 0x480\n 20988: ra = 0x2e4\n 20992: ecalli 17 // 'value_transferred'\n 20994: t0 = 0x2e6\n 20998: jump @1354\n      : @778 [@dyn 370] (gas: 1)\n 21001: t0 = 742, jump @1354\n      : @779 [@dyn 371] (gas: 8)\n 21007: a0 = u64 [a4 + 0x18]\n 21010: a1 = u64 [a4 + 0x20]\n 21013: a2 = u64 [a4 + 0x10]\n 21016: a3 = u64 [a4 + 0x8]\n 21019: a1 = a1 | a2\n 21022: a0 = a0 | a3\n 21025: a0 = a0 | a1\n 21028: jump @801 if a0 == 0\n      : @780 (gas: 6)\n 21032: a1 = 0x20160\n 21037: i32 a1 = a1 + 0\n 21039: a0 = 0x1\n 21042: a2 = 0\n 21044: ecalli 14 // 'seal_return'\n 21046: jump @1072\n      : @781 (gas: 6)\n 21049: a1 = 0x20160\n 21054: i32 a1 = a1 + 0\n 21056: a0 = 0x1\n 21059: a2 = 0\n 21061: ecalli 14 // 'seal_return'\n 21063: jump @1072\n      : @782 (gas: 6)\n 21066: a1 = 0x20160\n 21071: i32 a1 = a1 + 0\n 21073: a0 = 0x1\n 21076: a2 = 0\n 21078: ecalli 14 // 'seal_return'\n 21080: jump @1072\n      : @783 (gas: 12)\n 21083: a2 = s1 + 0x7ff\n 21087: a2 = a2 + 0x79\n 21090: u64 [a2 + 664] = 0\n 21094: u64 [a2 + 656] = 0\n 21098: a0 = 0xf4d678b800000000\n 21108: u64 [a2 + 0x2a0] = a0\n 21112: a1 = s1 + 0x7ff\n 21116: a1 = a1 + 0x301\n 21120: u64 [a2 + 648] = 0\n 21124: a0 = 0\n 21126: ra = 0x2e8\n 21130: jump @9\n      : @784 (gas: 11)\n 21133: a2 = s1 + 0x7ff\n 21137: a2 = a2 + 0x79\n 21140: u64 [a2 + 1048] = 0\n 21144: u64 [a2 + 1040] = 0\n 21148: a0 = 0xf4d678b800000000\n 21158: u64 [a2 + 0x420] = a0\n 21162: a1 = s1 + 0x7ff\n 21166: a1 = a1 + 0x481\n 21170: u64 [a2 + 1032] = 0\n 21174: a0 = 0\n 21176: ra = 744, jump @9\n      : @785 [@dyn 372] (gas: 3)\n 21182: a0 = u64 [s1 + 0x78]\n 21185: a0 = i32 [a0]\n 21187: jump @787 if a0 >u 31\n      : @786 (gas: 3)\n 21191: a1 = u64 [s1 + 0x78]\n 21194: u32 [a1 + 0] = 0x20\n 21197: fallthrough\n      : @787 (gas: 6)\n 21198: a0 = 0x1\n 21201: a2 = 0x4\n 21204: a1 = u64 [s1 + 0x88]\n 21208: ra = 0x2ea\n 21212: ecalli 14 // 'seal_return'\n 21214: fallthrough\n      : @788 [@dyn 373] (gas: 1)\n 21215: jump @803 if a0 != 2685688103\n      : @789 (gas: 11)\n 21223: a0 = s1 + 0x2078\n 21227: u64 [a0 + 1120] = 0\n 21231: u64 [a0 + 1112] = 0\n 21235: u64 [a0 + 1104] = 0\n 21239: u64 [a0 + 1096] = 0\n 21243: a0 = s1 + 0x2000\n 21247: i32 a0 = a0 + 0x4c0\n 21251: ra = 0x2ec\n 21255: ecalli 17 // 'value_transferred'\n 21257: t0 = 0x2ee\n 21261: jump @1354\n      : @790 [@dyn 374] (gas: 1)\n 21264: t0 = 750, jump @1354\n      : @791 [@dyn 375] (gas: 1)\n 21270: t0 = 752, jump @1359\n      : @792 [@dyn 376] (gas: 1)\n 21276: jump @808 if a0 == 0\n      : @793 (gas: 6)\n 21280: a1 = 0x20160\n 21285: i32 a1 = a1 + 0\n 21287: a0 = 0x1\n 21290: a2 = 0\n 21292: ecalli 14 // 'seal_return'\n 21294: jump @1072\n      : @794 (gas: 2)\n 21297: u64 [s1 + 184] = 0\n 21301: fallthrough\n      : @795 (gas: 5)\n 21302: a0 = u64 [s1 + 0xc8]\n 21306: a0 = a0 << 0x1\n 21309: a4 = u64 [s1 + 0xb8]\n 21313: a4 = a4 | a0\n 21316: fallthrough\n      : @796 (gas: 7)\n 21317: u64 [s1 + 824] = 0\n 21321: u64 [s1 + 816] = 0\n 21325: u64 [s1 + 808] = 0\n 21329: a1 = s1 + 0x320\n 21333: u64 [s1 + 0x320] = a4\n 21337: a0 = u64 [s1 + 0x78]\n 21340: ra = 754, jump @9\n      : @797 [@dyn 377] (gas: 4)\n 21346: a1 = 0x20\n 21349: a0 = u64 [s1 + 0x78]\n 21352: ra = 0x198\n 21356: jump @20\n      : @798 (gas: 5)\n 21359: a1 = 0x20160\n 21364: i32 a1 = a1 + 0\n 21366: a0 = 0x1\n 21369: ecalli 14 // 'seal_return'\n 21371: jump @801\n      : @799 (gas: 3)\n 21373: a0 = u64 [s1 + 0xf8]\n 21377: u64 [s1 + 0xf0] = a1\n 21381: ra = 756, jump @20\n      : @800 [@dyn 378] (gas: 5)\n 21387: i32 a1 = a0 + 0\n 21389: a2 = i32 [s1 + 0xf0]\n 21393: a0 = 0x1\n 21396: ecalli 14 // 'seal_return'\n 21398: fallthrough\n      : @801 (gas: 3)\n 21399: a0 = u64 [s1 + 0xf8]\n 21403: a0 = i32 [a0]\n 21405: jump @810 if a0 >u 99\n      : @802 (gas: 6)\n 21410: a1 = 0x20160\n 21415: i32 a1 = a1 + 0\n 21417: a0 = 0x1\n 21420: a2 = 0\n 21422: ecalli 14 // 'seal_return'\n 21424: jump @1072\n      : @803 (gas: 1)\n 21427: jump @835 if a0 != 3058722618\n      : @804 (gas: 11)\n 21435: a0 = s1 + 0x2078\n 21439: u64 [a0 + 1280] = 0\n 21443: u64 [a0 + 1272] = 0\n 21447: u64 [a0 + 1264] = 0\n 21451: u64 [a0 + 1256] = 0\n 21455: a0 = s1 + 0x2000\n 21459: i32 a0 = a0 + 0x560\n 21463: ra = 0x2f6\n 21467: ecalli 17 // 'value_transferred'\n 21469: t0 = 0x2f8\n 21473: jump @1354\n      : @805 [@dyn 379] (gas: 1)\n 21476: t0 = 760, jump @1354\n      : @806 [@dyn 380] (gas: 8)\n 21482: a0 = u64 [a4 + 0xf8]\n 21486: a1 = u64 [a3 + 0x500]\n 21490: a2 = u64 [a4 + 0xf0]\n 21494: a3 = u64 [a4 + 0xe8]\n 21498: a1 = a1 | a2\n 21501: a0 = a0 | a3\n 21504: a0 = a0 | a1\n 21507: jump @840 if a0 == 0\n      : @807 (gas: 6)\n 21511: a1 = 0x20160\n 21516: i32 a1 = a1 + 0\n 21518: a0 = 0x1\n 21521: a2 = 0\n 21523: ecalli 14 // 'seal_return'\n 21525: jump @1072\n      : @808 (gas: 3)\n 21528: a0 = u64 [s1 + 0xf8]\n 21532: a0 = i32 [a0]\n 21534: jump @842 if a0 >u 67\n      : @809 (gas: 6)\n 21539: a1 = 0x20160\n 21544: i32 a1 = a1 + 0\n 21546: a0 = 0x1\n 21549: a2 = 0\n 21551: ecalli 14 // 'seal_return'\n 21553: jump @1072\n      : @810 (gas: 4)\n 21556: a0 = s1 + 0x10a0\n 21560: ra = 0x2fa\n 21564: t0 = 0x460\n 21568: jump @1366\n      : @811 [@dyn 381] (gas: 13)\n 21571: a1 = s1 + 0x1078\n 21575: a0 = u64 [a1 + 0x40]\n 21578: u64 [s1 + 0x70] = a0\n 21581: a0 = u64 [a1 + 0x38]\n 21584: u64 [s1 + 0x68] = a0\n 21587: a0 = u64 [a1 + 0x30]\n 21590: u64 [s1 + 0x60] = a0\n 21593: a0 = u64 [a1 + 0x28]\n 21596: u64 [s1 + 0x50] = a0\n 21599: a0 = s1 + 0x1080\n 21603: ra = 0x2fc\n 21607: t0 = 0x46a\n 21611: jump @1374\n      : @812 [@dyn 382] (gas: 13)\n 21614: a1 = s1 + 0x1078\n 21618: a0 = u64 [a1 + 0x20]\n 21621: u64 [s1 + 0x58] = a0\n 21624: a0 = u64 [a1 + 0x18]\n 21627: u64 [s1 + 0x48] = a0\n 21630: a0 = u64 [a1 + 0x10]\n 21633: u64 [s1 + 0x40] = a0\n 21636: a0 = u64 [a1 + 0x8]\n 21639: u64 [s1 + 0x78] = a0\n 21642: a0 = s1 + 0x1060\n 21646: ra = 0x2fe\n 21650: t0 = 0x470\n 21654: jump @1374\n      : @813 [@dyn 383] (gas: 14)\n 21657: a1 = s1 + 0x1078\n 21661: a0 = u64 [a1]\n 21663: u64 [s1 + 0x38] = a0\n 21666: a2 = a1 + 0xffffffffffffff00\n 21670: a0 = u64 [a2 + 0xf8]\n 21674: u64 [s1 + 0x30] = a0\n 21677: a0 = u64 [a2 + 0xf0]\n 21681: u64 [s1 + 0x28] = a0\n 21684: a0 = u64 [a2 + 0xe8]\n 21688: u64 [s1 + 0x20] = a0\n 21691: a0 = s1 + 0x2000\n 21695: i32 a0 = a0 + 0x4a0\n 21699: ecalli 10 // 'now'\n 21701: fallthrough\n      : @814 (gas: 49)\n 21702: a0 = s1 + 0x2078\n 21706: t0 = u64 [a0 + 0x440]\n 21710: a4 = u64 [a0 + 0x438]\n 21714: u64 [s1 + 0xb8] = a4\n 21718: t2 = u64 [a0 + 0x430]\n 21722: a3 = u64 [a0 + 0x428]\n 21726: u64 [s1 + 0xa0] = a3\n 21730: a0 = clz t0\n 21732: a1 = clz a4\n 21734: a2 = a1 + 0x40\n 21737: a2 = a0 if t0 != 0\n 21740: a0 = clz t2\n 21742: a1 = clz a3\n 21744: a1 = a1 + 0x40\n 21747: a1 = a0 if t2 != 0\n 21750: a0 = a1 + 0x80\n 21754: a3 = a4 | t0\n 21757: a2 = a0 if a3 == 0\n 21760: a5 = a0 <u a1\n 21763: a5 = 0 if a3 != 0\n 21765: a4 = a5 >u 0\n 21767: a0 = a2 <u 0xf0\n 21771: a3 = a0 ^ 0x1\n 21774: a4 = a3 if a5 == 0\n 21777: a0 = a4 <u 0x1\n 21780: ra = a0 + 0xffffffffffffffff\n 21783: t1 = -a4\n 21785: a5 = -a5\n 21787: a3 = a5 - a3\n 21790: a2 = 0xef - a2\n 21794: a5 = t1 >u 0\n 21796: a0 = ra >u 0\n 21798: a0 = a5 if ra == 0\n 21801: a5 = a2 <u 0x100\n 21805: a5 = a5 ^ 0x1\n 21808: a1 = a3 >u 0\n 21810: a5 = a1 if a3 != 0\n 21813: a5 = a0 if a4 != 0\n 21816: u64 [s1 + 0x98] = t2\n 21820: u64 [s1 + 0xb0] = t0\n 21824: a0 = t2 | t0\n 21827: a4 = u64 [s1 + 0xa0]\n 21831: a1 = u64 [s1 + 0xb8]\n 21835: a1 = a1 | a4\n 21838: a0 = a0 | a1\n 21841: a0 = a0 <u 0x1\n 21844: a0 = a0 | a5\n 21847: a4 = 0 if a0 != 0\n 21849: jump @868 if a0 != 0\n      : @815 (gas: 5)\n 21853: a0 = a2 ^ 0xff\n 21857: a0 = a0 | t1\n 21860: a1 = a3 | ra\n 21863: a0 = a0 | a1\n 21866: jump @868 if a0 == 0\n      : @816 (gas: 1)\n 21870: t0 = 768, jump @1332\n      : @817 [@dyn 384] (gas: 1)\n 21876: ra = 770, jump @1376\n      : @818 [@dyn 385] (gas: 6)\n 21882: u64 [s1 + 0xa8] = a0\n 21886: u64 [s1 + 0xc8] = a1\n 21890: a0 = u64 [s1 + 0xb8]\n 21894: a1 = u64 [s1 + 0xb0]\n 21898: a2 = u64 [s1 + 0xc0]\n 21902: ra = 772, jump @1381\n      : @819 [@dyn 386] (gas: 7)\n 21908: u64 [s1 + 0x90] = a0\n 21912: u64 [s1 + 0x88] = a1\n 21916: a0 = u64 [s1 + 0xc0]\n 21920: a2 = a0 + 0xffffffffffffff80\n 21923: a0 = u64 [s1 + 0xa0]\n 21927: a1 = u64 [s1 + 0x98]\n 21931: ra = 774, jump @1381\n      : @820 [@dyn 387] (gas: 8)\n 21937: u64 [s1 + 0x80] = a0\n 21941: u64 [s1 + 0x18] = a1\n 21944: a2 = u64 [s1 + 0xc0]\n 21948: a0 = a2 <u 0x80\n 21952: u64 [s1 + 0x10] = a0\n 21955: a0 = u64 [s1 + 0xa0]\n 21959: a1 = u64 [s1 + 0x98]\n 21963: ra = 776, jump @1381\n      : @821 [@dyn 388] (gas: 12)\n 21969: u64 [s1 + 0xd0] = a1\n 21973: a1 = u64 [s1 + 0xf0]\n 21977: a2 = u64 [s1 + 0xe8]\n 21981: a2 = a2 | a1\n 21984: a1 = u64 [s1 + 0xf8]\n 21988: a3 = u64 [s1 + 0xe0]\n 21992: a1 = a1 | a3\n 21995: a1 = a1 | a2\n 21998: a3 = u64 [s1 + 0x10]\n 22001: a0 = 0 if a3 == 0\n 22003: u64 [s1 + 0xd8] = a0\n 22007: jump @866 if a1 == 0\n      : @822 (gas: 7)\n 22011: a2 = a3\n 22013: a0 = u64 [s1 + 0xc8]\n 22017: a1 = u64 [s1 + 0x88]\n 22021: a0 = a0 | a1\n 22024: a5 = a3\n 22026: a1 = u64 [s1 + 0x18]\n 22029: t0 = 778, jump @1330\n      : @823 [@dyn 389] (gas: 1)\n 22035: ra = 780, jump @1376\n      : @824 [@dyn 390] (gas: 6)\n 22041: u64 [s1 + 0xa8] = a0\n 22045: u64 [s1 + 0x80] = a1\n 22049: a0 = u64 [s1 + 0xa0]\n 22053: a1 = u64 [s1 + 0x98]\n 22057: a2 = u64 [s1 + 0xf8]\n 22061: ra = 782, jump @1376\n      : @825 [@dyn 391] (gas: 7)\n 22067: u64 [s1 + 0x18] = a0\n 22070: u64 [s1 + 0x88] = a1\n 22074: a1 = u64 [s1 + 0xf8]\n 22078: a2 = 0x80 - a1\n 22082: a0 = u64 [s1 + 0xb8]\n 22086: a1 = u64 [s1 + 0xb0]\n 22090: ra = 784, jump @1381\n      : @826 [@dyn 392] (gas: 1)\n 22096: t0 = 786, jump @1352\n      : @827 [@dyn 393] (gas: 2)\n 22102: a1 = u64 [s1 + 0x18]\n 22105: t0 = 788, jump @1373\n      : @828 [@dyn 394] (gas: 1)\n 22111: ra = 790, jump @1376\n      : @829 [@dyn 395] (gas: 1)\n 22117: t0 = 792, jump @1338\n      : @830 [@dyn 396] (gas: 1)\n 22123: t0 = 794, jump @1345\n      : @831 [@dyn 397] (gas: 5)\n 22129: t0 = ra <u a2\n 22132: a4 = u64 [s1 + 0x88]\n 22136: a5 = a4 <u a3\n 22139: a5 = t0 if t1 != 0\n 22142: t0 = 796, jump @1348\n      : @832 [@dyn 398] (gas: 20)\n 22148: t0 = a0 | a1\n 22151: a1 = a4 << 0x1\n 22154: a4 = u64 [s1 + 0xd0]\n 22158: t1 = a4 >> 0x3f\n 22161: t1 = a1 | t1\n 22164: a1 = a4 << 0x1\n 22167: a4 = u64 [s1 + 0xd8]\n 22171: t2 = a4 >> 0x3f\n 22174: a1 = a1 | t2\n 22177: a4 = a4 << 0x1\n 22180: a0 = u64 [s1 + 0xb8]\n 22184: a4 = a4 | a0\n 22187: u64 [s1 + 0xd8] = a4\n 22191: a0 = u64 [s1 + 0xb0]\n 22195: a1 = a1 | a0\n 22198: u64 [s1 + 0xd0] = a1\n 22202: a1 = a0 | t1\n 22205: u64 [s1 + 0xc0] = a1\n 22209: a0 = a0 | t0\n 22212: t0 = 798, jump @1324\n      : @833 [@dyn 399] (gas: 18)\n 22218: t0 = a4 <u a2\n 22221: a2 = a4 - a2\n 22224: a4 = a3 <u 0x1\n 22227: a5 = a5 - a4\n 22230: a4 = u64 [s1 + 0xe8]\n 22234: a4 = a4 - t0\n 22237: a3 = a3 + 0xffffffffffffffff\n 22240: u64 [s1 + 0xf0] = a5\n 22244: u64 [s1 + 0xe8] = a4\n 22248: t0 = a5 | a4\n 22251: u64 [s1 + 0xf8] = a3\n 22255: a4 = a3 | a2\n 22258: a3 = a4 | t0\n 22261: a4 = ra & 0x1\n 22264: u64 [s1 + 0xb8] = a4\n 22268: u64 [s1 + 0xe0] = a2\n 22272: u64 [s1 + 176] = 0\n 22276: jump @830 if a3 != 0\n      : @834 (gas: 1)\n 22280: jump @867\n      : @835 (gas: 1)\n 22283: jump @871 if a0 != 4076725131\n      : @836 (gas: 13)\n 22291: a0 = s1 + 0x2078\n 22295: u64 [a0 + 1920] = 0\n 22299: u64 [a0 + 1912] = 0\n 22303: u64 [a0 + 1904] = 0\n 22307: u64 [a0 + 1896] = 0\n 22311: a0 = s1 + 0x2000\n 22315: i32 a0 = a0 + 0x7e0\n 22319: ra = 0x320\n 22323: ecalli 17 // 'value_transferred'\n 22325: a3 = s1 + 0x2078\n 22329: a4 = a3 + 0x700\n 22333: t0 = 0x322\n 22337: jump @1375\n      : @837 [@dyn 400] (gas: 3)\n 22340: a3 = s1 + 0x2078\n 22344: a4 = a3 + 0x700\n 22348: t0 = 802, jump @1375\n      : @838 [@dyn 401] (gas: 1)\n 22354: jump @876 if a0 == 0\n      : @839 (gas: 6)\n 22358: a1 = 0x20160\n 22363: i32 a1 = a1 + 0\n 22365: a0 = 0x1\n 22368: a2 = 0\n 22370: ecalli 14 // 'seal_return'\n 22372: jump @1072\n      : @840 (gas: 3)\n 22375: a0 = u64 [s1 + 0xf8]\n 22379: a0 = i32 [a0]\n 22381: jump @878 if a0 >u 35\n      : @841 (gas: 6)\n 22386: a1 = 0x20160\n 22391: i32 a1 = a1 + 0\n 22393: a0 = 0x1\n 22396: a2 = 0\n 22398: ecalli 14 // 'seal_return'\n 22400: jump @1072\n      : @842 (gas: 4)\n 22403: a0 = s1 + 0x1460\n 22407: ra = 0x324\n 22411: t0 = 0x47a\n 22415: jump @1366\n      : @843 [@dyn 402] (gas: 7)\n 22418: a0 = s1 + 0x1078\n 22422: a0 = u64 [a0 + 0x3e8]\n 22426: u64 [s1 + 0x78] = a0\n 22429: a0 = s1 + 0x1440\n 22433: ra = 0x326\n 22437: t0 = 0x46a\n 22441: jump @1374\n      : @844 [@dyn 403] (gas: 7)\n 22444: a0 = s1 + 0x1078\n 22448: a0 = u64 [a0 + 0x3c8]\n 22452: u64 [s1 + 0x70] = a0\n 22455: a0 = s1 + 0x2000\n 22459: i32 a0 = a0 + 0x4e0\n 22463: ecalli 10 // 'now'\n 22465: fallthrough\n      : @845 (gas: 51)\n 22466: a0 = s1 + 0x2078\n 22470: t0 = u64 [a0 + 0x480]\n 22474: a4 = u64 [a0 + 0x478]\n 22478: u64 [s1 + 0xb8] = a4\n 22482: t2 = u64 [a0 + 0x470]\n 22486: a3 = u64 [a0 + 0x468]\n 22490: u64 [s1 + 0xa0] = a3\n 22494: a0 = clz t0\n 22496: a1 = clz a4\n 22498: a2 = a1 + 0x40\n 22501: a2 = a0 if t0 != 0\n 22504: a0 = clz t2\n 22506: a1 = clz a3\n 22508: a1 = a1 + 0x40\n 22511: a1 = a0 if t2 != 0\n 22514: a0 = a1 + 0x80\n 22518: a3 = a4 | t0\n 22521: a2 = a0 if a3 == 0\n 22524: a5 = a0 <u a1\n 22527: a5 = 0 if a3 != 0\n 22529: a4 = a5 >u 0\n 22531: a0 = a2 <u 0xf0\n 22535: a3 = a0 ^ 0x1\n 22538: a4 = a3 if a5 == 0\n 22541: a0 = a4 <u 0x1\n 22544: ra = a0 + 0xffffffffffffffff\n 22547: t1 = -a4\n 22549: a5 = -a5\n 22551: a3 = a5 - a3\n 22554: a2 = 0xef - a2\n 22558: a5 = t1 >u 0\n 22560: a0 = ra >u 0\n 22562: a0 = a5 if ra == 0\n 22565: a5 = a2 <u 0x100\n 22569: a5 = a5 ^ 0x1\n 22572: a1 = a3 >u 0\n 22574: a5 = a1 if a3 != 0\n 22577: a5 = a0 if a4 != 0\n 22580: u64 [s1 + 0x98] = t2\n 22584: u64 [s1 + 0xb0] = t0\n 22588: a0 = t2 | t0\n 22591: a4 = u64 [s1 + 0xa0]\n 22595: a1 = u64 [s1 + 0xb8]\n 22599: a1 = a1 | a4\n 22602: a0 = a0 | a1\n 22605: a0 = a0 <u 0x1\n 22608: a0 = a0 | a5\n 22611: a1 = a4\n 22613: a1 = 0 if a0 != 0\n 22615: u64 [s1 + 0xe8] = a1\n 22619: jump @900 if a0 != 0\n      : @846 (gas: 5)\n 22623: a0 = a2 ^ 0xff\n 22627: a0 = a0 | t1\n 22630: a1 = a3 | ra\n 22633: a0 = a0 | a1\n 22636: jump @900 if a0 == 0\n      : @847 (gas: 1)\n 22640: t0 = 808, jump @1332\n      : @848 [@dyn 404] (gas: 1)\n 22646: ra = 810, jump @1376\n      : @849 [@dyn 405] (gas: 6)\n 22652: u64 [s1 + 0xa8] = a0\n 22656: u64 [s1 + 0xc8] = a1\n 22660: a0 = u64 [s1 + 0xb8]\n 22664: a1 = u64 [s1 + 0xb0]\n 22668: a2 = u64 [s1 + 0xc0]\n 22672: ra = 812, jump @1381\n      : @850 [@dyn 406] (gas: 7)\n 22678: u64 [s1 + 0x90] = a0\n 22682: u64 [s1 + 0x88] = a1\n 22686: a0 = u64 [s1 + 0xc0]\n 22690: a2 = a0 + 0xffffffffffffff80\n 22693: a0 = u64 [s1 + 0xa0]\n 22697: a1 = u64 [s1 + 0x98]\n 22701: ra = 814, jump @1381\n      : @851 [@dyn 407] (gas: 8)\n 22707: u64 [s1 + 0x80] = a0\n 22711: u64 [s1 + 0x68] = a1\n 22714: a2 = u64 [s1 + 0xc0]\n 22718: a0 = a2 <u 0x80\n 22722: u64 [s1 + 0x60] = a0\n 22725: a0 = u64 [s1 + 0xa0]\n 22729: a1 = u64 [s1 + 0x98]\n 22733: ra = 816, jump @1381\n      : @852 [@dyn 408] (gas: 12)\n 22739: u64 [s1 + 0xd0] = a1\n 22743: a1 = u64 [s1 + 0xf0]\n 22747: a2 = u64 [s1 + 0xe8]\n 22751: a2 = a2 | a1\n 22754: a1 = u64 [s1 + 0xf8]\n 22758: a3 = u64 [s1 + 0xe0]\n 22762: a1 = a1 | a3\n 22765: a1 = a1 | a2\n 22768: a3 = u64 [s1 + 0x60]\n 22771: a0 = 0 if a3 == 0\n 22773: u64 [s1 + 0xd8] = a0\n 22777: jump @898 if a1 == 0\n      : @853 (gas: 7)\n 22781: a2 = a3\n 22783: a0 = u64 [s1 + 0xc8]\n 22787: a1 = u64 [s1 + 0x88]\n 22791: a0 = a0 | a1\n 22794: a5 = a3\n 22796: a1 = u64 [s1 + 0x68]\n 22799: t0 = 818, jump @1330\n      : @854 [@dyn 409] (gas: 1)\n 22805: ra = 820, jump @1376\n      : @855 [@dyn 410] (gas: 6)\n 22811: u64 [s1 + 0xa8] = a0\n 22815: u64 [s1 + 0x80] = a1\n 22819: a0 = u64 [s1 + 0xa0]\n 22823: a1 = u64 [s1 + 0x98]\n 22827: a2 = u64 [s1 + 0xf8]\n 22831: ra = 822, jump @1376\n      : @856 [@dyn 411] (gas: 7)\n 22837: u64 [s1 + 0x68] = a0\n 22840: u64 [s1 + 0x88] = a1\n 22844: a1 = u64 [s1 + 0xf8]\n 22848: a2 = 0x80 - a1\n 22852: a0 = u64 [s1 + 0xb8]\n 22856: a1 = u64 [s1 + 0xb0]\n 22860: ra = 824, jump @1381\n      : @857 [@dyn 412] (gas: 1)\n 22866: t0 = 826, jump @1352\n      : @858 [@dyn 413] (gas: 2)\n 22872: a1 = u64 [s1 + 0x68]\n 22875: t0 = 828, jump @1373\n      : @859 [@dyn 414] (gas: 1)\n 22881: ra = 830, jump @1376\n      : @860 [@dyn 415] (gas: 1)\n 22887: t0 = 832, jump @1338\n      : @861 [@dyn 416] (gas: 1)\n 22893: t0 = 834, jump @1345\n      : @862 [@dyn 417] (gas: 5)\n 22899: t0 = ra <u a2\n 22902: a4 = u64 [s1 + 0x88]\n 22906: a5 = a4 <u a3\n 22909: a5 = t0 if t1 != 0\n 22912: t0 = 836, jump @1348\n      : @863 [@dyn 418] (gas: 20)\n 22918: t0 = a0 | a1\n 22921: a1 = a4 << 0x1\n 22924: a4 = u64 [s1 + 0xd0]\n 22928: t1 = a4 >> 0x3f\n 22931: t1 = a1 | t1\n 22934: a1 = a4 << 0x1\n 22937: a4 = u64 [s1 + 0xd8]\n 22941: t2 = a4 >> 0x3f\n 22944: a1 = a1 | t2\n 22947: a4 = a4 << 0x1\n 22950: a0 = u64 [s1 + 0xb8]\n 22954: a4 = a4 | a0\n 22957: u64 [s1 + 0xd8] = a4\n 22961: a0 = u64 [s1 + 0xb0]\n 22965: a1 = a1 | a0\n 22968: u64 [s1 + 0xd0] = a1\n 22972: a1 = a0 | t1\n 22975: u64 [s1 + 0xc0] = a1\n 22979: a0 = a0 | t0\n 22982: t0 = 838, jump @1324\n      : @864 [@dyn 419] (gas: 18)\n 22988: t0 = a4 <u a2\n 22991: a2 = a4 - a2\n 22994: a4 = a3 <u 0x1\n 22997: a5 = a5 - a4\n 23000: a4 = u64 [s1 + 0xe8]\n 23004: a4 = a4 - t0\n 23007: a3 = a3 + 0xffffffffffffffff\n 23010: u64 [s1 + 0xf0] = a5\n 23014: u64 [s1 + 0xe8] = a4\n 23018: t0 = a5 | a4\n 23021: u64 [s1 + 0xf8] = a3\n 23025: a4 = a3 | a2\n 23028: a3 = a4 | t0\n 23031: a4 = ra & 0x1\n 23034: u64 [s1 + 0xb8] = a4\n 23038: u64 [s1 + 0xe0] = a2\n 23042: u64 [s1 + 176] = 0\n 23046: jump @861 if a3 != 0\n      : @865 (gas: 1)\n 23050: jump @899\n      : @866 (gas: 2)\n 23053: u64 [s1 + 184] = 0\n 23057: fallthrough\n      : @867 (gas: 5)\n 23058: a0 = u64 [s1 + 0xd8]\n 23062: a0 = a0 << 0x1\n 23065: a4 = u64 [s1 + 0xb8]\n 23069: a4 = a4 | a0\n 23072: fallthrough\n      : @868 (gas: 2)\n 23073: a0 = u64 [s1 + 0x78]\n 23076: jump @966 if a0 >=u a4\n      : @869 (gas: 32)\n 23080: a3 = s1 + 0x7ff\n 23084: a3 = a3 + 0x79\n 23087: a0 = u64 [s1 + 0x20]\n 23090: a5 = a3 + 0x700\n 23094: u64 [a5 + 0x68] = a0\n 23097: a0 = u64 [s1 + 0x78]\n 23100: u64 [a5 + 0x88] = a0\n 23104: a0 = u64 [s1 + 0x50]\n 23107: u64 [a5 + 0xa8] = a0\n 23111: a0 = u64 [s1 + 0x28]\n 23114: u64 [a5 + 0x70] = a0\n 23117: a0 = u64 [s1 + 0x40]\n 23120: u64 [a5 + 0x90] = a0\n 23124: a0 = u64 [s1 + 0x60]\n 23127: u64 [a5 + 0xb0] = a0\n 23131: a0 = u64 [s1 + 0x30]\n 23134: u64 [a5 + 0x78] = a0\n 23137: a0 = u64 [s1 + 0x48]\n 23140: u64 [a5 + 0x98] = a0\n 23144: a0 = u64 [s1 + 0x68]\n 23147: u64 [a5 + 0xb8] = a0\n 23151: a0 = u64 [s1 + 0x38]\n 23154: u64 [a5 + 0x80] = a0\n 23158: a0 = u64 [s1 + 0x58]\n 23161: u64 [a5 + 0xa0] = a0\n 23165: a0 = s1 + 0x1020\n 23169: a1 = s1 + 0x1000\n 23173: a2 = s1 + 0x7ff\n 23177: a2 = a2 + 0x7e1\n 23181: a4 = u64 [s1 + 0x70]\n 23184: u64 [a5 + 0xc0] = a4\n 23188: ra = 840, jump @1161\n      : @870 [@dyn 420] (gas: 6)\n 23194: a1 = 0x20160\n 23199: i32 a1 = a1 + 0\n 23201: a0 = 0\n 23203: a2 = 0\n 23205: ecalli 14 // 'seal_return'\n 23207: jump @1072\n      : @871 (gas: 1)\n 23210: jump @970 if a0 != 235423050\n      : @872 (gas: 11)\n 23218: a0 = s1 + 0x1878\n 23222: u64 [a0 + 1824] = 0\n 23226: u64 [a0 + 1816] = 0\n 23230: u64 [a0 + 1808] = 0\n 23234: u64 [a0 + 1800] = 0\n 23238: a0 = s1 + 0x2000\n 23242: i32 a0 = a0 + 0xffffffffffffff80\n 23245: ra = 0x34a\n 23249: ecalli 17 // 'value_transferred'\n 23251: t0 = 0x34c\n 23255: jump @1371\n      : @873 [@dyn 421] (gas: 1)\n 23258: t0 = 844, jump @1371\n      : @874 [@dyn 422] (gas: 8)\n 23264: a0 = u64 [a4 + 0x18]\n 23267: a1 = u64 [a4 + 0x20]\n 23270: a2 = u64 [a4 + 0x10]\n 23273: a3 = u64 [a4 + 0x8]\n 23276: a1 = a1 | a2\n 23279: a0 = a0 | a3\n 23282: a0 = a0 | a1\n 23285: jump @974 if a0 == 0\n      : @875 (gas: 6)\n 23289: a1 = 0x20160\n 23294: i32 a1 = a1 + 0\n 23296: a0 = 0x1\n 23299: a2 = 0\n 23301: ecalli 14 // 'seal_return'\n 23303: jump @1072\n      : @876 (gas: 3)\n 23306: a0 = u64 [s1 + 0xf8]\n 23310: a0 = i32 [a0]\n 23312: jump @976 if a0 >u 35\n      : @877 (gas: 6)\n 23317: a1 = 0x20160\n 23322: i32 a1 = a1 + 0\n 23324: a0 = 0x1\n 23327: a2 = 0\n 23329: ecalli 14 // 'seal_return'\n 23331: jump @1072\n      : @878 (gas: 4)\n 23334: a0 = s1 + 0x1760\n 23338: ra = 0x34e\n 23342: t0 = 0x47a\n 23346: jump @1366\n      : @879 [@dyn 423] (gas: 12)\n 23349: a0 = s1 + 0x1078\n 23353: a0 = u64 [a0 + 0x6e8]\n 23357: u64 [s1 + 0xe0] = a0\n 23361: a0 = 0x30160\n 23366: u64 [s1 + 0xe8] = a0\n 23370: i32 a0 = a0 + 0\n 23372: u64 [s1 + 0xd8] = a0\n 23376: ra = 0x350\n 23380: ecalli 4 // 'caller'\n 23382: a2 = u64 [s1 + 0xe8]\n 23386: t0 = 0x352\n 23390: jump @1320\n      : @880 [@dyn 424] (gas: 2)\n 23393: a2 = u64 [s1 + 0xe8]\n 23397: t0 = 850, jump @1320\n      : @881 [@dyn 425] (gas: 8)\n 23403: u64 [a2 + 1760] = 0\n 23407: a4 = a2 + 0x600\n 23411: u64 [a4 + 0xd8] = a1\n 23415: u64 [a4 + 0xd0] = a0\n 23419: a1 = s1 + 0x1740\n 23423: u64 [a4 + 0xc8] = a3\n 23427: a0 = 0\n 23429: ra = 852, jump @9\n      : @882 [@dyn 426] (gas: 3)\n 23435: t0 = 0x356\n 23439: a1 = s1 + 0x1078\n 23443: fallthrough\n      : @883 [@dyn 427] (gas: 8)\n 23444: u64 [a1 + 1728] = 0\n 23448: u64 [a1 + 1720] = 0\n 23452: u64 [a1 + 1704] = 0x3\n 23457: a2 = a1\n 23459: a0 = 0x20\n 23462: a1 = s1 + 0x1720\n 23466: u64 [a2 + 1712] = 0\n 23470: ra = 856, jump @9\n      : @884 [@dyn 428] (gas: 4)\n 23476: a0 = 0x20150\n 23481: u64 [s1 + 0xf8] = a0\n 23485: a0 = i32 [0x20150]\n 23490: jump @886 if a0 >u 63\n      : @885 (gas: 3)\n 23494: a1 = u64 [s1 + 0xf8]\n 23498: u32 [a1 + 0] = 0x40\n 23501: fallthrough\n      : @886 (gas: 14)\n 23502: a0 = sp + 0xffffffffffffffe0\n 23505: a2 = a0 & 0xffffffffffffffe0\n 23508: u64 [s1 + 0xd0] = a2\n 23512: sp = a2\n 23514: a0 = 0x20160\n 23519: i32 a0 = a0 + 0\n 23521: i32 a2 = a2 + 0\n 23523: a1 = 0x40\n 23526: u64 [s1 + 0xf0] = a0\n 23530: ra = 0x35a\n 23534: ecalli 9 // 'hash_keccak_256'\n 23536: a3 = u64 [s1 + 0xd0]\n 23540: t0 = 0x35c\n 23544: jump @1362\n      : @887 [@dyn 429] (gas: 2)\n 23547: a3 = u64 [s1 + 0xd0]\n 23551: t0 = 860, jump @1362\n      : @888 [@dyn 430] (gas: 19)\n 23557: u64 [s1 + 0xc8] = a0\n 23561: a0 = reverse a1\n 23563: u64 [s1 + 0xc0] = a0\n 23567: a0 = reverse a2\n 23569: u64 [s1 + 0xb8] = a0\n 23573: a0 = reverse a3\n 23575: u64 [s1 + 0xb0] = a0\n 23579: a0 = u64 [s1 + 0xe0]\n 23583: a0 = a0 << 0x20\n 23586: a2 = a0 >> 0x20\n 23589: a0 = s1 + 0x1078\n 23593: u64 [a0 + 1696] = 0\n 23597: u64 [a0 + 1688] = 0\n 23601: u64 [a0 + 1680] = 0\n 23605: a1 = s1 + 0x1700\n 23609: u64 [s1 + 0xd0] = a2\n 23613: u64 [a0 + 0x688] = a2\n 23617: a0 = 0\n 23619: ra = 862, jump @9\n      : @889 [@dyn 431] (gas: 14)\n 23625: a0 = u64 [s1 + 0xb0]\n 23629: a1 = s1 + 0x1078\n 23633: a2 = a1 + 0x600\n 23637: u64 [a2 + 0x80] = a0\n 23641: a0 = u64 [s1 + 0xb8]\n 23645: u64 [a2 + 0x78] = a0\n 23648: a0 = u64 [s1 + 0xc0]\n 23652: u64 [a2 + 0x70] = a0\n 23655: a3 = a1\n 23657: a0 = 0x20\n 23660: a1 = s1 + 0x16e0\n 23664: a2 = u64 [s1 + 0xc8]\n 23668: u64 [a3 + 0x668] = a2\n 23672: ra = 864, jump @9\n      : @890 [@dyn 432] (gas: 3)\n 23678: a0 = u64 [s1 + 0xf8]\n 23682: a0 = i32 [a0]\n 23684: jump @892 if a0 >u 63\n      : @891 (gas: 3)\n 23688: a0 = u64 [s1 + 0xf8]\n 23692: u32 [a0 + 0] = 0x40\n 23695: fallthrough\n      : @892 (gas: 4)\n 23696: a0 = sp + 0xffffffffffffffe0\n 23699: a0 = a0 & 0xffffffffffffffe0\n 23702: u64 [s1 + 0xe0] = a0\n 23706: t0 = 866, jump @1339\n      : @893 [@dyn 433] (gas: 28)\n 23712: ecalli 9 // 'hash_keccak_256'\n 23714: a3 = u64 [s1 + 0xe0]\n 23718: a0 = u64 [a3]\n 23720: a1 = u64 [a3 + 0x8]\n 23723: a2 = u64 [a3 + 0x10]\n 23726: a3 = u64 [a3 + 0x18]\n 23729: a0 = reverse a0\n 23731: a5 = reverse a1\n 23733: a2 = reverse a2\n 23735: a3 = reverse a3\n 23737: a4 = sp + 0xffffffffffffffe0\n 23740: a1 = a4 & 0xffffffffffffffe0\n 23743: sp = a1\n 23745: a3 = a3 + 0x1\n 23748: a4 = a3 <u 0x1\n 23751: a2 = a2 + a4\n 23754: a4 = a3 | a2\n 23757: a4 = a4 <u 0x1\n 23760: a4 = a4 + a5\n 23763: a5 = a4 <u a5\n 23766: a0 = a0 + a5\n 23769: u64 [a1 + 0x8] = a2\n 23772: u64 [a1] = a3\n 23774: u64 [a1 + 0x10] = a4\n 23777: u64 [a1 + 0x18] = a0\n 23780: a0 = s1 + 0x16c0\n 23784: u64 [s1 + 0xe0] = a1\n 23788: ra = 868, jump @11\n      : @894 [@dyn 434] (gas: 3)\n 23794: a0 = s1 + 0x1078\n 23798: a0 = u64 [a0 + 0x648]\n 23802: jump @984 if a0 == 0\n      : @895 (gas: 4)\n 23806: a1 = s1 + 0x1078\n 23810: a1 = u64 [a1 + 0x650]\n 23814: a2 = a1 & 0xff\n 23818: jump @986 if a2 == 0\n      : @896 (gas: 3)\n 23822: t0 = 0x366\n 23826: a2 = s1 + 0x1078\n 23830: fallthrough\n      : @897 [@dyn 435] (gas: 9)\n 23831: u64 [a2 + 1592] = 0\n 23835: u64 [a2 + 1584] = 0\n 23839: a0 = 0xc1c184c800000000\n 23849: u64 [a2 + 0x640] = a0\n 23853: a1 = s1 + 0x16a0\n 23857: u64 [a2 + 1576] = 0\n 23861: a0 = 0\n 23863: ra = 0x3fc\n 23867: jump @9\n      : @898 (gas: 2)\n 23870: u64 [s1 + 184] = 0\n 23874: fallthrough\n      : @899 (gas: 6)\n 23875: a0 = u64 [s1 + 0xd8]\n 23879: a0 = a0 << 0x1\n 23882: a1 = u64 [s1 + 0xb8]\n 23886: a0 = a0 | a1\n 23889: u64 [s1 + 0xe8] = a0\n 23893: fallthrough\n      : @900 (gas: 3)\n 23894: a0 = u64 [s1 + 0xe8]\n 23898: a1 = u64 [s1 + 0x70]\n 23901: jump @1004 if a1 != a0\n      : @901 (gas: 9)\n 23905: a0 = 0x30160\n 23910: u64 [s1 + 0xe0] = a0\n 23914: i32 a0 = a0 + 0\n 23916: u64 [s1 + 0xb8] = a0\n 23920: ra = 0x368\n 23924: ecalli 4 // 'caller'\n 23926: a2 = u64 [s1 + 0xe0]\n 23930: t0 = 0x36a\n 23934: jump @1320\n      : @902 [@dyn 436] (gas: 2)\n 23937: a2 = u64 [s1 + 0xe0]\n 23941: t0 = 874, jump @1320\n      : @903 [@dyn 437] (gas: 8)\n 23947: u64 [a2 + 928] = 0\n 23951: a4 = a2 + 0x300\n 23955: u64 [a4 + 0x98] = a1\n 23959: u64 [a4 + 0x90] = a0\n 23963: a1 = s1 + 0x1400\n 23967: u64 [a4 + 0x88] = a3\n 23971: a0 = 0\n 23973: ra = 876, jump @9\n      : @904 [@dyn 438] (gas: 3)\n 23979: t0 = 0x36e\n 23983: a1 = s1 + 0x1078\n 23987: fallthrough\n      : @905 [@dyn 439] (gas: 8)\n 23988: u64 [a1 + 896] = 0\n 23992: u64 [a1 + 888] = 0\n 23996: u64 [a1 + 872] = 0x3\n 24001: a2 = a1\n 24003: a0 = 0x20\n 24006: a1 = s1 + 0x13e0\n 24010: u64 [a2 + 880] = 0\n 24014: ra = 880, jump @9\n      : @906 [@dyn 440] (gas: 4)\n 24020: a0 = 0x20150\n 24025: u64 [s1 + 0xf8] = a0\n 24029: a0 = i32 [0x20150]\n 24034: jump @908 if a0 >u 63\n      : @907 (gas: 3)\n 24038: a1 = u64 [s1 + 0xf8]\n 24042: u32 [a1 + 0] = 0x40\n 24045: fallthrough\n      : @908 (gas: 13)\n 24046: a0 = sp + 0xffffffffffffffe0\n 24049: a2 = a0 & 0xffffffffffffffe0\n 24052: u64 [s1 + 0xd8] = a2\n 24056: sp = a2\n 24058: a0 = 0x20160\n 24063: i32 a0 = a0 + 0\n 24065: i32 a2 = a2 + 0\n 24067: a1 = 0x40\n 24070: u64 [s1 + 0xf0] = a0\n 24074: ra = 0x372\n 24078: ecalli 9 // 'hash_keccak_256'\n 24080: t0 = 0x374\n 24084: jump @1346\n      : @909 [@dyn 441] (gas: 1)\n 24087: t0 = 884, jump @1346\n      : @910 [@dyn 442] (gas: 12)\n 24093: a0 = u64 [s1 + 0x78]\n 24096: a0 = a0 << 0x20\n 24099: a2 = a0 >> 0x20\n 24102: a0 = s1 + 0x1078\n 24106: u64 [a0 + 864] = 0\n 24110: u64 [a0 + 856] = 0\n 24114: u64 [a0 + 848] = 0\n 24118: a1 = s1 + 0x13c0\n 24122: u64 [s1 + 0xb0] = a2\n 24126: u64 [a0 + 0x348] = a2\n 24130: a0 = 0\n 24132: ra = 886, jump @9\n      : @911 [@dyn 443] (gas: 14)\n 24138: a0 = u64 [s1 + 0xc0]\n 24142: a1 = s1 + 0x1078\n 24146: a2 = a1 + 0x300\n 24150: u64 [a2 + 0x40] = a0\n 24153: a0 = u64 [s1 + 0xc8]\n 24157: u64 [a2 + 0x38] = a0\n 24160: a0 = u64 [s1 + 0xd0]\n 24164: u64 [a2 + 0x30] = a0\n 24167: a3 = a1\n 24169: a0 = 0x20\n 24172: a1 = s1 + 0x13a0\n 24176: a2 = u64 [s1 + 0xd8]\n 24180: u64 [a3 + 0x328] = a2\n 24184: ra = 888, jump @9\n      : @912 [@dyn 444] (gas: 3)\n 24190: a0 = u64 [s1 + 0xf8]\n 24194: a0 = i32 [a0]\n 24196: jump @914 if a0 >u 63\n      : @913 (gas: 3)\n 24200: a0 = u64 [s1 + 0xf8]\n 24204: u32 [a0 + 0] = 0x40\n 24207: fallthrough\n      : @914 (gas: 4)\n 24208: a0 = sp + 0xffffffffffffffe0\n 24211: a0 = a0 & 0xffffffffffffffe0\n 24214: u64 [s1 + 0xd8] = a0\n 24218: t0 = 890, jump @1339\n      : @915 [@dyn 445] (gas: 4)\n 24224: ra = 0x37c\n 24228: ecalli 9 // 'hash_keccak_256'\n 24230: t0 = 0x37e\n 24234: jump @1331\n      : @916 [@dyn 446] (gas: 1)\n 24237: t0 = 894, jump @1331\n      : @917 [@dyn 447] (gas: 8)\n 24243: a5 = a1 + 0x400\n 24247: u64 [a5 + 0x88] = a3\n 24251: u64 [a5 + 0x90] = a2\n 24255: u64 [a5 + 0x98] = a4\n 24259: u64 [a5 + 0xa0] = a0\n 24263: a0 = s1 + 0x1380\n 24267: a1 = s1 + 0x2500\n 24271: ra = 896, jump @11\n      : @918 [@dyn 448] (gas: 4)\n 24277: a0 = s1 + 0x1078\n 24281: a0 = u64 [a0 + 0x308]\n 24285: a0 = a0 & 0xffffffffffffffff\n 24288: jump @1009 if a0 == 0\n      : @919 (gas: 3)\n 24292: a0 = s1 + 0x1078\n 24296: a0 = u8 [a0 + 0x310]\n 24300: jump @1009 if a0 != 0\n      : @920 (gas: 7)\n 24304: a1 = u64 [s1 + 0xb0]\n 24308: a0 = a1 <u 0x100\n 24312: u64 [s1 + 0xa8] = a0\n 24316: i32 a2 = a1 + 0xffffffffffffff80\n 24319: a0 = 0x1\n 24322: a1 = 0\n 24324: ra = 898, jump @1381\n      : @921 [@dyn 449] (gas: 7)\n 24330: u64 [s1 + 0xd8] = a0\n 24334: u64 [s1 + 0xd0] = a1\n 24338: a1 = u64 [s1 + 0xb0]\n 24342: i32 a2 = 0x80 - a1\n 24346: a0 = 0x1\n 24349: a1 = 0\n 24351: ra = 900, jump @1376\n      : @922 [@dyn 450] (gas: 15)\n 24357: a2 = u64 [s1 + 0xb0]\n 24361: a3 = a2 <u 0x80\n 24365: u64 [s1 + 0xc0] = a3\n 24369: a4 = u64 [s1 + 0xd8]\n 24373: a0 = a4 if a3 == 0\n 24376: a0 = 0 if a2 == 0\n 24378: u64 [s1 + 0xd8] = a0\n 24382: a0 = u64 [s1 + 0xd0]\n 24386: a1 = a0 if a3 == 0\n 24389: a1 = 0 if a2 == 0\n 24391: u64 [s1 + 0xd0] = a1\n 24395: i32 a2 = a2 + 0\n 24397: a0 = 0x1\n 24400: a1 = 0\n 24402: ra = 902, jump @1381\n      : @923 [@dyn 451] (gas: 11)\n 24408: a2 = u64 [s1 + 0xc0]\n 24412: a0 = 0 if a2 == 0\n 24414: u64 [s1 + 0xc8] = a0\n 24418: a1 = 0 if a2 == 0\n 24420: u64 [s1 + 0xc0] = a1\n 24424: a0 = u64 [s1 + 0xb8]\n 24428: ra = 0x388\n 24432: ecalli 4 // 'caller'\n 24434: a2 = u64 [s1 + 0xe0]\n 24438: t0 = 0x38a\n 24442: jump @1320\n      : @924 [@dyn 452] (gas: 2)\n 24445: a2 = u64 [s1 + 0xe0]\n 24449: t0 = 906, jump @1320\n      : @925 [@dyn 453] (gas: 8)\n 24455: u64 [a2 + 736] = 0\n 24459: a4 = a2 + 0x200\n 24463: u64 [a4 + 0xd8] = a1\n 24467: u64 [a4 + 0xd0] = a0\n 24471: a1 = s1 + 0x1340\n 24475: u64 [a4 + 0xc8] = a3\n 24479: a0 = 0\n 24481: ra = 908, jump @9\n      : @926 [@dyn 454] (gas: 3)\n 24487: t0 = 0x38e\n 24491: a1 = s1 + 0x1078\n 24495: fallthrough\n      : @927 [@dyn 455] (gas: 8)\n 24496: u64 [a1 + 704] = 0\n 24500: u64 [a1 + 696] = 0\n 24504: u64 [a1 + 680] = 0x5\n 24509: a2 = a1\n 24511: a0 = 0x20\n 24514: a1 = s1 + 0x1320\n 24518: u64 [a2 + 688] = 0\n 24522: ra = 912, jump @9\n      : @928 [@dyn 456] (gas: 3)\n 24528: a0 = u64 [s1 + 0xf8]\n 24532: a0 = i32 [a0]\n 24534: jump @930 if a0 >u 63\n      : @929 (gas: 3)\n 24538: a1 = u64 [s1 + 0xf8]\n 24542: u32 [a1 + 0] = 0x40\n 24545: fallthrough\n      : @930 (gas: 17)\n 24546: a0 = u64 [s1 + 0xc0]\n 24550: a1 = u64 [s1 + 0xa8]\n 24554: a0 = 0 if a1 == 0\n 24556: u64 [s1 + 0xc0] = a0\n 24560: a0 = u64 [s1 + 0xc8]\n 24564: a0 = 0 if a1 == 0\n 24566: u64 [s1 + 0xc8] = a0\n 24570: a0 = u64 [s1 + 0xd0]\n 24574: a0 = 0 if a1 == 0\n 24576: u64 [s1 + 0xd0] = a0\n 24580: a0 = u64 [s1 + 0xd8]\n 24584: a0 = 0 if a1 == 0\n 24586: u64 [s1 + 0xd8] = a0\n 24590: a0 = sp + 0xffffffffffffffe0\n 24593: a0 = a0 & 0xffffffffffffffe0\n 24596: u64 [s1 + 0xa8] = a0\n 24600: t0 = 914, jump @1339\n      : @931 [@dyn 457] (gas: 4)\n 24606: ra = 0x394\n 24610: ecalli 9 // 'hash_keccak_256'\n 24612: t0 = 0x396\n 24616: jump @1323\n      : @932 [@dyn 458] (gas: 1)\n 24619: t0 = 918, jump @1323\n      : @933 [@dyn 459] (gas: 8)\n 24625: u64 [a2 + 672] = 0\n 24629: u64 [a2 + 664] = 0\n 24633: u64 [a2 + 656] = 0\n 24637: a1 = s1 + 0x1300\n 24641: a0 = u64 [s1 + 0xe8]\n 24645: u64 [a2 + 0x288] = a0\n 24649: a0 = 0\n 24651: ra = 920, jump @9\n      : @934 [@dyn 460] (gas: 14)\n 24657: a0 = u64 [s1 + 0x88]\n 24661: a1 = s1 + 0x1078\n 24665: a2 = a1 + 0x200\n 24669: u64 [a2 + 0x80] = a0\n 24673: a0 = u64 [s1 + 0x90]\n 24677: u64 [a2 + 0x78] = a0\n 24680: a0 = u64 [s1 + 0x98]\n 24684: u64 [a2 + 0x70] = a0\n 24687: a3 = a1\n 24689: a0 = 0x20\n 24692: a1 = s1 + 0x12e0\n 24696: a2 = u64 [s1 + 0xa0]\n 24700: u64 [a3 + 0x268] = a2\n 24704: ra = 922, jump @9\n      : @935 [@dyn 461] (gas: 3)\n 24710: a0 = u64 [s1 + 0xf8]\n 24714: a0 = i32 [a0]\n 24716: jump @937 if a0 >u 63\n      : @936 (gas: 3)\n 24720: a0 = u64 [s1 + 0xf8]\n 24724: u32 [a0 + 0] = 0x40\n 24727: fallthrough\n      : @937 (gas: 4)\n 24728: a0 = sp + 0xffffffffffffffe0\n 24731: a0 = a0 & 0xffffffffffffffe0\n 24734: u64 [s1 + 0xa0] = a0\n 24738: t0 = 924, jump @1339\n      : @938 [@dyn 462] (gas: 5)\n 24744: ra = 0x39e\n 24748: ecalli 9 // 'hash_keccak_256'\n 24750: a3 = u64 [s1 + 0xa0]\n 24754: t0 = 0x3a0\n 24758: jump @1328\n      : @939 [@dyn 463] (gas: 2)\n 24761: a3 = u64 [s1 + 0xa0]\n 24765: t0 = 928, jump @1328\n      : @940 [@dyn 464] (gas: 3)\n 24771: i32 a0 = a0 + 0x2c0\n 24775: a0 = a0 + s1\n 24778: ra = 930, jump @11\n      : @941 [@dyn 465] (gas: 7)\n 24784: a3 = s1 + 0x1078\n 24788: a4 = a3 + 0x200\n 24792: a0 = u64 [a4 + 0x58]\n 24795: a1 = u64 [a4 + 0x48]\n 24798: a2 = u64 [a4 + 0x60]\n 24801: a3 = u64 [a4 + 0x50]\n 24804: t0 = 932, jump @1365\n      : @942 [@dyn 466] (gas: 1)\n 24810: jump @1011 if a0 == 0\n      : @943 (gas: 6)\n 24814: a0 = u64 [s1 + 0xb8]\n 24818: ra = 0x3a6\n 24822: ecalli 4 // 'caller'\n 24824: a2 = u64 [s1 + 0xe0]\n 24828: t0 = 0x3a8\n 24832: jump @1320\n      : @944 [@dyn 467] (gas: 2)\n 24835: a2 = u64 [s1 + 0xe0]\n 24839: t0 = 936, jump @1320\n      : @945 [@dyn 468] (gas: 8)\n 24845: u64 [a2 + 576] = 0\n 24849: a4 = a2 + 0x200\n 24853: u64 [a4 + 0x38] = a1\n 24856: u64 [a4 + 0x30] = a0\n 24859: a1 = s1 + 0x12a0\n 24863: u64 [a4 + 0x28] = a3\n 24866: a0 = 0\n 24868: ra = 938, jump @9\n      : @946 [@dyn 469] (gas: 3)\n 24874: t0 = 0x3ac\n 24878: a1 = s1 + 0x1078\n 24882: fallthrough\n      : @947 [@dyn 470] (gas: 8)\n 24883: u64 [a1 + 544] = 0\n 24887: u64 [a1 + 536] = 0\n 24891: u64 [a1 + 520] = 0x6\n 24896: a2 = a1\n 24898: a0 = 0x20\n 24901: a1 = s1 + 0x1280\n 24905: u64 [a2 + 528] = 0\n 24909: ra = 942, jump @9\n      : @948 [@dyn 471] (gas: 3)\n 24915: a0 = u64 [s1 + 0xf8]\n 24919: a0 = i32 [a0]\n 24921: jump @950 if a0 >u 63\n      : @949 (gas: 3)\n 24925: a1 = u64 [s1 + 0xf8]\n 24929: u32 [a1 + 0] = 0x40\n 24932: fallthrough\n      : @950 (gas: 4)\n 24933: a0 = sp + 0xffffffffffffffe0\n 24936: a0 = a0 & 0xffffffffffffffe0\n 24939: u64 [s1 + 0xa8] = a0\n 24943: t0 = 944, jump @1339\n      : @951 [@dyn 472] (gas: 4)\n 24949: ra = 0x3b2\n 24953: ecalli 9 // 'hash_keccak_256'\n 24955: t0 = 0x3b4\n 24959: jump @1323\n      : @952 [@dyn 473] (gas: 1)\n 24962: t0 = 948, jump @1323\n      : @953 [@dyn 474] (gas: 8)\n 24968: u64 [a2 + 512] = 0\n 24972: u64 [a2 + 504] = 0\n 24976: u64 [a2 + 496] = 0\n 24980: a1 = s1 + 0x1260\n 24984: a0 = u64 [s1 + 0xe8]\n 24988: u64 [a2 + 0x1e8] = a0\n 24992: a0 = 0\n 24994: ra = 950, jump @9\n      : @954 [@dyn 475] (gas: 14)\n 25000: a0 = u64 [s1 + 0x88]\n 25004: a1 = s1 + 0x1078\n 25008: a2 = a1 + 0x100\n 25012: u64 [a2 + 0xe0] = a0\n 25016: a0 = u64 [s1 + 0x90]\n 25020: u64 [a2 + 0xd8] = a0\n 25024: a0 = u64 [s1 + 0x98]\n 25028: u64 [a2 + 0xd0] = a0\n 25032: a3 = a1\n 25034: a0 = 0x20\n 25037: a1 = s1 + 0x1240\n 25041: a2 = u64 [s1 + 0xa0]\n 25045: u64 [a3 + 0x1c8] = a2\n 25049: ra = 952, jump @9\n      : @955 [@dyn 476] (gas: 3)\n 25055: a0 = u64 [s1 + 0xf8]\n 25059: a0 = i32 [a0]\n 25061: jump @957 if a0 >u 63\n      : @956 (gas: 3)\n 25065: a0 = u64 [s1 + 0xf8]\n 25069: u32 [a0 + 0] = 0x40\n 25072: fallthrough\n      : @957 (gas: 4)\n 25073: a0 = sp + 0xffffffffffffffe0\n 25076: a0 = a0 & 0xffffffffffffffe0\n 25079: u64 [s1 + 0xa0] = a0\n 25083: t0 = 954, jump @1339\n      : @958 [@dyn 477] (gas: 5)\n 25089: ra = 0x3bc\n 25093: ecalli 9 // 'hash_keccak_256'\n 25095: a3 = u64 [s1 + 0xa0]\n 25099: t0 = 0x3be\n 25103: jump @1328\n      : @959 [@dyn 478] (gas: 2)\n 25106: a3 = u64 [s1 + 0xa0]\n 25110: t0 = 958, jump @1328\n      : @960 [@dyn 479] (gas: 3)\n 25116: i32 a0 = a0 + 0x220\n 25120: a0 = a0 + s1\n 25123: ra = 960, jump @11\n      : @961 [@dyn 480] (gas: 2)\n 25129: a0 = 0x1000\n 25133: t0 = 962, jump @1367\n      : @962 [@dyn 481] (gas: 5)\n 25139: a0 = u64 [a4 + 0xb8]\n 25143: a1 = u64 [a4 + 0xa8]\n 25147: a2 = u64 [a4 + 0xc0]\n 25151: a3 = u64 [a4 + 0xb0]\n 25155: t0 = 964, jump @1365\n      : @963 [@dyn 482] (gas: 1)\n 25161: jump @1016 if a0 == 0\n      : @964 (gas: 3)\n 25165: t0 = 0x3c6\n 25169: a2 = s1 + 0x1078\n 25173: fallthrough\n      : @965 [@dyn 483] (gas: 9)\n 25174: u64 [a2 + 408] = 0\n 25178: u64 [a2 + 400] = 0\n 25182: a0 = 0xc98289f000000000\n 25192: u64 [a2 + 0x1a0] = a0\n 25196: a1 = s1 + 0x1200\n 25200: u64 [a2 + 392] = 0\n 25204: a0 = 0\n 25206: ra = 0x3fc\n 25210: jump @9\n      : @966 (gas: 10)\n 25213: a2 = s1 + 0x7ff\n 25217: a2 = a2 + 0x79\n 25220: u64 [a2 + 2008] = 0\n 25224: u64 [a2 + 2000] = 0\n 25228: a0 = 0xcf114bd900000000\n 25238: u64 [a2 + 0x7e0] = a0\n 25242: a1 = s1 + 0x1040\n 25246: u64 [a2 + 1992] = 0\n 25250: a0 = 0\n 25252: ra = 968, jump @9\n      : @967 [@dyn 484] (gas: 2)\n 25258: a1 = i32 [0x20150]\n 25263: jump @969 if a1 >u 31\n      : @968 (gas: 3)\n 25267: u32 [0x20150] = 0x20\n 25273: a1 = 0x20160\n 25278: jump @760\n      : @969 (gas: 2)\n 25281: a1 = 0x20160\n 25286: jump @760\n      : @970 (gas: 1)\n 25289: jump @1039 if a0 != 1081252952\n      : @971 (gas: 10)\n 25297: a0 = s1 + 0x2078\n 25301: u64 [a0 + 96] = 0\n 25304: u64 [a0 + 88] = 0\n 25307: u64 [a0 + 80] = 0\n 25310: u64 [a0 + 72] = 0\n 25313: a0 = s1 + 0x2000\n 25317: i32 a0 = a0 + 0xc0\n 25321: ecalli 17 // 'value_transferred'\n 25323: a3 = s1 + 0x2078\n 25327: fallthrough\n      : @972 (gas: 8)\n 25328: a0 = u64 [a3 + 0x58]\n 25331: a1 = u64 [a3 + 0x60]\n 25334: a2 = u64 [a3 + 0x50]\n 25337: a3 = u64 [a3 + 0x48]\n 25340: a1 = a1 | a2\n 25343: a0 = a0 | a3\n 25346: a0 = a0 | a1\n 25349: jump @1045 if a0 == 0\n      : @973 (gas: 6)\n 25353: a1 = 0x20160\n 25358: i32 a1 = a1 + 0\n 25360: a0 = 0x1\n 25363: a2 = 0\n 25365: ecalli 14 // 'seal_return'\n 25367: jump @1072\n      : @974 (gas: 3)\n 25370: a0 = u64 [s1 + 0xf8]\n 25374: a0 = i32 [a0]\n 25376: jump @1047 if a0 >u 35\n      : @975 (gas: 6)\n 25381: a1 = 0x20160\n 25386: i32 a1 = a1 + 0\n 25388: a0 = 0x1\n 25391: a2 = 0\n 25393: ecalli 14 // 'seal_return'\n 25395: jump @1072\n      : @976 (gas: 4)\n 25398: a0 = s1 + 0x1f20\n 25402: ra = 0x3ca\n 25406: t0 = 0x460\n 25410: jump @1366\n      : @977 [@dyn 485] (gas: 16)\n 25413: a1 = s1 + 0x1878\n 25417: a2 = a1 + 0x600\n 25421: a0 = u64 [a2 + 0xb8]\n 25425: u64 [s1 + 0xe0] = a0\n 25429: a0 = u64 [a2 + 0xb0]\n 25433: u64 [s1 + 0xf8] = a0\n 25437: a0 = u64 [a2 + 0xa8]\n 25441: u64 [s1 + 0xf0] = a0\n 25445: a1 = s1 + 0x2078\n 25449: u64 [a1 + 1952] = 0\n 25453: u64 [a1 + 1944] = 0\n 25457: u64 [a1 + 1936] = 0\n 25461: u64 [a1 + 1928] = 0x1\n 25466: a0 = s1 + 0x1f00\n 25470: a1 = s1 + 0x2800\n 25474: ra = 972, jump @11\n      : @978 [@dyn 486] (gas: 18)\n 25480: a1 = s1 + 0x1878\n 25484: a2 = a1 + 0x600\n 25488: a0 = u64 [a2 + 0xa0]\n 25492: u64 [s1 + 0xe8] = a0\n 25496: a0 = u64 [a2 + 0x98]\n 25500: u64 [s1 + 0xc8] = a0\n 25504: a0 = u64 [a2 + 0x90]\n 25508: u64 [s1 + 0xd8] = a0\n 25512: a0 = u64 [a2 + 0x88]\n 25516: u64 [s1 + 0xd0] = a0\n 25520: a0 = 0x30160\n 25525: u64 [s1 + 0xc0] = a0\n 25529: i32 a0 = a0 + 0\n 25531: ra = 0x3ce\n 25535: ecalli 4 // 'caller'\n 25537: a2 = u64 [s1 + 0xc0]\n 25541: t0 = 0x3d0\n 25545: jump @1344\n      : @979 [@dyn 487] (gas: 2)\n 25548: a2 = u64 [s1 + 0xc0]\n 25552: t0 = 976, jump @1344\n      : @980 [@dyn 488] (gas: 12)\n 25558: a2 = u64 [s1 + 0xc8]\n 25562: a4 = a2\n 25564: a2 = a2 << 0x20\n 25567: a2 = a2 >> 0x20\n 25570: a1 = a1 ^ a2\n 25573: a2 = u64 [s1 + 0xd0]\n 25577: a0 = a0 ^ a2\n 25580: a0 = a0 | a1\n 25583: a1 = u64 [s1 + 0xd8]\n 25587: a1 = a1 ^ a3\n 25590: a0 = a0 | a1\n 25593: jump @1059 if a0 != 0\n      : @981 (gas: 8)\n 25597: a0 = u64 [s1 + 0xe0]\n 25601: a0 = a0 << 0x20\n 25604: a0 = a0 >> 0x20\n 25607: a1 = u64 [s1 + 0xf8]\n 25611: a2 = u64 [s1 + 0xf0]\n 25615: a1 = a1 | a2\n 25618: a1 = a1 | a0\n 25621: jump @1064 if a1 == 0\n      : @982 (gas: 19)\n 25625: a1 = a4 >> 0x20\n 25628: a1 = a1 << 0x20\n 25631: a0 = a0 | a1\n 25634: a2 = s1 + 0x2078\n 25638: u64 [a2 + 1984] = 0\n 25642: u64 [a2 + 1976] = 0\n 25646: u64 [a2 + 1968] = 0\n 25650: a3 = a2 + 0x700\n 25654: u64 [a3 + 168] = 0x1\n 25659: a1 = u64 [s1 + 0xf0]\n 25663: u64 [a3 + 0xc8] = a1\n 25667: a1 = u64 [s1 + 0xf8]\n 25671: u64 [a3 + 0xd0] = a1\n 25675: a1 = u64 [s1 + 0xe8]\n 25679: u64 [a3 + 0xe0] = a1\n 25683: u64 [a3 + 0xd8] = a0\n 25687: a0 = s1 + 0x2820\n 25691: a1 = s1 + 0x2840\n 25695: ra = 978, jump @12\n      : @983 [@dyn 489] (gas: 6)\n 25701: a1 = 0x20160\n 25706: i32 a1 = a1 + 0\n 25708: a0 = 0\n 25710: a2 = 0\n 25712: ecalli 14 // 'seal_return'\n 25714: jump @1072\n      : @984 (gas: 3)\n 25717: t0 = 0x3d4\n 25721: a2 = s1 + 0x1078\n 25725: fallthrough\n      : @985 [@dyn 490] (gas: 9)\n 25726: u64 [a2 + 1336] = 0\n 25730: u64 [a2 + 1328] = 0\n 25734: a0 = 0xa7a9536d00000000\n 25744: u64 [a2 + 0x540] = a0\n 25748: a1 = s1 + 0x15a0\n 25752: u64 [a2 + 1320] = 0\n 25756: a0 = 0\n 25758: ra = 0x3fc\n 25762: jump @9\n      : @986 (gas: 15)\n 25765: a2 = 0xffffffff\n 25775: u64 [s1 + 0xc8] = a2\n 25779: a3 = s1 + 0x1078\n 25783: a2 = u64 [a3 + 0x658]\n 25787: a3 = u64 [a3 + 0x660]\n 25791: a1 = a1 | 0x1\n 25794: a4 = s1 + 0x2078\n 25798: a5 = a4 + 0x500\n 25802: u64 [a5 + 0x8] = a0\n 25805: u64 [a5 + 0x18] = a2\n 25808: u64 [a5 + 0x10] = a1\n 25811: u64 [a5 + 0x20] = a3\n 25814: a1 = s1 + 0x2580\n 25818: a0 = u64 [s1 + 0xe0]\n 25822: ra = 982, jump @12\n      : @987 [@dyn 491] (gas: 6)\n 25828: a0 = u64 [s1 + 0xd8]\n 25832: ra = 0x3d8\n 25836: ecalli 4 // 'caller'\n 25838: a2 = u64 [s1 + 0xe8]\n 25842: t0 = 0x3da\n 25846: jump @1320\n      : @988 [@dyn 492] (gas: 2)\n 25849: a2 = u64 [s1 + 0xe8]\n 25853: t0 = 986, jump @1320\n      : @989 [@dyn 493] (gas: 8)\n 25859: u64 [a2 + 1568] = 0\n 25863: a4 = a2 + 0x600\n 25867: u64 [a4 + 0x18] = a1\n 25870: u64 [a4 + 0x10] = a0\n 25873: a1 = s1 + 0x1680\n 25877: u64 [a4 + 0x8] = a3\n 25880: a0 = 0\n 25882: ra = 988, jump @9\n      : @990 [@dyn 494] (gas: 3)\n 25888: t0 = 0x3de\n 25892: a1 = s1 + 0x1078\n 25896: fallthrough\n      : @991 [@dyn 495] (gas: 8)\n 25897: u64 [a1 + 1536] = 0\n 25901: u64 [a1 + 1528] = 0\n 25905: u64 [a1 + 1512] = 0x2\n 25910: a2 = a1\n 25912: a0 = 0x20\n 25915: a1 = s1 + 0x1660\n 25919: u64 [a2 + 1520] = 0\n 25923: ra = 992, jump @9\n      : @992 [@dyn 496] (gas: 7)\n 25929: a0 = sp + 0xffffffffffffffe0\n 25932: a0 = a0 & 0xffffffffffffffe0\n 25935: u64 [s1 + 0xe0] = a0\n 25939: sp = a0\n 25941: a0 = u64 [s1 + 0xf8]\n 25945: a0 = i32 [a0]\n 25947: jump @994 if a0 >u 63\n      : @993 (gas: 3)\n 25951: a1 = u64 [s1 + 0xf8]\n 25955: u32 [a1 + 0] = 0x40\n 25958: fallthrough\n      : @994 (gas: 4)\n 25959: a0 = sp + 0xffffffffffffffe0\n 25962: a0 = a0 & 0xffffffffffffffe0\n 25965: u64 [s1 + 0xf8] = a0\n 25969: t0 = 994, jump @1339\n      : @995 [@dyn 497] (gas: 5)\n 25975: ra = 0x3e4\n 25979: ecalli 9 // 'hash_keccak_256'\n 25981: a3 = u64 [s1 + 0xf8]\n 25985: t0 = 0x3e6\n 25989: jump @1333\n      : @996 [@dyn 498] (gas: 2)\n 25992: a3 = u64 [s1 + 0xf8]\n 25996: t0 = 998, jump @1333\n      : @997 [@dyn 499] (gas: 7)\n 26002: a1 = u64 [s1 + 0xe0]\n 26006: u64 [a1] = a4\n 26008: u64 [a1 + 0x8] = a5\n 26011: u64 [a1 + 0x10] = a2\n 26014: u64 [a1 + 0x18] = a0\n 26017: a0 = s1 + 0x1640\n 26021: ra = 1000, jump @11\n      : @998 [@dyn 500] (gas: 9)\n 26027: a0 = s1 + 0x1078\n 26031: a0 = u64 [a0 + 0x5c8]\n 26035: a1 = u64 [s1 + 0xc8]\n 26039: a0 = a0 + a1\n 26042: a0 = a0 & a1\n 26045: u64 [s1 + 0xf8] = a0\n 26049: a0 = s1 + 0x1620\n 26053: a1 = u64 [s1 + 0xe0]\n 26057: ra = 1002, jump @11\n      : @999 [@dyn 501] (gas: 18)\n 26063: a3 = s1 + 0x1078\n 26067: a0 = u32 [a3 + 0x5ac]\n 26071: a0 = a0 << 0x20\n 26074: a4 = a3 + 0x500\n 26078: a1 = u64 [a4 + 0xc0]\n 26082: a2 = u64 [a4 + 0xb8]\n 26086: a3 = u64 [a4 + 0xb0]\n 26090: a4 = u64 [s1 + 0xf8]\n 26094: a0 = a0 | a4\n 26097: a4 = s1 + 0x2078\n 26101: a5 = a4 + 0x500\n 26105: u64 [a5 + 0x40] = a1\n 26108: u64 [a5 + 0x38] = a2\n 26111: u64 [a5 + 0x30] = a3\n 26114: u64 [a5 + 0x28] = a0\n 26117: a1 = s1 + 0x25a0\n 26121: a0 = u64 [s1 + 0xe0]\n 26125: ra = 1004, jump @12\n      : @1000 [@dyn 502] (gas: 6)\n 26131: a0 = u64 [s1 + 0xd8]\n 26135: ra = 0x3ee\n 26139: ecalli 4 // 'caller'\n 26141: a2 = u64 [s1 + 0xe8]\n 26145: t0 = 0x3f0\n 26149: jump @1337\n      : @1001 [@dyn 503] (gas: 2)\n 26152: a2 = u64 [s1 + 0xe8]\n 26156: t0 = 1008, jump @1337\n      : @1002 [@dyn 504] (gas: 31)\n 26162: t0 = a1 | a0\n 26165: a3 = a3 >> 0x20\n 26168: a2 = reverse a2\n 26170: a1 = a2 << 0x20\n 26173: a1 = a1 | a3\n 26176: a2 = a2 >> 0x20\n 26179: a3 = u64 [s1 + 0xd0]\n 26183: a0 = s1 + 0x1078\n 26187: u64 [a0 + 0x548] = a3\n 26191: a3 = u64 [0x20040]\n 26196: a4 = u64 [0x20048]\n 26201: a5 = u64 [0x20050]\n 26206: u64 [a0 + 0x5a0] = a3\n 26210: u64 [a0 + 0x598] = a4\n 26214: u64 [a0 + 1376] = 0\n 26218: a4 = a0 + 0x500\n 26222: u64 [a4 + 0x90] = a5\n 26226: a3 = u64 [0x20058]\n 26231: u64 [a0 + 1368] = 0\n 26235: u64 [a0 + 1360] = 0\n 26239: u64 [a0 + 1408] = 0\n 26243: u64 [a4 + 0x88] = a3\n 26247: u64 [a4 + 0x78] = a2\n 26250: u64 [a4 + 0x70] = a1\n 26253: a2 = s1 + 0x1600\n 26257: a3 = s1 + 0x15e0\n 26261: a4 = s1 + 0x15c0\n 26265: u64 [a0 + 0x568] = t0\n 26269: a0 = 0\n 26271: a1 = 0\n 26273: ra = 1010, jump @14\n      : @1003 [@dyn 505] (gas: 1)\n 26279: jump @1038\n      : @1004 (gas: 3)\n 26282: t0 = 0x3f4\n 26286: a2 = s1 + 0x1078\n 26290: fallthrough\n      : @1005 [@dyn 506] (gas: 8)\n 26291: u64 [a2 + 952] = 0\n 26295: u64 [a2 + 944] = 0\n 26299: a0 = 0xd5b25b6300000000\n 26309: u64 [a2 + 0x3c0] = a0\n 26313: a1 = s1 + 0x1420\n 26317: u64 [a2 + 936] = 0\n 26321: a0 = 0\n 26323: ra = 1014, jump @9\n      : @1006 [@dyn 507] (gas: 2)\n 26329: a1 = i32 [0x20150]\n 26334: jump @1008 if a1 >u 31\n      : @1007 (gas: 3)\n 26338: u32 [0x20150] = 0x20\n 26344: a1 = 0x20160\n 26349: jump @760\n      : @1008 (gas: 2)\n 26352: a1 = 0x20160\n 26357: jump @760\n      : @1009 (gas: 3)\n 26360: t0 = 0x3f8\n 26364: a2 = s1 + 0x1078\n 26368: fallthrough\n      : @1010 [@dyn 508] (gas: 9)\n 26369: u64 [a2 + 760] = 0\n 26373: u64 [a2 + 752] = 0\n 26377: a0 = 0xa7a9536d00000000\n 26387: u64 [a2 + 0x300] = a0\n 26391: a1 = s1 + 0x1360\n 26395: u64 [a2 + 744] = 0\n 26399: a0 = 0\n 26401: ra = 0x3fc\n 26405: jump @9\n      : @1011 (gas: 3)\n 26408: t0 = 0x3fa\n 26412: a2 = s1 + 0x1078\n 26416: fallthrough\n      : @1012 [@dyn 509] (gas: 8)\n 26417: u64 [a2 + 88] = 0\n 26420: u64 [a2 + 80] = 0\n 26423: a0 = 0xafa4e2b600000000\n 26433: u64 [a2 + 0x60] = a0\n 26436: a1 = s1 + 0x10c0\n 26440: u64 [a2 + 72] = 0\n 26443: a0 = 0\n 26445: ra = 1020, jump @9\n      : @1013 [@dyn 510] (gas: 3)\n 26451: a0 = u64 [s1 + 0xf8]\n 26455: a0 = i32 [a0]\n 26457: jump @1015 if a0 >u 31\n      : @1014 (gas: 3)\n 26461: a1 = u64 [s1 + 0xf8]\n 26465: u32 [a1 + 0] = 0x20\n 26468: fallthrough\n      : @1015 (gas: 5)\n 26469: a0 = 0x1\n 26472: a2 = 0x4\n 26475: a1 = u64 [s1 + 0xf0]\n 26479: ecalli 14 // 'seal_return'\n 26481: fallthrough\n      : @1016 (gas: 6)\n 26482: a0 = u64 [s1 + 0xb8]\n 26486: ra = 0x3fe\n 26490: ecalli 4 // 'caller'\n 26492: a2 = u64 [s1 + 0xe0]\n 26496: t0 = 0x400\n 26500: jump @1320\n      : @1017 [@dyn 511] (gas: 2)\n 26503: a2 = u64 [s1 + 0xe0]\n 26507: t0 = 1024, jump @1320\n      : @1018 [@dyn 512] (gas: 8)\n 26513: u64 [a2 + 384] = 0\n 26517: a4 = a2 + 0x100\n 26521: u64 [a4 + 0x78] = a1\n 26524: u64 [a4 + 0x70] = a0\n 26527: a1 = s1 + 0x11e0\n 26531: u64 [a4 + 0x68] = a3\n 26534: a0 = 0\n 26536: ra = 1026, jump @9\n      : @1019 [@dyn 513] (gas: 3)\n 26542: t0 = 0x404\n 26546: a1 = s1 + 0x1078\n 26550: fallthrough\n      : @1020 [@dyn 514] (gas: 8)\n 26551: u64 [a1 + 352] = 0\n 26555: u64 [a1 + 344] = 0\n 26559: u64 [a1 + 328] = 0x6\n 26564: a2 = a1\n 26566: a0 = 0x20\n 26569: a1 = s1 + 0x11c0\n 26573: u64 [a2 + 336] = 0\n 26577: ra = 1030, jump @9\n      : @1021 [@dyn 515] (gas: 3)\n 26583: a0 = u64 [s1 + 0xf8]\n 26587: a0 = i32 [a0]\n 26589: jump @1023 if a0 >u 63\n      : @1022 (gas: 3)\n 26593: a1 = u64 [s1 + 0xf8]\n 26597: u32 [a1 + 0] = 0x40\n 26600: fallthrough\n      : @1023 (gas: 4)\n 26601: a0 = sp + 0xffffffffffffffe0\n 26604: a0 = a0 & 0xffffffffffffffe0\n 26607: u64 [s1 + 0xa8] = a0\n 26611: t0 = 1032, jump @1339\n      : @1024 [@dyn 516] (gas: 4)\n 26617: ra = 0x40a\n 26621: ecalli 9 // 'hash_keccak_256'\n 26623: t0 = 0x40c\n 26627: jump @1323\n      : @1025 [@dyn 517] (gas: 1)\n 26630: t0 = 1036, jump @1323\n      : @1026 [@dyn 518] (gas: 8)\n 26636: u64 [a2 + 320] = 0\n 26640: u64 [a2 + 312] = 0\n 26644: u64 [a2 + 304] = 0\n 26648: a1 = s1 + 0x11a0\n 26652: a0 = u64 [s1 + 0xe8]\n 26656: u64 [a2 + 0x128] = a0\n 26660: a0 = 0\n 26662: ra = 1038, jump @9\n      : @1027 [@dyn 519] (gas: 14)\n 26668: a0 = u64 [s1 + 0x88]\n 26672: a1 = s1 + 0x1078\n 26676: a2 = a1 + 0x100\n 26680: u64 [a2 + 0x20] = a0\n 26683: a0 = u64 [s1 + 0x90]\n 26687: u64 [a2 + 0x18] = a0\n 26690: a0 = u64 [s1 + 0x98]\n 26694: u64 [a2 + 0x10] = a0\n 26697: a3 = a1\n 26699: a0 = 0x20\n 26702: a1 = s1 + 0x1180\n 26706: a2 = u64 [s1 + 0xa0]\n 26710: u64 [a3 + 0x108] = a2\n 26714: ra = 1040, jump @9\n      : @1028 [@dyn 520] (gas: 3)\n 26720: a0 = u64 [s1 + 0xf8]\n 26724: a0 = i32 [a0]\n 26726: jump @1030 if a0 >u 63\n      : @1029 (gas: 3)\n 26730: a0 = u64 [s1 + 0xf8]\n 26734: u32 [a0 + 0] = 0x40\n 26737: fallthrough\n      : @1030 (gas: 4)\n 26738: a0 = sp + 0xffffffffffffffe0\n 26741: a0 = a0 & 0xffffffffffffffe0\n 26744: u64 [s1 + 0xf8] = a0\n 26748: t0 = 1042, jump @1339\n      : @1031 [@dyn 521] (gas: 5)\n 26754: ra = 0x414\n 26758: ecalli 9 // 'hash_keccak_256'\n 26760: a3 = u64 [s1 + 0xf8]\n 26764: t0 = 0x416\n 26768: jump @1328\n      : @1032 [@dyn 522] (gas: 2)\n 26771: a3 = u64 [s1 + 0xf8]\n 26775: t0 = 1046, jump @1328\n      : @1033 [@dyn 523] (gas: 3)\n 26781: i32 a0 = a0 + 0x160\n 26785: a0 = a0 + s1\n 26788: ra = 1048, jump @11\n      : @1034 [@dyn 524] (gas: 22)\n 26794: a3 = s1 + 0x1078\n 26798: a0 = u64 [a3 + 0xe8]\n 26802: a1 = u64 [a3 + 0xf0]\n 26806: a2 = u64 [a3 + 0xf8]\n 26810: a3 = u64 [a3 + 0x100]\n 26814: a4 = u64 [s1 + 0xc8]\n 26818: a0 = a0 | a4\n 26821: a4 = u64 [s1 + 0xc0]\n 26825: a1 = a1 | a4\n 26828: a4 = u64 [s1 + 0xd8]\n 26832: a2 = a2 | a4\n 26835: a4 = u64 [s1 + 0xd0]\n 26839: a3 = a3 | a4\n 26842: a4 = s1 + 0x2078\n 26846: a5 = a4 + 0x400\n 26850: u64 [a5 + 0xc0] = a3\n 26854: u64 [a5 + 0xb8] = a2\n 26858: u64 [a5 + 0xb0] = a1\n 26862: u64 [a5 + 0xa8] = a0\n 26866: a1 = s1 + 0x2520\n 26870: a0 = u64 [s1 + 0xa8]\n 26874: ra = 1050, jump @12\n      : @1035 [@dyn 525] (gas: 6)\n 26880: a0 = u64 [s1 + 0xb8]\n 26884: ra = 0x41c\n 26888: ecalli 4 // 'caller'\n 26890: a2 = u64 [s1 + 0xe0]\n 26894: t0 = 0x41e\n 26898: jump @1342\n      : @1036 [@dyn 526] (gas: 2)\n 26901: a2 = u64 [s1 + 0xe0]\n 26905: t0 = 1054, jump @1342\n      : @1037 [@dyn 527] (gas: 31)\n 26911: a5 = s1 + 0x1078\n 26915: u64 [a5 + 128] = 0\n 26919: u64 [a5 + 120] = 0\n 26922: u64 [a5 + 112] = 0\n 26925: a3 = u64 [s1 + 0xe8]\n 26929: u64 [a5 + 0x68] = a3\n 26932: a3 = u64 [s1 + 0xb0]\n 26936: u64 [a5 + 0x88] = a3\n 26940: a3 = u64 [0x20060]\n 26945: a4 = u64 [0x20068]\n 26950: u64 [a5 + 160] = 0\n 26954: u64 [a5 + 152] = 0\n 26958: u64 [a5 + 0xe0] = a3\n 26962: u64 [a5 + 0xd8] = a4\n 26966: a3 = u64 [0x20070]\n 26971: a4 = u64 [0x20078]\n 26976: u64 [a5 + 144] = 0\n 26980: u64 [a5 + 192] = 0\n 26984: u64 [a5 + 0xd0] = a3\n 26988: u64 [a5 + 0xc8] = a4\n 26992: u64 [a5 + 0xb8] = a2\n 26996: u64 [a5 + 0xb0] = a1\n 27000: a1 = a5\n 27002: a2 = s1 + 0x1140\n 27006: a3 = s1 + 0x1120\n 27010: a4 = s1 + 0x1100\n 27014: a5 = s1 + 0x10e0\n 27018: u64 [a1 + 0xa8] = a0\n 27022: a0 = 0\n 27024: a1 = 0\n 27026: ra = 1056, jump @17\n      : @1038 [@dyn 528] (gas: 5)\n 27032: a0 = 0\n 27034: a1 = u64 [s1 + 0xf0]\n 27038: a2 = 0\n 27040: ecalli 14 // 'seal_return'\n 27042: jump @1072\n      : @1039 (gas: 1)\n 27045: jump @1069 if a0 != 1746437986\n      : @1040 (gas: 11)\n 27053: a0 = s1 + 0x2078\n 27057: u64 [a0 + 864] = 0\n 27061: u64 [a0 + 856] = 0\n 27065: u64 [a0 + 848] = 0\n 27069: u64 [a0 + 840] = 0\n 27073: a0 = s1 + 0x2000\n 27077: i32 a0 = a0 + 0x3c0\n 27081: ra = 0x422\n 27085: ecalli 17 // 'value_transferred'\n 27087: t0 = 0x424\n 27091: jump @1355\n      : @1041 [@dyn 529] (gas: 1)\n 27094: t0 = 1060, jump @1355\n      : @1042 [@dyn 530] (gas: 1)\n 27100: t0 = 1062, jump @1359\n      : @1043 [@dyn 531] (gas: 1)\n 27106: jump @1073 if a0 == 0\n      : @1044 (gas: 6)\n 27110: a1 = 0x20160\n 27115: i32 a1 = a1 + 0\n 27117: a0 = 0x1\n 27120: a2 = 0\n 27122: ecalli 14 // 'seal_return'\n 27124: jump @1072\n      : @1045 (gas: 3)\n 27127: a0 = u64 [s1 + 0xf8]\n 27131: a0 = i32 [a0]\n 27133: jump @1075 if a0 >u 35\n      : @1046 (gas: 6)\n 27138: a1 = 0x20160\n 27143: i32 a1 = a1 + 0\n 27145: a0 = 0x1\n 27148: a2 = 0\n 27150: ecalli 14 // 'seal_return'\n 27152: jump @1072\n      : @1047 (gas: 4)\n 27155: a0 = s1 + 0x180\n 27159: ra = 0x428\n 27163: t0 = 0x460\n 27167: jump @1366\n      : @1048 [@dyn 532] (gas: 10)\n 27170: a0 = u64 [s1 + 0x180]\n 27174: a1 = u64 [s1 + 0x188]\n 27178: a2 = u32 [s1 + 0x190]\n 27182: u64 [s1 + 376] = 0\n 27186: u64 [s1 + 0x170] = a2\n 27190: u64 [s1 + 0x168] = a1\n 27194: a1 = s1 + 0x160\n 27198: u64 [s1 + 0x160] = a0\n 27202: a0 = 0\n 27204: ra = 1066, jump @9\n      : @1049 [@dyn 533] (gas: 7)\n 27210: u64 [s1 + 344] = 0\n 27214: u64 [s1 + 336] = 0\n 27218: u64 [s1 + 320] = 0x4\n 27223: a0 = 0x20\n 27226: a1 = s1 + 0x140\n 27230: u64 [s1 + 328] = 0\n 27234: ra = 1068, jump @9\n      : @1050 [@dyn 534] (gas: 4)\n 27240: a0 = 0x20150\n 27245: u64 [s1 + 0xf8] = a0\n 27249: a0 = i32 [0x20150]\n 27254: jump @1052 if a0 >u 63\n      : @1051 (gas: 3)\n 27258: a1 = u64 [s1 + 0xf8]\n 27262: u32 [a1 + 0] = 0x40\n 27265: fallthrough\n      : @1052 (gas: 14)\n 27266: a0 = sp + 0xffffffffffffffe0\n 27269: a2 = a0 & 0xffffffffffffffe0\n 27272: u64 [s1 + 0xe8] = a2\n 27276: sp = a2\n 27278: a0 = 0x20160\n 27283: u64 [s1 + 0xf0] = a0\n 27287: i32 a0 = a0 + 0\n 27289: i32 a2 = a2 + 0\n 27291: a1 = 0x40\n 27294: ra = 0x42e\n 27298: ecalli 9 // 'hash_keccak_256'\n 27300: a3 = u64 [s1 + 0xe8]\n 27304: t0 = 0x430\n 27308: jump @1358\n      : @1053 [@dyn 535] (gas: 2)\n 27311: a3 = u64 [s1 + 0xe8]\n 27315: t0 = 1072, jump @1358\n      : @1054 [@dyn 536] (gas: 10)\n 27321: i32 a4 = a4 + 0xfffffffffffff878\n 27325: a4 = a4 + s1\n 27328: a5 = a4 + 0x700\n 27332: u64 [a5 + 0x40] = a3\n 27335: u64 [a5 + 0x38] = a2\n 27338: u64 [a5 + 0x30] = a1\n 27341: u64 [a5 + 0x28] = a0\n 27344: a0 = s1 + 0x120\n 27348: a1 = s1 + 0x1fa0\n 27352: ra = 1074, jump @11\n      : @1055 [@dyn 537] (gas: 8)\n 27358: a0 = u32 [s1 + 0x120]\n 27362: u64 [s1 + 280] = 0\n 27366: u64 [s1 + 272] = 0\n 27370: u64 [s1 + 0x100] = a0\n 27374: a0 = 0x80\n 27378: a1 = s1 + 0x100\n 27382: u64 [s1 + 264] = 0\n 27386: ra = 1076, jump @9\n      : @1056 [@dyn 538] (gas: 3)\n 27392: a0 = u64 [s1 + 0xf8]\n 27396: a0 = i32 [a0]\n 27398: jump @1058 if a0 >u 159\n      : @1057 (gas: 5)\n 27403: a1 = u64 [s1 + 0xf8]\n 27407: u32 [a1 + 0] = 0xa0\n 27411: a0 = u64 [s1 + 0xf0]\n 27415: i32 a1 = a0 + 0x80\n 27419: jump @470\n      : @1058 (gas: 3)\n 27422: a0 = u64 [s1 + 0xf0]\n 27426: i32 a1 = a0 + 0x80\n 27430: jump @470\n      : @1059 (gas: 3)\n 27433: t0 = 0x436\n 27437: a2 = s1 + 0x1878\n 27441: fallthrough\n      : @1060 [@dyn 539] (gas: 8)\n 27442: u64 [a2 + 1656] = 0\n 27446: u64 [a2 + 1648] = 0\n 27450: a0 = 0x5fc483c500000000\n 27460: u64 [a2 + 0x680] = a0\n 27464: a1 = s1 + 0x1ee0\n 27468: u64 [a2 + 1640] = 0\n 27472: a0 = 0\n 27474: ra = 1080, jump @9\n      : @1061 [@dyn 540] (gas: 2)\n 27480: a1 = i32 [0x20150]\n 27485: jump @1063 if a1 >u 31\n      : @1062 (gas: 3)\n 27489: u32 [0x20150] = 0x20\n 27495: a1 = 0x20160\n 27500: jump @760\n      : @1063 (gas: 2)\n 27503: a1 = 0x20160\n 27508: jump @760\n      : @1064 (gas: 3)\n 27511: t0 = 0x43a\n 27515: a2 = s1 + 0x1878\n 27519: fallthrough\n      : @1065 [@dyn 541] (gas: 8)\n 27520: u64 [a2 + 1624] = 0\n 27524: u64 [a2 + 1616] = 0\n 27528: a0 = 0x14bcf5c800000000\n 27538: u64 [a2 + 0x660] = a0\n 27542: a1 = s1 + 0x1ec0\n 27546: u64 [a2 + 1608] = 0\n 27550: a0 = 0\n 27552: ra = 1084, jump @9\n      : @1066 [@dyn 542] (gas: 2)\n 27558: a1 = i32 [0x20150]\n 27563: jump @1068 if a1 >u 31\n      : @1067 (gas: 3)\n 27567: u32 [0x20150] = 0x20\n 27573: a1 = 0x20160\n 27578: jump @760\n      : @1068 (gas: 2)\n 27581: a1 = 0x20160\n 27586: jump @760\n      : @1069 (gas: 3)\n 27589: a0 = u64 [s1 + 0xf8]\n 27593: a0 = i32 [a0]\n 27595: fallthrough\n      : @1070 (gas: 1)\n 27596: jump @1072 if a0 == 0\n      : @1071 (gas: 6)\n 27599: a1 = 0x20160\n 27604: i32 a1 = a1 + 0\n 27606: a0 = 0x1\n 27609: a2 = 0\n 27611: ecalli 14 // 'seal_return'\n 27613: fallthrough\n      : @1072 (gas: 6)\n 27614: a1 = 0x20160\n 27619: i32 a1 = a1 + 0\n 27621: a0 = 0\n 27623: a2 = 0\n 27625: ecalli 14 // 'seal_return'\n 27627: jump @1072\n      : @1073 (gas: 3)\n 27629: a0 = u64 [s1 + 0xf8]\n 27633: a0 = i32 [a0]\n 27635: jump @1085 if a0 >u 99\n      : @1074 (gas: 6)\n 27640: a1 = 0x20160\n 27645: i32 a1 = a1 + 0\n 27647: a0 = 0x1\n 27650: a2 = 0\n 27652: ecalli 14 // 'seal_return'\n 27654: jump @1072\n      : @1075 (gas: 4)\n 27656: a0 = s1 + 0x680\n 27660: ra = 0x43e\n 27664: t0 = 0x460\n 27668: jump @1366\n      : @1076 [@dyn 543] (gas: 14)\n 27671: a0 = u64 [s1 + 0x690]\n 27675: u64 [s1 + 0xe8] = a0\n 27679: a0 = u64 [s1 + 0x688]\n 27683: u64 [s1 + 0xf0] = a0\n 27687: a0 = u64 [s1 + 0x680]\n 27691: u64 [s1 + 0xf8] = a0\n 27695: a1 = s1 + 0x2078\n 27699: u64 [a1 + 128] = 0\n 27703: u64 [a1 + 120] = 0\n 27706: u64 [a1 + 112] = 0\n 27709: u64 [a1 + 104] = 0x1\n 27713: a0 = s1 + 0x660\n 27717: a1 = s1 + 0x20e0\n 27721: ra = 1088, jump @11\n      : @1077 [@dyn 544] (gas: 14)\n 27727: a0 = u64 [s1 + 0x668]\n 27731: u64 [s1 + 0xe0] = a0\n 27735: a0 = u64 [s1 + 0x660]\n 27739: u64 [s1 + 0xd8] = a0\n 27743: a0 = u32 [s1 + 0x670]\n 27747: u64 [s1 + 0xd0] = a0\n 27751: a0 = 0x30160\n 27756: u64 [s1 + 0xc8] = a0\n 27760: i32 a0 = a0 + 0\n 27762: ra = 0x442\n 27766: ecalli 4 // 'caller'\n 27768: a2 = u64 [s1 + 0xc8]\n 27772: t0 = 0x444\n 27776: jump @1344\n      : @1078 [@dyn 545] (gas: 2)\n 27779: a2 = u64 [s1 + 0xc8]\n 27783: t0 = 1092, jump @1344\n      : @1079 [@dyn 546] (gas: 9)\n 27789: a2 = u64 [s1 + 0xd0]\n 27793: a1 = a1 ^ a2\n 27796: a2 = u64 [s1 + 0xd8]\n 27800: a0 = a0 ^ a2\n 27803: a0 = a0 | a1\n 27806: a1 = u64 [s1 + 0xe0]\n 27810: a1 = a1 ^ a3\n 27813: a0 = a0 | a1\n 27816: jump @1090 if a0 != 0\n      : @1080 (gas: 9)\n 27820: a0 = u64 [s1 + 0xe8]\n 27824: a0 = a0 << 0x20\n 27827: a2 = a0 >> 0x20\n 27830: a0 = u64 [s1 + 0xf8]\n 27834: a1 = u64 [s1 + 0xf0]\n 27838: a0 = a0 | a1\n 27841: u64 [s1 + 0xe8] = a2\n 27845: a0 = a0 | a2\n 27848: jump @1094 if a0 == 0\n      : @1081 (gas: 10)\n 27852: a0 = 0xffffffff\n 27862: u64 [s1 + 0xe0] = a0\n 27866: a0 = s1 + 0x2078\n 27870: u64 [a0 + 160] = 0\n 27874: u64 [a0 + 152] = 0\n 27878: u64 [a0 + 144] = 0\n 27882: u64 [a0 + 136] = 0\n 27886: a0 = s1 + 0x620\n 27890: a1 = s1 + 0x2100\n 27894: ra = 1094, jump @11\n      : @1082 [@dyn 547] (gas: 25)\n 27900: a1 = u64 [s1 + 0x630]\n 27904: u64 [s1 + 0xc8] = a1\n 27908: a0 = u64 [s1 + 0x628]\n 27912: u64 [s1 + 0xd8] = a0\n 27916: a0 = u64 [s1 + 0x620]\n 27920: u64 [s1 + 0xd0] = a0\n 27924: a0 = u64 [s1 + 0x638]\n 27928: a1 = a1 >> 0x20\n 27931: a1 = a1 << 0x20\n 27934: a2 = u64 [s1 + 0xe8]\n 27938: a1 = a1 | a2\n 27941: a2 = s1 + 0x2078\n 27945: u64 [a2 + 192] = 0\n 27949: u64 [a2 + 184] = 0\n 27953: u64 [a2 + 176] = 0\n 27957: u64 [a2 + 168] = 0\n 27961: a3 = u64 [s1 + 0xf0]\n 27965: u64 [a2 + 0xd0] = a3\n 27969: a3 = u64 [s1 + 0xf8]\n 27973: u64 [a2 + 0xc8] = a3\n 27977: u64 [a2 + 0xe0] = a0\n 27981: u64 [a2 + 0xd8] = a1\n 27985: a0 = s1 + 0x2120\n 27989: a1 = s1 + 0x2140\n 27993: ra = 1096, jump @12\n      : @1083 [@dyn 548] (gas: 34)\n 27999: a0 = u64 [s1 + 0xd0]\n 28003: a0 = a0 & 0xffffffffffffffff\n 28006: a2 = u64 [s1 + 0xd8]\n 28010: a1 = a2 & 0xffffffffffffffff\n 28013: a2 = u64 [s1 + 0xe0]\n 28017: a3 = u64 [s1 + 0xc8]\n 28021: a2 = a2 & a3\n 28024: u64 [s1 + 1496] = 0\n 28028: a3 = u64 [s1 + 0xe8]\n 28032: a4 = s1 + 0x500\n 28036: u64 [a4 + 0xd0] = a3\n 28040: a3 = u64 [s1 + 0xf0]\n 28044: u64 [a4 + 0xc8] = a3\n 28048: a3 = u64 [s1 + 0xf8]\n 28052: u64 [a4 + 0xc0] = a3\n 28056: u64 [s1 + 1528] = 0\n 28060: u64 [a4 + 0xf0] = a2\n 28064: u64 [a4 + 0xe8] = a1\n 28068: a1 = u64 [0x200d8]\n 28073: a2 = u64 [0x200e0]\n 28078: a3 = u64 [0x200e8]\n 28083: u64 [a4 + 0xe0] = a0\n 28087: a5 = s1 + 0x600\n 28091: u64 [a5 + 0x18] = a1\n 28094: u64 [a5 + 0x10] = a2\n 28097: u64 [a5 + 0x8] = a3\n 28100: a0 = u64 [0x200f0]\n 28105: a2 = s1 + 0x600\n 28109: a3 = s1 + 0x5e0\n 28113: a4 = s1 + 0x5c0\n 28117: u64 [a5] = a0\n 28119: a0 = 0\n 28121: a1 = 0\n 28123: ra = 1098, jump @14\n      : @1084 [@dyn 549] (gas: 6)\n 28129: a1 = 0x20160\n 28134: i32 a1 = a1 + 0\n 28136: a0 = 0\n 28138: a2 = 0\n 28140: ecalli 14 // 'seal_return'\n 28142: jump @1072\n      : @1085 (gas: 5)\n 28145: a0 = s1 + 0x7ff\n 28149: a0 = a0 + 0x601\n 28153: ra = 0x44c\n 28157: t0 = 0x460\n 28161: jump @1366\n      : @1086 [@dyn 550] (gas: 16)\n 28164: a1 = s1 + 0x7ff\n 28168: a1 = a1 + 0x79\n 28171: a2 = a1 + 0x500\n 28175: a0 = u64 [a2 + 0x88]\n 28179: u64 [s1 + 0xf8] = a0\n 28183: a0 = u64 [a2 + 0x90]\n 28187: u64 [s1 + 0xf0] = a0\n 28191: a0 = u64 [a2 + 0x98]\n 28195: u64 [s1 + 0xe8] = a0\n 28199: a0 = u64 [a2 + 0xa0]\n 28203: u64 [s1 + 0xe0] = a0\n 28207: a0 = s1 + 0x7ff\n 28211: a0 = a0 + 0x5e1\n 28215: ra = 0x44e\n 28219: t0 = 0x46a\n 28223: jump @1374\n      : @1087 [@dyn 551] (gas: 16)\n 28226: a1 = s1 + 0x7ff\n 28230: a1 = a1 + 0x79\n 28233: a2 = a1 + 0x500\n 28237: a0 = u64 [a2 + 0x68]\n 28240: u64 [s1 + 0xd8] = a0\n 28244: a0 = u64 [a2 + 0x70]\n 28247: u64 [s1 + 0xd0] = a0\n 28251: a0 = u64 [a2 + 0x78]\n 28254: u64 [s1 + 0xc8] = a0\n 28258: a0 = u64 [a2 + 0x80]\n 28262: u64 [s1 + 0xc0] = a0\n 28266: a0 = s1 + 0x7ff\n 28270: a0 = a0 + 0x5c1\n 28274: ra = 0x450\n 28278: t0 = 0x470\n 28282: jump @1374\n      : @1088 [@dyn 552] (gas: 35)\n 28285: a4 = s1 + 0x7ff\n 28289: a4 = a4 + 0x79\n 28292: a5 = a4 + 0x500\n 28296: a0 = u64 [a5 + 0x48]\n 28299: a1 = u64 [a5 + 0x50]\n 28302: a2 = u64 [a5 + 0x58]\n 28305: a3 = u64 [a5 + 0x60]\n 28308: u64 [a5] = a3\n 28310: a3 = a4 + 0x400\n 28314: u64 [a3 + 0xf8] = a2\n 28318: u64 [a3 + 0xf0] = a1\n 28322: u64 [a3 + 0xe8] = a0\n 28326: a0 = u64 [s1 + 0xc0]\n 28330: u64 [a5 + 0x20] = a0\n 28333: a0 = u64 [s1 + 0xc8]\n 28337: u64 [a5 + 0x18] = a0\n 28340: a0 = u64 [s1 + 0xd0]\n 28344: u64 [a5 + 0x10] = a0\n 28347: a0 = u64 [s1 + 0xd8]\n 28351: u64 [a5 + 0x8] = a0\n 28354: a0 = u64 [s1 + 0xe0]\n 28358: u64 [a5 + 0x40] = a0\n 28361: a0 = u64 [s1 + 0xe8]\n 28365: u64 [a5 + 0x38] = a0\n 28368: a0 = u64 [s1 + 0xf0]\n 28372: u64 [a5 + 0x30] = a0\n 28375: a0 = s1 + 0x7ff\n 28379: a0 = a0 + 0x5a1\n 28383: a1 = s1 + 0x7ff\n 28387: a1 = a1 + 0x581\n 28391: a2 = s1 + 0x7ff\n 28395: a2 = a2 + 0x561\n 28399: a3 = u64 [s1 + 0xf8]\n 28403: u64 [a5 + 0x28] = a3\n 28406: ra = 1106, jump @1161\n      : @1089 [@dyn 553] (gas: 6)\n 28412: a1 = 0x20160\n 28417: i32 a1 = a1 + 0\n 28419: a0 = 0\n 28421: a2 = 0\n 28423: ecalli 14 // 'seal_return'\n 28425: jump @1072\n      : @1090 (gas: 8)\n 28428: u64 [s1 + 1616] = 0\n 28432: u64 [s1 + 1608] = 0\n 28436: u64 [s1 + 1600] = 0\n 28440: a0 = 0x5fc483c500000000\n 28450: a1 = s1 + 0x640\n 28454: u64 [s1 + 0x658] = a0\n 28458: a0 = 0\n 28460: ra = 1108, jump @9\n      : @1091 [@dyn 554] (gas: 2)\n 28466: a1 = i32 [0x20150]\n 28471: jump @1093 if a1 >u 31\n      : @1092 (gas: 3)\n 28475: u32 [0x20150] = 0x20\n 28481: a1 = 0x20160\n 28486: jump @760\n      : @1093 (gas: 2)\n 28489: a1 = 0x20160\n 28494: jump @760\n      : @1094 (gas: 8)\n 28497: u64 [s1 + 1456] = 0\n 28501: u64 [s1 + 1448] = 0\n 28505: u64 [s1 + 1440] = 0\n 28509: a0 = 0xdd75059200000000\n 28519: a1 = s1 + 0x5a0\n 28523: u64 [s1 + 0x5b8] = a0\n 28527: a0 = 0\n 28529: ra = 1110, jump @9\n      : @1095 [@dyn 555] (gas: 2)\n 28535: a1 = i32 [0x20150]\n 28540: jump @1097 if a1 >u 31\n      : @1096 (gas: 3)\n 28544: u32 [0x20150] = 0x20\n 28550: a1 = 0x20160\n 28555: jump @760\n      : @1097 (gas: 2)\n 28558: a1 = 0x20160\n 28563: jump @760\n      : @1098 (gas: 18)\n 28566: sp = sp + 0xffffffffffffffc0\n 28569: u64 [sp + 0x38] = ra\n 28572: u64 [sp + 0x30] = s0\n 28575: u64 [sp + 0x28] = s1\n 28578: s0 = sp + 0x40\n 28581: sp = sp & 0xfffffffffffffff0\n 28584: a2 = u64 [a1 + 0x10]\n 28587: a3 = u64 [a1 + 0x18]\n 28590: a4 = u64 [a1 + 0x8]\n 28593: a1 = u64 [a1]\n 28595: a3 = a3 | a4\n 28598: a4 = a1 | a2\n 28601: a4 = a4 | a3\n 28604: a4 = a4 >> 0x20\n 28607: a2 = a2 | a3\n 28610: a2 = a2 << 0x20\n 28613: a2 = a2 | a4\n 28616: jump @1104 if a2 != 0\n      : @1099 (gas: 3)\n 28619: s1 = a0\n 28621: a0 = sp\n 28623: ra = 1112, jump @7\n      : @1100 [@dyn 556] (gas: 1)\n 28629: t0 = 1114, jump @1351\n      : @1101 [@dyn 557] (gas: 1)\n 28635: jump @1105 if a3 == 0\n      : @1102 (gas: 1)\n 28638: t0 = 1116, jump @1364\n      : @1103 [@dyn 558] (gas: 1)\n 28644: ret\n      : @1104 (gas: 1)\n 28646: trap\n      : @1105 (gas: 8)\n 28647: a1 = 0x20160\n 28652: i32 a1 = a1 + 0\n 28654: a0 = 0x1\n 28657: a2 = 0\n 28659: ra = 0x45e\n 28663: ecalli 14 // 'seal_return'\n 28665: t0 = 0x460\n 28669: jump @1366\n      : @1106 [@dyn 559] (gas: 1)\n 28672: t0 = 1120, jump @1366\n      : @1107 [@dyn 560] (gas: 4)\n 28678: ra = 0x462\n 28682: ecalli 2 // 'call_data_load'\n 28684: t0 = 0x464\n 28688: jump @1351\n      : @1108 [@dyn 561] (gas: 1)\n 28691: t0 = 1124, jump @1351\n      : @1109 [@dyn 562] (gas: 1)\n 28697: jump @1112 if a3 == 0\n      : @1110 (gas: 1)\n 28700: t0 = 1126, jump @1364\n      : @1111 [@dyn 563] (gas: 1)\n 28706: ret\n      : @1112 (gas: 8)\n 28708: a1 = 0x20160\n 28713: i32 a1 = a1 + 0\n 28715: a0 = 0x1\n 28718: a2 = 0\n 28720: ra = 0x468\n 28724: ecalli 14 // 'seal_return'\n 28726: t0 = 0x46a\n 28730: jump @1374\n      : @1113 [@dyn 564] (gas: 1)\n 28733: t0 = 1130, jump @1374\n      : @1114 [@dyn 565] (gas: 3)\n 28739: a1 = 0x24\n 28742: ecalli 2 // 'call_data_load'\n 28744: fallthrough\n      : @1115 (gas: 7)\n 28745: a0 = u64 [sp + 0x18]\n 28748: a1 = u64 [sp + 0x10]\n 28751: a2 = u64 [sp + 0x8]\n 28754: a3 = a1 | a0\n 28757: a4 = a2 <u 0x1\n 28760: a4 = 0 if a3 != 0\n 28762: jump @1118 if a4 == 0\n      : @1116 (gas: 2)\n 28765: a3 = u64 [sp]\n 28767: t0 = 1132, jump @1347\n      : @1117 [@dyn 566] (gas: 1)\n 28773: ret\n      : @1118 (gas: 8)\n 28775: a1 = 0x20160\n 28780: i32 a1 = a1 + 0\n 28782: a0 = 0x1\n 28785: a2 = 0\n 28787: ra = 0x46e\n 28791: ecalli 14 // 'seal_return'\n 28793: t0 = 0x470\n 28797: jump @1374\n      : @1119 [@dyn 567] (gas: 1)\n 28800: t0 = 1136, jump @1374\n      : @1120 [@dyn 568] (gas: 5)\n 28806: a1 = 0x44\n 28809: ra = 0x472\n 28813: ecalli 2 // 'call_data_load'\n 28815: t0 = 0x474\n 28819: jump @1360\n      : @1121 [@dyn 569] (gas: 1)\n 28822: t0 = 1140, jump @1360\n      : @1122 [@dyn 570] (gas: 1)\n 28828: jump @1125 if a4 != 0\n      : @1123 (gas: 1)\n 28831: t0 = 1142, jump @1347\n      : @1124 [@dyn 571] (gas: 1)\n 28837: ret\n      : @1125 (gas: 8)\n 28839: a1 = 0x20160\n 28844: i32 a1 = a1 + 0\n 28846: a0 = 0x1\n 28849: a2 = 0\n 28851: ra = 0x478\n 28855: ecalli 14 // 'seal_return'\n 28857: t0 = 0x47a\n 28861: jump @1366\n      : @1126 [@dyn 572] (gas: 1)\n 28864: t0 = 1146, jump @1366\n      : @1127 [@dyn 573] (gas: 4)\n 28870: ra = 0x47c\n 28874: ecalli 2 // 'call_data_load'\n 28876: t0 = 0x47e\n 28880: jump @1360\n      : @1128 [@dyn 574] (gas: 1)\n 28883: t0 = 1150, jump @1360\n      : @1129 [@dyn 575] (gas: 1)\n 28889: jump @1132 if a4 != 0\n      : @1130 (gas: 1)\n 28892: t0 = 1152, jump @1347\n      : @1131 [@dyn 576] (gas: 1)\n 28898: ret\n      : @1132 (gas: 7)\n 28900: a1 = 0x20160\n 28905: i32 a1 = a1 + 0\n 28907: a0 = 0x1\n 28910: a2 = 0\n 28912: ra = 0x482\n 28916: ecalli 14 // 'seal_return'\n 28918: fallthrough\n      : @1133 [@dyn 577] (gas: 46)\n 28919: sp = sp + 0xffffffffffffff70\n 28923: u64 [sp + 0x88] = ra\n 28927: u64 [sp + 0x80] = s0\n 28931: u64 [sp + 0x78] = s1\n 28934: s0 = sp + 0x90\n 28938: sp = sp & 0xfffffffffffffff0\n 28941: t0 = a0\n 28943: a2 = u64 [a1]\n 28945: t2 = u64 [a0 + 0x8]\n 28948: a5 = u64 [a1 + 0x8]\n 28951: t1 = u64 [a0]\n 28953: a3 = a2 + 0x1f\n 28956: ra = a3 <u a2\n 28959: a2 = a5 + ra\n 28962: a3 = a3 & 0xffffffffffffffe0\n 28965: u64 [sp + 0x8] = t1\n 28968: t1 = t1 + a3\n 28971: a4 = t1 <u a3\n 28974: a3 = a2 + t2\n 28977: a3 = a3 + a4\n 28980: s1 = a3 ^ a2\n 28983: a0 = a3 <u a2\n 28986: a0 = a4 if s1 == 0\n 28989: a4 = u64 [t0 + 0x18]\n 28992: a5 = a2 <u a5\n 28995: s1 = u64 [a1 + 0x10]\n 28998: t0 = u64 [t0 + 0x10]\n 29001: a1 = u64 [a1 + 0x18]\n 29004: a5 = ra if ra == 0\n 29007: a5 = a5 + s1\n 29010: s1 = a5 <u s1\n 29013: a2 = a5 + t0\n 29016: a0 = a0 + a2\n 29019: a5 = a2 <u a5\n 29022: a2 = a0 <u a2\n 29025: a1 = a1 + a4\n 29028: a1 = a1 + s1\n 29031: a1 = a1 + a5\n 29034: a5 = a1 + a2\n 29037: a1 = a5 >u 0\n 29039: a2 = a0 >u 0\n 29041: a2 = a1 if a5 != 0\n 29044: a1 = a0 | a5\n 29047: s1 = a3 >u 0\n 29049: s1 = a2 if a1 != 0\n 29052: jump @1137 if s1 != 0\n      : @1134 (gas: 13)\n 29055: a1 = u64 [sp + 0x8]\n 29058: a1 = t1 <u a1\n 29061: a2 = a3 ^ t2\n 29064: s1 = a3 <u t2\n 29067: s1 = a1 if a2 == 0\n 29070: a1 = a0 <u t0\n 29073: a2 = a5 ^ a4\n 29076: a4 = a5 <u a4\n 29079: a4 = a1 if a2 == 0\n 29082: a1 = a0 ^ t0\n 29085: a1 = a1 | a2\n 29088: a4 = s1 if a1 == 0\n 29091: jump @1137 if a4 != 0\n      : @1135 (gas: 7)\n 29094: u64 [sp + 0x50] = t1\n 29097: u64 [sp + 0x58] = a3\n 29100: u64 [sp + 0x60] = a0\n 29103: a0 = 0x40\n 29106: a1 = sp + 0x50\n 29109: u64 [sp + 0x68] = a5\n 29112: ra = 1156, jump @9\n      : @1136 [@dyn 578] (gas: 6)\n 29118: sp = s0 + 0xffffffffffffff70\n 29122: ra = u64 [sp + 0x88]\n 29126: s0 = u64 [sp + 0x80]\n 29130: s1 = u64 [sp + 0x78]\n 29133: sp = sp + 0x90\n 29137: ret\n      : @1137 (gas: 8)\n 29139: u64 [sp + 64] = 0\n 29142: u64 [sp + 56] = 0\n 29145: u64 [sp + 48] = 0\n 29148: a0 = 0x4e487b7100000000\n 29158: a1 = sp + 0x30\n 29161: u64 [sp + 0x48] = a0\n 29164: a0 = 0\n 29166: ra = 1158, jump @9\n      : @1138 [@dyn 579] (gas: 7)\n 29172: u64 [sp + 40] = 0\n 29175: u64 [sp + 32] = 0\n 29178: u64 [sp + 16] = 0x41\n 29182: a0 = 0x4\n 29185: a1 = sp + 0x10\n 29188: u64 [sp + 24] = 0\n 29191: ra = 1160, jump @9\n      : @1139 [@dyn 580] (gas: 2)\n 29197: a1 = i32 [0x20150]\n 29202: jump @1141 if a1 >u 63\n      : @1140 (gas: 2)\n 29206: u32 [0x20150] = 0x40\n 29212: fallthrough\n      : @1141 (gas: 7)\n 29213: a1 = 0x20160\n 29218: i32 a1 = a1 + 0\n 29220: a0 = 0x1\n 29223: a2 = 0x24\n 29226: ra = 0x48a\n 29230: ecalli 14 // 'seal_return'\n 29232: fallthrough\n      : @1142 [@dyn 581] (gas: 74)\n 29233: sp = sp + 0xfffffffffffffea0\n 29237: u64 [sp + 0x158] = ra\n 29241: u64 [sp + 0x150] = s0\n 29245: u64 [sp + 0x148] = s1\n 29249: s0 = sp + 0x160\n 29253: sp = sp & 0xffffffffffffffe0\n 29256: a2 = u64 [a1]\n 29258: u64 [sp + 0x38] = a2\n 29261: a2 = u64 [a1 + 0x8]\n 29264: u64 [sp + 0x30] = a2\n 29267: a2 = u64 [a1 + 0x10]\n 29270: u64 [sp + 0x28] = a2\n 29273: a1 = u64 [a1 + 0x18]\n 29276: u64 [sp + 0x20] = a1\n 29279: a1 = u64 [a0]\n 29281: u64 [sp + 0x18] = a1\n 29284: a1 = u64 [a0 + 0x10]\n 29287: u64 [sp + 0x10] = a1\n 29290: s1 = u64 [a0 + 0x8]\n 29293: ecalli 11 // 'ref_time_left'\n 29295: a1 = reverse s1\n 29297: a2 = a1 << 0x20\n 29300: a3 = u64 [sp + 0x10]\n 29303: a3 = reverse a3\n 29305: a3 = a3 >> 0x20\n 29308: a2 = a2 | a3\n 29311: a1 = a1 >> 0x20\n 29314: a3 = u64 [sp + 0x18]\n 29317: a3 = reverse a3\n 29319: a4 = 0x30160\n 29324: a5 = a3 << 0x20\n 29327: a1 = a1 | a5\n 29330: a3 = a3 >> 0x20\n 29333: u32 [0x30170] = a3\n 29338: u64 [0x30168] = a1\n 29343: u64 [0x30160] = a2\n 29348: a1 = u64 [sp + 0x20]\n 29351: u64 [sp + 0xf8] = a1\n 29355: a1 = u64 [sp + 0x28]\n 29358: u64 [sp + 0xf0] = a1\n 29362: a1 = u64 [sp + 0x30]\n 29365: u64 [sp + 0xe8] = a1\n 29369: a1 = u64 [sp + 0x38]\n 29372: u64 [sp + 0xe0] = a1\n 29376: u32 [sp + 256] = 0\n 29380: a0 = a0 >u 0x8fc\n 29384: a1 = -a0\n 29386: u64 [sp + 0x138] = a1\n 29390: u64 [sp + 0x130] = a1\n 29394: u64 [sp + 0x128] = a1\n 29398: u64 [sp + 0x120] = a1\n 29402: a4 = a4 << 0x20\n 29405: a4 = a4 >> 0x20\n 29408: a0 = a0 << 0x23\n 29411: a0 = a0 | a4\n 29414: a1 = sp + 0xe0\n 29418: a1 = a1 << 0x20\n 29421: a1 = a1 >> 0x20\n 29424: a4 = 0x20160\n 29429: a2 = sp + 0x120\n 29433: a2 = a2 << 0x20\n 29436: a3 = a2 | a1\n 29439: u64 [sp + 0x8] = a4\n 29442: a4 = a4 << 0x20\n 29445: a4 = a4 >> 0x20\n 29448: a1 = sp + 0x100\n 29452: a1 = a1 << 0x20\n 29455: a5 = a1 | a4\n 29458: a1 = 0xffffffffffffffff\n 29461: a2 = 0xffffffffffffffff\n 29464: ecalli 0 // 'call'\n 29465: s1 = a0\n 29467: ecalli 13 // 'return_data_size'\n 29469: fallthrough\n      : @1143 (gas: 1)\n 29470: jump @1154 if a0 == 0\n      : @1144 (gas: 6)\n 29474: u64 [sp + 0x10] = s1\n 29477: ecalli 13 // 'return_data_size'\n 29479: s1 = a0\n 29481: a0 = sp + 0xc0\n 29485: a1 = 0x40\n 29488: ra = 1164, jump @7\n      : @1145 [@dyn 582] (gas: 28)\n 29494: t0 = u64 [sp + 0xd8]\n 29498: a5 = u64 [sp + 0xd0]\n 29502: u64 [sp + 0x30] = a5\n 29505: t1 = u64 [sp + 0xc8]\n 29509: u64 [sp + 0x38] = t1\n 29512: t2 = u64 [sp + 0xc0]\n 29516: u64 [sp + 0x28] = t2\n 29519: a0 = s1 + 0x1f\n 29522: u64 [sp + 0x18] = s1\n 29525: a1 = a0 <u s1\n 29528: a0 = a0 & 0xffffffffffffffe0\n 29531: a2 = a0 + 0x20\n 29534: a0 = a2 <u a0\n 29537: a3 = a1 + a0\n 29540: a4 = a3 <u a1\n 29543: a4 = a0 if a0 == 0\n 29546: u64 [sp + 152] = 0\n 29550: u64 [sp + 0x80] = a2\n 29554: s1 = t0\n 29556: u64 [sp + 0xb8] = t0\n 29560: u64 [sp + 0xb0] = a5\n 29564: u64 [sp + 0xa8] = t1\n 29568: u64 [sp + 0xa0] = t2\n 29572: u64 [sp + 0x88] = a3\n 29576: a0 = sp + 0xa0\n 29580: a1 = sp + 0x80\n 29584: u64 [sp + 0x90] = a4\n 29588: ra = 1166, jump @1133\n      : @1146 [@dyn 583] (gas: 12)\n 29594: a0 = u64 [sp + 0x28]\n 29597: u64 [sp + 0x20] = s1\n 29600: a2 = u64 [sp + 0x38]\n 29603: a2 = a2 | s1\n 29606: a3 = u64 [sp + 0x30]\n 29609: a1 = a0 | a3\n 29612: a1 = a1 | a2\n 29615: a1 = a1 >> 0x20\n 29618: a2 = a2 | a3\n 29621: a2 = a2 << 0x20\n 29624: a1 = a1 | a2\n 29627: jump @1156 if a1 != 0\n      : @1147 (gas: 8)\n 29631: u64 [sp + 120] = 0\n 29634: u64 [sp + 112] = 0\n 29637: u64 [sp + 104] = 0\n 29640: a1 = sp + 0x60\n 29643: a2 = u64 [sp + 0x18]\n 29646: u64 [sp + 0x60] = a2\n 29649: s1 = a0\n 29651: ra = 1168, jump @9\n      : @1148 [@dyn 584] (gas: 2)\n 29657: ecalli 13 // 'return_data_size'\n 29659: fallthrough\n      : @1149 (gas: 9)\n 29660: a1 = u64 [sp + 0x20]\n 29663: a2 = u64 [sp + 0x30]\n 29666: a1 = a1 | a2\n 29669: a2 = 0xffffffe0\n 29679: a2 = s1 <u a2\n 29682: a4 = u64 [sp + 0x38]\n 29685: a2 = 0 if a4 != 0\n 29687: a2 = 0 if a1 != 0\n 29689: jump @1156 if a2 == 0\n      : @1150 (gas: 4)\n 29692: a3 = s1\n 29694: s1 = a0\n 29696: a0 = a0 >> 0x20\n 29699: jump @1156 if a0 != 0\n      : @1151 (gas: 5)\n 29702: i32 a0 = a3 + 0x20\n 29705: i32 a1 = s1 + 0\n 29707: u64 [sp + 0x38] = a1\n 29710: a1 = s1\n 29712: ra = 1170, jump @20\n      : @1152 [@dyn 585] (gas: 6)\n 29718: u32 [sp + 0x140] = s1\n 29722: i32 a0 = a0 + 0\n 29724: i32 a1 = sp + 0x140\n 29728: a2 = 0\n 29730: ecalli 12 // 'return_data_copy'\n 29732: fallthrough\n      : @1153 (gas: 4)\n 29733: a0 = i32 [sp + 0x140]\n 29737: s1 = u64 [sp + 0x10]\n 29740: a1 = u64 [sp + 0x38]\n 29743: jump @1156 if a0 <u a1\n      : @1154 (gas: 1)\n 29746: jump @1157 if s1 != 0\n      : @1155 (gas: 6)\n 29749: sp = s0 + 0xfffffffffffffea0\n 29753: ra = u64 [sp + 0x158]\n 29757: s0 = u64 [sp + 0x150]\n 29761: s1 = u64 [sp + 0x148]\n 29765: sp = sp + 0x160\n 29769: ret\n      : @1156 (gas: 1)\n 29771: trap\n      : @1157 (gas: 8)\n 29772: u64 [sp + 80] = 0\n 29775: u64 [sp + 72] = 0\n 29778: u64 [sp + 64] = 0\n 29781: a0 = 0x90b8ec1800000000\n 29791: a1 = sp + 0x40\n 29794: u64 [sp + 0x58] = a0\n 29797: a0 = 0\n 29799: ra = 1172, jump @9\n      : @1158 [@dyn 586] (gas: 2)\n 29805: a1 = i32 [0x20150]\n 29810: jump @1160 if a1 >u 31\n      : @1159 (gas: 2)\n 29814: u32 [0x20150] = 0x20\n 29820: fallthrough\n      : @1160 (gas: 6)\n 29821: a1 = i32 [sp + 0x8]\n 29824: a0 = 0x1\n 29827: a2 = 0x4\n 29830: ra = 0x496\n 29834: ecalli 14 // 'seal_return'\n 29836: fallthrough\n      : @1161 [@dyn 587] (gas: 31)\n 29837: sp = sp + 0xfffffffffffff808\n 29841: a3 = sp + 0x700\n 29845: u64 [a3 + 0xf0] = ra\n 29849: u64 [a3 + 0xe8] = s0\n 29853: u64 [a3 + 0xe0] = s1\n 29857: s0 = sp + 0x7f8\n 29861: sp = sp + 0xfffffffffffffdf8\n 29865: sp = sp & 0xffffffffffffffe0\n 29868: s1 = sp\n 29870: a2 = u64 [a2]\n 29872: u64 [s1 + 0x90] = a2\n 29876: a1 = u64 [a1]\n 29878: u64 [s1 + 0x68] = a1\n 29881: a2 = u64 [a0]\n 29883: a1 = u64 [a0 + 0x8]\n 29886: a0 = u32 [a0 + 0x10]\n 29889: a3 = s1 + 0x1000\n 29893: u64 [a3 + 4294965272] = 0\n 29897: u64 [s1 + 0x98] = a0\n 29901: a3 = s1 + 0x1000\n 29905: u64 [a3 + 0xfffffffffffff810] = a0\n 29909: u64 [s1 + 0xa0] = a1\n 29913: a0 = s1 + 0x1000\n 29917: u64 [a0 + 0xfffffffffffff808] = a1\n 29921: a1 = s1 + 0x7ff\n 29925: a1 = a1 + 0x1\n 29928: u64 [s1 + 0xa8] = a2\n 29932: a0 = s1 + 0x1000\n 29936: u64 [a0 + 0xfffffffffffff800] = a2\n 29940: a0 = 0\n 29942: ra = 1176, jump @9\n      : @1162 [@dyn 588] (gas: 7)\n 29948: u64 [s1 + 2040] = 0\n 29952: u64 [s1 + 2032] = 0\n 29956: u64 [s1 + 2016] = 0x3\n 29961: a0 = 0x20\n 29964: a1 = s1 + 0x7e0\n 29968: u64 [s1 + 2024] = 0\n 29972: ra = 1178, jump @9\n      : @1163 [@dyn 589] (gas: 3)\n 29978: a1 = 0x20150\n 29983: a0 = i32 [0x20150]\n 29988: jump @1165 if a0 >u 63\n      : @1164 (gas: 2)\n 29992: u32 [0x20150] = 0x40\n 29998: fallthrough\n      : @1165 (gas: 16)\n 29999: a0 = sp + 0xffffffffffffffe0\n 30002: a2 = a0 & 0xffffffffffffffe0\n 30005: u64 [s1 + 0x88] = a2\n 30009: sp = a2\n 30011: a0 = 0x20160\n 30016: u64 [s1 + 0x30] = a0\n 30019: i32 a0 = a0 + 0\n 30021: i32 a2 = a2 + 0\n 30023: u64 [s1 + 0xb0] = a1\n 30027: a1 = 0x40\n 30030: u64 [s1 + 0xb8] = a0\n 30034: ra = 0x49c\n 30038: ecalli 9 // 'hash_keccak_256'\n 30040: a3 = u64 [s1 + 0x88]\n 30044: t0 = 0x49e\n 30048: jump @1362\n      : @1166 [@dyn 590] (gas: 2)\n 30051: a3 = u64 [s1 + 0x88]\n 30055: t0 = 1182, jump @1362\n      : @1167 [@dyn 591] (gas: 18)\n 30061: u64 [s1 + 0x88] = a0\n 30065: a0 = reverse a1\n 30067: u64 [s1 + 0x80] = a0\n 30071: a0 = reverse a2\n 30073: u64 [s1 + 0x78] = a0\n 30076: a0 = reverse a3\n 30078: u64 [s1 + 0x60] = a0\n 30081: a0 = u64 [s1 + 0x90]\n 30085: a0 = a0 << 0x20\n 30088: a0 = a0 >> 0x20\n 30091: u64 [s1 + 2008] = 0\n 30095: u64 [s1 + 2000] = 0\n 30099: u64 [s1 + 1992] = 0\n 30103: a1 = s1 + 0x7c0\n 30107: u64 [s1 + 0x70] = a0\n 30110: u64 [s1 + 0x7c0] = a0\n 30114: a0 = 0\n 30116: ra = 1184, jump @9\n      : @1168 [@dyn 592] (gas: 12)\n 30122: a0 = u64 [s1 + 0x60]\n 30125: a3 = s1 + 0x700\n 30129: u64 [a3 + 0xb8] = a0\n 30133: a0 = u64 [s1 + 0x78]\n 30136: u64 [a3 + 0xb0] = a0\n 30140: a0 = u64 [s1 + 0x80]\n 30144: u64 [a3 + 0xa8] = a0\n 30148: a0 = 0x20\n 30151: a1 = s1 + 0x7a0\n 30155: a2 = u64 [s1 + 0x88]\n 30159: u64 [a3 + 0xa0] = a2\n 30163: ra = 1186, jump @9\n      : @1169 [@dyn 593] (gas: 3)\n 30169: a1 = u64 [s1 + 0xb0]\n 30173: a0 = i32 [a1]\n 30175: jump @1171 if a0 >u 63\n      : @1170 (gas: 2)\n 30179: u32 [a1 + 0] = 0x40\n 30182: fallthrough\n      : @1171 (gas: 4)\n 30183: a0 = sp + 0xffffffffffffffe0\n 30186: a0 = a0 & 0xffffffffffffffe0\n 30189: u64 [s1 + 0x90] = a0\n 30193: t0 = 1188, jump @1336\n      : @1172 [@dyn 594] (gas: 30)\n 30199: ecalli 9 // 'hash_keccak_256'\n 30201: a3 = u64 [s1 + 0x90]\n 30205: a0 = u64 [a3]\n 30207: a1 = u64 [a3 + 0x8]\n 30210: a2 = u64 [a3 + 0x10]\n 30213: a3 = u64 [a3 + 0x18]\n 30216: a0 = reverse a0\n 30218: a1 = reverse a1\n 30220: a2 = reverse a2\n 30222: a3 = reverse a3\n 30224: a3 = a3 + 0x1\n 30227: a4 = a3 <u 0x1\n 30230: a2 = a2 + a4\n 30233: a4 = a3 | a2\n 30236: a4 = a4 <u 0x1\n 30239: a4 = a4 + a1\n 30242: a1 = a4 <u a1\n 30245: a0 = a0 + a1\n 30248: a1 = s1 + 0x1000\n 30252: u64 [a1 + 0xfffffffffffff820] = a3\n 30256: a1 = s1 + 0x1000\n 30260: u64 [a1 + 0xfffffffffffff828] = a2\n 30264: a1 = s1 + 0x7ff\n 30268: a1 = a1 + 0x31\n 30271: u64 [a1] = a4\n 30273: u64 [a1 + 0x8] = a0\n 30276: a0 = s1 + 0x780\n 30280: a1 = s1 + 0x7ff\n 30284: a1 = a1 + 0x21\n 30287: ra = 1190, jump @11\n      : @1173 [@dyn 595] (gas: 2)\n 30293: a0 = u64 [s1 + 0x780]\n 30297: jump @1307 if a0 == 0\n      : @1174 (gas: 7)\n 30301: a1 = u64 [s1 + 0x70]\n 30304: a0 = a1 <u 0x100\n 30308: u64 [s1 + 0x60] = a0\n 30311: i32 a2 = a1 + 0xffffffffffffff80\n 30314: a0 = 0x1\n 30317: a1 = 0\n 30319: ra = 1192, jump @1381\n      : @1175 [@dyn 596] (gas: 7)\n 30325: u64 [s1 + 0x88] = a0\n 30329: u64 [s1 + 0x90] = a1\n 30333: a1 = u64 [s1 + 0x70]\n 30336: i32 a2 = 0x80 - a1\n 30340: a0 = 0x1\n 30343: a1 = 0\n 30345: ra = 1194, jump @1376\n      : @1176 [@dyn 597] (gas: 15)\n 30351: a2 = u64 [s1 + 0x70]\n 30354: a3 = a2 <u 0x80\n 30358: u64 [s1 + 0x80] = a3\n 30362: a4 = u64 [s1 + 0x88]\n 30366: a0 = a4 if a3 == 0\n 30369: a0 = 0 if a2 == 0\n 30371: u64 [s1 + 0x88] = a0\n 30375: a0 = u64 [s1 + 0x90]\n 30379: a1 = a0 if a3 == 0\n 30382: a1 = 0 if a2 == 0\n 30384: u64 [s1 + 0x90] = a1\n 30388: i32 a2 = a2 + 0\n 30390: a0 = 0x1\n 30393: a1 = 0\n 30395: ra = 1196, jump @1381\n      : @1177 [@dyn 598] (gas: 15)\n 30401: a2 = u64 [s1 + 0x80]\n 30405: a0 = 0 if a2 == 0\n 30407: u64 [s1 + 0x78] = a0\n 30410: a1 = 0 if a2 == 0\n 30412: u64 [s1 + 0x80] = a1\n 30416: u64 [s1 + 1912] = 0\n 30420: a0 = u64 [s1 + 0xa8]\n 30424: u64 [s1 + 0x760] = a0\n 30428: a0 = u64 [s1 + 0xa0]\n 30432: u64 [s1 + 0x768] = a0\n 30436: a1 = s1 + 0x760\n 30440: a0 = u64 [s1 + 0x98]\n 30444: u64 [s1 + 0x770] = a0\n 30448: a0 = 0\n 30450: ra = 1198, jump @9\n      : @1178 [@dyn 599] (gas: 7)\n 30456: u64 [s1 + 1880] = 0\n 30460: u64 [s1 + 1872] = 0\n 30464: u64 [s1 + 1856] = 0x5\n 30469: a0 = 0x20\n 30472: a1 = s1 + 0x740\n 30476: u64 [s1 + 1864] = 0\n 30480: ra = 1200, jump @9\n      : @1179 [@dyn 600] (gas: 3)\n 30486: a1 = u64 [s1 + 0xb0]\n 30490: a0 = i32 [a1]\n 30492: jump @1181 if a0 >u 63\n      : @1180 (gas: 2)\n 30496: u32 [a1 + 0] = 0x40\n 30499: fallthrough\n      : @1181 (gas: 17)\n 30500: a0 = u64 [s1 + 0x80]\n 30504: a1 = u64 [s1 + 0x60]\n 30507: a0 = 0 if a1 == 0\n 30509: u64 [s1 + 0x80] = a0\n 30513: a0 = u64 [s1 + 0x78]\n 30516: a0 = 0 if a1 == 0\n 30518: u64 [s1 + 0x78] = a0\n 30521: a0 = u64 [s1 + 0x90]\n 30525: a0 = 0 if a1 == 0\n 30527: u64 [s1 + 0x90] = a0\n 30531: a0 = u64 [s1 + 0x88]\n 30535: a0 = 0 if a1 == 0\n 30537: u64 [s1 + 0x88] = a0\n 30541: a0 = sp + 0xffffffffffffffe0\n 30544: a0 = a0 & 0xffffffffffffffe0\n 30547: u64 [s1 + 0x60] = a0\n 30550: t0 = 1202, jump @1336\n      : @1182 [@dyn 601] (gas: 4)\n 30556: ra = 0x4b4\n 30560: ecalli 9 // 'hash_keccak_256'\n 30562: t0 = 0x4b6\n 30566: jump @1326\n      : @1183 [@dyn 602] (gas: 1)\n 30569: t0 = 1206, jump @1326\n      : @1184 [@dyn 603] (gas: 10)\n 30575: a0 = u64 [s1 + 0x68]\n 30578: a0 = a0 & 0xffffffffffffffff\n 30581: u64 [s1 + 1848] = 0\n 30585: u64 [s1 + 1840] = 0\n 30589: u64 [s1 + 1832] = 0\n 30593: a1 = s1 + 0x720\n 30597: u64 [s1 + 0x68] = a0\n 30600: u64 [s1 + 0x720] = a0\n 30604: a0 = 0\n 30606: ra = 1208, jump @9\n      : @1185 [@dyn 604] (gas: 12)\n 30612: a0 = u64 [s1 + 0x40]\n 30615: a3 = s1 + 0x700\n 30619: u64 [a3 + 0x18] = a0\n 30622: a0 = u64 [s1 + 0x48]\n 30625: u64 [a3 + 0x10] = a0\n 30628: a0 = u64 [s1 + 0x50]\n 30631: u64 [a3 + 0x8] = a0\n 30634: a0 = 0x20\n 30637: a1 = s1 + 0x700\n 30641: a2 = u64 [s1 + 0x58]\n 30644: u64 [a3] = a2\n 30646: ra = 1210, jump @9\n      : @1186 [@dyn 605] (gas: 3)\n 30652: a1 = u64 [s1 + 0xb0]\n 30656: a0 = i32 [a1]\n 30658: jump @1188 if a0 >u 63\n      : @1187 (gas: 2)\n 30662: u32 [a1 + 0] = 0x40\n 30665: fallthrough\n      : @1188 (gas: 4)\n 30666: a0 = sp + 0xffffffffffffffe0\n 30669: a0 = a0 & 0xffffffffffffffe0\n 30672: u64 [s1 + 0x58] = a0\n 30675: t0 = 1212, jump @1336\n      : @1189 [@dyn 606] (gas: 4)\n 30681: ra = 0x4be\n 30685: ecalli 9 // 'hash_keccak_256'\n 30687: t0 = 0x4c0\n 30691: jump @1327\n      : @1190 [@dyn 607] (gas: 1)\n 30694: t0 = 1216, jump @1327\n      : @1191 [@dyn 608] (gas: 2)\n 30700: a0 = s1 + 0x6e0\n 30704: ra = 1218, jump @11\n      : @1192 [@dyn 609] (gas: 6)\n 30710: a4 = s1 + 0x600\n 30714: a0 = u64 [a4 + 0xf0]\n 30718: a1 = u64 [a4 + 0xe0]\n 30722: a2 = u64 [a4 + 0xf8]\n 30726: a3 = u64 [a4 + 0xe8]\n 30730: t0 = 1220, jump @1341\n      : @1193 [@dyn 610] (gas: 1)\n 30736: jump @1308 if a0 == 0\n      : @1194 (gas: 10)\n 30740: u64 [s1 + 1752] = 0\n 30744: a0 = u64 [s1 + 0xa8]\n 30748: u64 [s1 + 0x6c0] = a0\n 30752: a0 = u64 [s1 + 0xa0]\n 30756: u64 [s1 + 0x6c8] = a0\n 30760: a1 = s1 + 0x6c0\n 30764: a0 = u64 [s1 + 0x98]\n 30768: u64 [s1 + 0x6d0] = a0\n 30772: a0 = 0\n 30774: ra = 1222, jump @9\n      : @1195 [@dyn 611] (gas: 7)\n 30780: u64 [s1 + 1720] = 0\n 30784: u64 [s1 + 1712] = 0\n 30788: u64 [s1 + 1696] = 0x7\n 30793: a0 = 0x20\n 30796: a1 = s1 + 0x6a0\n 30800: u64 [s1 + 1704] = 0\n 30804: ra = 1224, jump @9\n      : @1196 [@dyn 612] (gas: 3)\n 30810: a1 = u64 [s1 + 0xb0]\n 30814: a0 = i32 [a1]\n 30816: jump @1198 if a0 >u 63\n      : @1197 (gas: 2)\n 30820: u32 [a1 + 0] = 0x40\n 30823: fallthrough\n      : @1198 (gas: 4)\n 30824: a0 = sp + 0xffffffffffffffe0\n 30827: a0 = a0 & 0xffffffffffffffe0\n 30830: u64 [s1 + 0x60] = a0\n 30833: t0 = 1226, jump @1336\n      : @1199 [@dyn 613] (gas: 4)\n 30839: ra = 0x4cc\n 30843: ecalli 9 // 'hash_keccak_256'\n 30845: t0 = 0x4ce\n 30849: jump @1326\n      : @1200 [@dyn 614] (gas: 1)\n 30852: t0 = 1230, jump @1326\n      : @1201 [@dyn 615] (gas: 8)\n 30858: u64 [s1 + 1688] = 0\n 30862: u64 [s1 + 1680] = 0\n 30866: u64 [s1 + 1672] = 0\n 30870: a1 = s1 + 0x680\n 30874: a0 = u64 [s1 + 0x68]\n 30877: u64 [s1 + 0x680] = a0\n 30881: a0 = 0\n 30883: ra = 1232, jump @9\n      : @1202 [@dyn 616] (gas: 12)\n 30889: a0 = u64 [s1 + 0x40]\n 30892: a3 = s1 + 0x600\n 30896: u64 [a3 + 0x78] = a0\n 30899: a0 = u64 [s1 + 0x48]\n 30902: u64 [a3 + 0x70] = a0\n 30905: a0 = u64 [s1 + 0x50]\n 30908: u64 [a3 + 0x68] = a0\n 30911: a0 = 0x20\n 30914: a1 = s1 + 0x660\n 30918: a2 = u64 [s1 + 0x58]\n 30921: u64 [a3 + 0x60] = a2\n 30924: ra = 1234, jump @9\n      : @1203 [@dyn 617] (gas: 3)\n 30930: a1 = u64 [s1 + 0xb0]\n 30934: a0 = i32 [a1]\n 30936: jump @1205 if a0 >u 63\n      : @1204 (gas: 2)\n 30940: u32 [a1 + 0] = 0x40\n 30943: fallthrough\n      : @1205 (gas: 4)\n 30944: a0 = sp + 0xffffffffffffffe0\n 30947: a0 = a0 & 0xffffffffffffffe0\n 30950: u64 [s1 + 0x58] = a0\n 30953: t0 = 1236, jump @1336\n      : @1206 [@dyn 618] (gas: 4)\n 30959: ra = 0x4d6\n 30963: ecalli 9 // 'hash_keccak_256'\n 30965: t0 = 0x4d8\n 30969: jump @1327\n      : @1207 [@dyn 619] (gas: 1)\n 30972: t0 = 1240, jump @1327\n      : @1208 [@dyn 620] (gas: 2)\n 30978: a0 = s1 + 0x640\n 30982: ra = 1242, jump @11\n      : @1209 [@dyn 621] (gas: 6)\n 30988: a4 = s1 + 0x600\n 30992: a0 = u64 [a4 + 0x50]\n 30995: a1 = u64 [a4 + 0x40]\n 30998: a2 = u64 [a4 + 0x58]\n 31001: a3 = u64 [a4 + 0x48]\n 31004: t0 = 1244, jump @1341\n      : @1210 [@dyn 622] (gas: 1)\n 31010: jump @1309 if a0 != 0\n      : @1211 (gas: 11)\n 31014: u64 [s1 + 1560] = 0\n 31018: a0 = u64 [s1 + 0xa8]\n 31022: a2 = s1 + 0x600\n 31026: u64 [a2] = a0\n 31028: a0 = u64 [s1 + 0xa0]\n 31032: u64 [a2 + 0x8] = a0\n 31035: a1 = s1 + 0x600\n 31039: a0 = u64 [s1 + 0x98]\n 31043: u64 [a2 + 0x10] = a0\n 31046: a0 = 0\n 31048: ra = 1246, jump @9\n      : @1212 [@dyn 623] (gas: 7)\n 31054: u64 [s1 + 1528] = 0\n 31058: u64 [s1 + 1520] = 0\n 31062: u64 [s1 + 1504] = 0x7\n 31067: a0 = 0x20\n 31070: a1 = s1 + 0x5e0\n 31074: u64 [s1 + 1512] = 0\n 31078: ra = 1248, jump @9\n      : @1213 [@dyn 624] (gas: 3)\n 31084: a1 = u64 [s1 + 0xb0]\n 31088: a0 = i32 [a1]\n 31090: jump @1215 if a0 >u 63\n      : @1214 (gas: 2)\n 31094: u32 [a1 + 0] = 0x40\n 31097: fallthrough\n      : @1215 (gas: 4)\n 31098: a0 = sp + 0xffffffffffffffe0\n 31101: a0 = a0 & 0xffffffffffffffe0\n 31104: u64 [s1 + 0x60] = a0\n 31107: t0 = 1250, jump @1336\n      : @1216 [@dyn 625] (gas: 4)\n 31113: ra = 0x4e4\n 31117: ecalli 9 // 'hash_keccak_256'\n 31119: t0 = 0x4e6\n 31123: jump @1326\n      : @1217 [@dyn 626] (gas: 1)\n 31126: t0 = 1254, jump @1326\n      : @1218 [@dyn 627] (gas: 8)\n 31132: u64 [s1 + 1496] = 0\n 31136: u64 [s1 + 1488] = 0\n 31140: u64 [s1 + 1480] = 0\n 31144: a1 = s1 + 0x5c0\n 31148: a0 = u64 [s1 + 0x68]\n 31151: u64 [s1 + 0x5c0] = a0\n 31155: a0 = 0\n 31157: ra = 1256, jump @9\n      : @1219 [@dyn 628] (gas: 12)\n 31163: a0 = u64 [s1 + 0x40]\n 31166: a3 = s1 + 0x500\n 31170: u64 [a3 + 0xb8] = a0\n 31174: a0 = u64 [s1 + 0x48]\n 31177: u64 [a3 + 0xb0] = a0\n 31181: a0 = u64 [s1 + 0x50]\n 31184: u64 [a3 + 0xa8] = a0\n 31188: a0 = 0x20\n 31191: a1 = s1 + 0x5a0\n 31195: a2 = u64 [s1 + 0x58]\n 31198: u64 [a3 + 0xa0] = a2\n 31202: ra = 1258, jump @9\n      : @1220 [@dyn 629] (gas: 3)\n 31208: a1 = u64 [s1 + 0xb0]\n 31212: a0 = i32 [a1]\n 31214: jump @1222 if a0 >u 63\n      : @1221 (gas: 2)\n 31218: u32 [a1 + 0] = 0x40\n 31221: fallthrough\n      : @1222 (gas: 4)\n 31222: a0 = sp + 0xffffffffffffffe0\n 31225: a0 = a0 & 0xffffffffffffffe0\n 31228: u64 [s1 + 0x58] = a0\n 31231: t0 = 1260, jump @1336\n      : @1223 [@dyn 630] (gas: 4)\n 31237: ra = 0x4ee\n 31241: ecalli 9 // 'hash_keccak_256'\n 31243: t0 = 0x4f0\n 31247: jump @1327\n      : @1224 [@dyn 631] (gas: 1)\n 31250: t0 = 1264, jump @1327\n      : @1225 [@dyn 632] (gas: 2)\n 31256: a0 = s1 + 0x580\n 31260: ra = 1266, jump @11\n      : @1226 [@dyn 633] (gas: 22)\n 31266: a0 = u64 [s1 + 0x580]\n 31270: a1 = u64 [s1 + 0x588]\n 31274: a2 = u64 [s1 + 0x590]\n 31278: a3 = u64 [s1 + 0x598]\n 31282: a4 = u64 [s1 + 0x78]\n 31285: a0 = a0 | a4\n 31288: a4 = u64 [s1 + 0x80]\n 31292: a1 = a1 | a4\n 31295: a4 = u64 [s1 + 0x88]\n 31299: a2 = a2 | a4\n 31302: a4 = u64 [s1 + 0x90]\n 31306: a3 = a3 | a4\n 31309: a4 = s1 + 0x7ff\n 31313: a4 = a4 + 0x31\n 31316: u64 [a4 + 0x28] = a3\n 31319: u64 [a4 + 0x20] = a2\n 31322: u64 [a4 + 0x18] = a1\n 31325: u64 [a4 + 0x10] = a0\n 31328: a1 = s1 + 0x7ff\n 31332: a1 = a1 + 0x41\n 31335: a0 = u64 [s1 + 0x60]\n 31338: ra = 1268, jump @12\n      : @1227 [@dyn 634] (gas: 10)\n 31344: u64 [s1 + 1400] = 0\n 31348: a0 = u64 [s1 + 0x98]\n 31352: u64 [s1 + 0x570] = a0\n 31356: a0 = u64 [s1 + 0xa0]\n 31360: u64 [s1 + 0x568] = a0\n 31364: a1 = s1 + 0x560\n 31368: a0 = u64 [s1 + 0xa8]\n 31372: u64 [s1 + 0x560] = a0\n 31376: a0 = 0\n 31378: ra = 1270, jump @9\n      : @1228 [@dyn 635] (gas: 7)\n 31384: u64 [s1 + 1368] = 0\n 31388: u64 [s1 + 1360] = 0\n 31392: u64 [s1 + 1344] = 0x2\n 31397: a0 = 0x20\n 31400: a1 = s1 + 0x540\n 31404: u64 [s1 + 1352] = 0\n 31408: ra = 1272, jump @9\n      : @1229 [@dyn 636] (gas: 3)\n 31414: a1 = u64 [s1 + 0xb0]\n 31418: a0 = i32 [a1]\n 31420: jump @1231 if a0 >=u 64\n      : @1230 (gas: 2)\n 31424: u32 [a1 + 0] = 0x40\n 31427: fallthrough\n      : @1231 (gas: 4)\n 31428: a0 = sp + 0xffffffffffffffe0\n 31431: a0 = a0 & 0xffffffffffffffe0\n 31434: u64 [s1 + 0x60] = a0\n 31437: t0 = 1274, jump @1336\n      : @1232 [@dyn 637] (gas: 32)\n 31443: ecalli 9 // 'hash_keccak_256'\n 31445: a3 = u64 [s1 + 0x60]\n 31448: a0 = u64 [a3]\n 31450: a1 = u64 [a3 + 0x8]\n 31453: a2 = u64 [a3 + 0x10]\n 31456: a3 = u64 [a3 + 0x18]\n 31459: t0 = reverse a0\n 31461: a5 = reverse a1\n 31463: a2 = reverse a2\n 31465: a3 = reverse a3\n 31467: a0 = sp + 0xffffffffffffffe0\n 31470: a1 = a0 & 0xffffffffffffffe0\n 31473: sp = a1\n 31475: u64 [s1 + 0x10] = a3\n 31478: a0 = a3 + 0x1\n 31481: a3 = a0 <u 0x1\n 31484: u64 [s1 + 0x18] = a2\n 31487: a4 = a2 + a3\n 31490: a2 = a0 | a4\n 31493: a2 = a2 <u 0x1\n 31496: a2 = a2 + a5\n 31499: u64 [s1 + 0x20] = a5\n 31502: a3 = a2 <u a5\n 31505: u64 [s1 + 0x28] = t0\n 31508: a3 = a3 + t0\n 31511: u64 [a1 + 0x8] = a4\n 31514: u64 [a1] = a0\n 31516: u64 [a1 + 0x10] = a2\n 31519: u64 [a1 + 0x18] = a3\n 31522: a0 = s1 + 0x520\n 31526: u64 [s1 + 0x58] = a1\n 31529: ra = 1276, jump @11\n      : @1233 [@dyn 638] (gas: 12)\n 31535: t0 = u64 [s1 + 0x538]\n 31539: a4 = s1 + 0x500\n 31543: a1 = u64 [a4 + 0x30]\n 31546: a2 = u64 [a4 + 0x20]\n 31549: a0 = u64 [0x200f8]\n 31554: a3 = u64 [a4 + 0x28]\n 31557: a4 = a1 | t0\n 31560: u64 [s1 + 0x60] = a0\n 31563: a5 = a2 <u a0\n 31566: a5 = 0 if a3 != 0\n 31568: a5 = 0 if a4 != 0\n 31570: jump @1310 if a5 != 0\n      : @1234 (gas: 24)\n 31574: a4 = u64 [0x20100]\n 31579: a4 = a4 + a2\n 31582: a2 = a4 <u a2\n 31585: a5 = a3 + a2\n 31588: a5 = a5 + 0xffffffffffffffff\n 31591: a0 = a5 ^ a3\n 31594: a3 = a5 <u a3\n 31597: a3 = a2 if a0 == 0\n 31600: a0 = a1 + 0xffffffffffffffff\n 31603: a3 = a3 + a0\n 31606: a0 = a3 <u a0\n 31609: a1 = a1 <u 0x1\n 31612: a1 = t0 - a1\n 31615: a0 = a0 + a1\n 31618: a1 = s1 + 0x7ff\n 31622: a1 = a1 + 0x31\n 31625: u64 [a1 + 0x30] = a4\n 31628: u64 [a1 + 0x38] = a5\n 31631: u64 [a1 + 0x40] = a3\n 31634: u64 [a1 + 0x48] = a0\n 31637: a1 = s1 + 0x7ff\n 31641: a1 = a1 + 0x61\n 31644: a0 = u64 [s1 + 0x58]\n 31647: ra = 1278, jump @12\n      : @1235 [@dyn 639] (gas: 11)\n 31653: u64 [s1 + 1304] = 0\n 31657: a0 = u64 [s1 + 0x98]\n 31661: a2 = s1 + 0x500\n 31665: u64 [a2 + 0x10] = a0\n 31668: a0 = u64 [s1 + 0xa0]\n 31672: u64 [a2 + 0x8] = a0\n 31675: a1 = s1 + 0x500\n 31679: a0 = u64 [s1 + 0xa8]\n 31683: u64 [a2] = a0\n 31685: a0 = 0\n 31687: ra = 1280, jump @9\n      : @1236 [@dyn 640] (gas: 7)\n 31693: u64 [s1 + 1272] = 0\n 31697: u64 [s1 + 1264] = 0\n 31701: u64 [s1 + 1248] = 0x6\n 31706: a0 = 0x20\n 31709: a1 = s1 + 0x4e0\n 31713: u64 [s1 + 1256] = 0\n 31717: ra = 1282, jump @9\n      : @1237 [@dyn 641] (gas: 3)\n 31723: a1 = u64 [s1 + 0xb0]\n 31727: a0 = i32 [a1]\n 31729: jump @1239 if a0 >u 63\n      : @1238 (gas: 2)\n 31733: u32 [a1 + 0] = 0x40\n 31736: fallthrough\n      : @1239 (gas: 4)\n 31737: a0 = sp + 0xffffffffffffffe0\n 31740: a0 = a0 & 0xffffffffffffffe0\n 31743: u64 [s1 + 0x58] = a0\n 31746: t0 = 1284, jump @1336\n      : @1240 [@dyn 642] (gas: 5)\n 31752: ra = 0x506\n 31756: ecalli 9 // 'hash_keccak_256'\n 31758: a3 = u64 [s1 + 0x58]\n 31761: t0 = 0x508\n 31765: jump @1362\n      : @1241 [@dyn 643] (gas: 2)\n 31768: a3 = u64 [s1 + 0x58]\n 31771: t0 = 1288, jump @1362\n      : @1242 [@dyn 644] (gas: 19)\n 31777: u64 [s1 + 0x50] = a0\n 31780: a0 = reverse a1\n 31782: u64 [s1 + 0x48] = a0\n 31785: a0 = reverse a2\n 31787: u64 [s1 + 0x40] = a0\n 31790: a0 = reverse a3\n 31792: u64 [s1 + 0x38] = a0\n 31795: a0 = sp + 0xffffffffffffffe0\n 31798: a0 = a0 & 0xffffffffffffffe0\n 31801: u64 [s1 + 0x58] = a0\n 31804: sp = a0\n 31806: u64 [s1 + 1240] = 0\n 31810: u64 [s1 + 1232] = 0\n 31814: u64 [s1 + 1224] = 0\n 31818: a1 = s1 + 0x4c0\n 31822: a0 = u64 [s1 + 0x68]\n 31825: u64 [s1 + 0x4c0] = a0\n 31829: a0 = 0\n 31831: ra = 1290, jump @9\n      : @1243 [@dyn 645] (gas: 12)\n 31837: a0 = u64 [s1 + 0x38]\n 31840: a3 = s1 + 0x400\n 31844: u64 [a3 + 0xb8] = a0\n 31848: a0 = u64 [s1 + 0x40]\n 31851: u64 [a3 + 0xb0] = a0\n 31855: a0 = u64 [s1 + 0x48]\n 31858: u64 [a3 + 0xa8] = a0\n 31862: a0 = 0x20\n 31865: a1 = s1 + 0x4a0\n 31869: a2 = u64 [s1 + 0x50]\n 31872: u64 [a3 + 0xa0] = a2\n 31876: ra = 1292, jump @9\n      : @1244 [@dyn 646] (gas: 3)\n 31882: a1 = u64 [s1 + 0xb0]\n 31886: a0 = i32 [a1]\n 31888: jump @1246 if a0 >u 63\n      : @1245 (gas: 2)\n 31892: u32 [a1 + 0] = 0x40\n 31895: fallthrough\n      : @1246 (gas: 4)\n 31896: a0 = sp + 0xffffffffffffffe0\n 31899: a0 = a0 & 0xffffffffffffffe0\n 31902: u64 [s1 + 0x50] = a0\n 31905: t0 = 1294, jump @1336\n      : @1247 [@dyn 647] (gas: 5)\n 31911: ra = 0x510\n 31915: ecalli 9 // 'hash_keccak_256'\n 31917: a3 = u64 [s1 + 0x50]\n 31920: t0 = 0x512\n 31924: jump @1363\n      : @1248 [@dyn 648] (gas: 2)\n 31927: a3 = u64 [s1 + 0x50]\n 31930: t0 = 1298, jump @1363\n      : @1249 [@dyn 649] (gas: 7)\n 31936: a1 = u64 [s1 + 0x58]\n 31939: u64 [a1 + 0x18] = a3\n 31942: u64 [a1 + 0x10] = a2\n 31945: u64 [a1 + 0x8] = a4\n 31948: u64 [a1] = a0\n 31950: a0 = s1 + 0x480\n 31954: ra = 1300, jump @11\n      : @1250 [@dyn 650] (gas: 6)\n 31960: a4 = s1 + 0x400\n 31964: a0 = u64 [a4 + 0x90]\n 31968: a1 = u64 [a4 + 0x80]\n 31972: a2 = u64 [a4 + 0x98]\n 31976: a3 = u64 [a4 + 0x88]\n 31980: t0 = 1302, jump @1341\n      : @1251 [@dyn 651] (gas: 1)\n 31986: jump @1270 if a0 == 0\n      : @1252 (gas: 12)\n 31990: a0 = 0xffffffff\n 32000: u64 [s1 + 0xb0] = a0\n 32004: a0 = s1 + 0x7ff\n 32008: a0 = a0 + 0x31\n 32011: u64 [a0 + 232] = 0\n 32015: u64 [a0 + 224] = 0\n 32019: u64 [a0 + 216] = 0\n 32023: u64 [a0 + 208] = 0\n 32027: a0 = s1 + 0x460\n 32031: a1 = s1 + 0x7ff\n 32035: a1 = a1 + 0x101\n 32039: ra = 1304, jump @11\n      : @1253 [@dyn 652] (gas: 11)\n 32045: a3 = s1 + 0x400\n 32049: a0 = u64 [a3 + 0x68]\n 32052: a1 = u64 [a3 + 0x70]\n 32055: a2 = u64 [a3 + 0x60]\n 32058: a0 = a0 & 0xffffffffffffffff\n 32061: a4 = u64 [s1 + 0xb0]\n 32065: a1 = a1 & a4\n 32068: a2 = a2 & 0xffffffffffffffff\n 32071: a1 = a1 | a2\n 32074: a0 = a0 | a1\n 32077: jump @1289 if a0 == 0\n      : @1254 (gas: 10)\n 32081: a0 = s1 + 0x7ff\n 32085: a0 = a0 + 0x31\n 32088: u64 [a0 + 296] = 0\n 32092: u64 [a0 + 288] = 0\n 32096: u64 [a0 + 280] = 0\n 32100: u64 [a0 + 272] = 0\n 32104: a0 = s1 + 0x440\n 32108: a1 = s1 + 0x7ff\n 32112: a1 = a1 + 0x141\n 32116: ra = 1306, jump @11\n      : @1255 [@dyn 653] (gas: 25)\n 32122: a3 = s1 + 0x400\n 32126: a0 = u64 [a3 + 0x48]\n 32129: a1 = u64 [a3 + 0x50]\n 32132: a2 = u64 [a3 + 0x40]\n 32135: a0 = reverse a0\n 32137: a3 = a0 << 0x20\n 32140: a1 = reverse a1\n 32142: a1 = a1 >> 0x20\n 32145: a4 = a1 | a3\n 32148: a0 = a0 >> 0x20\n 32151: a1 = reverse a2\n 32153: a3 = 0x30160\n 32158: a2 = a1 << 0x20\n 32161: a0 = a0 | a2\n 32164: a1 = a1 >> 0x20\n 32167: u64 [s1 + 0x58] = a1\n 32170: u32 [0x30170] = a1\n 32175: u64 [s1 + 0x50] = a0\n 32178: u64 [0x30168] = a0\n 32183: u64 [s1 + 0x78] = a4\n 32186: u64 [0x30160] = a4\n 32191: u64 [s1 + 0x80] = a3\n 32195: i32 a0 = a3 + 0\n 32197: ecalli 5 // 'code_size'\n 32199: fallthrough\n      : @1256 (gas: 1)\n 32200: jump @1311 if a0 == 0\n      : @1257 (gas: 3)\n 32204: a0 = s1 + 0x420\n 32208: a1 = 0x40\n 32211: ra = 1308, jump @7\n      : @1258 [@dyn 654] (gas: 17)\n 32217: a4 = s1 + 0x400\n 32221: a2 = u64 [a4 + 0x38]\n 32224: a3 = u64 [a4 + 0x30]\n 32227: a0 = u64 [a4 + 0x28]\n 32230: a1 = u64 [a4 + 0x20]\n 32233: u64 [s1 + 0xb0] = a0\n 32237: u64 [s1 + 0x90] = a2\n 32241: a0 = a0 | a2\n 32244: u64 [s1 + 0xb8] = a1\n 32248: a1 = a1 | a3\n 32251: a1 = a1 | a0\n 32254: a1 = a1 >> 0x20\n 32257: u64 [s1 + 0x88] = a3\n 32261: a0 = a0 | a3\n 32264: a0 = a0 << 0x20\n 32267: a0 = a0 | a1\n 32270: jump @1306 if a0 != 0\n      : @1259 (gas: 8)\n 32274: u64 [s1 + 1040] = 0\n 32278: u64 [s1 + 1032] = 0\n 32282: u64 [s1 + 1024] = 0\n 32286: a0 = 0xadc9772e00000000\n 32296: a1 = s1 + 0x400\n 32300: u64 [s1 + 0x418] = a0\n 32304: a0 = u64 [s1 + 0xb8]\n 32308: ra = 1310, jump @9\n      : @1260 [@dyn 655] (gas: 13)\n 32314: a0 = u64 [s1 + 0x90]\n 32318: a2 = u64 [s1 + 0x88]\n 32322: a2 = a2 | a0\n 32325: a0 = 0x100000000\n 32335: u64 [s1 + 0x40] = a0\n 32338: a0 = 0xfffffffc\n 32348: a1 = u64 [s1 + 0xb8]\n 32352: a0 = a1 <u a0\n 32355: a1 = u64 [s1 + 0xb0]\n 32359: a0 = 0 if a1 != 0\n 32361: u64 [s1 + 0x48] = a2\n 32364: a0 = 0 if a2 != 0\n 32366: jump @1306 if a0 == 0\n      : @1261 (gas: 12)\n 32370: a0 = u64 [s1 + 0xb8]\n 32374: i32 a0 = a0 + 0x4\n 32377: u64 [s1 + 1016] = 0\n 32381: a1 = u64 [s1 + 0xa8]\n 32385: a3 = s1 + 0x300\n 32389: u64 [a3 + 0xe0] = a1\n 32393: a1 = u64 [s1 + 0xa0]\n 32397: u64 [a3 + 0xe8] = a1\n 32401: a1 = s1 + 0x3e0\n 32405: a2 = u64 [s1 + 0x98]\n 32409: u64 [a3 + 0xf0] = a2\n 32413: ra = 1312, jump @9\n      : @1262 [@dyn 656] (gas: 9)\n 32419: a0 = u64 [s1 + 0x40]\n 32422: a0 = a0 + 0xffffffffffffffdc\n 32425: a1 = u64 [s1 + 0xb8]\n 32429: a0 = a1 <u a0\n 32432: a1 = u64 [s1 + 0xb0]\n 32436: a0 = 0 if a1 != 0\n 32438: a1 = u64 [s1 + 0x48]\n 32441: a0 = 0 if a1 != 0\n 32443: jump @1306 if a0 == 0\n      : @1263 (gas: 9)\n 32447: a0 = u64 [s1 + 0xb8]\n 32451: i32 a0 = a0 + 0x24\n 32454: u64 [s1 + 984] = 0\n 32458: u64 [s1 + 976] = 0\n 32462: u64 [s1 + 968] = 0\n 32466: a1 = s1 + 0x3c0\n 32470: a2 = u64 [s1 + 0x60]\n 32473: u64 [s1 + 0x3c0] = a2\n 32477: ra = 1314, jump @9\n      : @1264 [@dyn 657] (gas: 18)\n 32483: ecalli 11 // 'ref_time_left'\n 32485: a1 = u64 [s1 + 0x80]\n 32489: a0 = u64 [s1 + 0x50]\n 32492: u64 [a1 + 0x8] = a0\n 32495: a0 = u64 [s1 + 0x78]\n 32498: u64 [a1] = a0\n 32500: a0 = u64 [s1 + 0x58]\n 32503: u32 [a1 + 0x10] = a0\n 32506: a0 = s1 + 0x7ff\n 32510: a0 = a0 + 0x31\n 32513: u64 [a0 + 328] = 0\n 32517: u64 [a0 + 320] = 0\n 32521: u64 [a0 + 312] = 0\n 32525: a1 = u64 [s1 + 0x60]\n 32528: u64 [a0 + 0x130] = a1\n 32532: a1 = 0x44\n 32535: a0 = u64 [s1 + 0xb8]\n 32539: ra = 1316, jump @20\n      : @1265 [@dyn 658] (gas: 4)\n 32545: u64 [s1 + 0x78] = a0\n 32548: a0 = u64 [s1 + 0xb8]\n 32552: a1 = 0\n 32554: ra = 1318, jump @20\n      : @1266 [@dyn 659] (gas: 37)\n 32560: a2 = s1 + 0x7ff\n 32564: a2 = a2 + 0x31\n 32567: u32 [a2 + 336] = 0\n 32571: a3 = a2 + 0x100\n 32575: u64 [a3 + 136] = 0xffffffffffffffff\n 32580: u64 [a3 + 128] = 0xffffffffffffffff\n 32585: u64 [a3 + 120] = 0xffffffffffffffff\n 32589: u64 [a3 + 112] = 0xffffffffffffffff\n 32593: a1 = u64 [s1 + 0x80]\n 32597: a1 = a1 << 0x20\n 32600: a1 = a1 >> 0x20\n 32603: a2 = 0x800000000\n 32613: t0 = a1 | a2\n 32616: a1 = s1 + 0x7ff\n 32620: a1 = a1 + 0x161\n 32624: a1 = a1 << 0x20\n 32627: a1 = a1 >> 0x20\n 32630: a2 = s1 + 0x7ff\n 32634: a2 = a2 + 0x1a1\n 32638: a2 = a2 << 0x20\n 32641: a3 = a2 | a1\n 32644: a1 = u64 [s1 + 0x78]\n 32647: a1 = a1 << 0x20\n 32650: a1 = a1 >> 0x20\n 32653: a2 = 0x4400000000\n 32663: a4 = a1 | a2\n 32666: a0 = a0 << 0x20\n 32669: a0 = a0 >> 0x20\n 32672: a1 = s1 + 0x7ff\n 32676: a1 = a1 + 0x181\n 32680: a1 = a1 << 0x20\n 32683: a5 = a1 | a0\n 32686: a1 = 0xffffffffffffffff\n 32689: a2 = 0xffffffffffffffff\n 32692: a0 = t0\n 32694: ecalli 0 // 'call'\n 32695: fallthrough\n      : @1267 (gas: 1)\n 32696: jump @1297 if a0 != 0\n      : @1268 (gas: 16)\n 32700: u64 [s1 + 888] = 0\n 32704: u64 [s1 + 880] = 0\n 32708: u64 [s1 + 872] = 0\n 32712: u64 [s1 + 864] = 0\n 32716: a0 = u64 [s1 + 0xb8]\n 32720: a3 = s1 + 0x300\n 32724: u64 [a3 + 0x80] = a0\n 32728: a0 = u64 [s1 + 0xb0]\n 32732: u64 [a3 + 0x88] = a0\n 32736: a0 = u64 [s1 + 0x88]\n 32740: u64 [a3 + 0x90] = a0\n 32744: a0 = s1 + 0x380\n 32748: a1 = s1 + 0x360\n 32752: a2 = u64 [s1 + 0x90]\n 32756: u64 [a3 + 0x98] = a2\n 32760: ra = 1320, jump @1133\n      : @1269 [@dyn 660] (gas: 1)\n 32766: jump @1291\n      : @1270 (gas: 1)\n 32769: ra = 1322, jump @0\n      : @1271 [@dyn 661] (gas: 63)\n 32776: a1 = u64 [0x30180]\n 32781: u64 [s1 + 0x90] = a1\n 32785: a1 = u64 [0x30190]\n 32790: u64 [s1 + 0x88] = a1\n 32794: a0 = u64 [0x30188]\n 32799: u64 [s1 + 0x80] = a0\n 32803: ecalli 11 // 'ref_time_left'\n 32805: a1 = u64 [s1 + 0x80]\n 32809: a1 = reverse a1\n 32811: a2 = a1 << 0x20\n 32814: a3 = u64 [s1 + 0x88]\n 32818: a3 = reverse a3\n 32820: a3 = a3 >> 0x20\n 32823: a2 = a2 | a3\n 32826: a3 = a1 >> 0x20\n 32829: a1 = u64 [s1 + 0x90]\n 32833: a4 = reverse a1\n 32835: a1 = 0x30160\n 32840: a5 = a4 << 0x20\n 32843: a3 = a3 | a5\n 32846: a4 = a4 >> 0x20\n 32849: u32 [0x30170] = a4\n 32854: u64 [0x30168] = a3\n 32859: u64 [0x30160] = a2\n 32864: a3 = s1 + 0x7ff\n 32868: a3 = a3 + 0x31\n 32871: u64 [a3 + 104] = 0\n 32874: u64 [a3 + 96] = 0\n 32877: u64 [a3 + 88] = 0\n 32880: a2 = u64 [s1 + 0x60]\n 32883: u64 [a3 + 0x50] = a2\n 32886: u32 [a3 + 112] = 0\n 32889: a0 = a0 >u 0x8fc\n 32893: a2 = -a0\n 32895: u64 [a3 + 0xa8] = a2\n 32899: u64 [a3 + 0xa0] = a2\n 32903: u64 [a3 + 0x98] = a2\n 32907: u64 [a3 + 0x90] = a2\n 32911: a1 = a1 << 0x20\n 32914: a1 = a1 >> 0x20\n 32917: a0 = a0 << 0x23\n 32920: a0 = a0 | a1\n 32923: a1 = s1 + 0x7ff\n 32927: a1 = a1 + 0x81\n 32931: a1 = a1 << 0x20\n 32934: a1 = a1 >> 0x20\n 32937: a2 = s1 + 0x7ff\n 32941: a2 = a2 + 0xc1\n 32945: a2 = a2 << 0x20\n 32948: a3 = a2 | a1\n 32951: a4 = u64 [s1 + 0x30]\n 32954: a4 = a4 << 0x20\n 32957: a4 = a4 >> 0x20\n 32960: a1 = s1 + 0x7ff\n 32964: a1 = a1 + 0xa1\n 32968: a1 = a1 << 0x20\n 32971: a5 = a1 | a4\n 32974: a1 = 0xffffffffffffffff\n 32977: a2 = 0xffffffffffffffff\n 32980: ecalli 0 // 'call'\n 32981: u64 [s1 + 0x90] = a0\n 32985: ecalli 13 // 'return_data_size'\n 32987: fallthrough\n      : @1272 (gas: 1)\n 32988: jump @1283 if a0 == 0\n      : @1273 (gas: 5)\n 32992: ecalli 13 // 'return_data_size'\n 32994: u64 [s1 + 0x58] = a0\n 32997: a0 = s1 + 0x260\n 33001: a1 = 0x40\n 33004: ra = 1324, jump @7\n      : @1274 [@dyn 662] (gas: 29)\n 33011: a5 = u64 [s1 + 0x278]\n 33015: u64 [s1 + 0x78] = a5\n 33018: t0 = u64 [s1 + 0x270]\n 33022: u64 [s1 + 0x50] = t0\n 33025: t1 = u64 [s1 + 0x268]\n 33029: u64 [s1 + 0x80] = t1\n 33033: t2 = u64 [s1 + 0x260]\n 33037: u64 [s1 + 0x88] = t2\n 33041: a1 = u64 [s1 + 0x58]\n 33044: a0 = a1 + 0x1f\n 33047: a1 = a0 <u a1\n 33050: a0 = a0 & 0xffffffffffffffe0\n 33053: a2 = a0 + 0x20\n 33056: a0 = a2 <u a0\n 33059: a3 = a1 + a0\n 33062: a4 = a3 <u a1\n 33065: a4 = a0 if a0 == 0\n 33068: u64 [s1 + 568] = 0\n 33072: u64 [s1 + 0x220] = a2\n 33076: a2 = s1 + 0x200\n 33080: u64 [a2 + 0x58] = a5\n 33083: u64 [s1 + 0x250] = t0\n 33087: u64 [s1 + 0x248] = t1\n 33091: u64 [s1 + 0x240] = t2\n 33095: u64 [a2 + 0x28] = a3\n 33098: a0 = s1 + 0x240\n 33102: a1 = s1 + 0x220\n 33106: u64 [a2 + 0x30] = a4\n 33109: ra = 1326, jump @1133\n      : @1275 [@dyn 663] (gas: 12)\n 33115: a0 = u64 [s1 + 0x88]\n 33119: a1 = u64 [s1 + 0x78]\n 33122: a2 = u64 [s1 + 0x80]\n 33126: a2 = a2 | a1\n 33129: a3 = u64 [s1 + 0x50]\n 33132: a1 = a0 | a3\n 33135: a1 = a1 | a2\n 33138: a1 = a1 >> 0x20\n 33141: a2 = a2 | a3\n 33144: a2 = a2 << 0x20\n 33147: a1 = a1 | a2\n 33150: jump @1306 if a1 != 0\n      : @1276 (gas: 7)\n 33154: u64 [s1 + 536] = 0\n 33158: u64 [s1 + 528] = 0\n 33162: u64 [s1 + 520] = 0\n 33166: a1 = s1 + 0x200\n 33170: a2 = u64 [s1 + 0x58]\n 33173: u64 [s1 + 0x200] = a2\n 33177: ra = 1328, jump @9\n      : @1277 [@dyn 664] (gas: 2)\n 33184: ecalli 13 // 'return_data_size'\n 33186: fallthrough\n      : @1278 (gas: 10)\n 33187: a3 = u64 [s1 + 0x88]\n 33191: a1 = u64 [s1 + 0x78]\n 33194: a2 = u64 [s1 + 0x50]\n 33197: a1 = a1 | a2\n 33200: a2 = 0xffffffe0\n 33210: a2 = a3 <u a2\n 33213: a4 = u64 [s1 + 0x80]\n 33217: a2 = 0 if a4 != 0\n 33219: a2 = 0 if a1 != 0\n 33221: jump @1306 if a2 == 0\n      : @1279 (gas: 3)\n 33225: a1 = a0\n 33227: a0 = a0 >> 0x20\n 33230: jump @1306 if a0 != 0\n      : @1280 (gas: 7)\n 33234: i32 a0 = a3 + 0x20\n 33237: a2 = a1\n 33239: u64 [s1 + 0x80] = a1\n 33243: i32 a1 = a1 + 0\n 33245: u64 [s1 + 0x88] = a1\n 33249: a1 = a2\n 33251: ra = 1330, jump @20\n      : @1281 [@dyn 665] (gas: 10)\n 33257: a1 = s1 + 0x7ff\n 33261: a1 = a1 + 0x31\n 33264: a2 = u64 [s1 + 0x80]\n 33268: u32 [a1 + 0xb0] = a2\n 33272: i32 a0 = a0 + 0\n 33274: a1 = s1 + 0x1000\n 33278: i32 a1 = a1 + 0xfffffffffffff8e0\n 33282: a2 = 0\n 33284: ecalli 12 // 'return_data_copy'\n 33286: fallthrough\n      : @1282 (gas: 5)\n 33287: a0 = s1 + 0x7ff\n 33291: a0 = a0 + 0x31\n 33294: a0 = i32 [a0 + 0xb0]\n 33298: a1 = u64 [s1 + 0x88]\n 33302: jump @1306 if a0 <u a1\n      : @1283 (gas: 2)\n 33306: a0 = u64 [s1 + 0x90]\n 33310: jump @1312 if a0 != 0\n      : @1284 (gas: 3)\n 33314: a0 = s1 + 0x1c0\n 33318: a1 = 0x40\n 33321: ra = 1332, jump @7\n      : @1285 [@dyn 666] (gas: 6)\n 33328: a4 = s1 + 0x100\n 33332: a0 = u64 [a4 + 0xd8]\n 33336: a1 = u64 [a4 + 0xd0]\n 33340: a2 = u64 [a4 + 0xc8]\n 33344: a3 = u64 [a4 + 0xc0]\n 33348: t0 = 1334, jump @1334\n      : @1286 [@dyn 667] (gas: 1)\n 33354: jump @1306 if a0 != 0\n      : @1287 (gas: 9)\n 33358: u64 [s1 + 440] = 0\n 33362: u64 [s1 + 432] = 0\n 33366: u64 [s1 + 424] = 0\n 33370: a1 = s1 + 0x1a0\n 33374: a0 = u64 [s1 + 0x60]\n 33377: u64 [s1 + 0x1a0] = a0\n 33381: a0 = a3\n 33383: u64 [s1 + 0xb8] = a3\n 33387: ra = 1336, jump @9\n      : @1288 [@dyn 668] (gas: 33)\n 33394: u64 [s1 + 312] = 0\n 33398: u64 [s1 + 304] = 0\n 33402: u64 [s1 + 296] = 0\n 33406: a0 = u64 [s1 + 0x68]\n 33409: u64 [s1 + 0x120] = a0\n 33413: u64 [s1 + 344] = 0\n 33417: u64 [s1 + 336] = 0\n 33421: u64 [s1 + 328] = 0\n 33425: a0 = u64 [s1 + 0x70]\n 33428: u64 [s1 + 0x140] = a0\n 33432: u64 [s1 + 376] = 0\n 33436: a0 = u64 [s1 + 0x98]\n 33440: u64 [s1 + 0x170] = a0\n 33444: a0 = u64 [s1 + 0xa0]\n 33448: u64 [s1 + 0x168] = a0\n 33452: a0 = u64 [0x20128]\n 33457: a1 = u64 [0x20130]\n 33462: a2 = u64 [0x20138]\n 33467: a3 = u64 [s1 + 0xa8]\n 33471: u64 [s1 + 0x160] = a3\n 33475: u64 [s1 + 0x198] = a0\n 33479: u64 [s1 + 0x190] = a1\n 33483: u64 [s1 + 0x188] = a2\n 33487: a0 = u64 [0x20140]\n 33492: a1 = 0x20\n 33495: a2 = s1 + 0x180\n 33499: a3 = s1 + 0x160\n 33503: a4 = s1 + 0x140\n 33507: a5 = s1 + 0x120\n 33511: u64 [s1 + 0x180] = a0\n 33515: a0 = u64 [s1 + 0xb8]\n 33519: ra = 0x544\n 33523: jump @17\n      : @1289 (gas: 23)\n 33526: a0 = sp + 0xffffffffffffffe0\n 33529: a5 = a0 & 0xffffffffffffffe0\n 33532: sp = a5\n 33534: a1 = u64 [s1 + 0x10]\n 33537: a0 = a1 + 0x2\n 33540: a1 = a0 <u a1\n 33543: a3 = u64 [s1 + 0x18]\n 33546: a2 = a3 + a1\n 33549: a3 = a2 <u a3\n 33552: a3 = a1 if a1 == 0\n 33555: a1 = u64 [s1 + 0x20]\n 33558: a3 = a3 + a1\n 33561: a1 = a3 <u a1\n 33564: a4 = u64 [s1 + 0x28]\n 33567: a4 = a4 + a1\n 33570: a1 = a5\n 33572: u64 [s1 + 0xb8] = a5\n 33576: u64 [a5 + 0x8] = a2\n 33579: u64 [a5] = a0\n 33581: u64 [a5 + 0x10] = a3\n 33584: u64 [a5 + 0x18] = a4\n 33587: a0 = s1 + 0x340\n 33591: ra = 1338, jump @11\n      : @1290 [@dyn 669] (gas: 24)\n 33598: a4 = s1 + 0x300\n 33602: a0 = u64 [a4 + 0x40]\n 33605: a1 = u64 [a4 + 0x58]\n 33608: a2 = u64 [a4 + 0x48]\n 33611: a3 = u64 [a4 + 0x50]\n 33614: a4 = u64 [s1 + 0x60]\n 33617: a4 = a4 + a0\n 33620: a0 = a4 <u a0\n 33623: a5 = a2 + a0\n 33626: a2 = a5 <u a2\n 33629: a2 = a0 if a0 == 0\n 33632: a2 = a2 + a3\n 33635: a0 = a2 <u a3\n 33638: a0 = a0 + a1\n 33641: a1 = s1 + 0x7ff\n 33645: a1 = a1 + 0x31\n 33648: u64 [a1 + 0xf0] = a4\n 33652: u64 [a1 + 0xf8] = a5\n 33656: u64 [a1 + 0x100] = a2\n 33660: u64 [a1 + 0x108] = a0\n 33664: a1 = s1 + 0x7ff\n 33668: a1 = a1 + 0x121\n 33672: a0 = u64 [s1 + 0xb8]\n 33676: ra = 1340, jump @12\n      : @1291 [@dyn 670] (gas: 3)\n 33683: a0 = s1 + 0x320\n 33687: a1 = 0x40\n 33690: ra = 1342, jump @7\n      : @1292 [@dyn 671] (gas: 6)\n 33697: a4 = s1 + 0x300\n 33701: a0 = u64 [a4 + 0x38]\n 33704: a1 = u64 [a4 + 0x30]\n 33707: a2 = u64 [a4 + 0x28]\n 33710: a3 = u64 [a4 + 0x20]\n 33713: t0 = 1344, jump @1334\n      : @1293 [@dyn 672] (gas: 1)\n 33719: jump @1306 if a0 != 0\n      : @1294 (gas: 9)\n 33723: u64 [s1 + 792] = 0\n 33727: u64 [s1 + 784] = 0\n 33731: u64 [s1 + 776] = 0\n 33735: a1 = s1 + 0x300\n 33739: a0 = u64 [s1 + 0x60]\n 33742: u64 [s1 + 0x300] = a0\n 33746: a0 = a3\n 33748: u64 [s1 + 0xb8] = a3\n 33752: ra = 1346, jump @9\n      : @1295 [@dyn 673] (gas: 32)\n 33759: u64 [s1 + 664] = 0\n 33763: u64 [s1 + 656] = 0\n 33767: u64 [s1 + 648] = 0\n 33771: a0 = u64 [s1 + 0x68]\n 33774: u64 [s1 + 0x280] = a0\n 33778: u64 [s1 + 696] = 0\n 33782: u64 [s1 + 688] = 0\n 33786: u64 [s1 + 680] = 0\n 33790: a0 = u64 [s1 + 0x70]\n 33793: u64 [s1 + 0x2a0] = a0\n 33797: u64 [s1 + 728] = 0\n 33801: a0 = u64 [s1 + 0x98]\n 33805: u64 [s1 + 0x2d0] = a0\n 33809: a0 = u64 [s1 + 0xa0]\n 33813: u64 [s1 + 0x2c8] = a0\n 33817: a0 = u64 [0x20108]\n 33822: a1 = u64 [0x20110]\n 33827: a2 = u64 [0x20118]\n 33832: a3 = u64 [s1 + 0xa8]\n 33836: u64 [s1 + 0x2c0] = a3\n 33840: u64 [s1 + 0x2f8] = a0\n 33844: u64 [s1 + 0x2f0] = a1\n 33848: u64 [s1 + 0x2e8] = a2\n 33852: a0 = u64 [0x20120]\n 33857: a1 = 0x20\n 33860: a2 = s1 + 0x2e0\n 33864: a3 = s1 + 0x2c0\n 33868: a4 = s1 + 0x2a0\n 33872: a5 = s1 + 0x280\n 33876: u64 [s1 + 0x2e0] = a0\n 33880: a0 = u64 [s1 + 0xb8]\n 33884: ra = 1348, jump @17\n      : @1296 [@dyn 674] (gas: 9)\n 33890: sp = s0 + 0xfffffffffffff800\n 33894: sp = sp + 0xfffffffffffffe00\n 33898: sp = sp + 0x208\n 33902: a0 = sp + 0x700\n 33906: ra = u64 [a0 + 0xf0]\n 33910: s0 = u64 [a0 + 0xe8]\n 33914: s1 = u64 [a0 + 0xe0]\n 33918: sp = sp + 0x7f8\n 33922: ret\n      : @1297 (gas: 3)\n 33924: a0 = s1 + 0x3a0\n 33928: a1 = 0x40\n 33931: ra = 1350, jump @7\n      : @1298 [@dyn 675] (gas: 11)\n 33938: a1 = s1 + 0x300\n 33942: a0 = u64 [a1 + 0xb8]\n 33946: u64 [s1 + 0xb0] = a0\n 33950: a0 = u64 [a1 + 0xb0]\n 33954: u64 [s1 + 0xa8] = a0\n 33958: a0 = u64 [a1 + 0xa8]\n 33962: u64 [s1 + 0xa0] = a0\n 33966: a0 = u64 [a1 + 0xa0]\n 33970: u64 [s1 + 0xb8] = a0\n 33974: ecalli 13 // 'return_data_size'\n 33976: fallthrough\n      : @1299 (gas: 12)\n 33977: a1 = u64 [s1 + 0xb0]\n 33981: a2 = u64 [s1 + 0xa0]\n 33985: a1 = a1 | a2\n 33988: a3 = u64 [s1 + 0xa8]\n 33992: a2 = u64 [s1 + 0xb8]\n 33996: a2 = a2 | a3\n 33999: a2 = a2 | a1\n 34002: a2 = a2 >> 0x20\n 34005: a1 = a1 | a3\n 34008: a1 = a1 << 0x20\n 34011: a1 = a1 | a2\n 34014: jump @1306 if a1 != 0\n      : @1300 (gas: 2)\n 34017: a1 = a0 >> 0x20\n 34020: jump @1306 if a1 != 0\n      : @1301 (gas: 6)\n 34023: a1 = a0\n 34025: u64 [s1 + 0xa8] = a0\n 34029: i32 a0 = a0 + 0\n 34031: u64 [s1 + 0xb0] = a0\n 34035: a0 = u64 [s1 + 0xb8]\n 34039: ra = 1352, jump @20\n      : @1302 [@dyn 676] (gas: 10)\n 34045: a1 = s1 + 0x7ff\n 34049: a1 = a1 + 0x31\n 34052: a2 = u64 [s1 + 0xa8]\n 34056: u32 [a1 + 0x190] = a2\n 34060: i32 a0 = a0 + 0\n 34062: a1 = s1 + 0x1000\n 34066: i32 a1 = a1 + 0xfffffffffffff9c0\n 34070: a2 = 0\n 34072: ecalli 12 // 'return_data_copy'\n 34074: fallthrough\n      : @1303 (gas: 5)\n 34075: a0 = s1 + 0x7ff\n 34079: a0 = a0 + 0x31\n 34082: a0 = i32 [a0 + 0x190]\n 34086: a1 = u64 [s1 + 0xb0]\n 34090: jump @1306 if a0 <u a1\n      : @1304 (gas: 2)\n 34093: ecalli 13 // 'return_data_size'\n 34095: fallthrough\n      : @1305 (gas: 3)\n 34096: a1 = a0\n 34098: a0 = a0 >> 0x20\n 34101: jump @1316 if a0 == 0\n      : @1306 (gas: 1)\n 34105: trap\n      : @1307 (gas: 9)\n 34106: u64 [s1 + 208] = 0\n 34110: u64 [s1 + 200] = 0\n 34114: u64 [s1 + 192] = 0\n 34118: a0 = 0xa7a9536d00000000\n 34128: a1 = s1 + 0xc0\n 34132: u64 [s1 + 0xd8] = a0\n 34136: a0 = 0\n 34138: ra = 0x54a\n 34142: jump @9\n      : @1308 (gas: 9)\n 34146: u64 [s1 + 240] = 0\n 34150: u64 [s1 + 232] = 0\n 34154: u64 [s1 + 224] = 0\n 34158: a0 = 0xafa4e2b600000000\n 34168: a1 = s1 + 0xe0\n 34172: u64 [s1 + 0xf8] = a0\n 34176: a0 = 0\n 34178: ra = 0x54a\n 34182: jump @9\n      : @1309 (gas: 9)\n 34186: u64 [s1 + 1584] = 0\n 34190: u64 [s1 + 1576] = 0\n 34194: u64 [s1 + 1568] = 0\n 34198: a0 = 0x560ff90000000000\n 34208: a1 = s1 + 0x620\n 34212: u64 [s1 + 0x638] = a0\n 34216: a0 = 0\n 34218: ra = 0x54a\n 34222: jump @9\n      : @1310 (gas: 9)\n 34226: u64 [s1 + 272] = 0\n 34230: u64 [s1 + 264] = 0\n 34234: u64 [s1 + 256] = 0\n 34238: a0 = 0xf4d678b800000000\n 34248: a1 = s1 + 0x100\n 34252: u64 [s1 + 0x118] = a0\n 34256: a0 = 0\n 34258: ra = 0x54a\n 34262: jump @9\n      : @1311 (gas: 5)\n 34266: a0 = 0x1\n 34269: a1 = u64 [s1 + 0xb8]\n 34273: a2 = 0\n 34275: ecalli 14 // 'seal_return'\n 34277: fallthrough\n      : @1312 (gas: 8)\n 34278: u64 [s1 + 496] = 0\n 34282: u64 [s1 + 488] = 0\n 34286: u64 [s1 + 480] = 0\n 34290: a0 = 0x90b8ec1800000000\n 34300: a1 = s1 + 0x1e0\n 34304: u64 [s1 + 0x1f8] = a0\n 34308: a0 = 0\n 34310: ra = 1354, jump @9\n      : @1313 [@dyn 677] (gas: 3)\n 34317: a0 = u64 [s1 + 0xb0]\n 34321: a0 = i32 [a0]\n 34323: jump @1315 if a0 >u 31\n      : @1314 (gas: 3)\n 34327: a1 = u64 [s1 + 0xb0]\n 34331: u32 [a1 + 0] = 0x20\n 34334: fallthrough\n      : @1315 (gas: 5)\n 34335: a0 = 0x1\n 34338: a2 = 0x4\n 34341: a1 = u64 [s1 + 0xb8]\n 34345: ecalli 14 // 'seal_return'\n 34347: fallthrough\n      : @1316 (gas: 3)\n 34348: a0 = u64 [s1 + 0xb8]\n 34352: u64 [s1 + 0xb0] = a1\n 34356: ra = 1356, jump @20\n      : @1317 [@dyn 678] (gas: 7)\n 34363: i32 a1 = a0 + 0\n 34365: a2 = i32 [s1 + 0xb0]\n 34369: a0 = 0x1\n 34372: ecalli 14 // 'seal_return'\n 34374: a0 = 0\n 34376: ra = 0x54e\n 34380: jump @26\n      : @1318 [export #0: 'call'] (gas: 2)\n 34384: a0 = 0\n 34386: ra = 1358, jump @26\n      : @1319 [@dyn 679] [export #1: 'deploy'] (gas: 2)\n 34393: a0 = 0x1\n 34396: ra = 1360, jump @26\n      : @1320 [@dyn 680] (gas: 15)\n 34403: a0 = u64 [a2 + 0x8]\n 34406: a1 = i32 [a2 + 0x10]\n 34409: a2 = u64 [a2]\n 34411: a0 = reverse a0\n 34413: a3 = a0 << 0x20\n 34416: a1 = reverse a1\n 34418: a1 = a1 >> 0x20\n 34421: a3 = a3 | a1\n 34424: a0 = a0 >> 0x20\n 34427: a1 = reverse a2\n 34429: a2 = a1 << 0x20\n 34432: a0 = a0 | a2\n 34435: a1 = a1 >> 0x20\n 34438: a2 = s1 + 0x1078\n 34442: jump [t0]\n      : @1321 (gas: 15)\n 34444: a0 = u64 [a2 + 0x8]\n 34447: a1 = i32 [a2 + 0x10]\n 34450: a2 = u64 [a2]\n 34452: a0 = reverse a0\n 34454: a3 = a0 << 0x20\n 34457: a1 = reverse a1\n 34459: a1 = a1 >> 0x20\n 34462: a3 = a3 | a1\n 34465: a0 = a0 >> 0x20\n 34468: a1 = reverse a2\n 34470: a2 = a1 << 0x20\n 34473: a0 = a0 | a2\n 34476: a1 = a1 >> 0x20\n 34479: a2 = s1 + 0x1878\n 34483: jump [t0]\n      : @1322 (gas: 16)\n 34485: a0 = u64 [a2 + 0x8]\n 34488: a1 = i32 [a2 + 0x10]\n 34491: a2 = u64 [a2]\n 34493: a0 = reverse a0\n 34495: a3 = a0 << 0x20\n 34498: a1 = reverse a1\n 34500: a1 = a1 >> 0x20\n 34503: a3 = a3 | a1\n 34506: a0 = a0 >> 0x20\n 34509: a1 = reverse a2\n 34511: a2 = a1 << 0x20\n 34514: a0 = a0 | a2\n 34517: a1 = a1 >> 0x20\n 34520: a2 = s1 + 0x7ff\n 34524: a2 = a2 + 0x79\n 34527: jump [t0]\n      : @1323 (gas: 20)\n 34529: a3 = u64 [s1 + 0xa8]\n 34533: a0 = u64 [a3 + 0x18]\n 34536: a1 = u64 [a3 + 0x10]\n 34539: a2 = u64 [a3 + 0x8]\n 34542: a3 = u64 [a3]\n 34544: a0 = reverse a0\n 34546: u64 [s1 + 0xa0] = a0\n 34550: a0 = reverse a1\n 34552: u64 [s1 + 0x98] = a0\n 34556: a0 = reverse a2\n 34558: u64 [s1 + 0x90] = a0\n 34562: a0 = reverse a3\n 34564: u64 [s1 + 0x88] = a0\n 34568: a0 = sp + 0xffffffffffffffe0\n 34571: a0 = a0 & 0xffffffffffffffe0\n 34574: u64 [s1 + 0xa8] = a0\n 34578: sp = a0\n 34580: a0 = 0x1078\n 34584: a2 = s1 + a0\n 34587: jump [t0]\n      : @1324 (gas: 26)\n 34589: u64 [s1 + 0xc8] = a0\n 34593: a0 = ra - a3\n 34596: a0 = a0 <u a5\n 34599: a1 = ra <u a3\n 34602: a5 = u64 [s1 + 0x98]\n 34606: a4 = ra - a5\n 34609: a4 = a4 - a1\n 34612: a4 = a4 - a0\n 34615: ra = a4 >>a 0x3f\n 34618: a0 = u64 [s1 + 0x90]\n 34622: a0 = ra & a0\n 34625: a1 = u64 [s1 + 0xa0]\n 34629: t2 = a1 - a0\n 34632: a1 = a1 <u a0\n 34635: t1 = a2 - a1\n 34638: a1 = 0 if a2 != 0\n 34640: a0 = a3 - a1\n 34643: u64 [s1 + 0xa8] = a0\n 34647: a1 = a3 <u a1\n 34650: a1 = a5 - a1\n 34653: a3 = u64 [s1 + 0xf8]\n 34657: a5 = u64 [s1 + 0xf0]\n 34661: a2 = a3 | a5\n 34664: a2 = a2 <u 0x1\n 34667: a4 = u64 [s1 + 0xe0]\n 34671: jump [t0]\n      : @1325 (gas: 18)\n 34673: a3 = u64 [s1 + 0xe0]\n 34677: a0 = u64 [a3 + 0x18]\n 34680: a1 = u64 [a3 + 0x10]\n 34683: a2 = u64 [a3 + 0x8]\n 34686: a3 = u64 [a3]\n 34688: a0 = reverse a0\n 34690: u64 [s1 + 0xd8] = a0\n 34694: a0 = reverse a1\n 34696: u64 [s1 + 0xd0] = a0\n 34700: a0 = reverse a2\n 34702: u64 [s1 + 0xc8] = a0\n 34706: a0 = reverse a3\n 34708: u64 [s1 + 0xc0] = a0\n 34712: a0 = sp + 0xffffffffffffffe0\n 34715: a0 = a0 & 0xffffffffffffffe0\n 34718: u64 [s1 + 0xe0] = a0\n 34722: sp = a0\n 34724: jump [t0]\n      : @1326 (gas: 18)\n 34726: a3 = u64 [s1 + 0x60]\n 34729: a0 = u64 [a3 + 0x18]\n 34732: a1 = u64 [a3 + 0x10]\n 34735: a2 = u64 [a3 + 0x8]\n 34738: a3 = u64 [a3]\n 34740: a0 = reverse a0\n 34742: u64 [s1 + 0x58] = a0\n 34745: a0 = reverse a1\n 34747: u64 [s1 + 0x50] = a0\n 34750: a0 = reverse a2\n 34752: u64 [s1 + 0x48] = a0\n 34755: a0 = reverse a3\n 34757: u64 [s1 + 0x40] = a0\n 34760: a0 = sp + 0xffffffffffffffe0\n 34763: a0 = a0 & 0xffffffffffffffe0\n 34766: u64 [s1 + 0x60] = a0\n 34769: sp = a0\n 34771: jump [t0]\n      : @1327 (gas: 15)\n 34773: a3 = u64 [s1 + 0x58]\n 34776: a0 = u64 [a3 + 0x18]\n 34779: a1 = u64 [a3 + 0x10]\n 34782: a2 = u64 [a3 + 0x8]\n 34785: a3 = u64 [a3]\n 34787: a0 = reverse a0\n 34789: a4 = reverse a1\n 34791: a2 = reverse a2\n 34793: a3 = reverse a3\n 34795: a1 = u64 [s1 + 0x60]\n 34798: u64 [a1 + 0x18] = a3\n 34801: u64 [a1 + 0x10] = a2\n 34804: u64 [a1 + 0x8] = a4\n 34807: u64 [a1] = a0\n 34809: jump [t0]\n      : @1328 (gas: 15)\n 34811: a0 = u64 [a3 + 0x18]\n 34814: a1 = u64 [a3 + 0x10]\n 34817: a2 = u64 [a3 + 0x8]\n 34820: a3 = u64 [a3]\n 34822: a0 = reverse a0\n 34824: a4 = reverse a1\n 34826: a2 = reverse a2\n 34828: a3 = reverse a3\n 34830: a1 = u64 [s1 + 0xa8]\n 34834: u64 [a1 + 0x18] = a3\n 34837: u64 [a1 + 0x10] = a2\n 34840: u64 [a1 + 0x8] = a4\n 34843: u64 [a1] = a0\n 34845: a0 = 0x1000\n 34849: jump [t0]\n      : @1329 (gas: 15)\n 34851: a3 = u64 [s1 + 0xf8]\n 34855: a0 = u64 [a3 + 0x18]\n 34858: a1 = u64 [a3 + 0x10]\n 34861: a2 = u64 [a3 + 0x8]\n 34864: a3 = u64 [a3]\n 34866: a0 = reverse a0\n 34868: a4 = reverse a1\n 34870: a2 = reverse a2\n 34872: a3 = reverse a3\n 34874: a1 = u64 [s1 + 0xe0]\n 34878: u64 [a1 + 0x18] = a3\n 34881: u64 [a1 + 0x10] = a2\n 34884: u64 [a1 + 0x8] = a4\n 34887: u64 [a1] = a0\n 34889: jump [t0]\n      : @1330 (gas: 24)\n 34891: a0 = a1 if a2 == 0\n 34894: a2 = u64 [s1 + 0xb0]\n 34898: a3 = a2\n 34900: a1 = a2\n 34902: a2 = u64 [s1 + 0xc0]\n 34906: a3 = a0 if a2 != 0\n 34909: u64 [s1 + 0xc8] = a3\n 34913: a0 = u64 [s1 + 0xa8]\n 34917: a3 = u64 [s1 + 0x90]\n 34921: a0 = a0 | a3\n 34924: a3 = u64 [s1 + 0x80]\n 34928: a0 = a3 if a5 == 0\n 34931: a4 = u64 [s1 + 0xb8]\n 34935: a3 = a4\n 34937: a3 = a0 if a2 != 0\n 34940: u64 [s1 + 0xc0] = a3\n 34944: a0 = u64 [s1 + 0xd0]\n 34948: a0 = 0 if a5 == 0\n 34950: u64 [s1 + 0xd0] = a0\n 34954: u64 [s1 + 144] = 0x15180\n 34961: a0 = u64 [s1 + 0xf8]\n 34965: a2 = a0 + 0xffffffffffffff80\n 34968: a0 = a4\n 34970: jump [t0]\n      : @1331 (gas: 19)\n 34972: a3 = u64 [s1 + 0xd8]\n 34976: a0 = u64 [a3]\n 34978: a1 = u64 [a3 + 0x8]\n 34981: a2 = u64 [a3 + 0x10]\n 34984: a3 = u64 [a3 + 0x18]\n 34987: a0 = reverse a0\n 34989: a1 = reverse a1\n 34991: a2 = reverse a2\n 34993: a3 = reverse a3\n 34995: a3 = a3 + 0x1\n 34998: a4 = a3 <u 0x1\n 35001: a2 = a2 + a4\n 35004: a4 = a3 | a2\n 35007: a4 = a4 <u 0x1\n 35010: a4 = a4 + a1\n 35013: a1 = a4 <u a1\n 35016: a0 = a0 + a1\n 35019: a1 = s1 + 0x2078\n 35023: jump [t0]\n      : @1332 (gas: 18)\n 35025: a1 = a2 + 0x1\n 35028: u64 [s1 + 0xf8] = a1\n 35032: a0 = a1 <u 0x1\n 35035: a0 = a0 + a3\n 35038: u64 [s1 + 0xf0] = a0\n 35042: a0 = a0 | a1\n 35045: a0 = a0 <u 0x1\n 35048: a0 = a0 + t1\n 35051: u64 [s1 + 0xe0] = a0\n 35055: a0 = a0 <u t1\n 35058: a0 = a0 + ra\n 35061: u64 [s1 + 0xe8] = a0\n 35065: a1 = 0xff - a2\n 35069: u64 [s1 + 0xc0] = a1\n 35073: a2 = 0x80 - a1\n 35077: a0 = u64 [s1 + 0xa0]\n 35081: a1 = u64 [s1 + 0x98]\n 35085: jump [t0]\n      : @1333 (gas: 17)\n 35087: a0 = u64 [a3]\n 35089: a1 = u64 [a3 + 0x8]\n 35092: a2 = u64 [a3 + 0x10]\n 35095: a3 = u64 [a3 + 0x18]\n 35098: a0 = reverse a0\n 35100: a1 = reverse a1\n 35102: a2 = reverse a2\n 35104: a3 = reverse a3\n 35106: a4 = a3 + 0x3\n 35109: a3 = a4 <u a3\n 35112: a5 = a2 + a3\n 35115: a2 = a5 <u a2\n 35118: a2 = a3 if a3 == 0\n 35121: a2 = a2 + a1\n 35124: a1 = a2 <u a1\n 35127: a0 = a0 + a1\n 35130: jump [t0]\n      : @1334 (gas: 8)\n 35132: a0 = a0 | a2\n 35135: a2 = a3 | a1\n 35138: a2 = a2 | a0\n 35141: a2 = a2 >> 0x20\n 35144: a0 = a0 | a1\n 35147: a0 = a0 << 0x20\n 35150: a0 = a0 | a2\n 35153: jump [t0]\n      : @1335 (gas: 5)\n 35155: sp = a0\n 35157: i32 a2 = a0 + 0\n 35159: a1 = 0x40\n 35162: a0 = u64 [s1 + 0xe8]\n 35166: jump [t0]\n      : @1336 (gas: 5)\n 35168: sp = a0\n 35170: i32 a2 = a0 + 0\n 35172: a1 = 0x40\n 35175: a0 = u64 [s1 + 0xb8]\n 35179: jump [t0]\n      : @1337 (gas: 8)\n 35181: a0 = u64 [a2 + 0x8]\n 35184: a1 = i32 [a2 + 0x10]\n 35187: a2 = u64 [a2]\n 35189: a3 = reverse a0\n 35191: a0 = a3 << 0x20\n 35194: a1 = reverse a1\n 35196: a1 = a1 >> 0x20\n 35199: jump [t0]\n      : @1338 (gas: 15)\n 35201: t2 = u64 [s1 + 0xa0]\n 35205: t1 = u64 [s1 + 0x98]\n 35209: u64 [s1 + 184] = 0\n 35213: u64 [s1 + 176] = 0\n 35217: a2 = u64 [s1 + 0x88]\n 35221: a1 = 0 if a2 == 0\n 35223: a0 = 0 if a2 == 0\n 35225: u64 [s1 + 0xa8] = a0\n 35229: a3 = u64 [s1 + 0x90]\n 35233: a2 = a3 + 0xffffffffffffffff\n 35236: u64 [s1 + 0x88] = a2\n 35240: a2 = a3 >u 0\n 35242: a2 = a2 + 0xffffffffffffffff\n 35245: u64 [s1 + 0x80] = a2\n 35249: jump [t0]\n      : @1339 (gas: 5)\n 35251: sp = a0\n 35253: i32 a2 = a0 + 0\n 35255: a1 = 0x40\n 35258: a0 = u64 [s1 + 0xf0]\n 35262: jump [t0]\n      : @1340 (gas: 16)\n 35264: a3 = u64 [s1 + 0xf0]\n 35268: a0 = u64 [a3 + 0x18]\n 35271: a1 = u64 [a3 + 0x10]\n 35274: a2 = u64 [a3 + 0x8]\n 35277: a3 = u64 [a3]\n 35279: a0 = reverse a0\n 35281: a4 = reverse a1\n 35283: a2 = reverse a2\n 35285: a3 = reverse a3\n 35287: a1 = u64 [s1 + 0xf8]\n 35291: u64 [a1 + 0x18] = a3\n 35294: u64 [a1 + 0x10] = a2\n 35297: u64 [a1 + 0x8] = a4\n 35300: u64 [a1] = a0\n 35302: a0 = 0x2000\n 35306: jump [t0]\n      : @1341 (gas: 12)\n 35308: a4 = u64 [s1 + 0x88]\n 35312: a0 = a0 & a4\n 35315: a4 = u64 [s1 + 0x78]\n 35318: a1 = a1 & a4\n 35321: a4 = u64 [s1 + 0x90]\n 35325: a2 = a2 & a4\n 35328: a4 = u64 [s1 + 0x80]\n 35332: a3 = a3 & a4\n 35335: a2 = a2 | a3\n 35338: a0 = a0 | a1\n 35341: a0 = a0 | a2\n 35344: jump [t0]\n      : @1342 (gas: 14)\n 35346: a0 = u64 [a2 + 0x8]\n 35349: a1 = i32 [a2 + 0x10]\n 35352: a2 = u64 [a2]\n 35354: a3 = reverse a0\n 35356: a0 = a3 << 0x20\n 35359: a1 = reverse a1\n 35361: a1 = a1 >> 0x20\n 35364: a0 = a0 | a1\n 35367: a3 = a3 >> 0x20\n 35370: a2 = reverse a2\n 35372: a1 = a2 << 0x20\n 35375: a1 = a1 | a3\n 35378: a2 = a2 >> 0x20\n 35381: jump [t0]\n      : @1343 (gas: 14)\n 35383: a0 = u64 [a2 + 0x8]\n 35386: a1 = i32 [a2 + 0x10]\n 35389: a2 = u64 [a2]\n 35391: a0 = reverse a0\n 35393: a3 = a0 << 0x20\n 35396: a1 = reverse a1\n 35398: a1 = a1 >> 0x20\n 35401: a3 = a3 | a1\n 35404: a0 = a0 >> 0x20\n 35407: a1 = reverse a2\n 35409: a2 = a1 << 0x20\n 35412: a0 = a0 | a2\n 35415: a1 = a1 >> 0x20\n 35418: jump [t0]\n      : @1344 (gas: 14)\n 35420: a0 = u64 [a2 + 0x8]\n 35423: a1 = u64 [a2]\n 35425: a2 = i32 [a2 + 0x10]\n 35428: a0 = reverse a0\n 35430: a3 = a0 >> 0x20\n 35433: a1 = reverse a1\n 35435: a4 = a1 << 0x20\n 35438: a3 = a3 | a4\n 35441: a0 = a0 << 0x20\n 35444: a2 = reverse a2\n 35446: a2 = a2 >> 0x20\n 35449: a0 = a0 | a2\n 35452: a1 = a1 >> 0x20\n 35455: jump [t0]\n      : @1345 (gas: 12)\n 35457: a2 = t2 >> 0x3f\n 35460: a3 = t1 << 0x1\n 35463: a2 = a2 | a3\n 35466: a3 = t2 << 0x1\n 35469: t2 = u64 [s1 + 0xc8]\n 35473: a4 = t2 >> 0x3f\n 35476: a3 = a3 | a4\n 35479: u64 [s1 + 0xa0] = a3\n 35483: ra = u64 [s1 + 0x80]\n 35487: a0 = t1\n 35489: t1 = ra ^ a2\n 35492: jump [t0]\n      : @1346 (gas: 14)\n 35494: a3 = u64 [s1 + 0xd8]\n 35498: a0 = u64 [a3 + 0x18]\n 35501: a1 = u64 [a3 + 0x10]\n 35504: a2 = u64 [a3 + 0x8]\n 35507: a3 = u64 [a3]\n 35509: a0 = reverse a0\n 35511: u64 [s1 + 0xd8] = a0\n 35515: a0 = reverse a1\n 35517: u64 [s1 + 0xd0] = a0\n 35521: a0 = reverse a2\n 35523: u64 [s1 + 0xc8] = a0\n 35527: a0 = reverse a3\n 35529: u64 [s1 + 0xc0] = a0\n 35533: jump [t0]\n      : @1347 (gas: 10)\n 35535: u64 [s1] = a3\n 35537: u64 [s1 + 0x8] = a2\n 35540: u64 [s1 + 0x10] = a1\n 35543: u64 [s1 + 0x18] = a0\n 35546: sp = s0 + 0xffffffffffffffc0\n 35549: ra = u64 [sp + 0x38]\n 35552: s0 = u64 [sp + 0x30]\n 35555: s1 = u64 [sp + 0x28]\n 35558: sp = sp + 0x40\n 35561: jump [t0]\n      : @1348 (gas: 12)\n 35563: a1 = a1 << 0x1\n 35566: a4 = u64 [s1 + 0xa8]\n 35570: a3 = a4 >> 0x3f\n 35573: a1 = a1 | a3\n 35576: u64 [s1 + 0x98] = a1\n 35580: a3 = a0 >> 0x3f\n 35583: a0 = a4 << 0x1\n 35586: a3 = a3 | a0\n 35589: a0 = t2 << 0x1\n 35592: a4 = u64 [s1 + 0xc0]\n 35596: a1 = a4 >> 0x3f\n 35599: jump [t0]\n      : @1349 (gas: 8)\n 35601: a0 = a0 | a2\n 35604: a2 = a4 | a1\n 35607: a2 = a2 | a0\n 35610: a2 = a2 >> 0x20\n 35613: a0 = a0 | a1\n 35616: a0 = a0 << 0x20\n 35619: a0 = a0 | a2\n 35622: jump [t0]\n      : @1350 (gas: 16)\n 35624: a4 = u64 [a3]\n 35626: u64 [sp + 0x18] = a4\n 35629: a4 = u64 [a3 + 0x8]\n 35632: u64 [sp + 0x20] = a4\n 35635: a4 = u64 [a3 + 0x10]\n 35638: u64 [sp + 0x28] = a4\n 35641: a3 = u64 [a3 + 0x18]\n 35644: u64 [sp + 0x30] = a3\n 35647: s1 = u64 [a2]\n 35649: a3 = u64 [a2 + 0x8]\n 35652: u64 [sp] = a3\n 35654: a3 = u64 [a2 + 0x10]\n 35657: u64 [sp + 0x8] = a3\n 35660: a2 = u64 [a2 + 0x18]\n 35663: u64 [sp + 0x10] = a2\n 35666: jump [t0]\n      : @1351 (gas: 10)\n 35668: a0 = u64 [sp + 0x10]\n 35671: a1 = u64 [sp + 0x18]\n 35674: a2 = 0x100000000\n 35684: a2 = a2 ^ a0\n 35687: a2 = a2 | a1\n 35690: a3 = a0 >> 0x20\n 35693: a3 = a3 <u 0x1\n 35696: a3 = 0 if a1 != 0\n 35698: a3 = 0 if a2 == 0\n 35700: jump [t0]\n      : @1352 (gas: 11)\n 35702: a2 = u64 [s1 + 0x88]\n 35706: a1 = a1 | a2\n 35709: a2 = u64 [s1 + 0xf8]\n 35713: a3 = a2 <u 0x80\n 35717: u64 [s1 + 0x88] = a3\n 35721: a4 = u64 [s1 + 0x80]\n 35725: a1 = a4 if a3 == 0\n 35728: a4 = u64 [s1 + 0x98]\n 35732: a4 = a1 if a2 != 0\n 35735: u64 [s1 + 0x98] = a4\n 35739: jump [t0]\n      : @1353 (gas: 10)\n 35741: a2 = u64 [s1 + 0x88]\n 35745: a1 = 0 if a2 == 0\n 35747: a0 = 0 if a2 == 0\n 35749: a3 = u64 [s1 + 0x98]\n 35753: a2 = a3 + 0xffffffffffffffff\n 35756: u64 [s1 + 0x90] = a2\n 35760: a2 = a3 >u 0\n 35762: a2 = a2 + 0xffffffffffffffff\n 35765: u64 [s1 + 0x88] = a2\n 35769: jump [t0]\n      : @1354 (gas: 4)\n 35771: a0 = 0x2078\n 35775: a3 = s1 + a0\n 35778: a4 = a3 + 0x400\n 35782: jump [t0]\n      : @1355 (gas: 4)\n 35784: a0 = 0x2078\n 35788: a3 = s1 + a0\n 35791: a4 = a3 + 0x300\n 35795: jump [t0]\n      : @1356 (gas: 11)\n 35797: a3 = u64 [s1 + 0xc8]\n 35801: a0 = u64 [a3 + 0x18]\n 35804: a1 = u64 [a3 + 0x10]\n 35807: a2 = u64 [a3 + 0x8]\n 35810: a3 = u64 [a3]\n 35812: a0 = reverse a0\n 35814: u64 [s1 + 0xc0] = a0\n 35818: a0 = reverse a1\n 35820: u64 [s1 + 0xb8] = a0\n 35824: a0 = reverse a2\n 35826: jump [t0]\n      : @1357 (gas: 9)\n 35828: u64 [s1 + 0xc0] = a3\n 35832: a1 = 0 if a4 == 0\n 35834: u64 [s1 + 0xc8] = a1\n 35838: u64 [s1 + 152] = 0x15180\n 35845: a0 = u64 [s1 + 0xf0]\n 35849: a2 = a0 + 0xffffffffffffff80\n 35852: a0 = a5\n 35854: a1 = t1\n 35856: jump [t0]\n      : @1358 (gas: 10)\n 35858: a0 = u64 [a3 + 0x18]\n 35861: a1 = u64 [a3 + 0x10]\n 35864: a2 = u64 [a3 + 0x8]\n 35867: a3 = u64 [a3]\n 35869: a0 = reverse a0\n 35871: a1 = reverse a1\n 35873: a2 = reverse a2\n 35875: a3 = reverse a3\n 35877: a4 = 0x2000\n 35881: jump [t0]\n      : @1359 (gas: 8)\n 35883: a0 = u64 [a4 + 0x58]\n 35886: a1 = u64 [a4 + 0x60]\n 35889: a2 = u64 [a4 + 0x50]\n 35892: a3 = u64 [a4 + 0x48]\n 35895: a1 = a1 | a2\n 35898: a0 = a0 | a3\n 35901: a0 = a0 | a1\n 35904: jump [t0]\n      : @1360 (gas: 12)\n 35906: a0 = u64 [sp + 0x18]\n 35909: a1 = u64 [sp + 0x10]\n 35912: a2 = u64 [sp + 0x8]\n 35915: a3 = u64 [sp]\n 35917: a4 = a2 | a0\n 35920: a5 = a3 | a1\n 35923: a5 = a5 | a4\n 35926: a5 = a5 >> 0x20\n 35929: a4 = a4 | a1\n 35932: a4 = a4 << 0x20\n 35935: a4 = a4 | a5\n 35938: jump [t0]\n      : @1361 (gas: 12)\n 35940: a4 = u64 [a5 + 0xe0]\n 35944: a1 = u64 [a5 + 0xd8]\n 35948: a2 = u64 [a5 + 0xd0]\n 35952: a0 = u64 [a5 + 0xc8]\n 35956: a4 = a4 | a2\n 35959: a2 = a0 | a1\n 35962: a2 = a2 | a4\n 35965: a2 = a2 >> 0x20\n 35968: a1 = a1 | a4\n 35971: a1 = a1 << 0x20\n 35974: a1 = a1 | a2\n 35977: jump [t0]\n      : @1362 (gas: 6)\n 35979: a0 = u64 [a3 + 0x18]\n 35982: a1 = u64 [a3 + 0x10]\n 35985: a2 = u64 [a3 + 0x8]\n 35988: a3 = u64 [a3]\n 35990: a0 = reverse a0\n 35992: jump [t0]\n      : @1363 (gas: 9)\n 35994: a0 = u64 [a3 + 0x18]\n 35997: a1 = u64 [a3 + 0x10]\n 36000: a2 = u64 [a3 + 0x8]\n 36003: a3 = u64 [a3]\n 36005: a0 = reverse a0\n 36007: a4 = reverse a1\n 36009: a2 = reverse a2\n 36011: a3 = reverse a3\n 36013: jump [t0]\n      : @1364 (gas: 12)\n 36015: a2 = u64 [sp]\n 36017: a3 = u64 [sp + 0x8]\n 36020: u64 [s1] = a2\n 36022: u64 [s1 + 0x8] = a3\n 36025: u64 [s1 + 0x10] = a0\n 36028: u64 [s1 + 0x18] = a1\n 36031: sp = s0 + 0xffffffffffffffc0\n 36034: ra = u64 [sp + 0x38]\n 36037: s0 = u64 [sp + 0x30]\n 36040: s1 = u64 [sp + 0x28]\n 36043: sp = sp + 0x40\n 36046: jump [t0]\n      : @1365 (gas: 12)\n 36048: a4 = u64 [s1 + 0xd8]\n 36052: a0 = a0 & a4\n 36055: a4 = u64 [s1 + 0xc8]\n 36059: a1 = a1 & a4\n 36062: a4 = u64 [s1 + 0xd0]\n 36066: a2 = a2 & a4\n 36069: a4 = u64 [s1 + 0xc0]\n 36073: a3 = a3 & a4\n 36076: a2 = a2 | a3\n 36079: a0 = a0 | a1\n 36082: a0 = a0 | a2\n 36085: jump [t0]\n      : @1366 (gas: 10)\n 36087: sp = sp + 0xffffffffffffffc0\n 36090: u64 [sp + 0x38] = ra\n 36093: u64 [sp + 0x30] = s0\n 36096: u64 [sp + 0x28] = s1\n 36099: s0 = sp + 0x40\n 36102: sp = sp & 0xffffffffffffffe0\n 36105: s1 = a0\n 36107: i32 a0 = sp + 0\n 36109: a1 = 0x4\n 36112: jump [t0]\n      : @1367 (gas: 4)\n 36114: i32 a0 = a0 + 0x78\n 36117: a3 = s1 + a0\n 36120: a4 = a3 + 0x100\n 36124: jump [t0]\n      : @1368 (gas: 8)\n 36126: a0 = u64 [a4 + 0xd8]\n 36130: a1 = u64 [a4 + 0xe0]\n 36134: a2 = u64 [a4 + 0xd0]\n 36138: a3 = u64 [a4 + 0xc8]\n 36142: a1 = a1 | a2\n 36145: a0 = a0 | a3\n 36148: a0 = a0 | a1\n 36151: jump [t0]\n      : @1369 (gas: 4)\n 36153: a0 = 0x2078\n 36157: a3 = s1 + a0\n 36160: a4 = a3 + 0x500\n 36164: jump [t0]\n      : @1370 (gas: 4)\n 36166: a0 = 0x1878\n 36170: a3 = s1 + a0\n 36173: a4 = a3 + 0x400\n 36177: jump [t0]\n      : @1371 (gas: 4)\n 36179: a0 = 0x1878\n 36183: a3 = s1 + a0\n 36186: a4 = a3 + 0x700\n 36190: jump [t0]\n      : @1372 (gas: 6)\n 36192: a0 = u64 [a3 + 0x18]\n 36195: a1 = u64 [a3 + 0x10]\n 36198: a2 = u64 [a3 + 0x8]\n 36201: a3 = u64 [a3]\n 36203: a5 = reverse a0\n 36205: jump [t0]\n      : @1373 (gas: 9)\n 36207: a0 = a0 | a1\n 36210: a1 = u64 [s1 + 0xa8]\n 36214: a0 = a1 if a3 == 0\n 36217: a1 = u64 [s1 + 0xa0]\n 36221: a1 = a0 if a2 != 0\n 36224: u64 [s1 + 0xa0] = a1\n 36228: a0 = u64 [s1 + 0xb8]\n 36232: a1 = u64 [s1 + 0xb0]\n 36236: jump [t0]\n      : @1374 (gas: 9)\n 36238: sp = sp + 0xffffffffffffffc0\n 36241: u64 [sp + 0x38] = ra\n 36244: u64 [sp + 0x30] = s0\n 36247: u64 [sp + 0x28] = s1\n 36250: s0 = sp + 0x40\n 36253: sp = sp & 0xffffffffffffffe0\n 36256: s1 = a0\n 36258: i32 a0 = sp + 0\n 36260: jump [t0]\n      : @1375 (gas: 8)\n 36262: a0 = u64 [a4 + 0x78]\n 36265: a1 = u64 [a4 + 0x80]\n 36269: a2 = u64 [a4 + 0x70]\n 36272: a3 = u64 [a4 + 0x68]\n 36275: a1 = a1 | a2\n 36278: a0 = a0 | a3\n 36281: a0 = a0 | a1\n 36284: jump [t0]\n      : @1376 (gas: 2)\n 36286: a3 = a2 & 0x40\n 36289: jump @1380 if a3 != 0\n      : @1377 (gas: 1)\n 36292: jump @1379 if a2 == 0\n      : @1378 (gas: 6)\n 36295: i32 a3 = 0x40 - a2\n 36298: a3 = a1 << a3\n 36301: a1 = a1 >> a2\n 36304: a0 = a0 >> a2\n 36307: a0 = a0 | a3\n 36310: ret\n      : @1379 (gas: 1)\n 36312: ret\n      : @1380 (gas: 4)\n 36314: a0 = a2 + 0xffffffffffffffc0\n 36317: a0 = a1 >> a0\n 36320: a1 = 0\n 36322: ret\n      : @1381 (gas: 2)\n 36324: a3 = a2 & 0x40\n 36327: jump @1385 if a3 != 0\n      : @1382 (gas: 1)\n 36330: jump @1384 if a2 == 0\n      : @1383 (gas: 6)\n 36333: i32 a3 = 0x40 - a2\n 36336: a3 = a0 >> a3\n 36339: a0 = a0 << a2\n 36342: a1 = a1 << a2\n 36345: a1 = a1 | a3\n 36348: ret\n      : @1384 (gas: 1)\n 36350: ret\n      : @1385 (gas: 4)\n 36352: a1 = a2 + 0xffffffffffffffc0\n 36355: a1 = a0 << a1\n 36358: a0 = 0\n 36360: ret\n",
            "bytecode": {
              "object": "50564d0000cca7000000000000010700c1a001c0008003814c8c5429eea693f81e976c2a47cb5638031d6e7e460a43c54553b4e6a10ec9d36bf40443b2a766a42db9815a1e2efa877e5c0519ec4fe51c83c442ba392fca77e27a96c0a237ac310730ce86cab6918a9cee1f20395b3b80e1e34a4eb67d08a74e0dc354af37bd04b03f2522518a6d9314cf35a01b6f25119782e62a75888f78d1be28982eecaa761aff97e6ce55d5613eea1ab831552409f8051f0b480298fcab0000e8890423c78affffe7890423c78a00001876fbdc3875975752f4e33b24c3dceff4c6a46dc4173eb68630b623f1b6b5ef1d0584397d3391535eb615f58f25f5e154f9d3ae7110504aede2dc37ca8e481016d0c9006f760000e8890423c78a00001876fbdc3875f2a8b439f25bd8ebdf119a7090238fa225717e85c68e190f0982ba0d5cabfde394247a18b5e26bbe1d817609543b3c0451c960f58acf6b97ba06c2c9ba61c0412000000004812812000000000400000012000000200000002e000000340000003d0000004a0000005c0000006700000076000000790000008600000096000000a6000000b1000000c3000000ce00000063616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c6572636f64655f73697a656465706f7369745f6576656e746765745f696d6d757461626c655f646174616765745f73746f72616765686173685f6b656363616b5f3235366e6f777265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c050860463616c6cc05986066465706c6f7906c022a582a802c00a8e6a00b2016a03ff030704d904e104e005e5056a067506a206da0632078907ca0718085b086708ca08f3080709330948096d098b09b009810b8a0baa0bd40b6b0c340d3a0d3f0d600d870da40de70df00d1e0e880ef50e620f760fdc0f48109810e110ee1026112b11691113123d127d128212d2120f1341134a137c13fa1322149314fd144b1558158c1592159815e715fd15f2160c1729174917dc17f61713185e18e319f119641a6e1a8b1a941ab41a0d1b131b201b581bab1bb41cce1ceb1c0b1d621d6c1d721d961da71d3c1e461e631f7d1f9a1fbb1f122018201e2058208c209d200121072155215e21992100228522db22ec22c823fc2341244b2489249624b02436255d258d25ab25ed25f3251326442662266f2675267f26ac26c6262a2734278627b72774289b28cb28e9282b29312951298229a029ad29b329bd29ea29042a6d2a732a792a9f2aa92ac12aca2ae62a342b3a2b472b2f2c3c2c872cba2cee2c032d0d2db72de92def2df52d172e422e4b2e7f2e882ea82eea2ef02ef92e192f4e2f6c2f792f7f2f892f922fbf2fd92f0f301c30373066306c30a530d6303d3184312f328d3213338e33a533af33fd330e342b346c3481348b342135713577359135ae35fb350536693773379437bf3710381a3853385d387e38a938c738d838e2380a392e39383958398339a139ae39b439f4392b3a573a683a723a9a3a3c3b463b623b893ba73bb43bba3bed3b2d3c4b3c583c5e3c803cd33cee3c083d4b3dcc3d703e9d3ef43e773f813f9d3fbb3fd93fea3ff43f354062408040b140be401d416c4181418b4100424f4255426e428b42d742e1422844a944ff4457459a45ae45b845d545de45fe4530463a4665468e46c54605470f47424748477e47cb47e8471f482d4833485c4862489b48af48b948d948e248024940494a4963498649d749e449ff492f4a434a4d4af44a014b1f4b5e4bcb4b334cc74c174dd84dfe4d494e524e7c4ea24e6f4f914f1f5045509350e050e95009516e517751975109520f52be52df52105316531c5362538b53e453ea5343546e54995474557a559455b155d155135619563356505656565f5665566b5671568456ca56445752579257ac5776587c589658b358d35815591b59355952595859615967596d5973598659cc599a5ada5ae05a355b615b6b5b8b5b945bb45bfb5b055c495c7e5ca05cf25c175d815d8b5dab5db45dd45d175e1d5e4a5e7e5ea05ead5eb35ed55e0a5f255f585f7d5f875fa75fb05fd05f1e602b60316051608660a860b960c360d060ea6003610d612a6133615361756182618861a861df61016212621c622962336249625662aa6245638863cc63d66365647e64e464f9640365206529654965776588659265ab65cf65136628663266a766b366d96601673167536787679167ae67b767d767f96706680c682c686068826893689d68aa68006915691f699869d669dc69e269226a4a6a686aaf6ab96ade6a006b326b586b806ba66b176c4f6c836c8d6cfc6c5f6de16d046e426e7d6efc6e326f776fd56fdb6fe46f007006701370197022703d70437065708070867096709c70a570c070c670d370d970e270f770be71f4710d72317236739a73d97316746d748d74fc741a7563756d75aa75d975f775557675768f76c176f87616775c7769776f779477bc77d977e677ec77f67710783c785a78777884788a78a978d278ef78fc7802790c7922794e796c79897996799c79bb79e879057a127a187a227a707a987ab67ad37a2f7ba57bcd7beb7b087c187c217c5d7c8a7ca77cb77cc07cd87cf27c2d7d7a7dd97d3a7ea37ee37e217f307ffe7f0880f3805b81a081e98130824a8272823e839383a183b783df8362849284fd840d863b86598663869511e87b10107b15087b163306480102390548010251051c3307800103837783680a070139074801022003480102ac5710821010821508821695111832000039084801025108e608330780010383770a0f28d9089511f07b10087b156489647533082064975010022c057c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b19828510828618330820501004e4036f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33070a08821738821830821928821a206f776f886f996faa7b6a187b69107b68087b679551a082105882155082164895116032009511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a109551a0821058821550951160320082186f888219086f99821a106faa821b186fbb7b1b587b1a507b19487b18408218206f888219286f99821a306faa821b386fbb7b1b787b1a707b19687b18608379836a8317403308020a06955160ff8210980082159000821688009511a0003200951120ff7b10d8007b15d0007b16c8009515e0008411e082bc7b1c4082bc087b1c4882bc107b1c5082bb187b1b585012082f87007b183850100a8f016f687b187882186f887b18708218086f887b18688218106f887b18608218186f887b1898008218206f887b1890008218286f887b1888008218306f887b1880008218406f887b18b8008218486f887b18b0008218506f887b18a8008218586f887b18a0008379811a388317603308030a06955120ff8210d8008215d0008216c8009511e00032009511e0fe7b1018017b1510017b160801951520018411e082c67b166082c6087b166882c6107b167082cc187b1c7882bc7b1c3882bc087b1c4082bc107b1c4882bb187b1b5050120c5586007b185850100eb5006f687b18980082186f887b1890008218086f887b1888008218106f887b1880008218186f887b18b8008218206f887b18b0008218286f887b18a8008218306f887b18a0008218386f887b18d8008218406f887b18d0008218486f887b18c8008218506f887b18c0008218606f887b18f8008218686f887b18f0008218706f887b18e8008218786f887b18e0008379811a58831780003308040a069551e0fe8210180182151001821608019511200132008b7910520931c8780883881f8488e05638000001253309500102390a500102ae8a093d085001020133086001028377c887073200009511f07b10087b158475010a03013d074c0102510507501010095010126803951160fd951700027b7098007b7590007b7688009515a0028411e04921b8014921b0014921a8014921a0018317a0010a11018217b0018218b8018219a801821aa001d49808d4a707d487075207600239064c010297672098772095771f8477e09578a000d87807492198017b1880017b17880194777b1790013307409518800150101429fb3307a000646850101621ff8377646833090a01015316401f02492158014921500149214001a000951760019518400149214801501018f968821778017b1718821770017b1710821768017b170882166001492118014921100149210001c00095172001951800014921080150101ac168821a08821910979720987720d4a608d487075107be01821730017b1738821728017b1728821720017b17301407ffffffff000000007b17207b16e0007b1ae8007b19f000330780009518e0008219187b19f80050101c61fa330660010383670a043a0768010339087001033a096001036f77977a206f88988820d4a8087b18189877206f98978620d467077b17109886204921d8014921d0014921c8014921c001019517c0009518c00150101efcfa8017d4009777208218d800d467074921f8014921f0014921e8014921e00101951900027b98188218107b98088218187b987b97109517e001951800025010203cfb8217288479ff8217308478ff821738821620d27606d46807d49707510776140700000000ffffffff7b1738951700024917384917304917284917209517a0007b1830951820027b19285010226dfa8217b8008218b0008477ff821938d29808d46808951a0002491a58491a50491a48491a408219287ba9688219307ba9607ba7787ba8709517400295186002501024abfa95178000330840501026f2f782179800821890008219880082168000d49707d48609d47909989920d48707977720d4970751075e003308600102838833070128a60033086001028388330701289900491150491148491140140700000000c8f5bc149518407b17583307501028c9f8390850010256181f0b20035001022001330860010283883307013309040a0e016467330850102aa3fc8377330833090a019517603308800050102c52f7821778821970821a68821b603e079801033e099001033e0a8801033e0b8001032818f76467330850102e63fc8378330733093300300a0e280a33093300300a0e01951110fe7b10e8017b15e0017b16d8019515f001951170d98411e0641633023295697818014929e0064929d8064929c80680003307409568401f4929d00650103408f833074c01027b67f80039074c010255170407282f6295670020837760ff33083300360a0201956a781881a7040752475bcba58d0a282a165147346662993d079569782052470a9e38a80a28ef235247b00de3d00a285c205247f9530fdb0a28f3165147074e71e9ca0f51475f53cc0e1d03514786e72a226c0b524754ec9b310a28171e52471515c5390a28cf1a5247b836cc480a28b6135247aef7914a0a2810135247f498bb4c0a28ce1c5147036f124f0a28fa2549294002492938024929300249292802956700208377a0020a11956a78200195ab000282b73882b84082b93082ba28d49808d4a707d4870751070628d7418267f80081775617630728db41956700208377c0023308040a020195697820959b000282b76082b85882ba4882b950d487077b6af80088a800019498947852080628b541956700208377e0023308240a020195697820959b000282b7800082b87882ba6882b970d487077b6ae80088a8000194989478520806288e4195670020837700033308440a0201956778208272a00295780002828b9800828c9000828a8800d42c07d4ba08d48707520706286a417c68f8007c69e800ab980628ac417b6af8007b6cd0007b6bd8007b62e0007b68c0005418010728ad405319030728a6407b69800033076001037b67c80083777b67a0003300380a048269c80033023a28377b8269c80050123a307b49298004959b00047bb8787bb7709568ff079588e1047bba68330750103ce9f59568ff079588794928600449285804492848040264893307209568ff079588c1044929500450103ebff59517e08477e07b67f00064713309500102390750010256173f0b200350010240017b69789517e08479e07b69b80064913307600102837783993308407b6788000a09018269b800829718829810829b08829a6f796f8c6fbb6faa8268f0007b8a187b8b107b8c087b899593028267c0007b6bb8007b6a98007b6cb0007b6390007b69a80051070628f0249567ff07957761045010401af69567ff079577798270f003827200048278e803827cf8038264d000d34007d8400b7b68708269f800d898087b6868da780b8263d800d83c088269e000d3920ad892077b6860daa807d33c08d4a808da8b07510706289c45c93c07c99208826960c99808d8b709c99808c9b707c94009826a68c9a909826a70826bf800c9ba0a956b782095bc00027bcac8007bc9d0007bc7d8007bc8e000956840238267f0003300a80128f3f5492a6007492a5807492a5007492a4807956700208377c03300420a11330244282380005012441f8000501246f17e51070628f43f8267f80081775617230728f83f9567000333004833026004289a7f8267000382680803806910034926f8027b69f0027b68e8029568e0027b67e002330750104a0cf44926d8024926d0024926c002023307209568c0024926c80250104ceff39517e08477e07b67d8006471390850010256183f0b200350010240019517e08479e07b69f800649133076001028377839933084033004e0a09826af800330250287c7f826af800501250757f7b6ce8006f8b7b6bf0006f997b69e0006fa77b67f8008268d8007b87187b89107b8b087b8c9567a00250105267f48267b8027b67d8008267b0027b67d0008267a8027b67c8008267a0027b67c0008267e8009577018878018269f000c8980895697818959a00077ba870d478087ba7688887018268e000c887077ba778d887078268f800c887077ba78000956780029568e01f501054fdf3826798027b67b800826790027b67b000826788027b67a800826780027b67a0008268e800958702d88708826af000c88a09d8a90ada880a8268e000c88a0ad88a08826bf800c8b808956b781895bc00077bc8a0007bca98007bc990007bc78800956760029568002050105690f3826778027b679800826770027b6790008268e800958703d88708826af000c88a09d8a90ada880a826868027b68e8008268e000c88a0ad88a08826bf800c8b808826b60027b6be000956b781895bc00077bc8c0007bcab8007bc9b0007bc7a800956740029568202050105823f3826740027b6788009567200233084050105ae3f095670002827b38827c30827a28827920d4ba07d4c908d47808988820d4c707977720d4870751070628633c8267c0007b6700028267c8007b6708028267d0007b671002956800028267d8007b67180264977b69f8007b6af0007b6bd8007b6cd00050105cb7f18268f8008267d800826ad000d47a0a140b00000000010000001407e0ffffff00000000d878078269f000949794a752070628f43b8387208268a000956c00017bc8e0008268a8007bc8e8008268b0007bc8f0009568e0018269b8007bc9f8007b6ad8007b6bd00050105e4bf1826bd800826af0008268f8008267d0009577c0d8780794a794b7520706289c3b8387408268e000956a00017ba8c0008268e8007ba8c800826890007ba8d0009568c001826998007ba9d800501060fbf08269f8001407a0ffffff00000000d879078268f00094878268d800948752070628493b826788009777209878208397604926b8014926b0017b68a0019568a0014926a801501062b2f0330880008267f800501064a8f4837833098000330733009a010a0e283b1f956778204927c0034927b8034927b0034927a80395670020837720043300660a1133026828a57a501268a27a82b7b80082b8c00082b9b00082baa800d49808d4a707d4870751070628113c8267f80081775617430728153c9567ff079577c10733006a3302600428917b9567ff07957779957900078298587b68c8008298507b68d8008297487b67d00095670020837740043308240a020195677820957c000382cbe00082cad80082c9d00082c8c8007b69f0007b6be000d4b9077b68f800d4a808d478089888207b6ae800d4a707977720d4870751070628a33b8267c8009777209877209569ff07959979492940078268d000959a00077ba8288268d8007ba8309568ff079588a1077ba738330750106c80ef9568ff079588794928200749281807492808070364893307209568ff07958881074929100750106e56ef3308500102390750010256173f0b200350010240019517e08479e07b69c80064913307600102837783997b68d8003308407b67d0003300700a09330272285b7950127258797b67b0006fa77b67a8009517e08477e07b67c80064719569ff079599798267e0007b9700078267e800959a00067ba7f8008267f0007ba7f0009568ff07958861078267f8007ba7e8003307501074c1ee9568ff079588798267a800958900067b97e0008267b0007b97d8008267b8007b97d000648a3307209568ff07958841078269c0007ba9c80650107684ee8268d800818756173f08480840019517e08477e07b67f800647183793308408267d0003300780a09826af80033027a28227a826af80050127a1b7a7b6ce0006f8b7b6be8006f997b69f0006fa77b67f8008268c8007b87187b89107b8b087b8c9567ff079577210750107c09ef9568ff07958879958900068297c0007b67d8008297b8007b67d0008297b000648c7b67c8008267e0009577018878018269e800c89808d48709889901826af000c8a909d8a90a826bf800c8ba0a82cba8067b6bf800956b782095bc00037bc8f0007bc7e8007bc9f8007bba00049567ff07957701079568602450107e8bee9568ff07958879828790067b67c000828788067b67e0009567ff079577e1063308405020800038ec9569ff079599798292800695980006828c78828b70828768d42b0ad4c708d4a808988820d4ca0a97aa20d4a80851080628af378268f8007b9848068268c8007b9850068268d0007b9858069568ff079588c106826ad8007b9a60067b67f0007b6be8007b62d8007b6cf8005020820001ed8269e8008268f0008267f800826ad800d47a0a140b00000000010000001407e0ffffff00000000d87807949794a7520706283d378387209568ff079588797b6af800648a49284006492838068268e0007ba828069568ff079588a106492a30067b6be0005020840097ec8269f0008267e0009577c0d879078268e80094878268f800948752070628e7367c67c0008e78839740956aff0795aa79492a2006492a18067ba808069568ff0795888106492a10065020860049ec3308608267f000502088003ff08378330960330733009a010a0e28d21a492ae007492ad807492ad007492ac8079567002083774033008a000a1133028c0028ca7750228c00c77750228e008c7751070628f0378267f80081775617030728f437956700208377600a0a9567782082787b68b800957900ff8298f8007b68b0008298f0007b68f8008297e8007b67f000956740033308405020900073ea956b000382b75882b85082b94882ba405022920045735107062801367b6a788263b00068379577408260b8006809da07098264f00068479577408262f8006828da270895878000d4030adaa709d8870c94ac8ecb8897f000857a01daca0b88b7019577ff9ab89accc9ac0a9a99ef007b68d8008e8c8e78da7c088eac7b69c80088990001859901dbac09dbb809d43408d4020bd4b808888801d49808644b948b51080628bb3c8268c8008588ff008269d800d49808d47a09d4980852080628a03c826bc80095b9017b69e800889801c8a8087b68e000d49808888801826ad800c8a8087b68d000d8a808c887077b67d8009ab8ff007b68a0009a8980008267f0008268f80050209400d2767b6790007b68a8008267b0008268b8008269a00050209600de767b6788007b6880008267a0009579808267f0008268f80050209800c1767b67707b68688269a000889780007b6798008267f0008268f80050209a00a1767b68c0008268e0008269d800d489098268e800826ad000d4a808d49808826a980093a77b67c80052080628be3b64a98267a80082688000d4870764ac826868da98078269b800649a64988269a000db970a7b6aa80082679000826a8800d4a707826a70daca07826bb00064badb970a7b6aa0008267c00093c77b67c000492690008051018267e80095798064b750209c00e8757b6798007b6880008267f0008268f8008269e80050209e00ce757b67707b6888008268e8009a8980008267b0008268b8005020a000d77582698800d498088269e800889a80007b6a8800826b8000daab08826bf800db980b7b6bf800826870d4870782689800daa8078268f000db97087b68f0008267b0008268b8005020a20066758264f0008263f8004926b8004926b00082698800939893977b679800826a900095a9ff7b6988008ea99599ff7b6980000198493f973a01d4a909974a018264a800984b3fd4ba0a7b6af800826080006437d39003d89002826b8800d8ab0cdb320c978801826b980098ba3fd4a8087b68f000987a3f97b701d47a0a974701826ba00098b83fd4870297b801826bc00098b33fd4380397b801826bc80098b43fd4480897bb018267b800d47b0b7b6bc8008267b000d478087b68c000d437087b68a000d427077b67a800c9a007d8c707d8a008826cf000c9c00bc98b0bc97b0b99b03f82679000d270078268f800c97804d87808c989039498c98a077b679800d88a08c98c08826ae800826ce000d4ca09889901826bd000d89b02c99b0988ab01c9bc0c826bd800c92b0b95aaff7b6ce0007b6bd800d4bc027b6ae800d49a0bd42b0a840b017b6bb8007b69d0004926b000520ae0fe28833949298006492978064929700649296806956700208377e0063300a4000a11956a782095ab00063302a60028c673956a782095ab00065022a600bb7351070628b9338267f80081775617230728bd3395670020837700073308040a020195677820957c000682c8a00082c9980082ca900082cb88007b68587b6a48d48a077b69507b6b40d49b08d48707520706288d3333076001037b67800083777b67283300a8000a04826980003302aa00282b6c826980005022aa00246c49294006959b00067bb8387bb7309568a01e7bba2833075020ac0009e73302ae0095687818014928200649281806492808060464893307209568801e492910065020b000e0e69517e08477e07b67f80064713309500102390750010256173f0b200350010240017b69301407ffffffff000000007b67609517e08479e07b69f00064913307600102837783993308407b67383300b2000a093302b40028b66e5022b400b36e837760fec867075020b60066e7956778188079e805826760ab790628ef329598017b68708887017b6768d487078877017b67789567401e7b69f0008268f8005020b8002ee7956a781880a7cc0595ab000582b8d80097772082b9d00082bae000826b78d4b808826b70d4b707826b68d4b909956b782095bc00067bcac0007bc9b0007bc7a8007bc8b800956820278267f8005020ba005ce78268f0005428fe000828bf3295670020837740070a0a01956778208274e006827ad8067b6ab8008272d0068270c806684768a8958940db470968276808958840db270895878000d44a0adaa709d8870c94ac8ecb8897f000857a01daca0b88b7019577ff9ab89accc9ac0a9a93ef007b68f8008e8c8e78da7c08883c000185cc018ea9dba90cdbb80c7b64a000d442086424826bb800d4b009d49808888801d4c8086402948051080628c3278538ff00826cf800d4c808d47a09d4980852080628ac279539017b69f000889801c8a8087b68e000d49808888801c8c8087b68d000d8c808c887077b67d8009a38ff007b68c8009a89800064277b62b00064487b64a8005020bc0010717b67c0007b68f8008267b8008268a0008269c8005020be001c717b6790007b6888008267c8009579808267b0008268a8005020c000ff707b67207b68188269c800889780007b6798008267b0008268a8005020c200df70826b98008262d000826cd8008269e000d49c0c826af000d42a0ad4ca0a93b77b67e800510a0628dc24330c28d6264929e0014929d8014929d0014929c80195670020837740023300c4000a11330700203302c60028b36f330700205022c600ac6f5022c800b26f5107062858318267f800817756170307285c319567ff07957741023308405020ca00c4e2956aff0795aa7995ac00015022cc00c36e51080628572e3a08a00002492ac001492ab8017ba8a8019568ff0795882102492ab0017b67f8003300960128bce3492900014929f8004929f0004929e80095670020837760010a11956a78200182a7f80082a8000182a9f00082aae800d49808d4a707d4870751070628df308267f80081775617230728e33095670020837780013308043300ce000a02330700203302d00028d96e330700205022d000d26e82b72082b81882b910d48707889801947852080628b73082a708017b6738956700208377a0010a0a019567782082744001827a38017b6ab0008272300182702801684768a8958940db470968276808958840db270895878000d44a0adaa709d8870c94ac8ecb8897f000857a01daca0b88b7019577ff9ab89accc9ac0a9a93ef007b68f8008e8c8e78da7c08883c000185cc018ea9dba90cdbb80c7b64a0007b62b800d442088264b000d44009d49808888801d4c808640b948b510806283a188538ff00826cf800d4c808d47a09d4980852080628231864029539017b69f000889801c8a8087b68e000d49808888801c8c8087b68d000d8c808c887077b67d8009a38ff007b68c8009a89800064077b62a8008268b8005020d200616e7b67c0007b68f8008267b0008268a0008269c8005020d4006d6e7b6790007b6888008267c8009579808267a8008268b8005020d600506e7b6780007b68788269c800889780007b6798008267a8008268b8005020d8002f6e826b98008262d000826cd8008269e000d49c0c826af000d42a0ad4ca0a93b77b67e800510a06284d15330b284c179567782049278003492778034927700349276803956700208377e0033300da000a113302dc0028b96b5022dc00b66b5022de008e6d51070628012f8267f80081775617030728052f956878204928a003492898034928900349288803019567ff0795776106956800245020e0002ee29568ff07958879958900058297f8007b67e8008297f0007b67f8008297e8007b67f0009567ff07957741063308405020e200cedf956aff0795aa7995ac00055022e400cd6b51080628612b8268e800978820988920492ac0058268f00095ab00057bb8a8008268f8007bb8b0009568ff07958821067bb9b8007b67f8003300960128b5e04929c0054929b8054929b0054929a80595670020837720063300e6000a113302e800283b6c5022e800386c82b7b80082b8c00082b9b00082baa800d49808d4a707d4870751070628212e8267f80081775617030728252e956778204927e0054927d8054927d0054927c8059567401a956840265020ea0031e13302ec009568781801958a000182a7d80082a9d00082a8c8007b67e0009777209877207b68e8007b69d800d49808d4870752070628dd2d9567201a3308405020ee00c1de956b781882b3c00195b80001828cb800828ab0008287a800d43a09d4c708d49808988820d4c909979920d4980851080628382a492b9801492b9001492b88011402000000008cfb5cef9568001a7bb2a0017b67f8007b63d0007b6cc8007b6ac0005020f00094df33076001037b67f00083777b67b8000a0401826bf8008267d0008268c800d487071408fcffffff00000000d88b088269c0009498947852080628c8298269f00082970881981082996f77977a206f88988820d48a0a9877206f98978920d4790998882083b704956c7818492c800195cb00017bb8787bb9709568e0197bba685020f2000fdf0a0b8267d8006f779778208269e0006f99989920d498088269e8006f99979a20987720d4a707989920826af0007ba7087ba87aa91095677820492700064927f8054927f0054927e8053308248267f8005020f400bce27b67e8003308208267f8005020f600abe295697820959a0006481a0820491a40ff491a38ff491a30ff491a28ff8268f00097882098882014090000000008000000d49802956860269788209888209569a026979920d4890a8268e80097882098882014090000000024000000d4980b97772098772095688026978820d4780c3308ff3309ff64270a0151070628ea270a0d01330c20aec70d0a0d647c9569781828079569781801826af8008262d0008267c8008268c0004926e0007b6ce800959b00017bbc087bba28492910017bb830492918017bb738492920019567a019956880197b9240015020f800354d826ae0008ea78268e800888820858801dba7088ea78ea9daa709d4aa07da780952090628842f956760198268f8005020fa005edc95677818827800018279f800827af000827be8007b68f8007b6ae000d48a077b69e8007b6bd800d49b08d487075107608267b8003300fc000a048269f0003302fe00284e628269f0005022fe004762826bf8007b9bc000826be8007b9bb800826be0007b9bb000826bd8007b9ba8004929e0007b98d8007b97d00095674019956820197b9ac80050200001ae4d9567001933084050200201c4db956a781882a7a00082a8980082a9900082ab8800502204016766510706284e278267d8007ba7688267e0007ba7708267e8007ba7789568e0188267f8007ba7800064b77b6bf8003300960128addc491940491938491930491928956700208377a0000a11956a78200182a73882a84082a93082aa28d49808d4a707d4870751070628992a8267f800817756174307289d2a95678005330006013302600428c467826780057b67f000826788057b67e800806790057b67e000956760053300080133026a04283468826760057b67f800492658058267e0007b6750058267e8007b674805956840058267f0007b674005330750200a0107dc49263805492630054926200507330720956820054926280550200c01e9db3308500102390750010256173f0b200350010240019517e08479e07b69e00064913307600102837783997b68f0003308407b67e80033000e010a0933021001288761502210018461492618054926100549260805956800058267f8007b67000533075020120181db8267c000956a00047ba7f8008267c8007ba7f0008267d0007ba7e8003307209568e0048269d8007ba9e0005020140150db8268f000818756173f08480840019517e08477e07b67f80050221601f762330018010a0933021a0128b76150221a01b4619567c00450201c0107dc8267d8047b67f8008267d0047b67f0008267c8047b67e8008267c0047b67e0009567a00433084050201e01aed9956b000482b7b80082b8b00082b9a80082baa000502220017c625107062838258267e000956900047b9780008267e8007b9788008267f0007b979000956880048267f8007b97980064a77b6af800330096012890da492900024929f8014929f0014929e8019567002083776002330022010a11330700203302240128eb653307002050222401e46582b7f80082a8000282b9f00082bae800d49808d4a707d487075107062882288267f80081775617030728862895677820492720024927180249271002492708029567ff079577a102956880225020260100db9568ff07958879958900028297387b67e8008297307b67f8008297287b67f0009567ff079577810233084050202801a3d8956aff0795aa7995ac000282cb2082c81882c91082c708d49b0bd48709d4b909989920d4b808978820d49808510806281b248268e800978820988920492a00028268f00095ab00017bb8e8008268f8007bb8f0009568ff07958861027bb9f8007b67f80033009601286fd949192049191849191049190895670020837780000a11956a78200182a71882a82082a91082aa08d49808d4a707d4870751070628dc288267f8008177561743072892279567600433002a0133026004288664826760047b67f000826768047b67e800806770047b67e0009567400433002c0133026a0428f664826740047b67f800492638048267e0007b6730048267e8007b672804956820048267f0007b672004330750202e01c9d849261804492610044926000405330720956800044926080450203001abd83308500102390750010256173f0b200350010240019517e08479e07b69e00064913307600102837783997b68f0003308407b67e800330032010a093302340128495e50223401465e4926f8034926f0034926e8039568e0038267f8007b67e00333075020360143d88267c000956a00037ba7d8008267c8007ba7d0008267d0007ba7c8003307209568c0038269d8007ba9c0005020380112d88268f000818756173f08480840019517e08477e07b67f80050223a01b95f33003c010a0933023e0128795e50223e01765e9567a00350204001c9d88267b8037b67f8008267b0037b67f0008267a8037b67e8008267a0037b67e000956780033308405020420170d6956b000382b7980082b8900082b9880082ba8000502244013e5f51070628fa218267e000956900037b97608267e8007b97688267f0007b9770956860038267f8007b977864a77b6af800330096012856d78267f80081775617030728c02549296005492958054929500549294805956700208377c005330046010a113302480128cf6250224801cc6250224a01b861520706289a2533076001037b67e00083777b67b80033004c010a048269e00033024e0128f05b8269e00050224e01e95b4919407b98387b97309568a0187b9a28330750205001d3d63302520195687818014918204918184918080264893307209568801849191050205401aed69517e08477e07b67f80064713309500102390750010256173f0b200350010240017b69b0009517e08479e07b69f00064913307600102837783993308407b67c000330056010a0933025801288f5e502258018c5e837760f8c8670750205a013fd79567781882787b68d000957900ff8298f8007b68f0008298e8007b68c8008297f0007b67e8009517e08477e07b67d80064719567782049278005492778054927700549276805956700208377e0050a110195677820957a000582a97082a8688272800582ab78826ce800c89c0c8267c800c87803d88308c88c0cd39c0ad89c09daa8098268f000c8b8088260d000c80202d8b80ac82a0ac88909d88908c88a04826ae800d3ca08d8ac0bd87307db8b07826af000d8a902d3400bd80408dab208d39a0ad4ba0adba8078268d8007b837b8c087b89107b84185107062820258267f80050205c01d8d69567401833084050205e011ed495677810957900078298e0007b68f0008298d8007b68e8008298d0007b68d8008297c8007b67f800956778204927a0054927980549279005492788059567002083770006330060010a11018267f0008268d800d487078268f800648c8269e800d49808d47808988820d49707977720d4870751070628501f50226201856082b7880082b8900082b9980082baa000956b78107bbac00795ba00077ba9b8007ba8b000956820187ba7a80064c750206401a6d48267b800330066010a048269e00033026801286d5c8269e00050226801665cd4780298aa206f99979820d4a8089899203a0a200002956778107b7aa0073a0a2800023a0b3000023a0c3800027b7a9807957a00077bab9000492780077bac88007ba9787ba87033082095690018956ae0177b7268078267f80033006a01951160ff7b1098007b1590007b1688009515a0008411e082ab7b1b3882ab087b1b3082ab107b1b2882aa187b1a20829a7b1a18829a087b1a10829a107b1a088299187b19648633000628ddd733078268c00033090a0e281d3e4929e0044929d8044929d0044929c804956700208377400533006c010a1133026e0128d55d50226e01d25d502270012f5f51070628be238267f80081775617430728c22395678015330072013302600428e35e95687810828708057b67f000828710057b67e800808718057b67e000956760153300740133026a04284f5f330276019569781001959a000482a7e8007b67f8004929e0048267e0007ba7d8008267e8007ba7d000956840158267f0007ba7c80033075020780115d333027a0195687810014928c0044928b8044928a804066489330720956820154929b00450207c01ecd23308500102390750010256173f0b200350010240019517e08479e07b69e00064913307600102837783997b68f0003308407b67e80033007e010a0933028001288a585022800187583302820195697810014929a0044929980449299004956800158267f8007b9788043307502084017bd28267c00095687810958900047b9780008267c8007b97788267d0007b9770648a3307209568e0148269d8007ba968045020860146d28268f000818756173f08480840019517e08477e07b67f80050228801ed5933008a010a0933028c0128ad5850228c01aa589567c01450208e01fdd2330290019568781001958900048297607b67f8008297587b67f0008297507b67e8008297487b67e0009567a014330840502092019bd0956a781095ac000482c74082c83882c93082cb28502294013e5b51070628251c8267e00095a900047b97088267e8007b97108267f0007b9718956880148267f8007b972064b77b6bf8005020960185d13308208267f800502098017bd58378330920330733009a010a0e280e330920330733009a010a0e015147b327d0610a289a2149294003492938034929300349292803956700208377a00333009c010a1133029e0128655b50229e01625b82b73882b84082b93082ba28d49808d4a707d4870751070628b5218267f80081775617030728b9219567ff07957741053308405020a001b5cf9567ff07957779957900048298e0007b68f8008298d8007b68f0008298d0007b68e0008297c8007b67e8005020a20130cf8267f8008268e000d487078268e800648a8269f000d49808d47808988820d49707977720d4870751070628011b3a098001033a088801033807900103956bff0795bb79492bc00495bc00047bc7b8007bc8b0009568ff07958821057bc9a80064a75020a40157d03308208267e800330098012849d49517e08478e06481d89307c87c02d8c209da7709c8b909d8b907c8a7077b82087b837b89107b87189567ff079577a1047b68705020a60102d19568ff0795887995890004829a4082803804829730829828826be000d3ba097b6a50d8ba0c8263d800d8300a7b6a58da9a0c8264d000d3470a7b6760d847077b68688262f800d82802daa207d33008d49808da870c510c0628b120c93008826950c9b909826a58c9a909d8780ac9a909c97808826760c94707c92707826a68826bf800c9ba0a956b782095bc00027bcaa8007bc7b0007bc8b8007bc9c000956820238267705020a801d8d08267e800847703826ab8008269b000826ca8005107bf005217014a019517e08478e06481826b9000d8cb07c8790cd89c09da7709c8a909d8a907826a9800c8a7077b68f0007b8c087b8b7b89107b87189567ff07957741045020aa01f9cf9569ff07959979959b000382b7d00082b8c8008292e00382bad800826bd000c87b0b826cf800c88c0cd88c08c88b0bd37b09d87b07da98078268d800c8a8088269e000c89202d8a809c82909c88707d88708c8980895697820959a00027bace8007babf0007ba7f8007b980003330760232883009567ff07957721048268f0005020ac0173cf9569ff07959979959b000382b7b00082b8a8008292c00382bab800826bd000c87b0b826cf800c88c0cd88c08c88b0bd37b09d87b07da98078268d800c8a808d8a809826ae000c8a202c82909c88707d88708c8980895697820959a00037bac087bab107ba7187ba8203307802301c876088267f0005020ae0179cf286f8267a0003300b0010a048269c8003302b2012895568269c8005022b2018e56956bff0795bb798269e00095bc00037bc980008269d8007bc9788269d0007bc9708269f8007bc968492ba0037bc898007bc790009567ff07957701049568ff079588e1037bca88005020b4013a3e9567ff079577c1033308405020b6014ccc956aff0795aa7995ab000382b76082b85882b95082ba485022b801175551070628d3178267f8009569ff07959979959b00037bb7288267d0007bb7308267d8007bb7389568ff079588a1038267e0007bb74064a77b6af8005020ba0128cd8267a0003300bc010a048269c8003302be012894558269c8005022be018d55956cff0795cc79492cc002492cb802826a80007bcaa802826ac0007bcac8023a0a8000023a0b880002492cb002492ce0027bca20037bcb18033a0a9000023a0b980002492cd802492cd0027bca10037bcb080395ca00027ba9f8007ba8f0007ba7e80064c73308209569ff0795998103956aff0795aa6103956bff0795bb4103956cff0795cc2103492700038267f8005020c00173cf33078268880033090a0e28b3368267f80082698800d49707826978dab9078263a000643a8262c800db270a7b6af8008267c00082699000d4970782698000dab907826cb00064cadb270a5022c20189565020c4014d587b6790007b6880008267a8008268b8008269f0005020c60133587b67787b6888008268f0009a8980008267b0008268a0005020c8013c5882698800d49808826af00088ab80007b6b880082698000dab9088269b800dba8097b69b800826878d4870782689000dab8078268a800dba70864a97b68a8008267b0008268a0005020ca01c957330b330c5022cc019e558263b8008264a800017b6bb80098493f973a01d49a02974a01826bf80098bb3fd4ba0a7b6aa8008269880064847b62b000d329086430d82903826b9000d8ab02db8302974801987a3fd4a8087b68a000980a3f977701d47a0a8267f800977701826bc00098b83fd4870097b801826bc80098b33fd4380397b801826be80098b43fd4480897bb018267b800d47b0b7b6be800d4c8087b68c800d43c087b68c000d40c077b67f800c9a907d82707d8a9088262a000c9290bc98b0bc97b0b99bc3f82679800d2c7078268a800c97804d878088267b000c987039478c98a07d88a08c98208826af0008260e000d40a09889901826bd000d89b02c99b0988ab01c9b000826bd800c92b0b95aaff7b60e0007b6bd800d4b0027b6af000d49a0bd42b0a84cb017b69d000330c520ae0fe8267e800977701d47b0b0184b7ff826838aa7806281c1933076001037b67b00083777b67a8003300ce010a048269b0003302d001284f4f8269b0005022d001484f49298001959b00017bb8787bb7709568ff079588e1017bba6833075020d20100ca9568ff079588794928600149285801492848010264893307209568ff079588c101492950015020d401d5c99517e08477e07b677064713308500102390750010256173f0b200350010240019517e08479e07b69f80064913307600102837783997b68e0003308407b67e8003300d6010a09826af8003302d801285355826af8005022d8014c556f8b6f986fa98267707b69f0007b79187b68f8007b78107b6bd8007b7b087b6cd0007b7c8267a8003300da010a048269b0003302dc0128654e8269b0005022dc015e4e49294001959b00017bb8387bb7309568ff079588a1017bba2833075020de0116c99568ff079588794928200149281801492808010464893307209568ff0795888101492910015020e001ebc88268e000818756173f08480840019517e08477e07b67c8005022e20192503300e4010a09826ac8003302e601283d53826ac8005022e601365383bb78c86b0b95bc00017bca607bc9587bc8507bc7489567ff07957761019568c0215020e8017cc99567ff079577798077e8007b67a0008267a8003300ea010a048269b0003302ec01288a4d8269b0005022ec01834d4929e0007b98d8007b97d0009568ff07958841017b9ac80033075020ee013cc89568ff079588794928c0004928b8004928a8000564893307209568ff07958821014929b0005020f00111c88268e000818756173f08480840019517e08477e07b67c8005022f201b84f3300f4010a093302f601282a525022f60127527b6798006fa77b6790009517e08477e07b67c80064719569ff079599794929a00049299800492990009568ff07958801018267387b97880033075020f801a0c7826790009568ff079588797b878000826798007b87788267b8007b8770648a3307209568ff079588e1008269c0007ba9685020fa0169c78268e000818756173f08480840011407ffffffff000000007b6798009517e08477e07b67c0005022fc01024f3300fe010a09826ac00033020002283552826ac000502200022e528268c8007b8a187b89107b8b087b879517e08477e07b673064719567ff079577c10050200202ecc7330a01491660491668330c9568ff079588798287607b6790008287587b6788008269d000c8a909d8a907826bd800c8b7077b69587b6750d49707d8a7078269f800c897077b6748d897078269f000c897077b67408287507b6780008287487b677801330801dac8088267a000d8a707857701330901dac7093307db780951092e044926b8004926f0007b6af8008267a800330004020a048269b00033020602287c4b8269b00050220602754b4919407b98387b97309568ff079588a1007b9a2833075020080232c69567ff07957779491720491718491710647a3307209568ff0795888100491a080350200a020bc68268e000818756173f08480840019517e08477e07b67d80050220c02b24d33000e020a093302100228f54e50221002f24e9567ff079577798268f0007b787b78f8956700107b7868f89568ff079588618267f800956900107b9760f8330750201202a7c58267c000956800107b8758f88267c800956800107b8750f88267d000956800107b8748f83307209568ff079588418269d800956a00107ba940f85020140267c58268e000818756173f08480840019517e08477e07b67d800502216020e4d330018020a0933021a0228474c50221a02444c958c00017bca687bc9707bcb787bc780009567ff079577219568e02150201c0206c695670010827728f88477ff005207060195670010827720f88477ff826af8005107fd008269f0008e9788a80001858801db97088e978e9bda970b8267b800da780b7b6bd00083a980330701330850201e0217517b67f0007b68d8008268f8008d898000330701330850202002d6507b67b8007b68c0008169f8007b69c8003307330850202202e250826bb800d47b0b8267f800887a80007b6ab8008269f000daa90b937b7b6bf0008269c000d489098268d800daa80993797b69d80033070133088269c800502024029f50826bd8008262f000647c648a8267b800937c937a8267d000947b9472947a947c82678800d2270782689000d2b80882698000d2a909d49808826978d2c909d49707d4870751071d82689800826af80028078268980001330c95a701d2870a2853fd7b6ac8007b6cd0007b6bd8007b62f0009567ff0795770182687050202602bac495670010827718f895680010828810f895690010829908f8956a001082a200f83a0ba800028e7c8e8adb7c0ad82b0b8e9cda9b0cd4780bdbba0c520c1982676095770182689800d287077b6760826af80028843a0ab00002c82a0ad82a0bc8b90c95ccffd39c02d89c09da2b09958bffc8b909d8b90b888801c98707c8b70795687820958b00017bba88007bbc90007bb998007bb7a000956800228267705020280297c49517e08478e07b68c00064818267407b87188267487b87108267507b87088267587b879567e00750202a02e9c3956c000782c7e0003a08a0000282c9f80082cae80082cbf000c87808d87807c87a0cd8ac0ada770ac8ba0ad8ba07c8970795697820959b00017bb8a8007bbcb0007bbab8007bb7c000956820228267c00050202c0213c482676895770182689800d287077b67688267788269d000d497077b6778826780008269c800d497077b678000826788008269f000d497077b678800826790008269d800d497077b679000826af800285ffe8267308268787b78826880007b7808826888007b7810826890007b78188267a80033002e020a048269b0003302300228c34a8269b00050223002bc4a4926d8077b68d0077b67c8079568c0077b6ac007330750203202f7c14926b8074926b0074926a007053307209568a0074926a80750203402d9c18268e000818756173f08480840019517e08477e07b67f800502236028049330038020a09826af80033023a0228a44c826af80050223a029d4c7b67f0006f877b67d8006f977b67d0006fa77b67c8009517e08477e07b67f8006471492698074926900749268807956880078267387b678007330750203c025fc18267c800956a00077ba7788267d0007ba7708267d8007ba768330720956860078269f0007ba96050203e0232c18268e000818756173f08480840019517e08477e07b67f00050224002d9480a09826af00082a71882a81082a90882aa6f7b6f886f996faa8267f8007b7a187b79107b78087b7b8268305020420256c295674007330840502044029cbf95670007827b58827c50827a48827940d4ba07d4c908d47808988820d4c707977720d4870752071e0b82676882689800d28707492638074926300749262807956820077b67200764977b69f8007b6af0007b6be0007b6cd8005020460277c08269f8008267e0008268d800d487071408e0ffffff00000000d88908826af00094a894785108c00a82676082689800d2780883972049261807492610077b68000795680007492608075020480228c08267a80033004a020a048269b00033024c0228ef478269b00050224c02e847d4780298aa206f99979820d4a8089899204926b8064926b0064926a8068267387b67a0064926d8063a0ab800023a0bc000023a0cc800023a07d000027b6af806956a00067babf0007bace8007ba7e0007ba9d0007ba8c8003308409569e006956ac006956ba0067b62c0068267f80050204e02d1c133078268e80033090a0e28d4298267f80082698800d49707826918dab9078263a000643a8262c800db270a7b6af8008267c00082699000d49707826920dab907826cb80064cadb270a50225002ab49502052026f4b7b6790007b68208267b0008268a8008269f00050205402564b7b67187b6888008268f0009a8980008267b8008268a000502056025f4b82698800d49808826af00088ab80007b6b8800826920dab9088269a800dba8097b69a800826818d4870782689000dab8078268b000dba70864a97b68b0008267b8008268a00050205802ed4a330c330050225a02c2488263a8008264b000017b6cb80098493f973a01d49a0c974a01826bf80098bb3fd4ba0a7b6aa800826988007b6cb0006434d3c903d8c902826b9000d8ab0cdb320c978801987a3fd4a8087b68a000984a3f977701d47a0a8267f800977701826bc00098b83fd4870297b801826bc80098b33fd4380397b801826be80098b43fd4480897bb018267b800d47b0b7b6be800d480087b68c800d430087b68c000d420077b67f800c9a907d8c707d8a9088262a000c9290bc98b0bc97b0b99bc3f82679800d2c7078268a800c97804d878088267b000c987039478c98a07d88a08c98208826af0008260e000d40a09889901826bd000d89b02c99b0988ab01c9b000826bd800c92b0b95aaff7b60e0007b6bd800d4b0027b6af000d49a0bd42b0a84cc017b69d0003300520ae2fe8267e800977701d47c00017b60d0009567201e33084050205c0232bc956278188223c00595270005827cb800827bb000827aa8008e378ec8db37088eb788a9a08599017b6bf800dbb709d43c077b67d800db780952095a0c95a760d8a708826bf800c88b097b6af000d8b90ada880ac8ca0ad8ca08c8830b7b2788057b2990057b2a98053307409568001e7b2ba0057b6ce0007b63e80050205e02ebbc8269f000826ae000d4a9078268f800826be800d4b808d48707987720d4a808978820d4870752073307826740956a781895ab00057bb7688267487bb7708267507bb7789568e01d8267587bb7800064975020600295bc8268f000140a00000000010000001407e0ffffff00000000d878078269f80094978269d80094975107db06838720956978184929600549295805492950059568c01d7b6ae800826ad0007b9a48057b67e000502062023dbc8268f0008267e8009577c0d878078269f80094978269d800949751079006838740956978184929400549293805492930059568a01d492928057b67d80050206402fabb826728330066020a04826980003302680228e1408269800050226802da4049292005959b00057bb8187bb7109568801d7bba08330750206a02bfbb33026c029568781801492800054928f8044928e8040364893307209568601d4929f00450206e0296bb826830818756173f08480840019517e08477e07b67f80064718379330840826738330070020a09826af80033027202285e46826af8005022720257467b67e8006f877b67d0006f977b67c8006fa77b67c0009517e08477e07b67f80064713302740295697818014929e004826778959a00047ba7d8008267687ba7d0009568401d8267707ba7c80033075020760206bb8267c00095687818958900047b97c0008267c8007b97b8008267d0007b97b000648a3307209568201d8269e8007ba9a80450207802cfba826830818756173f0848084001140700000000ffffffff7b67e8009517e08477e07b67d0006471837933084082673833007a020a09826ad00033027c02285e46826ad00050227c0257467b6cb8006f8b7b6bc0006f987b68c8006fa77b67d0008269f8007b97187b98107b9b087b9c9567001d8268f00050207e0218b950228002044682b7a00082b8980082b9900082ba8800956b78207bb7000795b700067b78f8007b79f0007b7ae800956860278267f8005020820289bb9517e0847be07b6bf80064b18267b8009577018878018269c000c89808d48709889901826ac800c8a909d8a90a826cd000c8ca0a7bba187bb9107bb8087bb79567e01c8268e000502084028fb895677818827768048477ff7b67f0009567c01c8268f800502086029eba95697818959a000482a76082a85882a950956a7820826bf00095ac00077bcb087bc7207bc8187bc910956880278267f80050208802e8ba9567a01c8268d80050208a022db850228c02194582b74082b83082b93882ba28d48707d4a909d497078e777b67f0009567801c8268f80050208e022aba50229002ea4482b71082b80882b92082ba18847700ff826bf000d4b707956b782095bc00077bc9407bca387bc8287bc7309568a0278267f800502092026cba826728330094020a04826980003302960228e03d8269800050229602d93d49290004959b00037bb8f8007bb7f0009568601c7bbae800330750209802bbb833029a0295687818014928e0034928d8034928c8030264893307209568401c4929d00350209c0292b88268309517e08477e07b67f8006471818755174008480840019517e08477e07b67f0006471837933084082673833009e020a09826af0003302a00228d23f826af0005022a002cb3f8268f8007b8b7b8c087b89107b87189567201c5020a20223b9956778188277a803957701826860d287077b67f0009567001c8268f8005020a40200b9956a781895ab000382b7900082b8980082b9a00082ba88008477ff8488ff8499ff826be800d2ba0a826bf000d4ba0a956b782095bc00077bc9607bc8587bc7507bca489568c0278267f8005020a60230b99567e01b3308405020a80276b6956a781895ac000382c7800082c87882c97082cb685022aa0218415207020282674095a900037b97488267487b97508267507b97589568c01b8267587b976064b77b6bf8005020ac0265b78267283300ae020a04826980003302b002282d3f826980005022b002263fd4780298aa206f99979820d4a8089899203a0a0000023a0b0800023a0c100002956778187b7a4003956778187b7b3803956a7818492a0003956778187b7c30033a0a180002956b78188267787bb7f802956b78188267687bb7f002956b78188267707bb7e802956778187b7a2803956a78187ba91803956978187b981003956878187b8208033308209569a01b956a801b956b601b95677818492720038267f8005020b202ddb89567401b3308405020b40259b5956a781895ac000282c7e00082c8d80082c9d00082cbc8005022b602f83f5207e200492ac00282677095a900027b97a8008267687b97b0009568201b8267787b97b80064b77b6bf800330096012840b69567c0193308405020b802fcb495677818957900018298607b68f0008298587b68e8008298507b68e0008297487b67f8000a0d018268f0008269e000d49808826ae8008269f800d4a909d48909989920d4a808978820d49808520857647998772052074f83977b67f0008267f80064987b69e8005020ba02ccb9956878208269e8007a8948068377956800208388c00633090a0c0195677820817748068268f000ac870f0a0d01647898772051078007009569ff079599794929980449299004140700000000223ab6fc7b97a0049568ff07958801054929880433075020bc0261b5390850010256181f12200350010220330860010228680433086001022860043308600102838833070133090a0e287e1f3308600102838833070133090a0e286d1f3308600102838833070133090a0e285c1f3308600102838833070133090a0e284b1f9569ff079599794929580249295002140700000000c611522c7b9760029568ff079588c1024929480233075020be02cdb4390850010256181f12200350010220330860010228d403330860010228cc039569ff079599794929780249297002140700000000223ab6fc7b9780029568ff079588e1024929680233075020c0027db4390850010256181f1220035001022033086001022884033308600102287c033308600102838833070133090a0e289a1e3308600102838833070133090a0e28891e3308600102838833070133090a0e28781e3308600102838833070133090a0e28671e3308600102838833070133090a0e28561e3308600102838833070133090a0e28451e3308600102838833070133090a0e28341e3308600102838833070133090a0e28231e3308600102838833070133090a0e28121e3302c20295697818014929f8014929f0011407000000003bc167cc7b9700029568601a4929e80133075020c40296b3390850010256181f122003500102203308600102289d023308600102289502956778184927380249273002492728026479140700000000717b484e9568a01a7b97400233075020c6024bb33302c80295687818014928200249281802492808021164893307049568801a492910023300dc02281eb33302ca0295697818014929580249295002140700000000dd7c98e97b9760029568c01a4929480233075020cc02f2b2826730817756171f188268304808203307013309048268380a0e2875023307013309048268380a0e2867023308600102838833070133090a0e28031d3308600102838833070133090a0e28f21c3308600102838833070133090a0e28e11c3308600102838833070133090a0e28d01c3308600102838833070133090a0e28bf1c3308600102838833070133090a0e28ae1c3308600102838833070133090a0e289d1c3308600102838833070133090a0e288c1c3308600102838833070133090a0e287b1c3302ce029569781801491958491950140700000000920575dd7b97609568c01849194833075020d00203b2390850010256181f122003500102203308600102280a0133086001022802013308600102838833070133090a0e28201c3308600102838833070133090a0e280f1c3308600102838833070133090a0e28fe1b3308600102838833070133090a0e28ed1b3308600102838833070133090a0e28dc1b3308600102838833070133090a0e28cb1b3302d20295697810014929180749291007140700000000c611522c7b972007956880174929080733075020d4024fb1390850010256181f11200350010220330860010228563308600102284f9569ff079599794929980149299001140700000000635bb2d57b97a0019568ff07958801024929880133075020d60201b1390850010256181f112003500102203308600102280833086001020183883307013309040a0e01492298024922900249228802140700000000717b484e9568001b7b27a00233075020d802b4b03302da0295687818014928800249287802492868024164893307049568e01a492970025020dc028bb0826730817756173f178268304808403307013309248268380a0e280e3307013309248268380a0e013308600102838833070133090a0e289f1a956778104927580749275007492748076479140700000000717b484e9568c0177b97600733075020de0226b03302e00295687810014928400749283807492828071164893307049568a017492930075020e202fdaf8267b000817756173f0c8268b000480840013307013309248268c0000a0e013308600102838833070133090a0e281a1a3308600102838833070133090a0e28091a52476eeb149c0701956778204927200449271804492710044927080495670020837780043300e4020a113302e60228b5395022e602b23982b71882b82082b91082ba08d49808d4a707d48707510773013308600102838833070133090a0e28a8193308600102838833070133090a0e2897193308600102838833070133090a0e2886199569ff079599794929980249299002140700000000b878d6f47b97a0029568ff07958801034929880233073300e8022804af9569ff079599794929180449291004140700000000b878d6f47b9720049568ff07958881044929080433075020e802d6ae826778817756171f0b82687848082001330701330904826888003300ea020a0e015247275914a0d4009567782049276004492758044927500449274804956700208377c0043300ec020a113302ee0228ae385022ee02ab385022f00215395107fc003308600102838833070133090a0e28b0184926b800018267c800977701826bb800d47b0b01492638034926300349262803956820037b6b20038267785020f20232ae330820826778330098012825b2330860010283883307010a0e281c8267f8007b68f0005020f4020cb283788169f0003307010a0e018267f800817756176397003308600102838833070133090a0e282e1852473a6750b6580395677820492700054927f8044927f0044927e80495670020837760053300f6020a113302f80228da375022f802d73782b7f80082a8000582b9f00082bae800d49808d4a707d48707510764033308600102838833070133090a0e28c9178267f800817756174365033308600102838833070133090a0e28ad179567a0103300fa023302600428b738956878108287407b67708287387b67688287307b67608287287b6750956780103300fc0233026a04282339956878108287207b67588287187b67488287107b67408287087b6778956760103300fe023302700428f8389568781082877b6738958900ff8297f8007b67308297f0007b67288297e8007b6720956700208377a0040a0a019567782082724004827b38047b6bb80082743004827a28047b6aa000682768b8958940db2709684768a8958840db470895878000d42b0adaa709d8870c94ac8ecb8897f000857a01daca0b88b7019570ff9ab39accc9ac0a9a99ef008e3c8e07da0c07889c000185cc018ea8dba80cdbb70c7b6498007b62b000d42407826ba0008268b800d4b808d48707887701d4c707947b5207c8048597ff00d43707d40a08d487075107b704502200036333502002034a387b67a8007b68c8008267b8008268b0008269c0005020040356387b6790007b6888008267c0009579808267a000826898005020060339387b6780007b68188269c000889780007b67108267a000826898005020080319387b68d0008268f0008269e800d489098268f800826ae000d4a808d49808826a1093a77b67d8005108160464a98267c80082688800d4870764ac82681850220a033e3250200c03ab377b67a8007b6880008267a000826898008269f80050200e0391377b67187b6888008268f8009a8980008267b8008268b000502010039a37502212032635826818502214031637502016035f37502218031c3350221a031634d89002826b8800d8ab0cdb320c50221c036d34d4870297b801826bd00098b33fd4380397b801826bd80098b43fd4480897bb018267b800d47b0b7b6bd8008267b000d478087b68d000d437087b68c000d4270750221e035930d89b02c99b0988ab01c9bc0c826be800c92b0b95aaff7b6cf0007b6be800d4bc027b6af800d49a0bd42b0a840b017b6bb8007b69e0004926b000520a67ff280a0352478be3fdf29f039567782049278007492778074927700749276807956700208377e007330020030a11956a782095ab000733022203286536956a782095ab0007502222035a365107b8033308600102838833070133090a0e287a148267f8008177561723b9033308600102838833070133090a0e285e14956760143300240333027a04286835956778108277e8037b6778956740143300260333026a0428e535956778108277c8037b6770956700208377e0040a0a019567782082728004827b78047b6bb80082747004827a68047b6aa000682768b8958940db2709684768a8958840db470895878000d42b0adaa709d8870c94ac8ecb8897f000857a01daca0b88b7019570ff9ab39accc9ac0a9a99ef008e3c8e07da0c07889c000185cc018ea8dba80cdbb70c7b6498007b62b000d42407826ba0008268b800d4b808d48707887701d4c70764b894787b68e8005207fb048597ff00d43707d40a08d487075107ea0450222803613050202a0348357b67a8007b68c8008267b8008268b0008269c00050202c0354357b6790007b6888008267c0009579808267a0008268980050202e0337357b6780007b68688269c000889780007b67608267a000826898005020300317357b68d0008268f0008269e800d489098268f800826ae000d4a808d49808826a6093a77b67d8005108450464a98267c80082688800d4870764ac826868502232033c2f50203403a9347b67a8007b6880008267a000826898008269f800502036038f347b67687b6888008268f8009a8980008267b8008268b00050203803983450223a03243282686850223c03143450203e035d34502240031a30502242031431d89002826b8800d8ab0cdb320c502244036b31d4870297b801826bd00098b33fd4380397b801826bd80098b43fd4480897bb018267b800d47b0b7b6bd8008267b000d478087b68d000d437087b68c000d4270750224603572dd89b02c99b0988ab01c9bc0c826be800c92b0b95aaff7b6cf0007b6be800d4bc027b6af800d49a0bd42b0a840b017b6bb8007b69e0004926b000520a67ff2839034926b800018267d800977701826bb800d47b0b01826778aeb75908956aff0795aa7982672095ac00077bc7688267787bc788008267507bc7a8008267287bc7708267407bc790008267607bc7b0008267307bc7788267487bc798008267687bc7b8008267387bc780008267587bc7a00095672010956800109569ff079599e107826b707bcbc00050204803f91933086001028388330733090a0e28371152474a45080e1f0895677818492720074927180749271007492708079567002083778033004a030a1133024c03287c3250224c03793282b71882b82082b91082ba08d49808d4a707d48707510725083308600102838833070133090a0e28d7108267f800817756172326083308600102838833070133090a0e28bb109567601733004e0333027a0428c531956778108277e8067b67e00033076001037b67e80083777b67d800330050030a048269e8003302520328052b8269e80050225203fe2a4929e006959b00067bb8d8007bb7d000956840177bbac80033075020540309a63302560395687810014928c0064928b8064928a806036489330720956820174929b00650205803e0a533075001027b67f800390750010256173f0c8268f800480840019517e08479e07b69d00064913307600102837783993308407b67f00033005a030a09826ad00033025c03289330826ad00050225c038c307b67c8006f877b67c0006f977b67b8006fa77b67b0008267e000977720987920956778104927a0064927980649279006956800177b69d0007b798806330750205e034ba58267b00095687810958900067b9780008267b8007b97788267c0007b9770648a3307209568e0168269c8007ba968065020600316a58267f800817756173f0c8267f800480740019517e08477e07b67e00050226203192d0a09826ae00082a782a80882a91082aa186f776f8c6f996faa951be084b8e0648195aa0188ab01c8b909d49a0b88bb01c8cb0bd8cb0cc8c7077b89087b8a7b8b107b87189567c0167b68e0005020640394a5956778108277480651077b0795687810828850068489ff0051099b073302660395697810014929380649293006140700000000c884c1c17b9740069568a0164929280633073300fc032853a44926b800018267d8009777018268b800d487077b67e800018267e800826870ab784d0933076001037b67e00083777b67b800330068030a048269e00033026a0328e5288269e00050226a03de284929a003959b00037bb898007bb79000956800147bba8800330750206c03e9a333026e0395687810014928800349287803492868030364893307209568e0134929700350207003c0a333075001027b67f800390750010256173f0c8268f800480840019517e08479e07b69d80064913307600102837783993308407b67f000330072030a093302740328922c502274038f2c826778977720987920956778104927600349275803492750039568c0137b69b0007b7948033307502076034aa38267c00095687810958900037b97408267c8007b97388267d0007b9730648a3307209568a0138269d8007ba928035020780316a38267f800817756173f0c8267f800480740019517e08477e07b67d80050227a03192b33007c030a0933027e0328f22950227e03ef29958c00047bca88007bc990007bcb98007bc7a000956780139568002550208003b1a395677810827708038477ff51071808956778107c77100352070c088268b000888700017b67a800838980330701330850208203e02e7b67d8007b68d0008268b0008d8980003307013308502084039f2e8269b000889a80007b6ac000826bd800daab0793977b67d8008267d000daa70893987b68d0008399330701330850208603922e8269c00093977b67c80093987b68c0008267b800330088030a048269e00033028a0328e9268269e00050228a03e2264929e002959b00027bb8d8007bb7d000956840137bbac800330750208c03eda133028e0395687810014928c0024928b8024928a802056489330720956820134929b00250209003c4a18267f800817756173f0c8268f800480840018267c0008268a80093877b67c0008267c80093877b67c8008267d00093877b67d0008267d80093877b67d8009517e08477e07b67a800502292039b29330094030a093302960328b92650229603b6264929a0024929980249299002956800138267e8007b97880233075020980343a18267880095687810958900027b978000826790007b9778826798007b9770648a3307209568e0128269a0007ba9680250209a030ea18267f800817756173f0c8267f800480740019517e08477e07b67a00050229c03112933009e030a09826aa0003302a003284527826aa0005022a0033e278377c002c867075020a203b6a1956a781095ab000282b75882b84882b96082ba505022a403ec2b51073e068267b8003300a6030a048269e0003302a8032863258269e0005022a8035c2549294002959b00027bb8387bb7309568a0127bba2833075020aa036aa03302ac03956878100149282002492818024928080206648933072095688012492910025020ae0341a08267f800817756173f0c8268f800480840019517e08477e07b67a8005022b00344283300b2030a093302b4032862255022b4035f25492900024929f8014929f001956860128267e8007b97e80133075020b603ec9f8267880095687810958900017b97e000826790007b97d800826798007b97d000648a330720956840128269a0007ba9c8015020b803b59f8267f800817756173f0c8267f800480740019517e08477e07b67a0005022ba03b8273300bc030a09826aa0003302be0328ec25826aa0005022be03e52583772002c867075020c0035da0330700105022c203e52a82b7b80082b8a80082b9c00082bab0005022c4038d2a510729053302c60395697810014929980149299001140700000000f08982c97b97a001956800124929880133073300fc0328149f9569ff079599794929d8074929d007140700000000d94b11cf7b97e007956840104929c80733075020c803ea9e390850010256181f12200350010220330860010228f1ed330860010228e9ed5247589c7240dc0695677820491760491758491750491748956700208377c0000a11956a78200182a75882a86082a95082aa48d49808d4a707d487075107f2063308600102838833070133090a0e28c7088267f8008177561723f3063308600102838833070133090a0e28ab089567201f3300ca033302600428b52995687818958900068297b8007b67e0008297b0007b67f8008297a8007b67f000956878204928a007492898074928900749288807019567001f956800285020cc03fe9e95687818958900068297a0007b67e800829798007b67c800829790007b67d800829788007b67d00033076001037b67c00083773300ce030a048269c0003302d0032893268269c0005022d0038c268269c800649b979920989920d398088269d000d39707d487078268d800d3a808d48707520730078267e0009777209877208268f8008269f000d49808d478085108620798b820978820d48707956978204929c0074929b8074929b007959a0007492aa800018268f0007ba8c8008268f8007ba8d0008268e8007ba8e0007ba7d80095672028956840285020d203a29e33086001028388330733090a0e286c073302d403956978100149293805492930051407000000006d53a9a77b9740059568a0154929280533073300fc0328ec9c1409ffffffff000000007b69c800956a781082a9580682aa6006868801956b782095bc00057bc7087bc9187bc8107bca20956880258267e0005020d603239e8267d8003300d8030a048269e8003302da03286d218269e8005022da03662149292006959b00067bb8187bb710956880167bba0833075020dc03749c3302de039568781001492800064928f8054928e805026489330720956860164929f0055020e0034b9c9517e08477e07b67e00064718267f800817756173f0c8268f800480840019517e08477e07b67f8005022e20342243300e4030a09826af8003302e603288a23826af8005022e60383238268e0007b8b7b8c087b89107b8718956740165020e803db9c956778108277c8058268c800c88707d287077b67f800956720168268e0005020ea03b79c956a781080a7ac0597772095ab000582b8c00082b9b80082bab000826bf800d4b707956b782095bc00057bc8407bc9387bca307bc7289568a0258267e0005020ec03f49c8267d8003300ee030a048269e8003302f0032848238269e8005022f0034123d4780298aa206f99979820d4a808989920826ad000956778107b7a48053a0a4000023a0b4800023a0c5000027b7aa0057b7b980549276005957b00057bbc90003a0a5800024927580549275005492780057bba88007bb9787bb87095690016956ae015956bc0157b726805330733085020f2032a9d28f1023302f40395697810014929b8034929b003140700000000635bb2d57b97c003956820144929a80333075020f603bb9a390850010256181f12200350010220330860010228c2e9330860010228bae93302f80395697810014929f8024929f0021407000000006d53a9a77b970003956860134929e80233073300fc0328699a3302fa039569781001491958491950140700000000b6e2a4af7b97609568c01049194833075020fc03419a8267f800817756171f0c8268f800480820013307013309048268f0000a0e018267b8003300fe030a048269e0003302000428df1e8269e00050220004d81e49298001959b00017bb8787bb7709568e0117bba68330750200204e6993302040495687810014928600149285801492848010664893307209568c0114929500150200604bd998267f800817756173f0c8268f800480840019517e08477e07b67a80050220804c02133000a040a0933020c0428de1e50220c04db1e4929400149293801492930019568a0118267e8007b972801330750200e0468998267880095687810958900017b9720826790007b9718826798007b9710648a330720956880118269a0007ba908015020100434998267f800817756173f0c8267f800480740019517e08477e07b67f800502212043721330014040a09826af80033021604286b1f826af80050221604641f83776001c8670750201804dc99956a781082a7e80082a8f00082a9f80082aa0001826bc800d4b707826bc000d4b808826bd800d4b909826bd000d4ba0a956b782095bc00047bcac0007bc9b8007bc8b0007bc7a800956820258267a80050201a04079a8267b80033001c040a048269e00033021e042800218269e00050221e04f920956c7810492c8000491c78491c70826ae8007bca68826ab0007bca88003a0a6000023a0b680002492ca000492c98007bcae0007bcbd8003a0a7000023a0b780002492c9000492cc0007bcad0007bcbc8007bc9b8007bc8b00064c895694011956a2011956b0011956ce0107b87a8003307330850202004fc9a33078268f00033090a0e283c0252476287186820029567782049276003492758034927500349274803956700208377c003330022040a113302240428f52150222404f221502226044f2251070b023308600102838833070133090a0e28ea018267f80081775617230b023308600102838833070133090a0e28ce0195678001330028043302600428d822826780018268880180699001492678017b6970017b686801956860017b676001330750202a044a9749265801492650014926400104330720956840014926480150202c042c9733075001027b67f800390750010256173f0c8268f800480840019517e08479e07b69e800649133076001027b67f0008377839933084033002e040a09826ae80033023004286621826ae800502230045f2183bb78f8c86b0b95bc00077bca407bc9387bc8307bc728956720019568a01f50203204a8978067200149261801492610017b6700013307800095680001492608015020340494968267f800817756279f00188268f8004808a0008267f000837880002810c58267f000837880002805c53302360495697818014929780649297006140700000000c583c45f7b9780069568e01e492968063307502038043c96390850010256181f1220035001022033086001022843e53308600102283be533023a0495697818014929580649295006140700000000c8f5bc147b9760069568c01e49294806330750203c04ee95390850010256181f12200350010220330860010228f5e4330860010228ede48267f8008177015107123308600102838833070133090a0e0133086001028388330733090a0e28f38267f8008177561763fe013308600102838833070133090a0e28d89567800633003e043302600428e320826790067b67e800826788067b67f000826780067b67f800956878204928800049187849187049186801956760069568e020502040043796826768067b67e000826760067b67d800806770067b67d00033076001037b67c8008377330042040a048269c8003302440428dc1d8269c80050224404d51d8269d000d398088269d800d39707d487078268e000d3a808d48707520764028267e8009777209879208267f8008268f000d487077b69e800d49707510789021407ffffffff000000007b67e000956778204927a0004927980049279000492788009567200695680021502046048a95826830067b68c800826728067b67d800826720067b67d000826738069888209788208269e800d49808956978204929c0004929b8004929b0004929a800826af0007b9ad000826af8007b9ac8007b97e0007b98d800956720219568402150204804a8958267d0008477ff8269d8008498ff8269e000826ac800d2a9094926d805826ae800956b00057bbad000826af0007bbac800826af8007bbac0004926f8057bb9f0007bb8e8003a08d800023a09e000023a0ae800027bb7e000956c00067bc8187bc9107bca083a07f0000295690006956ae005956bc0057bc73307330850204a04f09533086001028388330733090a0e28f0fd9567ff079577010633004c043302600428f61e9568ff0795887995890005829788007b67f800829790007b67f000829798007b67e8008297a0007b67e0009567ff079577e10533004e0433026a04284f1f9568ff07958879958900058297687b67d8008297707b67d0008297787b67c800829780007b67c0009567ff079577c105330050043302700428141f956bff0795bb7995bc000582c74882c85082c95882ca607bca95ba00047ba9f8007ba8f0007ba7e8008267c0007bc7208267c8007bc7188267d0007bc7108267d8007bc7088267e0007bc7408267e8007bc7388267f0007bc7309567ff079577a1059568ff07958881059569ff0795996105826af8007bca2850205204970533086001028388330733090a0e28d5fc492650064926480649264006140700000000c583c45f956840067b6758063307502054046292390850010256181f1220035001022033086001022869e133086001022861e14926b0054926a8054926a005140700000000920575dd9568a0057b67b8053307502056041d92390850010256181f1220035001022033086001022824e13308600102281ce19511c07b10387b15307b16289515408411f0828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b90952091e6476641750205804859050225a047f1b510a0c50225c04d11c32000033086001028388330701330933005e040a0e3302600428fa1c50226004f71c330062040a023302640428441b50226404411b510a0b50226604931c3200330860010283883307013309330068040a0e33026a0428541d50226a04511d3308240a0201821718821810821908d4780a889b0194ab510b0d821a50226c04701a320033086001028388330701330933006e040a0e3302700428111d502270040e1d330844330072040a023302740428af1b50227404ac1b520b0b50227604301a3200330860010283883307013309330078040a0e33027a04283a1c50227a04371c33007c040a0233027e0428721b50227e046f1b520b0b50228004f3193200330860010283883307013309330082040a0e01951170ff7b1088007b1580007b1678951590008411f064728289827408828c088273959a1fd89a00c80c0984aae07b1308c8a303d8a30bc8490ac8ba0ad39a06d89a07da6b07822b18d8c90c828610822210828818da000cc86c0cd86c06c82c09c89707d8c90cd89709c8b808c86808c8c808c8980c8ec88e79dbc809d4c7088ea6db8906520657821808d88308d34a09d84a06da9806d82708d3bc09d8bc0bda980bd32708d49808da860b520b307b13507b1a587b17603307409518507b1c6850208404d68f955170ff8210880082158000821678951190003200491140491138491130140700000000717b484e9518307b1748330750208604a08f4911284911204911104133070495181049111850208804878f390850010256183f0b200350010240013308600102838833070133092433008a040a0e019511a0fe7b1058017b1550017b164801951560018411e082897b19388289087b19308289107b19288288187b182082787b18188278107b18108276080a0b6f68978920821a106faa98aa20d4a909988820821a186faa330b60010397ac20d4c80898aa203d0a7001033e086801033e096001038218207b18f8008218287b18f0008218307b18e8008218387b18e000482100018e77fc089a787b1838017b1830017b1828017b18200197bb2098bb20977723d4b7079518e000978820988820330b60010295192001979920d4890a7b1b0897bb2098bb2095180001978820d4b80c3308ff3309ff0a64760a0d01510714017b16100a0d64769517c00033084050208c04248d8212d800821cd0007b1c308213c8007b13388214c0007b142895671f7b1618d867088477e0957920d87907c8780ad88a0bda770b492198007b19800064267b12b8007b1cb0007b13a8007b14a0007b1a88009517a000951880007b1b900050208e0463fd8217287b1620821938d46909821a30d4a708d49808988820d4a909979920d49808520890004911784911704911689518608219187b1960647650209004bb8d0a0d01821820821930d498081409e0ffffff00000000d89609821b3894b99489510952646a647698772052074883a72083687b183864685020920481917a16400183778318400133090a0c0181174001821610821838ac871c52061a9551a0fe8210580182155001821648019511600132000049115049114849114014070000000018ecb8909518407b1758330750209404278d390850010256181f0b20035001022001811808330701330904330096040a0e01951108f8951a00077ba0f0007ba5e8007ba6e0009515f8079511f8fd8411e0641682997b69900082887b68688279827808807710956a0010492a18f87b679800956a00107ba710f87b68a000956700107b7808f89568ff079588017b69a800956700107b7900f8330750209804988c4926f8074926f0074926e007033307209568e0074926e80750209a047a8c3308500102390750010256173f0b200350010240019517e08479e07b698800649133076001027b6730837783997b68b0003308407b67b80033009c040a09826a880033029e04282b17826a880050229e0424177b6788006f877b6780006f977b67786fa77b6760826790009777209877204926d8074926d0074926c8079568c0077b67707b67c00733075020a004ea8b826760956a00077ba7b8008267787ba7b000826780007ba7a8003307209568a007826988007ba9a0005020a204bb8b8268b000818756173f08480840019517e08477e07b6790005022a4046f130a09826a900082a782a80882a91082aa186f776f886f996faa95aa0188ab01c8b909d49a0b88bb01c88b0bd88b08c88707956800107b8a20f8956800107b8928f89568ff079588317b8b7b8708956780079568ff079588215020a604318c826780075107e10e826870888700017b676083898033070133085020a80475177b6788007b6890008268708d89800033070133085020aa043517826970889a80007b6a8000826b8800daab0793977b67880082679000daa70893987b689000839933070133085020ac0429178269800093977b677893987b688000492678078267a8007b6760078267a0007b67680795686007826798007b67700733075020ae049c8a4926580749265007492640070533072095684007492648075020b0047e8a8268b000818756173f08480840018267800082686093877b67800082677893877b67788267900093877b6790008267880093877b6788009517e08477e07b67605022b2040a123300b4040a093302b6042840105022b6043d108267688477ff492638074926300749262807956820077b67687b67200733075020b804008a826740956a00077ba7188267487ba7108267507ba708330720956800078269587ba95020ba04d8898268b000818756173f08480840019517e08477e07b67585022bc048d113300be040a093302c00428f20f5022c004ef0f9567e0065020c204908a956b000682b7f00082b8e00082b9f80082bae8005022c404e2115107520d4926d8068267a8007b67c0068267a0007b67c8069568c006826798007b67d00633075020c60458894926b8064926b0064926a006073307209568a0064926a8065020c8043a898268b000818756173f08480840019517e08477e07b67605022ca04ef103300cc040a093302ce0428250f5022ce04220f492698064926900649268806956880068267687b67800633075020d004eb88826740956a00067ba7788267487ba7708267507ba768330720956860068269587ba9605020d204c2888268b000818756173f08480840019517e08477e07b67585022d40477103300d6040a093302d80428dc0e5022d804d90e956740065020da047a89956b000682b75082b84082b95882ba485022dc04d0105207680c492618068267a800956900067b978267a0007b970895680006826798007b971033075020de0446884926f8054926f0054926e005073307209568e0054926e8055020e00428888268b000818756173f08480840019517e08477e07b67605022e204dd0f3300e4040a093302e60428130e5022e604100e4926d8054926d0054926c8059568c0058267687b67c00533075020e804d987826740956a00057ba7b8008267487ba7b0008267507ba7a8003307209568a0058269587ba9a0005020ea04ac878268b000818756173f08480840019517e08477e07b67585022ec04610f3300ee040a093302f00428c60d5022f004c30d956780055020f2046488826780058268880582699005826a9805826b78d4b707826b8000d4b808826b8800d4b909826b9000d4ba0a956bff0795bb317bba287bb9207bb8187bb7109568ff079588418267605020f404978849267805826798007b6770058267a0007b676805956860058267a8007b67600533075020f604fc864926580549265005492640050233072095684005492648055020f804de868268b000818755174008480840019517e08477e07b67605022fa04930e0a09826a6082a782a80882a91082aa186f726f8c6f996faa9517e08478e064817b6a1095a701887a017b6918c8a90bd4b709889901c8c9097b6c20d8c90a7b6228c82a0a7b8b087b877b89107b8a18956720057b68585020fc04578782623805956b000582b83082b9203a07f8000282ba28d4280b7b6760d8790c94ac94bc520c600a3a0b000102c89b0bd89b09c89a0c95ccffd3ac07d8ac0ada790a9587ffc87a0ad87a07888801c98208c887079568ff079588317b8b307b8c387b8a407b87489568ff079588618267585020fe0462874926180582679800956900057b97108267a0007b9708956800058267a8007b97330750200005c7854926f8044926f0044926e004063307209568e0044926e80450200205a9858268b000818756173f08480840019517e08477e07b6758502204055e0d330006050a09826a5833020805287610826a585022080570107b67506f877b67486f977b67406fa77b67389517e08477e07b675864714926d8044926d0044926c8049568c0048267687b67c004330750200a053785826738956a00047ba7b8008267407ba7b0008267487ba7a8003307209568a0048269507ba9a00050200c050a858268b000818756173f08480840019517e08477e07b675050220e05bf0c330010050a09826a503302120528e60f826a5050221205e00f8268587b8a187b89107b8b087b879567800450201405ae85956b000482b7900082b8800082b9980082ba880050221605000d51070f031407ffffffff000000007b67b0009567ff079577314927e8004927e0004927d8004927d000956760049568ff0795880101502018055985956a000482a76882a87082a9608477ff826bb000d2b8088499ffd49808d487075107a9059567ff0795773149272801492720014927180149271001956740049568ff079588410150201a050c85956a000482a74882a85082a9406f77977a206f88988820d4a80b9877206f98330a600103978920d497079888207b68583d087001037b67503e076801037b6b783e0b6001037b6a800083a70a0501510712089567200433084050201c058182956b000482b93882ba3082b72882b8207b67b0007b699000d497077b68b800d4a808d478089888207b6a8800d4a707977720d4870752072b074926100449260804492600041407000000002e77c9ad956800047b6718048267b80050201e055a838267900082698800d47909140700000000010000007b67401407fcffffff000000008268b800d878078268b00094877b694894975107cb068267b8008377044926f8038268a800956a00037ba8e0008268a0007ba8e8009568e003826998007ba9f00050202005f1828267409577dc8268b800d878078268b0009487826848948751077e068267b8008377244926d8034926d0034926c8039568c0038269607b69c00350202205b1820a0b826880008267507b87088267787b878267587a87109567ff079577314927480149274001492738018268607b7830013308448267b8005020240576867b67788267b80033085020260567869569ff0795993148295001959a0001492a8800ff492a8000ff491a78ff491a70ff8268800097882098882014090000000008000000d498029568ff07958861019788209888209569ff079599a101979920d4890a82687897882098882014090000000044000000d4980b9777209877209568ff0795888101978820d4780c3308ff3309ff64270a015207cc04492678034926700349266803492660038267b800956a00037ba780008267b0007ba78800826788007ba790009567800395686003826990007ba9980050202805fff028950350202a05ff7fff3a088001037b6890003a089001037b6888003a078801037b6780000a0b826880006f88978920826a88006faa98aa20d4a909988a20826890006f8b330860010397bc20d4ca0a98bb203d0b7001033e0a6801033e09600103956aff0795aa31491a68491a60491a588269607ba950481a708e77fc089a797ba9a8007ba9a0007ba998007ba99000978820988820977723d487079568ff07958881009788209888209569ff079599c100979920d4890a826b3097bb2098bb209568ff079588a100978820d4b80c3308ff3309ff0a7b6790000a0d0151073e010a0d7b67589567600233084050202c05687fff826c78027b6c78826270027b6250826368027b638000826460027b64880082685895871fd887088477e0957920d87907c8780ad88a0bda770b492638027b692002956900027b9c587b6250027b6348027b6440027b9a2895674002956820027b9b3050202e05a2ef8267880082687882698000d48909826a50d4a708d49808988820d4a909979920d498085208bb03492618024926100249260802956800028269587b69000250203005f57fff0a0d01826a8800826878826950d498081409e0ffffff00000000d89a09826b800094b9948951097403647898772052076b0383a72064897b68800083887b688800649850203205ae839568ff07958831826980007a89b0008377956800108388e0f833090a0c019567ff079577318177b00082688800ac872303826790005207c8039567c001330840502034052b7eff956b000182b7d80082b8d00082b9c80082bac00050223605f8065207ef024926b8014926b0014926a8019568a0018267607b67a00164a77b6ab80050203805237fff4926380149263001492628018267687b6720014926580149265001492648018267707b67400149267801826798007b6770018267a0007b6768013a072801023a083001023a09380102826aa8007b6a60017b6798017b6890017b6988013a0740010233082095698001956a6001956b4001956c20017b6780018267b80033004405289b819517e0847ce064c1826810958702d88708826a18c88a09d8a90ada880a826820c88a0ad88a08826b28c88b0b64c87b6cb8007bc9087bc77bca107bcb189567400350203a05497fff956b000382b74082b85882b94882ba50826b60c87b0bd87b07c8790cd89c09da7709c8a909d8a907c887079568ff079588317b8bf0007b8cf8007b8900017b8708019568ff07958821018267b80050203c05757fff9567200333084050203e05ba7cff956b000382b73882b83082b92882ba20502240058b0552078201492618034926100349260803956800038267607b67000364a77b6ab80050204205b67dff4926980249269002492688028267687b6780024926b8024926b0024926a8028267707b67a0024926d802826798007b67d0028267a0007b67c8023a070801023a081001023a09180102826aa8007b6ac0027b67f8027b68f0027b69e8023a072001023308209569e002956ac002956ba002956c80027b67e0028267b800502044053280955100f8951100fe95110802951700078270f0008275e8008276e0009511f80732009567a00333084050204605c97bff956800038287b8007b67b0008287b0007b67a8008287a8007b67a0008287a0007b67b8000a0d018268b0008269a000d49808826aa8008269b800d4a909d48909989920d4a808978820d4980852085b98782052085564787b67a80083777b67b0008267b800502048059a809568ff079588318269a8007a8990018377956800108388c0f933090a0c019567ff07957731817790018268b000ac870f0a0d0164789877205107f700004926d0004926c8004926c0001407000000006d53a9a79568c0007b67d800330733004a0528307cff4926f0004926e8004926e000140700000000b6e2a4af9568e0007b67f800330733004a0528087cff49263006492628064926200614070000000000f90f56956820067b673806330733004a0528e07bff492610014926080149260001140700000000b878d6f4956800017b671801330733004a0528b87bff3307018268b80033090a0e014926f0014926e8014926e00114070000000018ecb8909568e0017b67f801330750204a05887bff8267b000817756171f0c8268b000480820013307013309048268b8000a0e018267b8007b68b00050204c055d7fff83788169b0003307010a0e330733004e05287a7fff330750204e05747fff330701502050056a7fff82970881981082996f77977a206f88988820d48a0a9877206f98978920d4970798882095697810320282970881981082996f77977a206f88988820d48a0a9877206f98978920d4970798882095697818320282970881981082996f77977a206f88988820d48a0a9877206f98978920d497079888209569ff079599793202826aa80082a71882a81082a90882aa6f777b67a0006f877b6798006f977b6790006fa77b6788009517e08477e07b67a800647133077810c8760932027b67c800c9a007d8c707d8a008826c9800c9c00bc98b0bc97b0b99b03f82679000d270078268a000c97804d87808c989039498c98a077b67a800d88a08c98c08826af800826cf000d4ca09889901826be0003202826ae00082a71882a81082a90882aa6f777b67d8006f877b67d0006f977b67c8006fa77b67c0009517e08477e07b67e00064713202826a6082a71882a81082a90882aa6f777b67586f877b67506f977b67486fa77b67409517e08477e07b676064713202826a5882a71882a81082a90882aa6f776f8b6f996faa8268607b8a187b89107b8b087b87320282a71882a81082a90882aa6f776f8b6f996faa8268a8007b8a187b89107b8b087b87330700103202826af80082a71882a81082a90882aa6f776f8b6f996faa8268e0007b8a187b89107b8b087b873202da98078269b000649a64988269c000db970a7b6ac8008267a800826a9000d4a707826a8000daca07826bb80064badb970a7b6ac0008267d00093c77b67d000492690008051018267f80095798064b73202826ad80082a782a80882a91082aa186f776f886f996faa95aa0188ab01c8b909d49a0b88bb01c88b0bd88b08c887079568782032029598017b68f800888701c8a7077b67f000d48707887701c837077b67e000d83707c807077b67e8009a98ff007b68c0009a8980008267a00082689800320282a782a80882a91082aa186f776f886f996faa95ab03d8ab0ac8a90cd89c09daaa09c88909d88908c887073202d49707d48a09d47909989920d48707977720d497073202647183793308408267e8003202647183793308408267b800320282970881981082996f7a97a7206f8898882032028264a000826398004926b8004926b00082698800939893977b67a800826a900095a9ff7b6988008ea99599ff7b6980003202647183793308408267f0003202826af00082a71882a81082a90882aa6f776f8b6f996faa8268f8007b8a187b89107b8b087b87330700203202826b8800d2b707826b78d2b808826b9000d2b909826b8000d2ba0ad4a909d48707d49707320282970881981082996f7a97a7206f88988820d4870798aa206f99979820d4a808989920320282970881981082996f77977a206f88988820d48a0a9877206f98978920d49707988820320282970882988199106f77987a206f88978b20d4ba0a9777206f99989920d49707988820320298493f973a01d4a909974a018264c800984b3fd4ba0a7b6aa000826080006437d390033202826ad80082a71882a81082a90882aa6f777b67d8006f877b67d0006f977b67c8006fa77b67c00032027b6a7b69087b68107b67189551c08210388215308216289511403202978801826ba80098ba3fd4a8087b689800987a3f97b701d47a0a974701826bc00098b83f3202d49707d48b09d47909989920d48707977720d49707320282ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b1910320282171082181814090000000001000000d37909d48909987a2088aa01948a939a320282698800d498088269f800889a80007b6a8800826b8000daab08826b9800db980b7b6b980032028269880093989397826a980095a9ff7b6990008ea99599ff7b698800320233077820c8760a95ab0004320233077820c8760a95ab00033202826ac80082a71882a81082a90882aa6f777b67c0006f877b67b8006f9732027b6ac00093b87b68c800492698008051018267f00095798064c76438320282a71882a81082a90882aa6f776f886f996faa330b0020320282b75882b86082b95082ba48d49808d4a707d487073202821718821810821908821ad4790bd48a0cd4bc0c98cc20d48b0b97bb20d4cb0b320282cbe00082c8d80082c9d00082c7c800d49b0bd48709d4b909989920d4b808978820d49808320282a71882a81082a90882aa6f77320282a71882a81082a90882aa6f776f8b6f996faa32028219821a087b697b6a087b67107b68189551c08210388215308216289511403202826bd800d2b707826bc800d2b808826bd000d2b909826bc000d2ba0ad4a909d48707d4970732029511c07b10387b15307b16289515408411e0647683173308043202837778c8760a95ab0001320282b7d80082b8e00082b9d00082bac800d49808d4a707d48707320233077820c8760a95ab0005320233077818c8760a95ab0004320233077818c8760a95ab0007320282a71882a81082a90882aa6f7c3202d487078268a800daa8078268a000db97087b68a0008267b8008268b00032029511c07b10387b15307b16289515408411e064768317320282b77882b8800082b97082ba68d49808d4a707d487073202849a40520a195109148d9a40cfa80ad09808d09707d4a707320032009597c0d0780733083200849a40520a195109148d9a40d0a70acf9707cf9808d4a808320032009598c0cf870833073200490a21a11a4292d210a1925429a42449922449922449922449922449922449922449922449922449922449922449aa9294529294942454a5242549922449922449922449922449922449922449922449499294a4aa24254994a492a42a494992922425294955559292a4249524554a2949524a29492a2922228a88889424498284524949499122458a142952a428491111514444a4244952922409128a8a142952a4489122458a142952a44891a2448a888892244108094369521a12212222221111d18888241192241211452244a16a88082222442291880822222449129148248044444422840a219492a42489881011229188089124252224499224012492241209114912499224494488848888244992a12494240920298408869256a84a842409218454a852a5111111293122484408112211a5118104442081041210101048208104124820111111c548922449148948239224119544a4119124119544a411111149928824222222910851a44822442411294422428988904421443049142ad148525524291111114944884444449248128924499224499224894444444444222222291184248a442211111111858890889044218249142a29920851144524294244444444249188248924918808111111119144924822111111112122229248121149242222222222444442244992244922222222a288881011092080442589888888888808111149258988888888081140a228892411111122425194888888484988884892449188442291482422d288888888449248924412898844225288448412112184082651a848a4244491449188888888882844222222a24444842832894aa4482244511491a48810898888282289249144222222222222442222221244229224499224222222222222228888480001a49244a288888888202289a2244a242222224804a5281111912812044914891445444444448248922049942851a244928a24a944548a489224a92422922491482289441211111144444410118908928888082222114914491129898a4444922811452052101111412222228844442412492412114144445444a2c4248924a224924412491249224924894424128924912491485222894822492289482489884844444414118908922812914644442449922444892212414412298818114a449044214430012489422551248804114992244944041111894892242222222288908846444454524924a948924a442552122992a49288244922892491444414451011114144242248222222888848244552222222a2884410245124224124822444444444242222a2181191248922118922124192a42412d18888884a2a892415495289a8444a22124952494492a444124922898828228888882022121144222222888848244552222222228a0441124522224244049188888888481089208924222222222212111111458288882449148988888820624444241149120922222292244912110144444404218a46440248541249a5242549442491a02851122549a44444442288441011111191049048228924802491249d34a9284644444412894444045124a92449441011111189481251442288888888888888082241444404492412898822922411c524499244918848444444442422222222a22022242208218249142a12512488888828888888884444104526114491208288888888481011114112111111115144222222a288441011912489221111111141241289444482482449922449228988888888882449443149922451242212111111118988888888288808890842886012858a4414092222220a2222222211114491490451248820222222221244444490442412894811892211111151240892104514910892440a2226512241128510c148a2508928124482282222222289222222a21149241249924422499248924892245192248248101111111111111111d1884491244912444444444444414411892029498808214444449288888888889424494a92a492a212111111458220892211918888888888448c8888888888828811a14404214430894245228a04112322220a2222229112114114994410458208224622914844828824099288442211298244508a4ad140222222a248902449922812912012111111114144a2489224092144222222a22011494a922429894810894412492249244924499224499224894444444482484444488a24492291928820121111914892241249924444444422228844444424922489249224114912134111452482484444229188888888202241249224482212894422224510514422884444448410111142444444448988888888088a4a44922812118944098288880812111141242222914822912222a8206224492411454a24492249249244924812894422912492241249a424114924492411892451443249421451442288482252108908252282248510c1240a1589282211548944225144118920228948412422948808a2c8248228221124912411114422228a480411111105918850222288229308a2481045124522222251109188444a44248822038824822822114492921411242992484412499248124922994492948888882212419288144492948808a2c82482281244a2444422a22022222222128988208a4c2288224124894804111111898822a944222988884841444405918888149148912288a8a8a88a4422499244144b1211114910111111112a29499248a290244992248988888804499424498a20224444922449444444449044924822121189884424291289441491082222a22022242288229308a2884410455124514444a2202291482212449149044592aa22490922412449922489442222a2888820221240a2229144444410514422484a121189082184888888484444044525224914898824518220121141222222884444128924122922820a2246924412112591248924914812492249241289449248924824919244249124914424924411c98804111111959248229144224912118988082212912449242249128982082080445124222222228288248a2211111111248a48041149a42062442811418a4ca292282211445114491431129188444144444444898820450610495412452482288a2292141104111111111111411245124922892429228848440411492222492282882048922445441024494422922422481491082222220a224684121124898a4ca29228221144492288481211414444449248242249228248101149824824492229824411892029490821222222224422129188888888484444441009222222828844242251442241442291483422114992a4a488228888226a44a42546220288882808118484845209a5124a25944a24228088888210414848242280888882104148482895502aa15442a9845209a5124a25944a28958811014444418820242422a200220a2246841211891811404414a44892942425944a2895502aa15442a9845209a5124a25944ac42480440a42042121a15442a9845209a5124a25944ac4880022a22044100a452202888828081184c292464400110511234289085224492a4943a9444414404441c488502282282293682895502a01111111114582244912a15442a98452894404101151241211404444418a6412d18088888888224110a1546224322222122491502a2228d22884520988888888281244442489502a5108a512118924499288482449924444a2442412896844444454524924a948924a54222511894892229244104444441011890822118908222211498a28222508222222484444044182200812499044924812894824122449241189241111098888888828221211442895288452898844242212918846444444259544928a24a944255212918824a98848124110111141442422884424228888442429a288942088888820111111040982204824411249224924229148902491442492444424462213914412892491481289442222221184aa04444444248a0449922442a94421944a4424224214514422888888288818114a441022446412854a441189208aa288242222220a22222291121141149149044549aa9292244952121144444444c4880022a2488c4462244214514422888888288818114a441022446412854a44912049444444144444229112114114914904512488888888202211111191144444a420222245a42805511411452482888888828811a144045144461451441145124114092222220a222222911211411491490451442288041149124444118920228914448c08252288223289208a04111111051111111125228228229308a2884410092288880822624400115124121140441484084242022249228a49922442a94421944a442422222222222244041111111111218a2212419424924822928824924444448888888888205425624400115124808888442449441051442288482205112342890892288ac82482282211444922888824228288444444229224228828221124258988104244448488882422a282448c0820220a420421211123028888221193001229882232894614910822924841c48850228228229308a24810111151101189444a4404514426114411892012444444241289444444440411452482882412114244440811111145444405452520222222a2481044289528845289884444444414448444042142442651884a149108229124114144444404518888484422460410110521829090881101444441882024249a506aa82a0aa154119188888888242282888888104511892012492411494422114044444444101111114924222222222222824824221111111111114288481222a20a425522221289888888888888442291484444442412495244442412894422918888884810aa1211014414840842422222808882104148489224494a9224a92048d0508a2241140912144a5124489324a5a0508a2241a24890a0508a2241140912144ad18848a49292244992244992244992a49292244992244992244144244a124052904492204430944423222225499292a49292a49024849048241211454424492421922491246ba42241442291244992441411111111244992248924490a9a2480a452494a411435922422229a2480a4204430493422222252514a22222222221151101112118410c1240aa948441189208a522289884814242211918808a2c82482a224554992241111911291202291a42022918244448a48510aa21411111111051121114114192952a288224910458224222251904892245210452609a24810414444041111111151101112114491498228124444240a12499244124491498228124410491244441489484144484410452609a24810119128484422914804516492208a0411444424914824922491041111111105112111411499242825a94a4a92244992944482882424494548922449924492249220221289a82022242288229304512209524a49524444a2201189442211449149822891044952041111114400118988888820922492242211111111449252924292848484a81109224922124922494444001111442480041089524422222222224822518a484444222892944422229108120591881022220920114944922480241149d211111111111111114102214284284a94240a494208912449a288882489482292241149321a2512884422229224491211898844248844922449444424028d2401242a4aa4280a221145d44844444402111111444444a20844442222121111114288888890888888485292244992142989402449922449221111111188042249828888481481884844442222224208111111121111114444444414094444444444231291244992a288201251448d44a4254644001145444400114544440011454444001145246a44041051208ac8241a112852110512482a25294994544a529228a994a424912249455114491429924492442249892422892249455114495492544a29492a49aa4a924a525524298a245545924a5424221289125104221525a94a92248912492489242222a29254254992942449aa449528a9942222a2221225aa4491a4aa4852144922912425959294a4a452929294524a5292922492885224a9288aa29224494a249124919224492549925292940490245524222291282a12258a4491289254141545205225a92a4a92242529499214119124494a5225a9aa5292244991482492a424492a25514444922251248a4449aa442211519224552249529224492595244952490100"
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "STAKE_PER_DAY()": "4a91f7ae",
              "archiveHabit(uint32)": "b650673a",
              "checkIn(uint32,uint64)": "a0145927",
              "checked(address,uint64)": "a8389e0a",
              "claimYieldRewards()": "db0f53f9",
              "createHabit(bytes32)": "e9714e07",
              "deposit()": "d0e30db0",
              "epochNow()": "222ae786",
              "forceSettle(address,uint64,uint32)": "68188762",
              "funded(address,uint64)": "319bec54",
              "habits(address,uint32)": "99626634",
              "move(uint8,uint8,uint256)": "4f126f03",
              "owner()": "8da5cb5b",
              "prepareDay(uint64)": "48cc36b8",
              "setStakingAdapter(address)": "40729c58",
              "settle(address,uint64,uint32)": "9c14eb6e",
              "settled(address,uint64)": "39c51515",
              "stakingAdapter()": "4cbb98f4",
              "transferOwnership(address)": "f2fde38b",
              "treasury()": "61d027b3",
              "userHabitCounters(address)": "0e08454a",
              "userStates(address)": "0ecc535f"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/HabitTracker.sol\"\nobject \"HabitTracker_1052\" {\n    code {\n        {\n            /// @src 0:761:14020  \"contract HabitTracker {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"HabitTracker_1052\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:761:14020  \"contract HabitTracker {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            /// @src 0:3656:3709  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            if /** @src 0:3660:3683  \"_treasury == address(0)\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:3660:3683  \"_treasury == address(0)\" */ value0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n            /// @src 0:3656:3709  \"if (_treasury == address(0)) revert InvalidTreasury()\"\n            {\n                /// @src 0:3692:3709  \"InvalidTreasury()\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:3692:3709  \"InvalidTreasury()\" */ shl(227, 0x02979eb9))\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:3692:3709  \"InvalidTreasury()\" */ 4)\n            }\n            /// @src 0:3719:3739  \"treasury = _treasury\"\n            mstore(128, value0)\n            /// @src 0:761:14020  \"contract HabitTracker {...\"\n            sstore(/** @src 0:3749:3767  \"owner = msg.sender\" */ 0x01, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:3749:3767  \"owner = msg.sender\" */ 0x01), /** @src 0:761:14020  \"contract HabitTracker {...\" */ not(sub(shl(160, 1), 1))), /** @src 0:3757:3767  \"msg.sender\" */ caller()))\n            /// @src 0:761:14020  \"contract HabitTracker {...\"\n            let _2 := and(/** @src 0:3859:3888  \"_stakingAdapter != address(0)\" */ value1, /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n            /// @src 0:3855:3964  \"if (_stakingAdapter != address(0)) {...\"\n            if /** @src 0:3859:3888  \"_stakingAdapter != address(0)\" */ iszero(iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _2))\n            /// @src 0:3855:3964  \"if (_stakingAdapter != address(0)) {...\"\n            {\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14020  \"contract HabitTracker {...\" */ not(sub(shl(160, 1), 1))), _2))\n            }\n            let _3 := mload(64)\n            let _4 := datasize(\"HabitTracker_1052_deployed\")\n            codecopy(_3, dataoffset(\"HabitTracker_1052_deployed\"), _4)\n            setimmutable(_3, \"11\", mload(/** @src 0:3719:3739  \"treasury = _treasury\" */ 128))\n            /// @src 0:761:14020  \"contract HabitTracker {...\"\n            return(_3, _4)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 0:\"contracts/HabitTracker.sol\"\n    object \"HabitTracker_1052_deployed\" {\n        code {\n            {\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0e08454a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        mstore(_1, and(sload(keccak256(0, 64)), 0xffffffff))\n                        return(_1, 32)\n                    }\n                    case 0x0ecc535f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ 2)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot := keccak256(0, 64)\n                        let _2 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ dataSlot)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let _3 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 1))\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let _4 := sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 2))\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let value := and(sload(/** @src 0:1654:1701  \"mapping(address => UserState) public userStates\" */ add(dataSlot, 3)), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                        let memPos := mload(64)\n                        mstore(memPos, _2)\n                        mstore(add(memPos, 32), _3)\n                        mstore(add(memPos, 64), _4)\n                        mstore(add(memPos, 96), value)\n                        return(memPos, 128)\n                    }\n                    case 0x222ae786 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let var := 0\n                        /// @src 0:4039:4087  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4053:4068  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, var)\n                        return(memPos_1, 32)\n                    }\n                    case 0x319bec54 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value1 := abi_decode_uint64()\n                        mstore(0, and(value0, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ 5)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_1 := keccak256(0, 64)\n                        /// @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\"\n                        let dataSlot_2 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ value1, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ dataSlot_1)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        let _5 := sload(/** @src 0:1927:1987  \"mapping(address => mapping(uint64 => uint256)) public funded\" */ dataSlot_2)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _5)\n                        return(memPos_2, 32)\n                    }\n                    case 0x39c51515 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1_1 := abi_decode_uint64()\n                        mstore(0, and(value0_1, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ 7)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_3 := keccak256(0, 64)\n                        /// @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\"\n                        let dataSlot_4 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ value1_1, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ dataSlot_3)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        let _6 := sload(/** @src 0:2060:2121  \"mapping(address => mapping(uint64 => uint256)) public settled\" */ dataSlot_4)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, _6)\n                        return(memPos_3, 32)\n                    }\n                    case 0x40729c58 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 0:3469:3512  \"if (msg.sender != owner) revert OnlyOwner()\"\n                        if /** @src 0:3473:3492  \"msg.sender != owner\" */ iszero(eq(/** @src 0:3473:3483  \"msg.sender\" */ caller(), /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(sload(/** @src 0:3487:3492  \"owner\" */ 0x01), /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 0:3469:3512  \"if (msg.sender != owner) revert OnlyOwner()\"\n                        {\n                            /// @src 0:3501:3512  \"OnlyOwner()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:3501:3512  \"OnlyOwner()\" */ shl(224, 0x5fc483c5))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _7 := and(/** @src 0:4239:4264  \"_newAdapter == address(0)\" */ value0_2, /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:4235:4296  \"if (_newAdapter == address(0)) revert InvalidStakingAdapter()\"\n                        if /** @src 0:4239:4264  \"_newAdapter == address(0)\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _7)\n                        /// @src 0:4235:4296  \"if (_newAdapter == address(0)) revert InvalidStakingAdapter()\"\n                        {\n                            /// @src 0:4273:4296  \"InvalidStakingAdapter()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:4273:4296  \"InvalidStakingAdapter()\" */ shl(225, 0x6eba82c9))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _8 := sload(0)\n                        sstore(0, or(and(_8, shl(160, 0xffffffffffffffffffffffff)), _7))\n                        /// @src 0:4420:4466  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\"\n                        log3(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:4420:4466  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\" */ 0x258ff515b65e53911071aed3f954e1f58eca37dce2ed4a50766f00c9d0161048, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(_8, sub(shl(160, 1), 1)), /** @src 0:4420:4466  \"StakingAdapterUpdated(oldAdapter, _newAdapter)\" */ _7)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x48cc36b8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := 0\n                        value_1 := calldataload(4)\n                        let _9 := and(value_1, 0xffffffffffffffff)\n                        if iszero(eq(value_1, _9)) { revert(0, 0) }\n                        /// @src 0:8278:8288  \"epochNow()\"\n                        let var_1 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4039:4087  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_1 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4053:4068  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:8265:8311  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:8269:8288  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _9, /** @src 0:8269:8288  \"epoch != epochNow()\" */ var_1))\n                        /// @src 0:8265:8311  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:8297:8311  \"InvalidEpoch()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:8297:8311  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:8367:8377  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8356:8366  \"userStates\" */ 0x02)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_5 := keccak256(0, 64)\n                        mstore(0, /** @src 0:8367:8377  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, 4)\n                        let value_2 := and(sload(keccak256(0, 64)), 0xffffffff)\n                        /// @src 0:8442:8460  \"uint32 fundedCount\"\n                        let var_fundedCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8442:8460  \"uint32 fundedCount\"\n                        var_fundedCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8470:8494  \"uint32 insufficientCount\"\n                        let var_insufficientCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:8470:8494  \"uint32 insufficientCount\"\n                        var_insufficientCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        mstore(0, /** @src 0:8367:8377  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8527:8533  \"funded\" */ 0x05)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 0:8527:8552  \"funded[msg.sender][epoch]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _9)\n                        mstore(0x20, /** @src 0:8527:8545  \"funded[msg.sender]\" */ dataSlot_6)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:8504:8552  \"uint256 fundedBitmap = funded[msg.sender][epoch]\"\n                        let var_fundedBitmap := /** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:8527:8552  \"funded[msg.sender][epoch]\" */ dataSlot_7)\n                        /// @src 0:8576:8588  \"uint32 i = 1\"\n                        let var_i := /** @src 0:8587:8588  \"1\" */ 0x01\n                        /// @src 0:8571:9440  \"for (uint32 i = 1; i <= count;) {...\"\n                        for { }\n                        /** @src 0:8587:8588  \"1\" */ 0x01\n                        /// @src 0:8576:8588  \"uint32 i = 1\"\n                        { }\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let _10 := and(/** @src 0:8590:8600  \"i <= count\" */ var_i, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                            /// @src 0:8590:8600  \"i <= count\"\n                            if gt(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _10, /** @src 0:8590:8600  \"i <= count\" */ value_2) { break }\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            mstore(0, /** @src 0:8367:8377  \"msg.sender\" */ caller())\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            mstore(32, /** @src 0:8639:8645  \"habits\" */ 0x03)\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let dataSlot_8 := keccak256(0, 64)\n                            /// @src 0:8639:8660  \"habits[msg.sender][i]\"\n                            let dataSlot_9 := /** @src -1:-1:-1 */ 0\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _10)\n                            mstore(0x20, /** @src 0:8639:8657  \"habits[msg.sender]\" */ dataSlot_8)\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            dataSlot_9 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                            let _11 := sload(/** @src 0:8692:8706  \"habit.archived\" */ add(/** @src 0:8639:8660  \"habits[msg.sender][i]\" */ dataSlot_9, /** @src 0:8587:8588  \"1\" */ 0x01))\n                            /// @src 0:8691:8735  \"!habit.archived && habit.createdAtEpoch != 0\"\n                            let expr := /** @src 0:8691:8706  \"!habit.archived\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(shr(64, _11), 0xff))\n                            /// @src 0:8691:8735  \"!habit.archived && habit.createdAtEpoch != 0\"\n                            if expr\n                            {\n                                expr := /** @src 0:8710:8735  \"habit.createdAtEpoch != 0\" */ iszero(iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(_11, 0xffffffffffffffff)))\n                            }\n                            /// @src 0:8687:9399  \"if (!habit.archived && habit.createdAtEpoch != 0) {...\"\n                            if expr\n                            {\n                                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                                let result := shl(_10, /** @src 0:8587:8588  \"1\" */ 0x01)\n                                /// @src 0:8811:9385  \"if (fundedBitmap & mask == 0) { // Check if not already funded...\"\n                                if /** @src 0:8815:8839  \"fundedBitmap & mask == 0\" */ iszero(/** @src 0:8815:8834  \"fundedBitmap & mask\" */ and(var_fundedBitmap, result))\n                                /// @src 0:8811:9385  \"if (fundedBitmap & mask == 0) { // Check if not already funded...\"\n                                {\n                                    /// @src 0:761:14020  \"contract HabitTracker {...\"\n                                    let _12 := sload(/** @src 0:8898:8918  \"state.depositBalance\" */ dataSlot_5)\n                                    /// @src 0:8894:9367  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    switch /** @src 0:8898:8935  \"state.depositBalance >= STAKE_PER_DAY\" */ iszero(lt(_12, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                                    case /** @src 0:8894:9367  \"if (state.depositBalance >= STAKE_PER_DAY) {...\" */ 0 {\n                                        /// @src 0:9323:9342  \"insufficientCount++\"\n                                        var_insufficientCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(add(/** @src 0:9323:9342  \"insufficientCount++\" */ var_insufficientCount, /** @src 0:8587:8588  \"1\" */ 0x01), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                                    }\n                                    default /// @src 0:8894:9367  \"if (state.depositBalance >= STAKE_PER_DAY) {...\"\n                                    {\n                                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                                        sstore(dataSlot_5, add(_12, not(0x8ac7230489e7ffff)))\n                                        /// @src 0:9070:9090  \"state.blockedBalance\"\n                                        let _13 := add(dataSlot_5, /** @src 0:8587:8588  \"1\" */ 0x01)\n                                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                                        sstore(_13, add(sload(/** @src 0:9070:9107  \"state.blockedBalance += STAKE_PER_DAY\" */ _13), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                                        /// @src 0:9153:9166  \"fundedCount++\"\n                                        var_fundedCount := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(add(/** @src 0:9153:9166  \"fundedCount++\" */ var_fundedCount, /** @src 0:8587:8588  \"1\" */ 0x01), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                                        /// @src 0:9218:9238  \"fundedBitmap |= mask\"\n                                        var_fundedBitmap := or(var_fundedBitmap, result)\n                                    }\n                                }\n                            }\n                            /// @src 0:9424:9427  \"i++\"\n                            var_i := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(add(/** @src 0:9424:9427  \"i++\" */ var_i, /** @src 0:8587:8588  \"1\" */ 0x01), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                        }\n                        mstore(0, /** @src 0:8367:8377  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:8527:8533  \"funded\" */ 0x05)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_10 := keccak256(0, 64)\n                        /// @src 0:9458:9483  \"funded[msg.sender][epoch]\"\n                        let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _9)\n                        mstore(0x20, /** @src 0:9458:9476  \"funded[msg.sender]\" */ dataSlot_10)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        sstore(/** @src 0:9458:9483  \"funded[msg.sender][epoch]\" */ dataSlot_11, /** @src 0:761:14020  \"contract HabitTracker {...\" */ var_fundedBitmap)\n                        /// @src 0:9513:9575  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        let _14 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_14, and(var_fundedCount, 0xffffffff))\n                        mstore(add(_14, 32), and(var_insufficientCount, 0xffffffff))\n                        /// @src 0:9513:9575  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\"\n                        log3(_14, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 64, /** @src 0:9513:9575  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ 0xc3243be3f452579717c46da4c6f4efdcb6f123b63086b63e337d3984051defb5, /** @src 0:8367:8377  \"msg.sender\" */ caller(), /** @src 0:9513:9575  \"DayPrepared(msg.sender, epoch, fundedCount, insufficientCount)\" */ _9)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x4a91f7ae {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0x4cbb98f4 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_3 := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, value_3)\n                        return(memPos_5, 32)\n                    }\n                    case 0x4f126f03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value_4 := 0\n                        value_4 := calldataload(4)\n                        let _15 := and(value_4, 0xff)\n                        if iszero(eq(value_4, _15)) { revert(0, 0) }\n                        let value_5 := 0\n                        value_5 := calldataload(36)\n                        let _16 := and(value_5, 0xff)\n                        if iszero(eq(value_5, _16)) { revert(0, 0) }\n                        let value_6 := calldataload(68)\n                        /// @src 0:5351:5390  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 0:5355:5366  \"amount == 0\" */ iszero(value_6)\n                        /// @src 0:5351:5390  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:5375:5390  \"InvalidAmount()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5375:5390  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:5400:5443  \"if (from == to) revert InvalidBalanceType()\"\n                        if /** @src 0:5404:5414  \"from == to\" */ eq(_15, _16)\n                        /// @src 0:5400:5443  \"if (from == to) revert InvalidBalanceType()\"\n                        {\n                            /// @src 0:5423:5443  \"InvalidBalanceType()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5423:5443  \"InvalidBalanceType()\" */ shl(225, 0x7e5b1d11))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:5457:5506  \"from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL\"\n                        let expr_1 := /** @src 0:5457:5481  \"from > BALANCE_CLAIMABLE\" */ gt(_15, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 1)\n                        /// @src 0:5457:5506  \"from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL\"\n                        if iszero(expr_1)\n                        {\n                            expr_1 := /** @src 0:5485:5506  \"to > BALANCE_EXTERNAL\" */ gt(_16, /** @src 0:1182:1183  \"2\" */ 0x02)\n                        }\n                        /// @src 0:5453:5535  \"if (from > BALANCE_CLAIMABLE || to > BALANCE_EXTERNAL) revert InvalidBalanceType()\"\n                        if expr_1\n                        {\n                            /// @src 0:5515:5535  \"InvalidBalanceType()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5423:5443  \"InvalidBalanceType()\" */ shl(225, 0x7e5b1d11))\n                            /// @src 0:5515:5535  \"InvalidBalanceType()\"\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:5591:5601  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:5580:5590  \"userStates\" */ 0x02)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_12 := keccak256(0, 64)\n                        /// @src 0:5651:6003  \"if (from == BALANCE_DEPOSIT) {...\"\n                        switch /** @src 0:5655:5678  \"from == BALANCE_DEPOSIT\" */ iszero(_15)\n                        case /** @src 0:5651:6003  \"if (from == BALANCE_DEPOSIT) {...\" */ 0 {\n                            /// @src 0:5871:5893  \"state.claimableBalance\"\n                            let _17 := add(dataSlot_12, /** @src 0:5580:5590  \"userStates\" */ 0x02)\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let _18 := sload(/** @src 0:5871:5893  \"state.claimableBalance\" */ _17)\n                            /// @src 0:5867:5932  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                            if /** @src 0:5871:5902  \"state.claimableBalance < amount\" */ lt(_18, value_6)\n                            /// @src 0:5867:5932  \"if (state.claimableBalance < amount) revert InsufficientBalance()\"\n                            {\n                                /// @src 0:5911:5932  \"InsufficientBalance()\"\n                                mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5911:5932  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                                revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                            }\n                            sstore(_17, sub(_18, value_6))\n                        }\n                        default /// @src 0:5651:6003  \"if (from == BALANCE_DEPOSIT) {...\"\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let _19 := sload(/** @src 0:5698:5718  \"state.depositBalance\" */ dataSlot_12)\n                            /// @src 0:5694:5757  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                            if /** @src 0:5698:5727  \"state.depositBalance < amount\" */ lt(_19, value_6)\n                            /// @src 0:5694:5757  \"if (state.depositBalance < amount) revert InsufficientBalance()\"\n                            {\n                                /// @src 0:5736:5757  \"InsufficientBalance()\"\n                                mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5911:5932  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                                /// @src 0:5736:5757  \"InsufficientBalance()\"\n                                revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                            }\n                            sstore(dataSlot_12, sub(_19, value_6))\n                        }\n                        /// @src 0:6051:6333  \"if (to == BALANCE_DEPOSIT) {...\"\n                        switch /** @src 0:6055:6076  \"to == BALANCE_DEPOSIT\" */ iszero(_16)\n                        case /** @src 0:6051:6333  \"if (to == BALANCE_DEPOSIT) {...\" */ 0 {\n                            /// @src 0:6153:6333  \"if (to == BALANCE_CLAIMABLE) {...\"\n                            switch /** @src 0:6157:6180  \"to == BALANCE_CLAIMABLE\" */ eq(_16, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 1)\n                            case /** @src 0:6153:6333  \"if (to == BALANCE_CLAIMABLE) {...\" */ 0 {\n                                /// @src 0:6315:6321  \"amount\"\n                                fun_transfer(/** @src 0:5591:5601  \"msg.sender\" */ caller(), /** @src 0:6315:6321  \"amount\" */ value_6)\n                            }\n                            default /// @src 0:6153:6333  \"if (to == BALANCE_CLAIMABLE) {...\"\n                            {\n                                /// @src 0:6208:6230  \"state.claimableBalance\"\n                                let _20 := add(dataSlot_12, /** @src 0:5580:5590  \"userStates\" */ 0x02)\n                                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                                sstore(_20, add(sload(/** @src 0:6208:6240  \"state.claimableBalance += amount\" */ _20), /** @src 0:761:14020  \"contract HabitTracker {...\" */ value_6))\n                            }\n                        }\n                        default /// @src 0:6051:6333  \"if (to == BALANCE_DEPOSIT) {...\"\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            sstore(dataSlot_12, add(sload(/** @src 0:6104:6134  \"state.depositBalance += amount\" */ dataSlot_12), /** @src 0:761:14020  \"contract HabitTracker {...\" */ value_6))\n                        }\n                        /// @src 0:6356:6398  \"BalanceMoved(msg.sender, from, to, amount)\"\n                        let _21 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_21, value_6)\n                        /// @src 0:6356:6398  \"BalanceMoved(msg.sender, from, to, amount)\"\n                        log4(_21, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 32, /** @src 0:6356:6398  \"BalanceMoved(msg.sender, from, to, amount)\" */ 0x1a76aaec2e9828be3e61d555cee697fff809245531b81aeaabfc9802480b1f05, /** @src 0:5591:5601  \"msg.sender\" */ caller(), /** @src 0:6356:6398  \"BalanceMoved(msg.sender, from, to, amount)\" */ _15, _16)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0x61d027b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, and(/** @src 0:897:930  \"address public immutable treasury\" */ loadimmutable(\"11\"), /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_6, 32)\n                    }\n                    case 0x68188762 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value1_2 := abi_decode_uint64()\n                        /// @src 0:11212:11219  \"habitId\"\n                        fun_settleInternal(value0_3, value1_2, /** @src 0:761:14020  \"contract HabitTracker {...\" */ abi_decode_t_uint32())\n                        return(0, 0)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_7 := and(sload(/** @src 0:979:999  \"address public owner\" */ 1), /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, value_7)\n                        return(memPos_7, 32)\n                    }\n                    case 0x99626634 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value_8 := 0\n                        value_8 := calldataload(36)\n                        if iszero(eq(value_8, and(value_8, 0xffffffff))) { revert(0, 0) }\n                        mstore(0, and(value0_4, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ 3)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_13 := keccak256(0, 64)\n                        /// @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\"\n                        let dataSlot_14 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ value_8, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_13)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_14 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        let _22 := sload(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ dataSlot_14)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let _23 := sload(/** @src 0:1707:1765  \"mapping(address => mapping(uint32 => Habit)) public habits\" */ add(dataSlot_14, 1))\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, _22)\n                        mstore(add(memPos_8, 32), and(_23, 0xffffffffffffffff))\n                        mstore(add(memPos_8, 64), iszero(iszero(and(shr(64, _23), 0xff))))\n                        return(memPos_8, 96)\n                    }\n                    case 0x9c14eb6e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let value1_3 := abi_decode_uint64()\n                        let value2 := abi_decode_t_uint32()\n                        /// @src 0:10647:10657  \"epochNow()\"\n                        let var_2 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4039:4087  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_2 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4053:4068  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:10634:10690  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        if /** @src 0:10638:10657  \"epoch >= epochNow()\" */ iszero(lt(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:10638:10657  \"epoch >= epochNow()\" */ value1_3, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff), /** @src 0:10638:10657  \"epoch >= epochNow()\" */ var_2))\n                        /// @src 0:10634:10690  \"if (epoch >= epochNow()) revert CannotSettleCurrentDay()\"\n                        {\n                            /// @src 0:10666:10690  \"CannotSettleCurrentDay()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:10666:10690  \"CannotSettleCurrentDay()\" */ shl(224, 0xcf114bd9))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:10729:10736  \"habitId\"\n                        fun_settleInternal(value0_5, value1_3, value2)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xa0145927 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_6 := abi_decode_uint32()\n                        let value1_4 := abi_decode_uint64()\n                        /// @src 0:9844:9854  \"epochNow()\"\n                        let var_3 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4039:4087  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_3 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4053:4068  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let _24 := and(/** @src 0:9835:9854  \"epoch != epochNow()\" */ value1_4, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        /// @src 0:9831:9877  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        if /** @src 0:9835:9854  \"epoch != epochNow()\" */ iszero(eq(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _24, /** @src 0:9835:9854  \"epoch != epochNow()\" */ var_3))\n                        /// @src 0:9831:9877  \"if (epoch != epochNow()) revert InvalidEpoch()\"\n                        {\n                            /// @src 0:9863:9877  \"InvalidEpoch()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:8297:8311  \"InvalidEpoch()\" */ shl(224, 0xd5b25b63))\n                            /// @src 0:9863:9877  \"InvalidEpoch()\"\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9916:9926  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:9909:9915  \"habits\" */ 0x03)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_15 := keccak256(0, 64)\n                        /// @src 0:9909:9936  \"habits[msg.sender][habitId]\"\n                        let dataSlot_16 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:9909:9936  \"habits[msg.sender][habitId]\" */ value0_6, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:9909:9927  \"habits[msg.sender]\" */ dataSlot_15)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_16 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        let _25 := sload(/** @src 0:9950:9970  \"habit.createdAtEpoch\" */ add(/** @src 0:9909:9936  \"habits[msg.sender][habitId]\" */ dataSlot_16, /** @src 0:9950:9970  \"habit.createdAtEpoch\" */ 1))\n                        /// @src 0:9950:9993  \"habit.createdAtEpoch == 0 || habit.archived\"\n                        let expr_2 := /** @src 0:9950:9975  \"habit.createdAtEpoch == 0\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(_25, 0xffffffffffffffff))\n                        /// @src 0:9950:9993  \"habit.createdAtEpoch == 0 || habit.archived\"\n                        if iszero(expr_2)\n                        {\n                            expr_2 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(shr(64, _25), 0xff)\n                        }\n                        /// @src 0:9946:10017  \"if (habit.createdAtEpoch == 0 || habit.archived) revert HabitNotFound()\"\n                        if expr_2\n                        {\n                            /// @src 0:10002:10017  \"HabitNotFound()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:10002:10017  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let bits := and(value0_6, 0xffffffff)\n                        let result_1 := shl(bits, /** @src 0:9950:9970  \"habit.createdAtEpoch\" */ 1)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(0, /** @src 0:9916:9926  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10077:10083  \"funded\" */ 0x05)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_17 := keccak256(0, 64)\n                        /// @src 0:10077:10102  \"funded[msg.sender][epoch]\"\n                        let dataSlot_18 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _24)\n                        mstore(0x20, /** @src 0:10077:10095  \"funded[msg.sender]\" */ dataSlot_17)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_18 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:10073:10137  \"if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded()\"\n                        if /** @src 0:10077:10114  \"funded[msg.sender][epoch] & mask == 0\" */ iszero(/** @src 0:10077:10109  \"funded[msg.sender][epoch] & mask\" */ and(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:10077:10102  \"funded[msg.sender][epoch]\" */ dataSlot_18), /** @src 0:10077:10109  \"funded[msg.sender][epoch] & mask\" */ result_1))\n                        /// @src 0:10073:10137  \"if (funded[msg.sender][epoch] & mask == 0) revert DayNotFunded()\"\n                        {\n                            /// @src 0:10123:10137  \"DayNotFunded()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:10123:10137  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9916:9926  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10151:10158  \"checked\" */ 0x06)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_19 := keccak256(0, 64)\n                        /// @src 0:10151:10177  \"checked[msg.sender][epoch]\"\n                        let dataSlot_20 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _24)\n                        mstore(0x20, /** @src 0:10151:10170  \"checked[msg.sender]\" */ dataSlot_19)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_20 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:10147:10216  \"if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn()\"\n                        if /** @src 0:10151:10189  \"checked[msg.sender][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:10151:10184  \"checked[msg.sender][epoch] & mask\" */ and(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:10151:10177  \"checked[msg.sender][epoch]\" */ dataSlot_20), /** @src 0:10151:10184  \"checked[msg.sender][epoch] & mask\" */ result_1)))\n                        /// @src 0:10147:10216  \"if (checked[msg.sender][epoch] & mask != 0) revert AlreadyCheckedIn()\"\n                        {\n                            /// @src 0:10198:10216  \"AlreadyCheckedIn()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:10198:10216  \"AlreadyCheckedIn()\" */ shl(228, 0x0c98289f))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:9916:9926  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:10151:10158  \"checked\" */ 0x06)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_21 := keccak256(0, 64)\n                        /// @src 0:10235:10261  \"checked[msg.sender][epoch]\"\n                        let dataSlot_22 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _24)\n                        mstore(0x20, /** @src 0:10235:10254  \"checked[msg.sender]\" */ dataSlot_21)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_22 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        sstore(/** @src 0:10235:10261  \"checked[msg.sender][epoch]\" */ dataSlot_22, /** @src 0:10235:10269  \"checked[msg.sender][epoch] |= mask\" */ or(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:10235:10261  \"checked[msg.sender][epoch]\" */ dataSlot_22), /** @src 0:10235:10269  \"checked[msg.sender][epoch] |= mask\" */ result_1))\n                        /// @src 0:10284:10321  \"CheckedIn(msg.sender, habitId, epoch)\"\n                        log4(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:10284:10321  \"CheckedIn(msg.sender, habitId, epoch)\" */ 0xb004bd37af54c30d14936d8a5122253f9711256f1ba035cfd1788f88752ae682, /** @src 0:9916:9926  \"msg.sender\" */ caller(), /** @src 0:10284:10321  \"CheckedIn(msg.sender, habitId, epoch)\" */ bits, _24)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xa8389e0a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_7 := abi_decode_address()\n                        let value1_5 := abi_decode_uint64()\n                        mstore(0, and(value0_7, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ 6)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_23 := keccak256(0, 64)\n                        /// @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\"\n                        let dataSlot_24 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ value1_5, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                        mstore(0x20, /** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ dataSlot_23)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_24 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        let _26 := sload(/** @src 0:1993:2054  \"mapping(address => mapping(uint64 => uint256)) public checked\" */ dataSlot_24)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, _26)\n                        return(memPos_9, 32)\n                    }\n                    case 0xb650673a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_8 := abi_decode_uint32()\n                        mstore(0, /** @src 0:7611:7621  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7604:7610  \"habits\" */ 0x03)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_25 := keccak256(0, 64)\n                        /// @src 0:7604:7631  \"habits[msg.sender][habitId]\"\n                        let dataSlot_26 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:7604:7631  \"habits[msg.sender][habitId]\" */ value0_8, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff))\n                        mstore(0x20, /** @src 0:7604:7622  \"habits[msg.sender]\" */ dataSlot_25)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_26 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        /// @src 0:7645:7665  \"habit.createdAtEpoch\"\n                        let _27 := add(/** @src 0:7604:7631  \"habits[msg.sender][habitId]\" */ dataSlot_26, /** @src 0:7645:7665  \"habit.createdAtEpoch\" */ 1)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let _28 := sload(/** @src 0:7645:7665  \"habit.createdAtEpoch\" */ _27)\n                        /// @src 0:7641:7694  \"if (habit.createdAtEpoch == 0) revert HabitNotFound()\"\n                        if /** @src 0:7645:7670  \"habit.createdAtEpoch == 0\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(_28, 0xffffffffffffffff))\n                        /// @src 0:7641:7694  \"if (habit.createdAtEpoch == 0) revert HabitNotFound()\"\n                        {\n                            /// @src 0:7679:7694  \"HabitNotFound()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:10002:10017  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                            /// @src 0:7679:7694  \"HabitNotFound()\"\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:7704:7753  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        if /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(shr(64, _28), 0xff)\n                        /// @src 0:7704:7753  \"if (habit.archived) revert HabitAlreadyArchived()\"\n                        {\n                            /// @src 0:7731:7753  \"HabitAlreadyArchived()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:7731:7753  \"HabitAlreadyArchived()\" */ shl(227, 0x18383099))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(_27, or(and(_28, not(0xff0000000000000000)), 0x010000000000000000))\n                        mstore(0, /** @src 0:7611:7621  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7806:7816  \"userStates\" */ 0x02)\n                        /// @src 0:7806:7845  \"userStates[msg.sender].activeHabitCount\"\n                        let _29 := add(/** @src 0:761:14020  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:7604:7610  \"habits\" */ 0x03)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:7806:7847  \"userStates[msg.sender].activeHabitCount--\" */ _29, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7806:7847  \"userStates[msg.sender].activeHabitCount--\" */ _29), /** @src 0:761:14020  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(add(and(sload(/** @src 0:7806:7847  \"userStates[msg.sender].activeHabitCount--\" */ _29), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff), not(0)), 0xffffffff), 0xffffffff)))\n                        /// @src 0:7864:7898  \"HabitArchived(msg.sender, habitId)\"\n                        log3(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 0, /** @src 0:7864:7898  \"HabitArchived(msg.sender, habitId)\" */ 0x0731ac37a2c0967a9c8a91b6ca86ce30e1803b5b39201fee4ea7087db64e4ae3, /** @src 0:7611:7621  \"msg.sender\" */ caller(), /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:7864:7898  \"HabitArchived(msg.sender, habitId)\" */ value0_8, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff))\n                        return(0, 0)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:4755:4797  \"if (msg.value == 0) revert InvalidAmount()\"\n                        if /** @src 0:4759:4773  \"msg.value == 0\" */ iszero(/** @src 0:4759:4768  \"msg.value\" */ callvalue())\n                        /// @src 0:4755:4797  \"if (msg.value == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 0:4782:4797  \"InvalidAmount()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:5375:5390  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 0:4782:4797  \"InvalidAmount()\"\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:4818:4828  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(0x20, /** @src 0:4807:4817  \"userStates\" */ 0x02)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_27 := keccak256(0, 64)\n                        let _30 := sload(/** @src 0:4807:4857  \"userStates[msg.sender].depositBalance += msg.value\" */ dataSlot_27)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let sum := add(_30, /** @src 0:4759:4768  \"msg.value\" */ callvalue())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        if gt(_30, sum)\n                        {\n                            /// @src 0:886:891  \"86400\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 4, /** @src 0:886:891  \"86400\" */ 0x11)\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:886:891  \"86400\" */ 0x24)\n                        }\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        sstore(dataSlot_27, sum)\n                        /// @src 0:4872:4904  \"Deposited(msg.sender, msg.value)\"\n                        let _31 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_31, /** @src 0:4759:4768  \"msg.value\" */ callvalue())\n                        /// @src 0:4872:4904  \"Deposited(msg.sender, msg.value)\"\n                        log2(_31, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x20, /** @src 0:4872:4904  \"Deposited(msg.sender, msg.value)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:4818:4828  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        return(0, 0)\n                    }\n                    case 0xdb0f53f9 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 0:13460:13533  \"if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter()\"\n                        if /** @src 0:13464:13501  \"address(stakingAdapter) == address(0)\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ cleaned)\n                        /// @src 0:13460:13533  \"if (address(stakingAdapter) == address(0)) revert InvalidStakingAdapter()\"\n                        {\n                            /// @src 0:13510:13533  \"InvalidStakingAdapter()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:4273:4296  \"InvalidStakingAdapter()\" */ shl(225, 0x6eba82c9))\n                            /// @src 0:13510:13533  \"InvalidStakingAdapter()\"\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let _32 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(64)\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        mstore(_32, /** @src 0:761:14020  \"contract HabitTracker {...\" */ shl(226, 0x3bd73ee3))\n                        mstore(/** @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_32, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 4), /** @src 0:13657:13667  \"msg.sender\" */ caller())\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let _33 := call(gas(), cleaned, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\" */ _32, 36, _32, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 32)\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        if iszero(_33)\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        let expr_3 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                        if _33\n                        {\n                            let _34 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 32\n                            /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                            if gt(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 32, /** @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\" */ returndatasize()) { _34 := returndatasize() }\n                            finalize_allocation(_32, _34)\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            if slt(sub(/** @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\" */ add(_32, _34), /** @src 0:761:14020  \"contract HabitTracker {...\" */ _32), 32) { revert(0, 0) }\n                            /// @src 0:13629:13668  \"stakingAdapter.claimRewards(msg.sender)\"\n                            expr_3 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(_32)\n                        }\n                        /// @src 0:13731:13803  \"if (claimed > 0) {...\"\n                        if /** @src 0:13735:13746  \"claimed > 0\" */ iszero(iszero(expr_3))\n                        /// @src 0:13731:13803  \"if (claimed > 0) {...\"\n                        {\n                            /// @src 0:13784:13791  \"claimed\"\n                            fun_transfer(/** @src 0:13657:13667  \"msg.sender\" */ caller(), /** @src 0:13784:13791  \"claimed\" */ expr_3)\n                        }\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, expr_3)\n                        return(memPos_10, 32)\n                    }\n                    case 0xe9714e07 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_9 := calldataload(4)\n                        /// @src 0:6893:6942  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        if /** @src 0:6897:6915  \"text == bytes32(0)\" */ iszero(value_9)\n                        /// @src 0:6893:6942  \"if (text == bytes32(0)) revert HabitTextTooLong()\"\n                        {\n                            /// @src 0:6924:6942  \"HabitTextTooLong()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:6924:6942  \"HabitTextTooLong()\" */ shl(224, 0xcc67c13b))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        mstore(0, /** @src 0:6998:7008  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, 4)\n                        let dataSlot_28 := keccak256(0, 64)\n                        let value_10 := and(sload(/** @src 0:6978:7009  \"++userHabitCounters[msg.sender]\" */ dataSlot_28), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                        if eq(value_10, 0xffffffff)\n                        {\n                            /// @src 0:886:891  \"86400\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 4, /** @src 0:886:891  \"86400\" */ 0x11)\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:886:891  \"86400\" */ 0x24)\n                        }\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let ret := add(value_10, 1)\n                        sstore(/** @src 0:6978:7009  \"++userHabitCounters[msg.sender]\" */ dataSlot_28, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:6978:7009  \"++userHabitCounters[msg.sender]\" */ dataSlot_28), /** @src 0:761:14020  \"contract HabitTracker {...\" */ not(0xffffffff)), and(/** @src 0:6978:7009  \"++userHabitCounters[msg.sender]\" */ ret, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)))\n                        let _35 := and(/** @src 0:7023:7036  \"habitId > 255\" */ ret, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff)\n                        /// @src 0:7019:7062  \"if (habitId > 255) revert HabitIdTooLarge()\"\n                        if /** @src 0:7023:7036  \"habitId > 255\" */ gt(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _35, /** @src 0:7033:7036  \"255\" */ 0xff)\n                        /// @src 0:7019:7062  \"if (habitId > 255) revert HabitIdTooLarge()\"\n                        {\n                            /// @src 0:7045:7062  \"HabitIdTooLarge()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:7045:7062  \"HabitIdTooLarge()\" */ shl(224, 0xe9987cdd))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        /// @src 0:7187:7197  \"epochNow()\"\n                        let var_4 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0\n                        /// @src 0:4039:4087  \"return uint64(block.timestamp / SECONDS_PER_DAY)\"\n                        var_4 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:886:891  \"86400\" */ div(/** @src 0:4053:4068  \"block.timestamp\" */ timestamp(), /** @src 0:886:891  \"86400\" */ 0x015180), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff)\n                        let memPtr := mload(64)\n                        let newFreePtr := add(memPtr, 96)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr, value_9)\n                        /// @src 0:7127:7237  \"Habit({...\"\n                        let _36 := add(memPtr, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 32)\n                        mstore(_36, var_4)\n                        /// @src 0:7127:7237  \"Habit({...\"\n                        let _37 := add(memPtr, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 64)\n                        mstore(_37, 0)\n                        mstore(0, /** @src 0:6998:7008  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7097:7103  \"habits\" */ 0x03)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let dataSlot_29 := keccak256(0, 64)\n                        /// @src 0:7097:7124  \"habits[msg.sender][habitId]\"\n                        let dataSlot_30 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _35)\n                        mstore(0x20, /** @src 0:7097:7115  \"habits[msg.sender]\" */ dataSlot_29)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        dataSlot_30 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                        sstore(/** @src 0:7097:7124  \"habits[msg.sender][habitId]\" */ dataSlot_30, /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(memPtr))\n                        let memberSlot := add(/** @src 0:7097:7124  \"habits[msg.sender][habitId]\" */ dataSlot_30, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 1)\n                        sstore(memberSlot, or(and(sload(memberSlot), not(0xffffffffffffffff)), and(mload(_36), 0xffffffffffffffff)))\n                        let cleaned_1 := iszero(iszero(mload(_37)))\n                        let _38 := sload(memberSlot)\n                        sstore(memberSlot, or(and(_38, not(0xff0000000000000000)), and(shl(64, cleaned_1), 0xff0000000000000000)))\n                        mstore(0, /** @src 0:6998:7008  \"msg.sender\" */ caller())\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(32, /** @src 0:7268:7278  \"userStates\" */ 0x02)\n                        /// @src 0:7268:7307  \"userStates[msg.sender].activeHabitCount\"\n                        let _39 := add(/** @src 0:761:14020  \"contract HabitTracker {...\" */ keccak256(0, 64), /** @src 0:7097:7103  \"habits\" */ 0x03)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        sstore(/** @src 0:7268:7309  \"userStates[msg.sender].activeHabitCount++\" */ _39, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(sload(/** @src 0:7268:7309  \"userStates[msg.sender].activeHabitCount++\" */ _39), /** @src 0:761:14020  \"contract HabitTracker {...\" */ not(0xffffffff)), and(and(add(and(sload(/** @src 0:7268:7309  \"userStates[msg.sender].activeHabitCount++\" */ _39), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff), 1), 0xffffffff), 0xffffffff)))\n                        /// @src 0:7335:7374  \"HabitCreated(msg.sender, habitId, text)\"\n                        let _40 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(64)\n                        mstore(_40, value_9)\n                        /// @src 0:7335:7374  \"HabitCreated(msg.sender, habitId, text)\"\n                        log3(_40, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 32, /** @src 0:7335:7374  \"HabitCreated(msg.sender, habitId, text)\" */ 0x1ef893a6ee29548c033856cb472a6c9745c5430a467e6e1d6bd3c90ea1e6b453, /** @src 0:6998:7008  \"msg.sender\" */ caller(), /** @src 0:7335:7374  \"HabitCreated(msg.sender, habitId, text)\" */ _35)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let memPos_11 := mload(64)\n                        mstore(memPos_11, _35)\n                        return(memPos_11, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_9 := abi_decode_address()\n                        let _41 := sload(/** @src 0:3487:3492  \"owner\" */ 0x01)\n                        /// @src 0:3469:3512  \"if (msg.sender != owner) revert OnlyOwner()\"\n                        if /** @src 0:3473:3492  \"msg.sender != owner\" */ iszero(eq(/** @src 0:3473:3483  \"msg.sender\" */ caller(), /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(_41, sub(shl(160, 1), 1))))\n                        /// @src 0:3469:3512  \"if (msg.sender != owner) revert OnlyOwner()\"\n                        {\n                            /// @src 0:3501:3512  \"OnlyOwner()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:3501:3512  \"OnlyOwner()\" */ shl(224, 0x5fc483c5))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        let _42 := and(/** @src 0:4561:4583  \"newOwner == address(0)\" */ value0_9, /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:4557:4609  \"if (newOwner == address(0)) revert InvalidTreasury()\"\n                        if /** @src 0:4561:4583  \"newOwner == address(0)\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ _42)\n                        /// @src 0:4557:4609  \"if (newOwner == address(0)) revert InvalidTreasury()\"\n                        {\n                            /// @src 0:4592:4609  \"InvalidTreasury()\"\n                            mstore(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, /** @src 0:4592:4609  \"InvalidTreasury()\" */ shl(227, 0x02979eb9))\n                            revert(/** @src 0:761:14020  \"contract HabitTracker {...\" */ 0, 4)\n                        }\n                        sstore(/** @src 0:3487:3492  \"owner\" */ 0x01, /** @src 0:761:14020  \"contract HabitTracker {...\" */ or(and(_41, shl(160, 0xffffffffffffffffffffffff)), _42))\n                        return(0, 0)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_uint64() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_t_uint32() -> value\n            {\n                value := calldataload(68)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_uint32() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                    /// @src 0:761:14020  \"contract HabitTracker {...\"\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @ast-id 476 @src 0:6415:6579  \"function _transfer(address to, uint256 amount) private {...\"\n            function fun_transfer(var_to, var_amount)\n            {\n                /// @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\"\n                let expr_component := call(gas(), var_to, var_amount, 0, 0, 0, 0)\n                let data := 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        mstore(4, 0x41)\n                        revert(/** @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ returndatasize())\n                }\n                /// @src 0:6535:6572  \"if (!success) revert TransferFailed()\"\n                if /** @src 0:6539:6547  \"!success\" */ iszero(expr_component)\n                /// @src 0:6535:6572  \"if (!success) revert TransferFailed()\"\n                {\n                    /// @src 0:6556:6572  \"TransferFailed()\"\n                    mstore(/** @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:6556:6572  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                    revert(/** @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\" */ 0, /** @src 0:6556:6572  \"TransferFailed()\" */ 4)\n                }\n            }\n            /// @ast-id 1005 @src 0:11627:13090  \"function _settleInternal(address user, uint64 epoch, uint32 habitId) private {...\"\n            function fun_settleInternal(var_user, var_epoch, var_habitId)\n            {\n                /// @src 0:11718:11730  \"habits[user]\"\n                let dataSlot := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let _1 := and(var_user, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11718:11724  \"habits\" */ 0x03)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11718:11739  \"habits[user][habitId]\"\n                let dataSlot_2 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:11718:11739  \"habits[user][habitId]\" */ var_habitId, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffff))\n                mstore(0x20, /** @src 0:11718:11730  \"habits[user]\" */ dataSlot_1)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                dataSlot_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11714:11783  \"if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound()\"\n                if /** @src 0:11718:11759  \"habits[user][habitId].createdAtEpoch == 0\" */ iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(sload(/** @src 0:11718:11754  \"habits[user][habitId].createdAtEpoch\" */ add(/** @src 0:11718:11739  \"habits[user][habitId]\" */ dataSlot_2, /** @src 0:11718:11754  \"habits[user][habitId].createdAtEpoch\" */ 1)), /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                /// @src 0:11714:11783  \"if (habits[user][habitId].createdAtEpoch == 0) revert HabitNotFound()\"\n                {\n                    /// @src 0:11768:11783  \"HabitNotFound()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:10002:10017  \"HabitNotFound()\" */ shl(224, 0xa7a9536d))\n                    /// @src 0:11768:11783  \"HabitNotFound()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11768:11783  \"HabitNotFound()\" */ 4)\n                }\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let bits := and(var_habitId, 0xffffffff)\n                let result := shl(bits, /** @src 0:11718:11754  \"habits[user][habitId].createdAtEpoch\" */ 1)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11843:11849  \"funded\" */ 0x05)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11843:11862  \"funded[user][epoch]\"\n                let dataSlot_4 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:11843:11862  \"funded[user][epoch]\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:11843:11855  \"funded[user]\" */ dataSlot_3)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                dataSlot_4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11839:11897  \"if (funded[user][epoch] & mask == 0) revert DayNotFunded()\"\n                if /** @src 0:11843:11874  \"funded[user][epoch] & mask == 0\" */ iszero(/** @src 0:11843:11869  \"funded[user][epoch] & mask\" */ and(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:11843:11862  \"funded[user][epoch]\" */ dataSlot_4), /** @src 0:11843:11869  \"funded[user][epoch] & mask\" */ result))\n                /// @src 0:11839:11897  \"if (funded[user][epoch] & mask == 0) revert DayNotFunded()\"\n                {\n                    /// @src 0:11883:11897  \"DayNotFunded()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:10123:10137  \"DayNotFunded()\" */ shl(225, 0x57d2715b))\n                    /// @src 0:11883:11897  \"DayNotFunded()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11883:11897  \"DayNotFunded()\" */ 4)\n                }\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11911:11918  \"settled\" */ 0x07)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11911:11931  \"settled[user][epoch]\"\n                let dataSlot_6 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:11911:11931  \"settled[user][epoch]\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:11911:11924  \"settled[user]\" */ dataSlot_5)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                dataSlot_6 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11907:11968  \"if (settled[user][epoch] & mask != 0) revert AlreadySettled()\"\n                if /** @src 0:11911:11943  \"settled[user][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:11911:11938  \"settled[user][epoch] & mask\" */ and(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:11911:11931  \"settled[user][epoch]\" */ dataSlot_6), /** @src 0:11911:11938  \"settled[user][epoch] & mask\" */ result)))\n                /// @src 0:11907:11968  \"if (settled[user][epoch] & mask != 0) revert AlreadySettled()\"\n                {\n                    /// @src 0:11952:11968  \"AlreadySettled()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:11952:11968  \"AlreadySettled()\" */ shl(232, 5640185))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:11952:11968  \"AlreadySettled()\" */ 4)\n                }\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:11911:11918  \"settled\" */ 0x07)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:11987:12007  \"settled[user][epoch]\"\n                let dataSlot_8 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:11987:12007  \"settled[user][epoch]\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:11987:12000  \"settled[user]\" */ dataSlot_7)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                dataSlot_8 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                sstore(/** @src 0:11987:12007  \"settled[user][epoch]\" */ dataSlot_8, /** @src 0:11987:12015  \"settled[user][epoch] |= mask\" */ or(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:11987:12007  \"settled[user][epoch]\" */ dataSlot_8), /** @src 0:11987:12015  \"settled[user][epoch] |= mask\" */ result))\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:12051:12061  \"userStates\" */ 0x02)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_9 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12143:12163  \"state.blockedBalance\"\n                let _2 := add(dataSlot_9, /** @src 0:11718:11754  \"habits[user][habitId].createdAtEpoch\" */ 1)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let _3 := sload(/** @src 0:12143:12163  \"state.blockedBalance\" */ _2)\n                /// @src 0:12139:12209  \"if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance()\"\n                if /** @src 0:12143:12179  \"state.blockedBalance < STAKE_PER_DAY\" */ lt(_3, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                /// @src 0:12139:12209  \"if (state.blockedBalance < STAKE_PER_DAY) revert InsufficientBalance()\"\n                {\n                    /// @src 0:12188:12209  \"InsufficientBalance()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:5911:5932  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                    /// @src 0:12188:12209  \"InsufficientBalance()\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:12188:12209  \"InsufficientBalance()\" */ 4)\n                }\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                sstore(_2, add(_3, not(0x8ac7230489e7ffff)))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                mstore(0x20, /** @src 0:12293:12300  \"checked\" */ 0x06)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                let dataSlot_10 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12293:12313  \"checked[user][epoch]\"\n                let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:12293:12313  \"checked[user][epoch]\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                mstore(0x20, /** @src 0:12293:12306  \"checked[user]\" */ dataSlot_10)\n                /// @src 0:761:14020  \"contract HabitTracker {...\"\n                dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x40)\n                /// @src 0:12289:13084  \"if (checked[user][epoch] & mask != 0) {...\"\n                switch /** @src 0:12293:12325  \"checked[user][epoch] & mask != 0\" */ iszero(iszero(/** @src 0:12293:12320  \"checked[user][epoch] & mask\" */ and(/** @src 0:761:14020  \"contract HabitTracker {...\" */ sload(/** @src 0:12293:12313  \"checked[user][epoch]\" */ dataSlot_11), /** @src 0:12293:12320  \"checked[user][epoch] & mask\" */ result)))\n                case /** @src 0:12289:13084  \"if (checked[user][epoch] & mask != 0) {...\" */ 0 {\n                    /// @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\"\n                    let expr_component := call(gas(), /** @src 0:12982:12990  \"treasury\" */ loadimmutable(\"11\"), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000, /** @src -1:-1:-1 */ 0, 0, 0, 0)\n                    /// @src 0:6499:6525  \"to.call{value: amount}(\\\"\\\")\"\n                    let data := /** @src -1:-1:-1 */ 0\n                    /// @src 0:761:14020  \"contract HabitTracker {...\"\n                    switch returndatasize()\n                    case 0 { data := 96 }\n                    default {\n                        let _4 := returndatasize()\n                        if gt(_4, 0xffffffffffffffff)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:886:891  \"86400\" */ shl(224, 0x4e487b71))\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x24)\n                        }\n                        let memPtr := mload(0x40)\n                        finalize_allocation(memPtr, add(and(add(_4, 31), not(31)), 0x20))\n                        mstore(memPtr, _4)\n                        data := memPtr\n                        returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ returndatasize())\n                    }\n                    /// @src 0:6535:6572  \"if (!success) revert TransferFailed()\"\n                    if /** @src 0:6539:6547  \"!success\" */ iszero(expr_component)\n                    /// @src 0:6535:6572  \"if (!success) revert TransferFailed()\"\n                    {\n                        /// @src 0:6556:6572  \"TransferFailed()\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:6556:6572  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:6556:6572  \"TransferFailed()\" */ 4)\n                    }\n                    /// @src 0:13025:13073  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _5 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_5, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:13025:13073  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_5, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x20, /** @src 0:13025:13073  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xbe6be2b5187a2494043c3b540976811d976bcf8af560c95141c061bac9c206ba, _1, bits, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:13025:13073  \"SettledFail(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n                default /// @src 0:12289:13084  \"if (checked[user][epoch] & mask != 0) {...\"\n                {\n                    /// @src 0:12494:12813  \"if (address(stakingAdapter) != address(0)) {...\"\n                    switch /** @src 0:12498:12535  \"address(stakingAdapter) != address(0)\" */ iszero(iszero(/** @src 0:761:14020  \"contract HabitTracker {...\" */ and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))))\n                    case /** @src 0:12494:12813  \"if (address(stakingAdapter) != address(0)) {...\" */ 0 {\n                        /// @src 0:12757:12779  \"state.claimableBalance\"\n                        let _6 := add(dataSlot_9, /** @src 0:12051:12061  \"userStates\" */ 0x02)\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        sstore(_6, add(sload(/** @src 0:12757:12796  \"state.claimableBalance += STAKE_PER_DAY\" */ _6), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000))\n                    }\n                    default /// @src 0:12494:12813  \"if (address(stakingAdapter) != address(0)) {...\"\n                    {\n                        /// @src 0:761:14020  \"contract HabitTracker {...\"\n                        let cleaned := and(sload(/** @src -1:-1:-1 */ 0), /** @src 0:761:14020  \"contract HabitTracker {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if iszero(extcodesize(cleaned))\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        let _7 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(0x40)\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        mstore(_7, /** @src 0:761:14020  \"contract HabitTracker {...\" */ shl(225, 0x56e4bb97))\n                        mstore(/** @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ add(_7, 4), /** @src 0:761:14020  \"contract HabitTracker {...\" */ _1)\n                        mstore(add(/** @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ _7, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 36), /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        let _8 := call(gas(), cleaned, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000, /** @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\" */ _7, 68, _7, /** @src -1:-1:-1 */ 0)\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if iszero(_8)\n                        {\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            let pos := mload(0x40)\n                            returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:761:14020  \"contract HabitTracker {...\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 0:12555:12618  \"stakingAdapter.stake{value: STAKE_PER_DAY}(user, STAKE_PER_DAY)\"\n                        if _8\n                        {\n                            finalize_allocation(_7, /** @src -1:-1:-1 */ 0)\n                            /// @src 0:761:14020  \"contract HabitTracker {...\"\n                            dataSlot := /** @src -1:-1:-1 */ 0\n                        }\n                    }\n                    /// @src 0:12831:12882  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    let _9 := /** @src 0:761:14020  \"contract HabitTracker {...\" */ mload(0x40)\n                    mstore(_9, /** @src 0:829:837  \"10 ether\" */ 0x8ac7230489e80000)\n                    /// @src 0:12831:12882  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\"\n                    log4(_9, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0x20, /** @src 0:12831:12882  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ 0xebd85bf239b4a8f2a28f2390709a11df0f198ec6857e7125e3fdab5c0dba8209, _1, bits, /** @src 0:761:14020  \"contract HabitTracker {...\" */ and(/** @src 0:12831:12882  \"SettledSuccess(user, habitId, epoch, STAKE_PER_DAY)\" */ var_epoch, /** @src 0:761:14020  \"contract HabitTracker {...\" */ 0xffffffffffffffff))\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d869092f3061bc4ef123022011168cd39c27099a0637ec74145d9e5ca42c291e64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "1d59a8c873507229f48eb736315e6098d4ede97a5f23bee0b39f3ab8c50ab7dc",
          "factoryDependencies": {}
        }
      },
      "contracts/adapters/MoonwellAdapter.sol": {
        "IComptroller": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "rewardType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "holder",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mTokens",
                  "type": "address[]"
                }
              ],
              "name": "claimReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mTokens\",\"type\":\"address[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Moonwell Comptroller interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/MoonwellAdapter.sol\":\"IComptroller\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/MoonwellAdapter.sol\":{\"keccak256\":\"0x3b63fb72bf0b173aa37f4e149094549e41e30ba53befbfa0ce3915bb38eb5afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5deda0d0b3173282ebeb2a349a314f42f472dc6a8e33e42f8b4f29427dd7393\",\"dweb:/ipfs/QmPwFk4PCTh9RXWbQMjxprzGJG9AjfsoKeDbqFWszbFczi\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "claimReward(uint8,address,address[])": "744532ae"
            }
          },
          "irOptimized": ""
        },
        "IERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Minimal ERC20 interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/MoonwellAdapter.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/MoonwellAdapter.sol\":{\"keccak256\":\"0x3b63fb72bf0b173aa37f4e149094549e41e30ba53befbfa0ce3915bb38eb5afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5deda0d0b3173282ebeb2a349a314f42f472dc6a8e33e42f8b4f29427dd7393\",\"dweb:/ipfs/QmPwFk4PCTh9RXWbQMjxprzGJG9AjfsoKeDbqFWszbFczi\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "transfer(address,uint256)": "a9059cbb"
            }
          },
          "irOptimized": ""
        },
        "IMTokenNative": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "exchangeRateStored",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mint",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "redeemTokens",
                  "type": "uint256"
                }
              ],
              "name": "redeem",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "redeemAmount",
                  "type": "uint256"
                }
              ],
              "name": "redeemUnderlying",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Moonwell mToken interface (native GLMR version - CEther-style)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/MoonwellAdapter.sol\":\"IMTokenNative\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/MoonwellAdapter.sol\":{\"keccak256\":\"0x3b63fb72bf0b173aa37f4e149094549e41e30ba53befbfa0ce3915bb38eb5afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5deda0d0b3173282ebeb2a349a314f42f472dc6a8e33e42f8b4f29427dd7393\",\"dweb:/ipfs/QmPwFk4PCTh9RXWbQMjxprzGJG9AjfsoKeDbqFWszbFczi\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "balanceOf(address)": "70a08231",
              "exchangeRateStored()": "182df0f5",
              "mint()": "1249c58b",
              "redeem(uint256)": "db006a75",
              "redeemUnderlying(uint256)": "852a12e3"
            }
          },
          "irOptimized": ""
        },
        "MoonwellAdapter": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_mToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_comptroller",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_habitTracker",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "InvalidAmount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "MintFailed",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OnlyHabitTracker",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "RedeemFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "RewardsClaimed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "mTokens",
                  "type": "uint256"
                }
              ],
              "name": "Staked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "mTokens",
                  "type": "uint256"
                }
              ],
              "name": "Unstaked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "claimRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "claimed",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "comptroller",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "getPendingRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "pending",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getStakedAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "staked",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "habitTracker",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mToken",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userStakes",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_habitTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyHabitTracker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTokens\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"habitTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Supports native GLMR staking via mGLMR market Terminology: - Yield Stake: User rewards from successful habits staked here (userStakes) - Yield Rewards: Additional rewards generated from Moonwell (WELL tokens + supply APY) When user completes a habit successfully, their reward is sent here as a yield stake to generate additional yield rewards over time\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Best-effort claim; returns 0 if rewards not activeYield rewards = WELL tokens earned from supplying to MoonwellNote: Moonwell claims are protocol-wide, not per-user\",\"params\":{\"user\":\"Address of the user (unused in Moonwell - claims for entire protocol)\"},\"returns\":{\"claimed\":\"Amount of yield rewards claimed (0 if none)\"}},\"constructor\":{\"params\":{\"_comptroller\":\"Moonwell Comptroller address\",\"_habitTracker\":\"HabitTracker contract address\",\"_mToken\":\"Moonwell mGLMR token address\"}},\"getPendingRewards(address)\":{\"details\":\"Moonwell doesn't expose claimable yield rewards on-chain; use off-chain calculationYield rewards accumulate automatically in mToken exchange rate\",\"returns\":{\"pending\":\"Always returns 0\"}},\"getStakedAmount(address)\":{\"params\":{\"who\":\"Address to check\"},\"returns\":{\"staked\":\"Amount of GLMR in yield stake (principal only, excludes yield rewards)\"}},\"stake(address,uint256)\":{\"details\":\"msg.value must equal amount (native token)This converts user rewards into yield stakes that generate yield rewards\",\"params\":{\"amount\":\"Amount of GLMR to stake (user's earned reward)\",\"user\":\"Address of the user whose rewards are being staked\"}},\"unstake(address,uint256)\":{\"details\":\"Redeems mGLMR and sends GLMR back to HabitTrackerReturns both yield stake principal and any accumulated yield rewards\",\"params\":{\"amount\":\"Amount of underlying GLMR to unstake\",\"user\":\"Address of the user whose rewards are being unstaked\"}}},\"title\":\"MoonwellAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"Claim yield rewards (WELL tokens) from Moonwell\"},\"getPendingRewards(address)\":{\"notice\":\"Get pending yield rewards (not supported by Moonwell directly)\"},\"getStakedAmount(address)\":{\"notice\":\"Get user's yield stake amount (in underlying GLMR)\"},\"stake(address,uint256)\":{\"notice\":\"Create yield stake by staking user rewards into Moonwell\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake GLMR from Moonwell (redeem yield stake + accumulated yield rewards)\"}},\"notice\":\"Adapter for HabitTracker to create yield stakes in Moonwell on Moonbeam\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/MoonwellAdapter.sol\":\"MoonwellAdapter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/MoonwellAdapter.sol\":{\"keccak256\":\"0x3b63fb72bf0b173aa37f4e149094549e41e30ba53befbfa0ce3915bb38eb5afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5deda0d0b3173282ebeb2a349a314f42f472dc6a8e33e42f8b4f29427dd7393\",\"dweb:/ipfs/QmPwFk4PCTh9RXWbQMjxprzGJG9AjfsoKeDbqFWszbFczi\"]},\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 100/65776 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 3772\n// Code size = 13111 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x20060\n    16: s0 = i32 [0x20060]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30090\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 8 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x20060]\n    41: u32 [0x20060] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x20060]\n    68: jump @47 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30090\n    77: i32 a0 = a0 + 0\n    79: ecalli 15 // 'set_immutable_data'\n    81: jump @47\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @15\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @15\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 9 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 16 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 (gas: 24)\n   874: sp = sp + 0xffffffffffffff60\n   878: u64 [sp + 0x98] = ra\n   882: u64 [sp + 0x90] = s0\n   886: u64 [sp + 0x88] = s1\n   890: s0 = sp + 0xa0\n   894: sp = sp & 0xffffffffffffffe0\n   897: a4 = u64 [a3]\n   899: u64 [sp + 0x38] = a4\n   902: a4 = u64 [a3 + 0x8]\n   905: u64 [sp + 0x30] = a4\n   908: a4 = u64 [a3 + 0x10]\n   911: u64 [sp + 0x28] = a4\n   914: a3 = u64 [a3 + 0x18]\n   917: u64 [sp + 0x20] = a3\n   920: a3 = u64 [a2]\n   922: u64 [sp + 0x18] = a3\n   925: a3 = u64 [a2 + 0x8]\n   928: u64 [sp + 0x10] = a3\n   931: a3 = u64 [a2 + 0x10]\n   934: u64 [sp + 0x8] = a3\n   937: a2 = u64 [a2 + 0x18]\n   940: u64 [sp] = a2\n   942: s1 = a1\n   944: ra = 6, jump @15\n      : @14 [@dyn 3] (gas: 35)\n   948: a1 = u64 [sp]\n   950: a1 = reverse a1\n   952: a2 = u64 [sp + 0x8]\n   955: a2 = reverse a2\n   957: a3 = u64 [sp + 0x10]\n   960: a3 = reverse a3\n   962: a4 = u64 [sp + 0x18]\n   965: a4 = reverse a4\n   967: u64 [sp + 0x58] = a4\n   970: u64 [sp + 0x50] = a3\n   973: u64 [sp + 0x48] = a2\n   976: u64 [sp + 0x40] = a1\n   979: a1 = u64 [sp + 0x20]\n   982: a1 = reverse a1\n   984: a2 = u64 [sp + 0x28]\n   987: a2 = reverse a2\n   989: a3 = u64 [sp + 0x30]\n   992: a3 = reverse a3\n   994: a4 = u64 [sp + 0x38]\n   997: a4 = reverse a4\n   999: u64 [sp + 0x78] = a4\n  1002: u64 [sp + 0x70] = a3\n  1005: u64 [sp + 0x68] = a2\n  1008: u64 [sp + 0x60] = a1\n  1011: i32 a2 = a0 + 0\n  1013: i32 a3 = s1 + 0\n  1015: i32 a0 = sp + 0x40\n  1018: a1 = 0x2\n  1021: ecalli 7 // 'deposit_event'\n  1023: sp = s0 + 0xffffffffffffff60\n  1027: ra = u64 [sp + 0x98]\n  1031: s0 = u64 [sp + 0x90]\n  1035: s1 = u64 [sp + 0x88]\n  1039: sp = sp + 0xa0\n  1043: ret\n      : @15 (gas: 2)\n  1045: i32 a2 = a0 >> 0x10\n  1048: jump @20 if a2 != 0\n      : @16 (gas: 4)\n  1051: a1 = a1 + a0\n  1054: i32 a1 = a1 + 0x1f\n  1057: a1 = a1 & 0xffffffffffffffe0\n  1060: jump @20 if a1 >u 65536\n      : @17 (gas: 3)\n  1066: a2 = 0x20068\n  1071: a3 = i32 [0x20068]\n  1076: jump @19 if a3 >=u a1\n      : @18 (gas: 2)\n  1079: u32 [0x20068] = a1\n  1084: fallthrough\n      : @19 (gas: 4)\n  1085: a1 = 0x20070\n  1090: i32 a0 = a0 + 0\n  1092: a0 = a0 + a1\n  1095: ret\n      : @20 (gas: 1)\n  1097: trap\n      : @21 (gas: 6)\n  1098: sp = sp + 0xfffffffffffffff0\n  1101: u64 [sp + 0x8] = ra\n  1104: u64 [sp] = s0\n  1106: s0 = a0 & 0x1\n  1109: ecalli 4 // 'call_data_size'\n  1111: fallthrough\n      : @22 (gas: 2)\n  1112: u32 [0x20064] = a0\n  1117: jump @24 if s0 == 0\n      : @23 (gas: 1)\n  1120: ra = 8, jump @25\n      : @24 [@dyn 4] (gas: 1)\n  1124: ra = 10, jump @50\n      : @25 [@dyn 5] (gas: 15)\n  1129: sp = sp + 0xfffffffffffffda0\n  1133: a0 = sp + 0x200\n  1137: u64 [a0 + 0x58] = ra\n  1140: u64 [a0 + 0x50] = s0\n  1143: u64 [a0 + 0x48] = s1\n  1146: s0 = sp + 0x260\n  1150: sp = sp & 0xffffffffffffffe0\n  1153: a0 = sp + 0x200\n  1157: u64 [a0 + 56] = 0\n  1160: u64 [a0 + 48] = 0\n  1163: u64 [a0 + 40] = 0\n  1166: u64 [a0 + 32] = 0\n  1169: i32 a0 = sp + 0x220\n  1173: ecalli 17 // 'value_transferred'\n  1175: fallthrough\n      : @26 (gas: 9)\n  1176: a4 = sp + 0x200\n  1180: a0 = u64 [a4 + 0x30]\n  1183: a1 = u64 [a4 + 0x38]\n  1186: a2 = u64 [a4 + 0x28]\n  1189: a3 = u64 [a4 + 0x20]\n  1192: a1 = a1 | a2\n  1195: a0 = a0 | a3\n  1198: a0 = a0 | a1\n  1201: jump @40 if a0 != 0\n      : @27 (gas: 16)\n  1205: s1 = i32 [0x20064]\n  1210: a0 = s1 << 0x20\n  1213: a0 = a0 >> 0x20\n  1216: a0 = a0 + 0x1f\n  1219: a0 = a0 & 0xffffffffffffffe0\n  1222: a1 = a0 + 0xe0\n  1226: a0 = a1 <u a0\n  1229: a2 = sp + 0x200\n  1233: u64 [a2] = a1\n  1235: u64 [a2 + 0x8] = a0\n  1238: a0 = 0 if a0 != 0\n  1240: u64 [a2 + 0x10] = a0\n  1243: a0 = 0x40\n  1246: a1 = sp + 0x200\n  1250: u64 [a2 + 24] = 0\n  1253: ra = 12, jump @9\n      : @28 [@dyn 6] (gas: 3)\n  1258: a0 = 0xe0\n  1262: a1 = s1\n  1264: ra = 14, jump @15\n      : @29 [@dyn 7] (gas: 5)\n  1269: i32 a0 = a0 + 0\n  1271: a1 = s1\n  1273: a2 = 0\n  1275: ecalli 2 // 'call_data_copy'\n  1277: fallthrough\n      : @30 (gas: 1)\n  1278: jump @41 if s1 <=u 95\n      : @31 (gas: 7)\n  1283: u64 [sp + 472] = 0\n  1287: u64 [sp + 464] = 0\n  1291: u64 [sp + 448] = 0xe0\n  1297: a0 = sp + 0x1e0\n  1301: a1 = sp + 0x1c0\n  1305: u64 [sp + 456] = 0\n  1309: ra = 16, jump @384\n      : @32 [@dyn 8] (gas: 15)\n  1314: a0 = u64 [sp + 0x1e0]\n  1318: u64 [sp + 0x58] = a0\n  1321: a0 = u64 [sp + 0x1e8]\n  1325: u64 [sp + 0x48] = a0\n  1328: a0 = u64 [sp + 0x1f0]\n  1332: u64 [sp + 0x40] = a0\n  1335: a0 = u64 [sp + 0x1f8]\n  1339: u64 [sp + 0x30] = a0\n  1342: u64 [sp + 408] = 0\n  1346: u64 [sp + 400] = 0\n  1350: u64 [sp + 384] = 0x100\n  1356: a0 = sp + 0x1a0\n  1360: a1 = sp + 0x180\n  1364: u64 [sp + 392] = 0\n  1368: ra = 18, jump @384\n      : @33 [@dyn 9] (gas: 15)\n  1373: a0 = u64 [sp + 0x1a0]\n  1377: u64 [sp + 0x50] = a0\n  1380: a0 = u64 [sp + 0x1a8]\n  1384: u64 [sp + 0x28] = a0\n  1387: a0 = u64 [sp + 0x1b0]\n  1391: u64 [sp + 0x20] = a0\n  1394: a0 = u64 [sp + 0x1b8]\n  1398: u64 [sp + 0x18] = a0\n  1401: u64 [sp + 344] = 0\n  1405: u64 [sp + 336] = 0\n  1409: u64 [sp + 320] = 0x120\n  1415: a0 = sp + 0x160\n  1419: a1 = sp + 0x140\n  1423: u64 [sp + 328] = 0\n  1427: ra = 20, jump @384\n      : @34 [@dyn 10] (gas: 18)\n  1432: a0 = u64 [sp + 0x160]\n  1436: u64 [sp + 0x38] = a0\n  1439: a0 = u64 [sp + 0x168]\n  1443: u64 [sp + 0x10] = a0\n  1446: a0 = u64 [sp + 0x170]\n  1450: u64 [sp + 0x8] = a0\n  1453: s1 = u64 [sp + 0x178]\n  1457: a0 = u64 [sp + 0x30]\n  1460: u64 [sp + 0x138] = a0\n  1464: a0 = u64 [sp + 0x40]\n  1467: u64 [sp + 0x130] = a0\n  1471: a0 = u64 [sp + 0x48]\n  1474: u64 [sp + 0x128] = a0\n  1478: a0 = 0x80\n  1482: a1 = sp + 0x120\n  1486: a2 = u64 [sp + 0x58]\n  1489: u64 [sp + 0x120] = a2\n  1493: ra = 22, jump @9\n      : @35 [@dyn 11] (gas: 11)\n  1498: a0 = u64 [sp + 0x18]\n  1501: u64 [sp + 0x118] = a0\n  1505: a0 = u64 [sp + 0x20]\n  1508: u64 [sp + 0x110] = a0\n  1512: a0 = u64 [sp + 0x28]\n  1515: u64 [sp + 0x108] = a0\n  1519: a0 = 0xa0\n  1523: a1 = sp + 0x100\n  1527: a2 = u64 [sp + 0x50]\n  1530: u64 [sp + 0x100] = a2\n  1534: ra = 24, jump @9\n      : @36 [@dyn 12] (gas: 10)\n  1539: u64 [sp + 0xf8] = s1\n  1543: a0 = u64 [sp + 0x8]\n  1546: u64 [sp + 0xf0] = a0\n  1550: a0 = u64 [sp + 0x10]\n  1553: u64 [sp + 0xe8] = a0\n  1557: a0 = 0xc0\n  1561: a1 = sp + 0xe0\n  1565: a2 = u64 [sp + 0x38]\n  1568: u64 [sp + 0xe0] = a2\n  1572: ra = 26, jump @9\n      : @37 [@dyn 13] (gas: 3)\n  1577: a0 = sp + 0xc0\n  1581: a1 = 0x40\n  1584: ra = 28, jump @7\n      : @38 [@dyn 14] (gas: 12)\n  1589: a0 = u64 [sp + 0xd8]\n  1593: a1 = u64 [sp + 0xd0]\n  1597: a2 = u64 [sp + 0xc8]\n  1601: s1 = u64 [sp + 0xc0]\n  1605: a0 = a0 | a2\n  1608: a2 = s1 | a1\n  1611: a2 = a2 | a0\n  1614: a2 = a2 >> 0x20\n  1617: a0 = a0 | a1\n  1620: a0 = a0 << 0x20\n  1623: a0 = a0 | a2\n  1626: jump @42 if a0 == 0\n      : @39 (gas: 1)\n  1629: trap\n      : @40 (gas: 4)\n  1630: a1 = 0x20070\n  1635: i32 a1 = a1 + 0\n  1637: a0 = 0x1\n  1640: jump @49\n      : @41 (gas: 4)\n  1643: a1 = 0x20070\n  1648: i32 a1 = a1 + 0\n  1650: a0 = 0x1\n  1653: jump @49\n      : @42 (gas: 3)\n  1656: a0 = s1\n  1658: a1 = 0\n  1660: ra = 30, jump @15\n      : @43 [@dyn 15] (gas: 7)\n  1665: i32 a0 = a0 + 0\n  1667: a1 = 0\n  1669: a2 = 0\n  1671: ecalli 2 // 'call_data_copy'\n  1673: a0 = sp + 0xa0\n  1677: a1 = 0x80\n  1681: ra = 32, jump @7\n      : @44 [@dyn 16] (gas: 13)\n  1686: a0 = u64 [sp + 0xb8]\n  1690: a4 = 0x30090\n  1695: u64 [sp + 0x58] = a4\n  1698: a1 = u64 [sp + 0xb0]\n  1702: a2 = u64 [sp + 0xa8]\n  1706: a3 = u64 [sp + 0xa0]\n  1710: u64 [0x300a8] = a0\n  1715: u64 [0x300a0] = a1\n  1720: u64 [0x30098] = a2\n  1725: u64 [0x30090] = a3\n  1730: a0 = sp + 0x80\n  1734: a1 = 0xa0\n  1738: ra = 34, jump @7\n      : @45 [@dyn 17] (gas: 12)\n  1743: a0 = u64 [sp + 0x98]\n  1747: a1 = u64 [sp + 0x90]\n  1751: a2 = u64 [sp + 0x88]\n  1755: a3 = u64 [sp + 0x80]\n  1759: a4 = u64 [sp + 0x58]\n  1762: u64 [a4 + 0x38] = a0\n  1765: u64 [a4 + 0x30] = a1\n  1768: u64 [a4 + 0x28] = a2\n  1771: u64 [a4 + 0x20] = a3\n  1774: a0 = sp + 0x60\n  1777: a1 = 0xc0\n  1781: ra = 36, jump @7\n      : @46 [@dyn 18] (gas: 10)\n  1786: a0 = u64 [sp + 0x78]\n  1789: a1 = u64 [sp + 0x70]\n  1792: a2 = u64 [sp + 0x68]\n  1795: a3 = u64 [sp + 0x60]\n  1798: a4 = u64 [sp + 0x58]\n  1801: u64 [a4 + 0x58] = a0\n  1804: u64 [a4 + 0x50] = a1\n  1807: u64 [a4 + 0x48] = a2\n  1810: u64 [a4 + 0x40] = a3\n  1813: jump @5\n      : @47 (gas: 3)\n  1816: a0 = s1\n  1818: a1 = 0\n  1820: ra = 38, jump @15\n      : @48 [@dyn 19] (gas: 6)\n  1825: i32 a1 = a0 + 0\n  1827: a0 = 0\n  1829: a2 = 0\n  1831: ra = 0x28\n  1834: ecalli 14 // 'seal_return'\n  1836: jump @50\n      : @49 (gas: 4)\n  1838: a2 = 0\n  1840: ra = 0x28\n  1843: ecalli 14 // 'seal_return'\n  1845: fallthrough\n      : @50 [@dyn 20] (gas: 19)\n  1846: sp = sp + 0xfffffffffffff808\n  1850: a0 = sp + 0x700\n  1854: u64 [a0 + 0xf0] = ra\n  1858: u64 [a0 + 0xe8] = s0\n  1862: u64 [a0 + 0xe0] = s1\n  1866: s0 = sp + 0x7f8\n  1870: sp = sp + 0xfffffffffffff818\n  1874: sp = sp & 0xffffffffffffffe0\n  1877: s1 = sp\n  1879: a2 = s1 + 0x7ff\n  1883: a2 = a2 + 0x39\n  1886: u64 [a2 + 832] = 0\n  1890: u64 [a2 + 824] = 0\n  1894: u64 [a2 + 808] = 0x80\n  1900: a0 = 0x40\n  1903: a1 = s1 + 0x7ff\n  1907: a1 = a1 + 0x361\n  1911: u64 [a2 + 816] = 0\n  1915: ra = 42, jump @9\n      : @51 [@dyn 21] (gas: 4)\n  1920: a0 = 0x20064\n  1925: u64 [s1 + 0xb8] = a0\n  1929: a0 = i32 [0x20064]\n  1934: jump @53 if a0 >=u 4\n      : @52 (gas: 1)\n  1938: jump @354\n      : @53 (gas: 6)\n  1941: a0 = s1 + 0x1000\n  1945: i32 a0 = a0 + 0xfffffffffffffb80\n  1949: a1 = 0\n  1951: ra = 0x2c\n  1954: ecalli 3 // 'call_data_load'\n  1956: fallthrough\n      : @54 [@dyn 22] (gas: 4)\n  1957: a2 = s1 + 0x7ff\n  1961: a2 = a2 + 0x39\n  1964: a0 = i32 [a2 + 0x364]\n  1968: jump @176 if a0 == 2205082048\n      : @55 (gas: 1)\n  1976: jump @57 if a0 != 2376576291\n      : @56 (gas: 1)\n  1983: jump @252\n      : @57 (gas: 1)\n  1986: jump @196 if a0 == 2915661614\n      : @58 (gas: 1)\n  1994: jump @73 if a0 == 3265688288\n      : @59 (gas: 1)\n  2002: jump @168 if a0 == 3283548473\n      : @60 (gas: 1)\n  2010: jump @153 if a0 == 4015848332\n      : @61 (gas: 1)\n  2018: jump @185 if a0 != 4142735383\n      : @62 (gas: 9)\n  2026: u64 [a2 + 1920] = 0\n  2030: u64 [a2 + 1912] = 0\n  2034: u64 [a2 + 1904] = 0\n  2038: u64 [a2 + 1896] = 0\n  2042: a0 = s1 + 0x1000\n  2046: i32 a0 = a0 + 0xffffffffffffffa0\n  2049: ra = 0x2e\n  2052: ecalli 17 // 'value_transferred'\n  2054: fallthrough\n      : @63 [@dyn 23] (gas: 4)\n  2055: a3 = s1 + 0x7ff\n  2059: a3 = a3 + 0x39\n  2062: a4 = a3 + 0x700\n  2066: t0 = 48, jump @474\n      : @64 [@dyn 24] (gas: 1)\n  2071: jump @66 if a0 == 0\n      : @65 (gas: 1)\n  2074: jump @315\n      : @66 (gas: 3)\n  2077: a0 = u64 [s1 + 0xb8]\n  2081: a0 = i32 [a0]\n  2083: jump @68 if a0 >u 35\n      : @67 (gas: 1)\n  2087: jump @315\n      : @68 (gas: 3)\n  2090: a0 = s1 + 0x7ff\n  2094: a0 = a0 + 0x341\n  2098: ra = 50, jump @392\n      : @69 [@dyn 25] (gas: 4)\n  2103: a0 = s1 + 0x7ff\n  2107: a0 = a0 + 0x321\n  2111: a1 = 0x40\n  2114: ra = 52, jump @7\n      : @70 [@dyn 26] (gas: 15)\n  2119: a3 = s1 + 0x7ff\n  2123: a3 = a3 + 0x39\n  2126: a4 = u64 [a3 + 0x300]\n  2130: a5 = a3 + 0x200\n  2134: a1 = u64 [a5 + 0xf8]\n  2138: a2 = u64 [a5 + 0xf0]\n  2142: a0 = u64 [a5 + 0xe8]\n  2146: a4 = a4 | a2\n  2149: a2 = a0 | a1\n  2152: a2 = a2 | a4\n  2155: a2 = a2 >> 0x20\n  2158: a1 = a1 | a4\n  2161: a1 = a1 << 0x20\n  2164: a1 = a1 | a2\n  2167: jump @72 if a1 == 0\n      : @71 (gas: 1)\n  2170: jump @266\n      : @72 (gas: 9)\n  2173: u64 [a3 + 736] = 0\n  2177: u64 [a3 + 728] = 0\n  2181: u64 [a3 + 720] = 0\n  2185: a1 = s1 + 0x7ff\n  2189: a1 = a1 + 0x301\n  2193: u64 [a3 + 712] = 0\n  2197: u64 [s1 + 0xb8] = a0\n  2201: ra = 0x140\n  2205: jump @9\n      : @73 (gas: 9)\n  2208: u64 [a2 + 1408] = 0\n  2212: u64 [a2 + 1400] = 0\n  2216: u64 [a2 + 1392] = 0\n  2220: u64 [a2 + 1384] = 0\n  2224: a0 = s1 + 0x1000\n  2228: i32 a0 = a0 + 0xfffffffffffffda0\n  2232: ra = 0x36\n  2235: ecalli 17 // 'value_transferred'\n  2237: fallthrough\n      : @74 [@dyn 27] (gas: 4)\n  2238: a3 = s1 + 0x7ff\n  2242: a3 = a3 + 0x39\n  2245: a4 = a3 + 0x500\n  2249: t0 = 56, jump @474\n      : @75 [@dyn 28] (gas: 1)\n  2254: jump @77 if a0 == 0\n      : @76 (gas: 1)\n  2257: jump @315\n      : @77 (gas: 3)\n  2260: a0 = u64 [s1 + 0xb8]\n  2264: a0 = i32 [a0]\n  2266: jump @79 if a0 >u 67\n      : @78 (gas: 1)\n  2270: jump @315\n      : @79 (gas: 3)\n  2273: a0 = s1 + 0x7ff\n  2277: a0 = a0 + 0x1e1\n  2281: ra = 58, jump @392\n      : @80 [@dyn 29] (gas: 25)\n  2286: a1 = s1 + 0x7ff\n  2290: a1 = a1 + 0x39\n  2293: a2 = a1 + 0x100\n  2297: a0 = u64 [a2 + 0xb8]\n  2301: u64 [s1 + 0x48] = a0\n  2304: a0 = u64 [a2 + 0xb0]\n  2308: u64 [s1 + 0x68] = a0\n  2311: a0 = u64 [a2 + 0xa8]\n  2315: u64 [s1 + 0x70] = a0\n  2318: a0 = s1 + 0x1000\n  2322: i32 a0 = a0 + 0xfffffffffffffdc0\n  2326: a1 = 0x24\n  2329: ecalli 3 // 'call_data_load'\n  2331: a1 = s1 + 0x7ff\n  2335: a1 = a1 + 0x39\n  2338: a2 = a1 + 0x500\n  2342: a0 = u64 [a2 + 0xa0]\n  2346: u64 [s1 + 0xa8] = a0\n  2350: a0 = u64 [a2 + 0x98]\n  2354: u64 [s1 + 0xa0] = a0\n  2358: a0 = u64 [a2 + 0x90]\n  2362: u64 [s1 + 0x98] = a0\n  2366: a0 = u64 [a2 + 0x88]\n  2370: u64 [s1 + 0xb0] = a0\n  2374: ra = 60, jump @0\n      : @81 [@dyn 30] (gas: 14)\n  2379: a0 = 0x30090\n  2384: a1 = u64 [0x300d8]\n  2389: u64 [s1 + 0x88] = a1\n  2393: a1 = u64 [0x300d0]\n  2398: u64 [s1 + 0x80] = a1\n  2402: u64 [s1 + 0x90] = a0\n  2406: a0 = u32 [0x300e0]\n  2411: u64 [s1 + 0x78] = a0\n  2414: a0 = 0x30070\n  2419: u64 [s1 + 0xb8] = a0\n  2423: i32 a0 = a0 + 0\n  2425: u64 [s1 + 0x28] = a0\n  2428: ecalli 5 // 'caller'\n  2430: fallthrough\n      : @82 (gas: 23)\n  2431: a0 = u64 [s1 + 0xb8]\n  2435: t0 = u64 [a0 + 0x8]\n  2438: a4 = u64 [a0]\n  2440: a5 = u32 [a0 + 0x10]\n  2443: a0 = reverse t0\n  2445: a1 = a0 >> 0x20\n  2448: a2 = reverse a4\n  2450: a3 = a2 << 0x20\n  2453: a1 = a1 | a3\n  2456: a0 = a0 << 0x20\n  2459: a3 = reverse a5\n  2461: a3 = a3 >> 0x20\n  2464: a0 = a0 | a3\n  2467: a2 = a2 >> 0x20\n  2470: a3 = u64 [s1 + 0x78]\n  2473: a2 = a2 ^ a3\n  2476: a3 = u64 [s1 + 0x80]\n  2480: a0 = a0 ^ a3\n  2483: a0 = a0 | a2\n  2486: a2 = u64 [s1 + 0x88]\n  2490: a1 = a1 ^ a2\n  2493: a0 = a0 | a1\n  2496: jump @84 if a0 == 0\n      : @83 (gas: 1)\n  2499: jump @317\n      : @84 (gas: 11)\n  2502: u64 [s1 + 0x50] = a5\n  2505: u64 [s1 + 0x58] = t0\n  2508: u64 [s1 + 0x60] = a4\n  2511: a0 = u64 [s1 + 0xa0]\n  2515: a1 = u64 [s1 + 0xb0]\n  2519: a0 = a0 | a1\n  2522: a1 = u64 [s1 + 0xa8]\n  2526: a2 = u64 [s1 + 0x98]\n  2530: a1 = a1 | a2\n  2533: a0 = a0 | a1\n  2536: jump @86 if a0 != 0\n      : @85 (gas: 1)\n  2539: jump @318\n      : @86 (gas: 1)\n  2542: ra = 62, jump @0\n      : @87 [@dyn 31] (gas: 11)\n  2547: a1 = u64 [s1 + 0x90]\n  2551: a0 = u64 [a1 + 0x10]\n  2554: u64 [s1 + 0x80] = a0\n  2558: a0 = u64 [a1 + 0x8]\n  2561: u64 [s1 + 0x78] = a0\n  2564: a0 = u64 [a1]\n  2566: u64 [s1 + 0x88] = a0\n  2570: a0 = s1 + 0x7ff\n  2574: a0 = a0 + 0x1a1\n  2578: a1 = 0x40\n  2581: ra = 64, jump @7\n      : @88 [@dyn 32] (gas: 15)\n  2586: a2 = s1 + 0x7ff\n  2590: a2 = a2 + 0x39\n  2593: t0 = u64 [a2 + 0x180]\n  2597: a1 = a2 + 0x100\n  2601: a5 = u64 [a1 + 0x78]\n  2604: a4 = u64 [a1 + 0x70]\n  2607: a0 = u64 [a1 + 0x68]\n  2610: a3 = a4 | t0\n  2613: a1 = a0 | a5\n  2616: a1 = a1 | a3\n  2619: a1 = a1 >> 0x20\n  2622: a3 = a3 | a5\n  2625: a3 = a3 << 0x20\n  2628: a1 = a1 | a3\n  2631: jump @90 if a1 == 0\n      : @89 (gas: 1)\n  2634: jump @266\n      : @90 (gas: 12)\n  2637: u64 [a2 + 344] = 0\n  2641: u64 [a2 + 336] = 0\n  2645: u64 [a2 + 328] = 0\n  2649: a3 = 0x852a12e300000000\n  2659: a1 = s1 + 0x7ff\n  2663: a1 = a1 + 0x181\n  2667: u64 [a2 + 0x160] = a3\n  2671: u64 [s1 + 0x90] = a0\n  2675: u64 [s1 + 0x40] = t0\n  2678: u64 [s1 + 0x38] = a5\n  2681: u64 [s1 + 0x30] = a4\n  2684: ra = 66, jump @9\n      : @91 [@dyn 33] (gas: 10)\n  2689: a3 = u64 [s1 + 0x90]\n  2693: a0 = u64 [s1 + 0x40]\n  2696: a1 = u64 [s1 + 0x38]\n  2699: a0 = a0 | a1\n  2702: a1 = 0xfffffffc\n  2712: a1 = a3 <u a1\n  2715: a2 = u64 [s1 + 0x30]\n  2718: a1 = 0 if a2 != 0\n  2720: a1 = 0 if a0 != 0\n  2722: jump @93 if a1 != 0\n      : @92 (gas: 1)\n  2725: jump @266\n      : @93 (gas: 17)\n  2728: a0 = 0x2400000000\n  2738: u64 [s1 + 0x20] = a0\n  2741: i32 a0 = a3 + 0x4\n  2744: a1 = u64 [s1 + 0xb0]\n  2748: a4 = s1 + 0x7ff\n  2752: a4 = a4 + 0x39\n  2755: a3 = a4 + 0x100\n  2759: u64 [a3 + 0x28] = a1\n  2762: a1 = u64 [s1 + 0x98]\n  2766: u64 [a3 + 0x30] = a1\n  2769: a1 = u64 [s1 + 0xa0]\n  2773: u64 [a3 + 0x38] = a1\n  2776: a1 = s1 + 0x7ff\n  2780: a1 = a1 + 0x161\n  2784: a2 = u64 [s1 + 0xa8]\n  2788: u64 [a3 + 0x40] = a2\n  2791: ra = 68, jump @9\n      : @94 [@dyn 34] (gas: 30)\n  2796: ecalli 11 // 'ref_time_left'\n  2798: a0 = u64 [s1 + 0x78]\n  2801: a0 = reverse a0\n  2803: a1 = a0 << 0x20\n  2806: a2 = u64 [s1 + 0x80]\n  2810: a2 = reverse a2\n  2812: a2 = a2 >> 0x20\n  2815: a3 = a2 | a1\n  2818: a1 = u64 [s1 + 0x88]\n  2822: a1 = reverse a1\n  2824: a2 = a1 << 0x20\n  2827: a0 = a0 >> 0x20\n  2830: a0 = a0 | a2\n  2833: a1 = a1 >> 0x20\n  2836: a2 = u64 [s1 + 0xb8]\n  2840: u64 [s1 + 0x10] = a0\n  2843: u64 [a2 + 0x8] = a0\n  2846: u64 [s1 + 0x78] = a3\n  2849: u64 [a2] = a3\n  2851: u64 [s1 + 0x18] = a1\n  2854: u32 [a2 + 0x10] = a1\n  2857: a0 = s1 + 0x7ff\n  2861: a0 = a0 + 0x39\n  2864: u64 [a0 + 1472] = 0\n  2868: u64 [a0 + 1464] = 0\n  2872: u64 [a0 + 1456] = 0\n  2876: u64 [a0 + 1448] = 0\n  2880: a1 = 0x24\n  2883: a0 = u64 [s1 + 0x90]\n  2887: ra = 70, jump @15\n      : @95 [@dyn 35] (gas: 4)\n  2892: u64 [s1 + 0x88] = a0\n  2896: a1 = 0x20\n  2899: a0 = u64 [s1 + 0x90]\n  2903: ra = 72, jump @15\n      : @96 [@dyn 36] (gas: 38)\n  2908: a2 = s1 + 0x7ff\n  2912: a2 = a2 + 0x39\n  2915: u32 [a2 + 1480] = 0x20\n  2920: u64 [a2 + 1536] = 0xffffffffffffffff\n  2925: a3 = a2 + 0x500\n  2929: u64 [a3 + 248] = 0xffffffffffffffff\n  2934: u64 [a3 + 240] = 0xffffffffffffffff\n  2939: u64 [a3 + 232] = 0xffffffffffffffff\n  2944: a1 = u64 [s1 + 0xb8]\n  2948: a1 = a1 << 0x20\n  2951: a2 = a1 >> 0x20\n  2954: a1 = 0x800000000\n  2964: u64 [s1 + 0x80] = a2\n  2968: t0 = a2 | a1\n  2971: a1 = s1 + 0x7ff\n  2975: a1 = a1 + 0x5e1\n  2979: a1 = a1 << 0x20\n  2982: a1 = a1 >> 0x20\n  2985: a2 = s1 + 0x7ff\n  2989: a2 = a2 + 0x621\n  2993: a2 = a2 << 0x20\n  2996: a3 = a2 | a1\n  2999: a1 = u64 [s1 + 0x88]\n  3003: a1 = a1 << 0x20\n  3006: a1 = a1 >> 0x20\n  3009: a4 = u64 [s1 + 0x20]\n  3012: a4 = a4 | a1\n  3015: a0 = a0 << 0x20\n  3018: a0 = a0 >> 0x20\n  3021: a1 = s1 + 0x7ff\n  3025: a1 = a1 + 0x601\n  3029: a1 = a1 << 0x20\n  3032: a5 = a1 | a0\n  3035: a1 = 0xffffffffffffffff\n  3038: a2 = 0xffffffffffffffff\n  3041: a0 = t0\n  3043: ecalli 1 // 'call'\n  3045: fallthrough\n      : @97 (gas: 1)\n  3046: jump @99 if a0 == 0\n      : @98 (gas: 1)\n  3049: jump @275\n      : @99 (gas: 2)\n  3052: ecalli 13 // 'return_data_size'\n  3054: fallthrough\n      : @100 (gas: 2)\n  3055: a5 = 0x20\n  3058: jump @102 if a0 >=u a5\n      : @101 (gas: 3)\n  3061: ecalli 13 // 'return_data_size'\n  3063: a5 = a0\n  3065: fallthrough\n      : @102 (gas: 21)\n  3066: a2 = s1 + 0x7ff\n  3070: a2 = a2 + 0x39\n  3073: a3 = u64 [s1 + 0x90]\n  3077: t0 = u64 [s1 + 0x40]\n  3080: a0 = u64 [s1 + 0x38]\n  3083: a1 = u64 [s1 + 0x30]\n  3086: u64 [s1 + 64] = 0\n  3089: u64 [s1 + 0x88] = a5\n  3093: u64 [a2 + 0xc8] = a5\n  3097: u64 [a2 + 0xe8] = a3\n  3101: u64 [a2 + 208] = 0\n  3105: u64 [a2 + 0xf0] = a1\n  3109: u64 [a2 + 216] = 0\n  3113: u64 [a2 + 0xf8] = a0\n  3117: u64 [a2 + 224] = 0\n  3121: a0 = s1 + 0x7ff\n  3125: a0 = a0 + 0x121\n  3129: a1 = s1 + 0x7ff\n  3133: a1 = a1 + 0x101\n  3137: u64 [a2 + 0x100] = t0\n  3141: ra = 74, jump @398\n      : @103 [@dyn 37] (gas: 4)\n  3146: a3 = u64 [s1 + 0x40]\n  3149: a0 = a3 >u 0\n  3151: a1 = u64 [s1 + 0x88]\n  3155: t0 = 76, jump @462\n      : @104 [@dyn 38] (gas: 1)\n  3160: jump @106 if a2 != 0\n      : @105 (gas: 1)\n  3163: jump @362\n      : @106 (gas: 4)\n  3166: a0 = s1 + 0x7ff\n  3170: a0 = a0 + 0xe1\n  3174: a1 = u64 [s1 + 0x90]\n  3178: ra = 78, jump @7\n      : @107 [@dyn 39] (gas: 10)\n  3183: a3 = s1 + 0x7ff\n  3187: a3 = a3 + 0x39\n  3190: a0 = u64 [a3 + 0xb8]\n  3194: a1 = u64 [a3 + 0xc0]\n  3198: a2 = u64 [a3 + 0xb0]\n  3202: a3 = u64 [a3 + 0xa8]\n  3206: a1 = a1 | a2\n  3209: a0 = a0 | a3\n  3212: a0 = a0 | a1\n  3215: jump @109 if a0 == 0\n      : @108 (gas: 1)\n  3218: jump @363\n      : @109 (gas: 16)\n  3221: a0 = u64 [s1 + 0x48]\n  3224: a0 = a0 << 0x20\n  3227: a2 = a0 >> 0x20\n  3230: a3 = s1 + 0x7ff\n  3234: a3 = a3 + 0x39\n  3237: u64 [a3 + 128] = 0\n  3241: a0 = u64 [s1 + 0x70]\n  3244: u64 [a3 + 0x68] = a0\n  3247: a0 = u64 [s1 + 0x68]\n  3250: u64 [a3 + 0x70] = a0\n  3253: a1 = s1 + 0x7ff\n  3257: a1 = a1 + 0xa1\n  3261: u64 [s1 + 0x8] = a2\n  3264: u64 [a3 + 0x78] = a2\n  3267: a0 = 0\n  3269: ra = 80, jump @9\n      : @110 [@dyn 40] (gas: 10)\n  3274: a2 = s1 + 0x7ff\n  3278: a2 = a2 + 0x39\n  3281: u64 [a2 + 96] = 0\n  3284: u64 [a2 + 88] = 0\n  3287: u64 [a2 + 80] = 0\n  3290: a0 = 0x20\n  3293: a1 = s1 + 0x7ff\n  3297: a1 = a1 + 0x81\n  3301: u64 [a2 + 72] = 0\n  3304: ra = 82, jump @9\n      : @111 [@dyn 41] (gas: 7)\n  3309: a0 = sp + 0xffffffffffffffe0\n  3312: a0 = a0 & 0xffffffffffffffe0\n  3315: u64 [s1 + 0x90] = a0\n  3319: sp = a0\n  3321: a1 = 0x40\n  3324: a0 = 0\n  3326: ra = 84, jump @15\n      : @112 [@dyn 42] (gas: 12)\n  3331: a1 = sp + 0xffffffffffffffe0\n  3334: a1 = a1 & 0xffffffffffffffe0\n  3337: u64 [s1 + 0x88] = a1\n  3341: sp = a1\n  3343: i32 a0 = a0 + 0\n  3345: i32 a2 = a1 + 0\n  3347: a1 = 0x40\n  3350: ra = 0x56\n  3353: ecalli 10 // 'hash_keccak_256'\n  3355: a3 = u64 [s1 + 0x88]\n  3359: t0 = 0x58\n  3362: jump @472\n      : @113 [@dyn 43] (gas: 2)\n  3365: a3 = u64 [s1 + 0x88]\n  3369: t0 = 88, jump @472\n      : @114 [@dyn 44] (gas: 8)\n  3374: a1 = u64 [s1 + 0x90]\n  3378: u64 [a1 + 0x18] = a3\n  3381: u64 [a1 + 0x10] = a2\n  3384: u64 [a1 + 0x8] = a4\n  3387: u64 [a1] = a0\n  3389: a0 = s1 + 0x7ff\n  3393: a0 = a0 + 0x61\n  3396: ra = 90, jump @11\n      : @115 [@dyn 45] (gas: 50)\n  3401: a0 = s1 + 0x7ff\n  3405: a0 = a0 + 0x39\n  3408: t0 = u64 [a0 + 0x40]\n  3411: t1 = u64 [a0 + 0x38]\n  3414: a3 = u64 [a0 + 0x28]\n  3417: u64 [s1 + 0x88] = a3\n  3421: a0 = u64 [a0 + 0x30]\n  3424: u64 [s1 + 0x48] = a0\n  3427: a1 = sp + 0xffffffffffffffe0\n  3430: t2 = a1 & 0xffffffffffffffe0\n  3433: sp = t2\n  3435: a5 = u64 [s1 + 0x98]\n  3439: a2 = a0 ^ a5\n  3442: a1 = a0 <u a5\n  3445: a0 = u64 [s1 + 0xb0]\n  3449: a0 = a3 <u a0\n  3452: u64 [s1 + 0x40] = a0\n  3455: a1 = a0 if a2 == 0\n  3458: a0 = u64 [s1 + 0xa0]\n  3462: a4 = t1 <u a0\n  3465: u64 [s1 + 0x30] = a4\n  3468: ra = u64 [s1 + 0xa8]\n  3472: u64 [s1 + 0x38] = t0\n  3475: a2 = t0 ^ ra\n  3478: a3 = t0 <u ra\n  3481: a3 = a4 if a2 == 0\n  3484: t0 = t1 ^ a0\n  3487: a2 = t0 | a2\n  3490: a4 = t1 - a0\n  3493: a3 = a1 if a2 == 0\n  3496: a2 = a4 - a1\n  3499: a0 = a4 <u a1\n  3502: a1 = u64 [s1 + 0x38]\n  3505: a4 = a1 - ra\n  3508: a1 = u64 [s1 + 0x30]\n  3511: a4 = a4 - a1\n  3514: a4 = a4 - a0\n  3517: a0 = u64 [s1 + 0x48]\n  3520: a0 = a0 - a5\n  3523: a1 = u64 [s1 + 0x40]\n  3526: a0 = a0 - a1\n  3529: a5 = t2\n  3531: u64 [a5 + 0x18] = a4\n  3534: u64 [a5 + 0x10] = a2\n  3537: u64 [a5 + 0x8] = a0\n  3540: a0 = u64 [s1 + 0x88]\n  3544: a1 = u64 [s1 + 0xb0]\n  3548: a0 = a0 - a1\n  3551: u64 [a5] = a0\n  3553: jump @117 if a3 == 0\n      : @116 (gas: 1)\n  3556: jump @364\n      : @117 (gas: 3)\n  3559: a0 = u64 [s1 + 0x90]\n  3563: a1 = t2\n  3565: ra = 92, jump @12\n      : @118 [@dyn 46] (gas: 23)\n  3570: ecalli 11 // 'ref_time_left'\n  3572: u64 [s1 + 0x90] = a0\n  3576: a0 = u64 [s1 + 0xb8]\n  3580: a1 = u64 [s1 + 0x58]\n  3583: u64 [a0 + 0x8] = a1\n  3586: a1 = u64 [s1 + 0x60]\n  3589: u64 [a0] = a1\n  3591: a1 = u64 [s1 + 0x50]\n  3594: u32 [a0 + 0x10] = a1\n  3597: a1 = s1 + 0x7ff\n  3601: a1 = a1 + 0x39\n  3604: a0 = u64 [s1 + 0xa8]\n  3608: a2 = a1 + 0x600\n  3612: u64 [a2 + 0x40] = a0\n  3615: a0 = u64 [s1 + 0xa0]\n  3619: u64 [a2 + 0x38] = a0\n  3622: a0 = u64 [s1 + 0x98]\n  3626: u64 [a2 + 0x30] = a0\n  3629: a0 = u64 [s1 + 0xb0]\n  3633: u64 [a2 + 0x28] = a0\n  3636: a0 = 0\n  3638: a1 = 0\n  3640: ra = 94, jump @15\n      : @119 [@dyn 47] (gas: 4)\n  3645: u64 [s1 + 0x88] = a0\n  3649: a0 = 0\n  3651: a1 = 0\n  3653: ra = 96, jump @15\n      : @120 [@dyn 48] (gas: 38)\n  3658: a3 = s1 + 0x7ff\n  3662: a3 = a3 + 0x39\n  3665: u32 [a3 + 1608] = 0\n  3669: a2 = u64 [s1 + 0x90]\n  3673: a1 = a2 >u 0x8fc\n  3677: a2 = -a1\n  3679: a4 = a3 + 0x600\n  3683: u64 [a4 + 0x80] = a2\n  3687: u64 [a4 + 0x78] = a2\n  3690: u64 [a4 + 0x70] = a2\n  3693: u64 [a4 + 0x68] = a2\n  3696: a1 = a1 << 0x23\n  3699: a2 = u64 [s1 + 0x80]\n  3703: t0 = a1 | a2\n  3706: a1 = s1 + 0x7ff\n  3710: a1 = a1 + 0x661\n  3714: a1 = a1 << 0x20\n  3717: a1 = a1 >> 0x20\n  3720: a2 = s1 + 0x7ff\n  3724: a2 = a2 + 0x6a1\n  3728: a2 = a2 << 0x20\n  3731: a3 = a2 | a1\n  3734: a4 = u64 [s1 + 0x88]\n  3738: a4 = a4 << 0x20\n  3741: a4 = a4 >> 0x20\n  3744: a0 = a0 << 0x20\n  3747: a0 = a0 >> 0x20\n  3750: a1 = s1 + 0x7ff\n  3754: a1 = a1 + 0x681\n  3758: a1 = a1 << 0x20\n  3761: a5 = a1 | a0\n  3764: a1 = 0xffffffffffffffff\n  3767: a2 = 0xffffffffffffffff\n  3770: a0 = t0\n  3772: ecalli 1 // 'call'\n  3774: u64 [s1 + 0x90] = a0\n  3778: ecalli 13 // 'return_data_size'\n  3780: fallthrough\n      : @121 (gas: 2)\n  3781: a2 = u64 [s1 + 0x90]\n  3785: jump @123 if a0 == 0\n      : @122 (gas: 1)\n  3788: jump @288\n      : @123 (gas: 1)\n  3791: jump @125 if a2 == 0\n      : @124 (gas: 1)\n  3794: jump @380\n      : @125 (gas: 3)\n  3797: a0 = s1 + 0x7a0\n  3801: a1 = 0x40\n  3804: ra = 98, jump @7\n      : @126 [@dyn 49] (gas: 13)\n  3809: a1 = s1 + 0x700\n  3813: a3 = u64 [a1 + 0xb8]\n  3817: a4 = u64 [a1 + 0xb0]\n  3821: a5 = u64 [a1 + 0xa8]\n  3825: a0 = u64 [a1 + 0xa0]\n  3829: a2 = a5 | a3\n  3832: a1 = a0 | a4\n  3835: a1 = a1 | a2\n  3838: a1 = a1 >> 0x20\n  3841: a2 = a2 | a4\n  3844: a2 = a2 << 0x20\n  3847: a1 = a1 | a2\n  3850: jump @128 if a1 == 0\n      : @127 (gas: 1)\n  3853: jump @266\n      : @128 (gas: 11)\n  3856: u64 [s1 + 1936] = 0\n  3860: u64 [s1 + 1928] = 0\n  3864: u64 [s1 + 1920] = 0\n  3868: a2 = 0x70a0823100000000\n  3878: a1 = s1 + 0x780\n  3882: u64 [s1 + 0x798] = a2\n  3886: u64 [s1 + 0x90] = a0\n  3890: u64 [s1 + 0x88] = a3\n  3894: u64 [s1 + 0x60] = a4\n  3897: u64 [s1 + 0x58] = a5\n  3900: ra = 100, jump @9\n      : @129 [@dyn 50] (gas: 4)\n  3905: a0 = u64 [s1 + 0x28]\n  3908: ra = 0x66\n  3911: ecalli 0 // 'address'\n  3912: fallthrough\n      : @130 [@dyn 51] (gas: 10)\n  3913: a4 = u64 [s1 + 0x90]\n  3917: a0 = u64 [s1 + 0x88]\n  3921: a1 = u64 [s1 + 0x60]\n  3924: a0 = a0 | a1\n  3927: a1 = 0xfffffffc\n  3937: a1 = a4 <u a1\n  3940: a2 = u64 [s1 + 0x58]\n  3943: a1 = 0 if a2 != 0\n  3945: a1 = 0 if a0 != 0\n  3947: jump @266 if a1 == 0\n      : @131 (gas: 1)\n  3951: t0 = 104, jump @464\n      : @132 [@dyn 52] (gas: 7)\n  3956: u64 [s1 + 1912] = 0\n  3960: a4 = s1 + 0x700\n  3964: u64 [a4 + 0x70] = a1\n  3967: u64 [a4 + 0x68] = a2\n  3970: a1 = s1 + 0x760\n  3974: u64 [a4 + 0x60] = a3\n  3977: ra = 106, jump @9\n      : @133 [@dyn 53] (gas: 17)\n  3982: ecalli 11 // 'ref_time_left'\n  3984: a0 = u64 [s1 + 0x10]\n  3987: a1 = u64 [s1 + 0xb8]\n  3991: u64 [a1 + 0x8] = a0\n  3994: a0 = u64 [s1 + 0x78]\n  3997: u64 [a1] = a0\n  3999: a0 = u64 [s1 + 0x18]\n  4002: u32 [a1 + 0x10] = a0\n  4005: a0 = s1 + 0x7ff\n  4009: a0 = a0 + 0x39\n  4012: u64 [a0 + 1728] = 0\n  4016: u64 [a0 + 1720] = 0\n  4020: u64 [a0 + 1712] = 0\n  4024: u64 [a0 + 1704] = 0\n  4028: a1 = 0x24\n  4031: a0 = u64 [s1 + 0x90]\n  4035: ra = 108, jump @15\n      : @134 [@dyn 54] (gas: 4)\n  4040: u64 [s1 + 0xb8] = a0\n  4044: a1 = 0x20\n  4047: a0 = u64 [s1 + 0x90]\n  4051: ra = 110, jump @15\n      : @135 [@dyn 55] (gas: 34)\n  4056: a1 = s1 + 0x7ff\n  4060: a1 = a1 + 0x39\n  4063: u32 [a1 + 1736] = 0x20\n  4068: u64 [a1 + 1792] = 0\n  4072: u64 [a1 + 1784] = 0\n  4076: u64 [a1 + 1776] = 0\n  4080: u64 [a1 + 1768] = 0\n  4084: a1 = 0x1800000000\n  4094: a2 = u64 [s1 + 0x80]\n  4098: t0 = a2 | a1\n  4101: a1 = s1 + 0x7ff\n  4105: a1 = a1 + 0x6e1\n  4109: a1 = a1 << 0x20\n  4112: a1 = a1 >> 0x20\n  4115: a2 = s1 + 0x7ff\n  4119: a2 = a2 + 0x721\n  4123: a2 = a2 << 0x20\n  4126: a3 = a2 | a1\n  4129: a1 = u64 [s1 + 0xb8]\n  4133: a1 = a1 << 0x20\n  4136: a1 = a1 >> 0x20\n  4139: a4 = u64 [s1 + 0x20]\n  4142: a4 = a4 | a1\n  4145: a0 = a0 << 0x20\n  4148: a0 = a0 >> 0x20\n  4151: a1 = s1 + 0x7ff\n  4155: a1 = a1 + 0x701\n  4159: a1 = a1 << 0x20\n  4162: a5 = a1 | a0\n  4165: a1 = 0xffffffffffffffff\n  4168: a2 = 0xffffffffffffffff\n  4171: a0 = t0\n  4173: ecalli 1 // 'call'\n  4175: fallthrough\n      : @136 (gas: 1)\n  4176: jump @138 if a0 == 0\n      : @137 (gas: 1)\n  4179: jump @307\n      : @138 (gas: 2)\n  4182: ecalli 13 // 'return_data_size'\n  4184: fallthrough\n      : @139 (gas: 2)\n  4185: a4 = 0x20\n  4188: jump @141 if a0 >=u a4\n      : @140 (gas: 3)\n  4191: ecalli 13 // 'return_data_size'\n  4193: a4 = a0\n  4195: fallthrough\n      : @141 (gas: 18)\n  4196: a2 = u64 [s1 + 0x90]\n  4200: a3 = u64 [s1 + 0x88]\n  4204: a0 = u64 [s1 + 0x60]\n  4207: a1 = u64 [s1 + 0x58]\n  4210: u64 [s1 + 136] = 0\n  4214: u64 [s1 + 0xb8] = a4\n  4218: a5 = s1 + 0x700\n  4222: u64 [a5] = a4\n  4224: u64 [a5 + 0x20] = a2\n  4227: u64 [s1 + 1800] = 0\n  4231: u64 [a5 + 0x28] = a1\n  4234: u64 [s1 + 1808] = 0\n  4238: u64 [a5 + 0x30] = a0\n  4241: u64 [s1 + 1816] = 0\n  4245: a0 = s1 + 0x720\n  4249: a1 = s1 + 0x700\n  4253: u64 [a5 + 0x38] = a3\n  4256: ra = 112, jump @398\n      : @142 [@dyn 56] (gas: 4)\n  4261: a3 = u64 [s1 + 0x88]\n  4265: a0 = a3 >u 0\n  4267: a1 = u64 [s1 + 0xb8]\n  4271: t0 = 114, jump @462\n      : @143 [@dyn 57] (gas: 1)\n  4276: jump @145 if a2 != 0\n      : @144 (gas: 1)\n  4279: jump @382\n      : @145 (gas: 3)\n  4282: a0 = s1 + 0x6e0\n  4286: a1 = u64 [s1 + 0x90]\n  4290: ra = 116, jump @7\n      : @146 [@dyn 58] (gas: 11)\n  4295: a0 = u64 [s1 + 0x6f8]\n  4299: u64 [s1 + 0x90] = a0\n  4303: a0 = u64 [s1 + 0x6f0]\n  4307: u64 [s1 + 0x88] = a0\n  4311: a0 = u64 [s1 + 0x6e8]\n  4315: u64 [s1 + 0x80] = a0\n  4319: a0 = u64 [s1 + 0x6e0]\n  4323: u64 [s1 + 0x78] = a0\n  4326: a0 = s1 + 0x6c0\n  4330: a1 = 0x40\n  4333: ra = 118, jump @7\n      : @147 [@dyn 59] (gas: 13)\n  4338: a0 = s1 + 0x600\n  4342: a4 = u64 [a0 + 0xd8]\n  4346: a5 = u64 [a0 + 0xd0]\n  4350: a3 = u64 [a0 + 0xc8]\n  4354: a2 = u64 [a0 + 0xc0]\n  4358: a0 = a3 | a4\n  4361: a1 = a2 | a5\n  4364: a1 = a1 | a0\n  4367: a1 = a1 >> 0x20\n  4370: a0 = a0 | a5\n  4373: a0 = a0 << 0x20\n  4376: a0 = a0 | a1\n  4379: jump @266 if a0 != 0\n      : @148 (gas: 15)\n  4383: a0 = u64 [s1 + 0xb0]\n  4387: u64 [s1 + 0x6a0] = a0\n  4391: a0 = u64 [s1 + 0x98]\n  4395: u64 [s1 + 0x6a8] = a0\n  4399: a0 = u64 [s1 + 0xa0]\n  4403: u64 [s1 + 0x6b0] = a0\n  4407: a1 = s1 + 0x6a0\n  4411: a0 = u64 [s1 + 0xa8]\n  4415: u64 [s1 + 0x6b8] = a0\n  4419: a0 = a2\n  4421: u64 [s1 + 0xb8] = a2\n  4425: u64 [s1 + 0xb0] = a3\n  4429: u64 [s1 + 0xa8] = a4\n  4433: u64 [s1 + 0xa0] = a5\n  4437: ra = 120, jump @9\n      : @149 [@dyn 60] (gas: 1)\n  4442: t0 = 122, jump @470\n      : @150 [@dyn 61] (gas: 1)\n  4447: jump @266 if a1 == 0\n      : @151 (gas: 11)\n  4451: i32 a0 = a2 + 0x20\n  4454: a1 = u64 [s1 + 0x78]\n  4457: u64 [s1 + 0x680] = a1\n  4461: a1 = u64 [s1 + 0x80]\n  4465: u64 [s1 + 0x688] = a1\n  4469: a1 = u64 [s1 + 0x88]\n  4473: u64 [s1 + 0x690] = a1\n  4477: a1 = s1 + 0x680\n  4481: a3 = u64 [s1 + 0x90]\n  4485: u64 [s1 + 0x698] = a3\n  4489: ra = 124, jump @9\n      : @152 [@dyn 62] (gas: 22)\n  4494: u64 [s1 + 1624] = 0\n  4498: a0 = u64 [s1 + 0x8]\n  4501: a4 = s1 + 0x600\n  4505: u64 [a4 + 0x50] = a0\n  4508: a0 = u64 [s1 + 0x68]\n  4511: u64 [a4 + 0x48] = a0\n  4514: a0 = u64 [0x20000]\n  4519: a1 = u64 [0x20008]\n  4524: a2 = u64 [0x20010]\n  4529: a3 = u64 [s1 + 0x70]\n  4532: u64 [a4 + 0x40] = a3\n  4535: u64 [a4 + 0x78] = a0\n  4538: u64 [a4 + 0x70] = a1\n  4541: u64 [a4 + 0x68] = a2\n  4544: a0 = u64 [0x20018]\n  4549: a1 = 0x40\n  4552: a2 = s1 + 0x660\n  4556: a3 = s1 + 0x640\n  4560: u64 [a4 + 0x60] = a0\n  4563: a0 = u64 [s1 + 0xb8]\n  4567: ra = 0xe6\n  4571: jump @13\n      : @153 (gas: 8)\n  4574: u64 [a2 + 1888] = 0\n  4578: u64 [a2 + 1880] = 0\n  4582: u64 [a2 + 1872] = 0\n  4586: u64 [a2 + 1864] = 0\n  4590: a0 = s1 + 0x1000\n  4594: i32 a0 = a0 + 0xffffffffffffff80\n  4597: ecalli 17 // 'value_transferred'\n  4599: fallthrough\n      : @154 (gas: 11)\n  4600: a3 = s1 + 0x7ff\n  4604: a3 = a3 + 0x39\n  4607: a4 = a3 + 0x700\n  4611: a0 = u64 [a4 + 0x58]\n  4614: a1 = u64 [a4 + 0x60]\n  4617: a2 = u64 [a4 + 0x50]\n  4620: a3 = u64 [a4 + 0x48]\n  4623: a1 = a1 | a2\n  4626: a0 = a0 | a3\n  4629: a0 = a0 | a1\n  4632: jump @156 if a0 == 0\n      : @155 (gas: 1)\n  4635: jump @315\n      : @156 (gas: 3)\n  4638: a0 = u64 [s1 + 0xb8]\n  4642: a0 = i32 [a0]\n  4644: jump @158 if a0 >u 35\n      : @157 (gas: 1)\n  4648: jump @315\n      : @158 (gas: 3)\n  4651: a0 = s1 + 0x7ff\n  4655: a0 = a0 + 0x2e1\n  4659: ra = 126, jump @392\n      : @159 [@dyn 63] (gas: 12)\n  4664: a0 = s1 + 0x7ff\n  4668: a0 = a0 + 0x39\n  4671: a2 = a0 + 0x200\n  4675: a1 = u64 [a2 + 0xc0]\n  4679: u64 [s1 + 0xb8] = a1\n  4683: a1 = u64 [a2 + 0xb8]\n  4687: u64 [s1 + 0xb0] = a1\n  4691: a1 = u64 [a2 + 0xb0]\n  4695: u64 [s1 + 0xa8] = a1\n  4699: a0 = u64 [a2 + 0xa8]\n  4703: u64 [s1 + 0xa0] = a0\n  4707: ra = 128, jump @0\n      : @160 [@dyn 64] (gas: 14)\n  4713: a1 = u64 [0x300d8]\n  4718: u64 [s1 + 0x98] = a1\n  4722: a1 = u64 [0x300d0]\n  4727: u64 [s1 + 0x90] = a1\n  4731: a0 = u32 [0x300e0]\n  4736: u64 [s1 + 0x88] = a0\n  4740: a0 = 0x30070\n  4745: u64 [s1 + 0x80] = a0\n  4749: i32 a0 = a0 + 0\n  4751: ra = 0x82\n  4755: ecalli 5 // 'caller'\n  4757: a2 = u64 [s1 + 0x80]\n  4761: t0 = 0x84\n  4765: jump @466\n      : @161 [@dyn 65] (gas: 2)\n  4768: a2 = u64 [s1 + 0x80]\n  4772: t0 = 132, jump @466\n      : @162 [@dyn 66] (gas: 9)\n  4778: a2 = u64 [s1 + 0x88]\n  4782: a1 = a1 ^ a2\n  4785: a2 = u64 [s1 + 0x90]\n  4789: a0 = a0 ^ a2\n  4792: a0 = a0 | a1\n  4795: a1 = u64 [s1 + 0x98]\n  4799: a1 = a1 ^ a3\n  4802: a0 = a0 | a1\n  4805: jump @164 if a0 == 0\n      : @163 (gas: 1)\n  4808: jump @319\n      : @164 (gas: 16)\n  4811: a3 = s1 + 0x7ff\n  4815: a3 = a3 + 0x39\n  4818: a0 = u64 [s1 + 0xa0]\n  4822: a4 = a3 + 0x200\n  4826: u64 [a4 + 0x48] = a0\n  4829: a0 = u64 [s1 + 0xa8]\n  4833: u64 [a4 + 0x50] = a0\n  4836: a0 = u64 [s1 + 0xb0]\n  4840: u64 [a4 + 0x58] = a0\n  4843: a0 = s1 + 0x7ff\n  4847: a0 = a0 + 0x2a1\n  4851: a1 = s1 + 0x7ff\n  4855: a1 = a1 + 0x281\n  4859: a2 = u64 [s1 + 0xb8]\n  4863: u64 [a4 + 0x60] = a2\n  4866: ra = 134, jump @407\n      : @165 [@dyn 67] (gas: 4)\n  4872: a0 = s1 + 0x7ff\n  4876: a0 = a0 + 0x261\n  4880: a1 = 0x40\n  4883: ra = 136, jump @7\n      : @166 [@dyn 68] (gas: 15)\n  4889: a3 = s1 + 0x7ff\n  4893: a3 = a3 + 0x39\n  4896: a5 = a3 + 0x200\n  4900: a4 = u64 [a5 + 0x40]\n  4903: a1 = u64 [a5 + 0x38]\n  4906: a2 = u64 [a5 + 0x30]\n  4909: a0 = u64 [a5 + 0x28]\n  4912: a4 = a4 | a2\n  4915: a2 = a0 | a1\n  4918: a2 = a2 | a4\n  4921: a2 = a2 >> 0x20\n  4924: a1 = a1 | a4\n  4927: a1 = a1 << 0x20\n  4930: a1 = a1 | a2\n  4933: jump @266 if a1 != 0\n      : @167 (gas: 9)\n  4937: u64 [a3 + 544] = 0\n  4941: u64 [a3 + 536] = 0\n  4945: u64 [a3 + 528] = 0\n  4949: a1 = s1 + 0x7ff\n  4953: a1 = a1 + 0x241\n  4957: u64 [a3 + 520] = 0\n  4961: u64 [s1 + 0xb8] = a0\n  4965: ra = 0x140\n  4969: jump @9\n      : @168 (gas: 8)\n  4972: u64 [a2 + 1856] = 0\n  4976: u64 [a2 + 1848] = 0\n  4980: u64 [a2 + 1840] = 0\n  4984: u64 [a2 + 1832] = 0\n  4988: a0 = s1 + 0x1000\n  4992: i32 a0 = a0 + 0xffffffffffffff60\n  4996: ecalli 17 // 'value_transferred'\n  4998: fallthrough\n      : @169 (gas: 11)\n  4999: a3 = s1 + 0x7ff\n  5003: a3 = a3 + 0x39\n  5006: a4 = a3 + 0x700\n  5010: a0 = u64 [a4 + 0x38]\n  5013: a1 = u64 [a4 + 0x40]\n  5016: a2 = u64 [a4 + 0x30]\n  5019: a3 = u64 [a4 + 0x28]\n  5022: a1 = a1 | a2\n  5025: a0 = a0 | a3\n  5028: a0 = a0 | a1\n  5031: jump @315 if a0 != 0\n      : @170 (gas: 3)\n  5035: a0 = u64 [s1 + 0xb8]\n  5039: a0 = i32 [a0]\n  5041: jump @315 if a0 <=u 3\n      : @171 (gas: 4)\n  5046: a0 = s1 + 0x7ff\n  5050: a0 = a0 + 0x221\n  5054: a1 = 0x40\n  5057: ra = 138, jump @7\n      : @172 [@dyn 69] (gas: 12)\n  5063: a0 = s1 + 0x7ff\n  5067: a0 = a0 + 0x39\n  5070: a1 = u64 [a0 + 0x200]\n  5074: u64 [s1 + 0xb8] = a1\n  5078: a2 = a0 + 0x100\n  5082: a1 = u64 [a2 + 0xf8]\n  5086: u64 [s1 + 0xb0] = a1\n  5090: a1 = u64 [a2 + 0xf0]\n  5094: u64 [s1 + 0xa0] = a1\n  5098: a0 = u64 [a2 + 0xe8]\n  5102: u64 [s1 + 0xa8] = a0\n  5106: ra = 140, jump @0\n      : @173 [@dyn 70] (gas: 1)\n  5112: t0 = 142, jump @465\n      : @174 [@dyn 71] (gas: 1)\n  5118: jump @266 if a0 != 0\n      : @175 (gas: 15)\n  5122: a2 = u64 [0x30090]\n  5127: a1 = u64 [0x30098]\n  5132: a0 = u32 [0x300a0]\n  5137: a4 = s1 + 0x7ff\n  5141: a4 = a4 + 0x39\n  5144: u64 [a4 + 480] = 0\n  5148: a5 = a4 + 0x100\n  5152: u64 [a5 + 0xd8] = a0\n  5156: u64 [a5 + 0xd0] = a1\n  5160: a1 = s1 + 0x7ff\n  5164: a1 = a1 + 0x201\n  5168: u64 [a5 + 0xc8] = a2\n  5172: a0 = a3\n  5174: ra = 0xa4\n  5178: jump @9\n      : @176 (gas: 10)\n  5181: u64 [a2 + 992] = 0\n  5185: u64 [a2 + 984] = 0\n  5189: u64 [a2 + 976] = 0\n  5193: u64 [a2 + 968] = 0\n  5197: a0 = s1 + 0x1000\n  5201: i32 a0 = a0 + 0xfffffffffffffc00\n  5205: ra = 0x90\n  5209: ecalli 17 // 'value_transferred'\n  5211: t0 = 0x92\n  5215: jump @475\n      : @177 [@dyn 72] (gas: 1)\n  5218: t0 = 146, jump @475\n      : @178 [@dyn 73] (gas: 8)\n  5224: a0 = u64 [a4 + 0xd8]\n  5228: a1 = u64 [a4 + 0xe0]\n  5232: a2 = u64 [a4 + 0xd0]\n  5236: a3 = u64 [a4 + 0xc8]\n  5240: a1 = a1 | a2\n  5243: a0 = a0 | a3\n  5246: a0 = a0 | a1\n  5249: jump @322 if a0 != 0\n      : @179 (gas: 3)\n  5253: a0 = u64 [s1 + 0xb8]\n  5257: a0 = i32 [a0]\n  5259: jump @323 if a0 <=u 3\n      : @180 (gas: 3)\n  5264: a0 = s1 + 0x1c0\n  5268: a1 = 0x40\n  5271: ra = 148, jump @7\n      : @181 [@dyn 74] (gas: 10)\n  5277: a1 = s1 + 0x100\n  5281: a0 = u64 [a1 + 0xd8]\n  5285: u64 [s1 + 0xb8] = a0\n  5289: a0 = u64 [a1 + 0xd0]\n  5293: u64 [s1 + 0xb0] = a0\n  5297: a0 = u64 [a1 + 0xc8]\n  5301: u64 [s1 + 0xa0] = a0\n  5305: a0 = u64 [a1 + 0xc0]\n  5309: u64 [s1 + 0xa8] = a0\n  5313: ra = 150, jump @0\n      : @182 [@dyn 75] (gas: 1)\n  5319: t0 = 152, jump @465\n      : @183 [@dyn 76] (gas: 1)\n  5325: jump @266 if a0 != 0\n      : @184 (gas: 12)\n  5329: a2 = u64 [0x300d0]\n  5334: a1 = u64 [0x300d8]\n  5339: a0 = u32 [0x300e0]\n  5344: u64 [s1 + 440] = 0\n  5348: a4 = s1 + 0x100\n  5352: u64 [a4 + 0xb0] = a0\n  5356: u64 [a4 + 0xa8] = a1\n  5360: a1 = s1 + 0x1a0\n  5364: u64 [a4 + 0xa0] = a2\n  5368: a0 = a3\n  5370: ra = 0xa4\n  5374: jump @9\n      : @185 (gas: 1)\n  5377: jump @324 if a0 != 1608758631\n      : @186 (gas: 10)\n  5385: u64 [a2 + 960] = 0\n  5389: u64 [a2 + 952] = 0\n  5393: u64 [a2 + 944] = 0\n  5397: u64 [a2 + 936] = 0\n  5401: a0 = s1 + 0x1000\n  5405: i32 a0 = a0 + 0xfffffffffffffbe0\n  5409: ra = 0x9a\n  5413: ecalli 17 // 'value_transferred'\n  5415: t0 = 0x9c\n  5419: jump @475\n      : @187 [@dyn 77] (gas: 1)\n  5422: t0 = 156, jump @475\n      : @188 [@dyn 78] (gas: 8)\n  5428: a0 = u64 [a4 + 0xb8]\n  5432: a1 = u64 [a4 + 0xc0]\n  5436: a2 = u64 [a4 + 0xb0]\n  5440: a3 = u64 [a4 + 0xa8]\n  5444: a1 = a1 | a2\n  5447: a0 = a0 | a3\n  5450: a0 = a0 | a1\n  5453: jump @333 if a0 != 0\n      : @189 (gas: 3)\n  5457: a0 = u64 [s1 + 0xb8]\n  5461: a0 = i32 [a0]\n  5463: jump @330 if a0 <=u 3\n      : @190 (gas: 3)\n  5468: a0 = s1 + 0x180\n  5472: a1 = 0x40\n  5475: ra = 158, jump @7\n      : @191 [@dyn 79] (gas: 10)\n  5481: a1 = s1 + 0x100\n  5485: a0 = u64 [a1 + 0x98]\n  5489: u64 [s1 + 0xb8] = a0\n  5493: a0 = u64 [a1 + 0x90]\n  5497: u64 [s1 + 0xb0] = a0\n  5501: a0 = u64 [a1 + 0x88]\n  5505: u64 [s1 + 0xa0] = a0\n  5509: a0 = u64 [a1 + 0x80]\n  5513: u64 [s1 + 0xa8] = a0\n  5517: ra = 160, jump @0\n      : @192 [@dyn 80] (gas: 1)\n  5523: t0 = 162, jump @465\n      : @193 [@dyn 81] (gas: 1)\n  5529: jump @266 if a0 != 0\n      : @194 (gas: 11)\n  5533: a2 = u64 [0x300b0]\n  5538: a1 = u64 [0x300b8]\n  5543: a0 = u32 [0x300c0]\n  5548: u64 [s1 + 376] = 0\n  5552: a4 = s1 + 0x100\n  5556: u64 [a4 + 0x70] = a0\n  5559: u64 [a4 + 0x68] = a1\n  5562: a1 = s1 + 0x160\n  5566: u64 [a4 + 0x60] = a2\n  5569: a0 = a3\n  5571: ra = 164, jump @9\n      : @195 [@dyn 82] (gas: 4)\n  5577: a1 = 0x20\n  5580: a0 = u64 [s1 + 0xa8]\n  5584: ra = 0x142\n  5588: jump @15\n      : @196 (gas: 3)\n  5591: a0 = u64 [s1 + 0xb8]\n  5595: a0 = i32 [a0]\n  5597: jump @331 if a0 <=u 67\n      : @197 (gas: 2)\n  5602: a0 = s1 + 0x5c0\n  5606: ra = 166, jump @392\n      : @198 [@dyn 83] (gas: 23)\n  5612: a1 = s1 + 0x500\n  5616: a0 = u64 [a1 + 0xd0]\n  5620: u64 [s1 + 0x58] = a0\n  5623: a0 = u64 [a1 + 0xc8]\n  5627: u64 [s1 + 0x60] = a0\n  5630: a0 = u64 [a1 + 0xc0]\n  5634: u64 [s1 + 0x68] = a0\n  5637: a0 = s1 + 0x1000\n  5641: i32 a0 = a0 + 0xfffffffffffffc60\n  5645: a1 = 0x24\n  5648: ecalli 3 // 'call_data_load'\n  5650: a1 = s1 + 0x7ff\n  5654: a1 = a1 + 0x39\n  5657: a2 = a1 + 0x400\n  5661: a0 = u64 [a2 + 0x40]\n  5664: u64 [s1 + 0xb0] = a0\n  5668: a0 = u64 [a2 + 0x38]\n  5671: u64 [s1 + 0xa8] = a0\n  5675: a0 = u64 [a2 + 0x30]\n  5678: u64 [s1 + 0xa0] = a0\n  5682: a0 = u64 [a2 + 0x28]\n  5685: u64 [s1 + 0x98] = a0\n  5689: ra = 168, jump @0\n      : @199 [@dyn 84] (gas: 17)\n  5695: a0 = 0x30090\n  5700: a1 = u64 [0x300d8]\n  5705: u64 [s1 + 0x80] = a1\n  5709: a1 = u64 [0x300d0]\n  5714: u64 [s1 + 0x78] = a1\n  5717: u64 [s1 + 0x88] = a0\n  5721: a0 = u32 [0x300e0]\n  5726: u64 [s1 + 0x70] = a0\n  5729: a0 = 0x30070\n  5734: u64 [s1 + 0xb8] = a0\n  5738: i32 a0 = a0 + 0\n  5740: u64 [s1 + 0x90] = a0\n  5744: ra = 0xaa\n  5748: ecalli 5 // 'caller'\n  5750: a2 = u64 [s1 + 0xb8]\n  5754: t0 = 0xac\n  5758: jump @466\n      : @200 [@dyn 85] (gas: 2)\n  5761: a2 = u64 [s1 + 0xb8]\n  5765: t0 = 172, jump @466\n      : @201 [@dyn 86] (gas: 9)\n  5771: a2 = u64 [s1 + 0x70]\n  5774: a1 = a1 ^ a2\n  5777: a2 = u64 [s1 + 0x78]\n  5780: a0 = a0 ^ a2\n  5783: a0 = a0 | a1\n  5786: a1 = u64 [s1 + 0x80]\n  5790: a1 = a1 ^ a3\n  5793: a0 = a0 | a1\n  5796: jump @334 if a0 != 0\n      : @202 (gas: 10)\n  5800: a0 = s1 + 0x7ff\n  5804: a0 = a0 + 0x39\n  5807: u64 [a0 + 1120] = 0\n  5811: u64 [a0 + 1112] = 0\n  5815: u64 [a0 + 1104] = 0\n  5819: u64 [a0 + 1096] = 0\n  5823: a0 = s1 + 0x1000\n  5827: i32 a0 = a0 + 0xfffffffffffffc80\n  5831: ecalli 17 // 'value_transferred'\n  5833: fallthrough\n      : @203 (gas: 19)\n  5834: a2 = s1 + 0x7ff\n  5838: a2 = a2 + 0x39\n  5841: a3 = a2 + 0x400\n  5845: a0 = u64 [a3 + 0x60]\n  5848: a1 = u64 [a3 + 0x50]\n  5851: t0 = u64 [a2 + 0x448]\n  5855: a2 = u64 [a3 + 0x58]\n  5858: t1 = u64 [s1 + 0xb0]\n  5862: a0 = a0 ^ t1\n  5865: a3 = u64 [s1 + 0xa0]\n  5869: a1 = a1 ^ a3\n  5872: a0 = a0 | a1\n  5875: a5 = u64 [s1 + 0xa8]\n  5879: a1 = a2 ^ a5\n  5882: a4 = u64 [s1 + 0x98]\n  5886: a2 = t0 ^ a4\n  5889: a1 = a1 | a2\n  5892: a0 = a0 | a1\n  5895: jump @338 if a0 != 0\n      : @204 (gas: 5)\n  5899: a2 = a5\n  5901: a0 = a4 | a5\n  5904: a1 = a3 | t1\n  5907: a0 = a0 | a1\n  5910: jump @342 if a0 == 0\n      : @205 (gas: 1)\n  5914: ra = 174, jump @0\n      : @206 [@dyn 87] (gas: 4)\n  5920: a2 = u64 [s1 + 0x88]\n  5924: a0 = u64 [a2 + 0x8]\n  5927: a1 = u64 [a2 + 0x10]\n  5930: t0 = 176, jump @467\n      : @207 [@dyn 88] (gas: 10)\n  5936: a0 = u64 [s1 + 0xb8]\n  5940: u64 [s1 + 0x78] = a1\n  5943: u32 [a0 + 0x10] = a1\n  5946: u64 [s1 + 0x70] = a2\n  5949: u64 [a0 + 0x8] = a2\n  5952: u64 [s1 + 0x80] = a3\n  5956: u64 [a0] = a3\n  5958: a0 = u64 [s1 + 0x90]\n  5962: ecalli 6 // 'code_size'\n  5964: fallthrough\n      : @208 (gas: 1)\n  5965: jump @347 if a0 == 0\n      : @209 (gas: 3)\n  5969: a0 = s1 + 0x560\n  5973: a1 = 0x40\n  5976: ra = 178, jump @7\n      : @210 [@dyn 89] (gas: 13)\n  5982: a1 = s1 + 0x500\n  5986: a2 = u64 [a1 + 0x78]\n  5989: a3 = u64 [a1 + 0x70]\n  5992: a4 = u64 [a1 + 0x68]\n  5995: a0 = u64 [a1 + 0x60]\n  5998: a5 = a4 | a2\n  6001: a1 = a0 | a3\n  6004: a1 = a1 | a5\n  6007: a1 = a1 >> 0x20\n  6010: a5 = a5 | a3\n  6013: a5 = a5 << 0x20\n  6016: a1 = a1 | a5\n  6019: jump @266 if a1 != 0\n      : @211 (gas: 11)\n  6023: u64 [s1 + 0x38] = a4\n  6026: u64 [s1 + 0x40] = a3\n  6029: u64 [s1 + 0x48] = a2\n  6032: u64 [s1 + 1360] = 0\n  6036: u64 [s1 + 1352] = 0\n  6040: u64 [s1 + 1344] = 0\n  6044: a2 = 0x1249c58b00000000\n  6054: a1 = s1 + 0x540\n  6058: u64 [s1 + 0x558] = a2\n  6062: u64 [s1 + 0x88] = a0\n  6066: ra = 180, jump @9\n      : @212 [@dyn 90] (gas: 22)\n  6072: ecalli 11 // 'ref_time_left'\n  6074: a1 = u64 [s1 + 0xb8]\n  6078: a0 = u64 [s1 + 0x70]\n  6081: u64 [a1 + 0x8] = a0\n  6084: a0 = u64 [s1 + 0x80]\n  6088: u64 [a1] = a0\n  6090: a0 = u64 [s1 + 0x78]\n  6093: u32 [a1 + 0x10] = a0\n  6096: a1 = s1 + 0x7ff\n  6100: a1 = a1 + 0x39\n  6103: a0 = u64 [s1 + 0xb0]\n  6107: a2 = a1 + 0x400\n  6111: u64 [a2 + 0x80] = a0\n  6115: a0 = u64 [s1 + 0xa8]\n  6119: u64 [a2 + 0x78] = a0\n  6122: a0 = u64 [s1 + 0xa0]\n  6126: u64 [a2 + 0x70] = a0\n  6129: a0 = u64 [s1 + 0x98]\n  6133: u64 [a2 + 0x68] = a0\n  6136: a1 = 0x4\n  6139: a0 = u64 [s1 + 0x88]\n  6143: ra = 182, jump @15\n      : @213 [@dyn 91] (gas: 4)\n  6149: u64 [s1 + 0x50] = a0\n  6152: a0 = u64 [s1 + 0x88]\n  6156: a1 = 0\n  6158: ra = 184, jump @15\n      : @214 [@dyn 92] (gas: 38)\n  6164: a2 = s1 + 0x7ff\n  6168: a2 = a2 + 0x39\n  6171: u32 [a2 + 1160] = 0\n  6175: a3 = a2 + 0x400\n  6179: u64 [a3 + 192] = 0xffffffffffffffff\n  6184: u64 [a3 + 184] = 0xffffffffffffffff\n  6189: u64 [a3 + 176] = 0xffffffffffffffff\n  6194: u64 [a3 + 168] = 0xffffffffffffffff\n  6199: a1 = u64 [s1 + 0xb8]\n  6203: a1 = a1 << 0x20\n  6206: a3 = a1 >> 0x20\n  6209: a2 = 0x800000000\n  6219: u64 [s1 + 0x30] = a3\n  6222: t0 = a3 | a2\n  6225: a2 = s1 + 0x7ff\n  6229: a2 = a2 + 0x4a1\n  6233: a2 = a2 << 0x20\n  6236: a2 = a2 >> 0x20\n  6239: a3 = s1 + 0x7ff\n  6243: a3 = a3 + 0x4e1\n  6247: a3 = a3 << 0x20\n  6250: a3 = a3 | a2\n  6253: a2 = u64 [s1 + 0x50]\n  6256: a2 = a2 << 0x20\n  6259: a2 = a2 >> 0x20\n  6262: a1 = 0x400000000\n  6272: a4 = a2 | a1\n  6275: a0 = a0 << 0x20\n  6278: a0 = a0 >> 0x20\n  6281: a1 = s1 + 0x7ff\n  6285: a1 = a1 + 0x4c1\n  6289: a1 = a1 << 0x20\n  6292: a5 = a1 | a0\n  6295: a1 = 0xffffffffffffffff\n  6298: a2 = 0xffffffffffffffff\n  6301: a0 = t0\n  6303: ecalli 1 // 'call'\n  6305: fallthrough\n      : @215 (gas: 1)\n  6306: jump @267 if a0 != 0\n      : @216 (gas: 16)\n  6310: u64 [s1 + 1272] = 0\n  6314: u64 [s1 + 1264] = 0\n  6318: u64 [s1 + 1256] = 0\n  6322: u64 [s1 + 1248] = 0\n  6326: a0 = u64 [s1 + 0x88]\n  6330: a3 = s1 + 0x500\n  6334: u64 [a3] = a0\n  6336: a0 = u64 [s1 + 0x38]\n  6339: u64 [a3 + 0x8] = a0\n  6342: a0 = u64 [s1 + 0x40]\n  6345: u64 [a3 + 0x10] = a0\n  6348: a0 = s1 + 0x500\n  6352: a1 = s1 + 0x4e0\n  6356: a2 = u64 [s1 + 0x48]\n  6359: u64 [a3 + 0x18] = a2\n  6362: ra = 186, jump @398\n      : @217 [@dyn 93] (gas: 13)\n  6368: a0 = u64 [s1 + 0x58]\n  6371: a0 = a0 << 0x20\n  6374: a0 = a0 >> 0x20\n  6377: u64 [s1 + 1240] = 0\n  6381: u64 [s1 + 0x40] = a0\n  6384: u64 [s1 + 0x4d0] = a0\n  6388: a0 = u64 [s1 + 0x60]\n  6391: u64 [s1 + 0x4c8] = a0\n  6395: a1 = s1 + 0x4c0\n  6399: a0 = u64 [s1 + 0x68]\n  6402: u64 [s1 + 0x4c0] = a0\n  6406: a0 = 0\n  6408: ra = 188, jump @9\n      : @218 [@dyn 94] (gas: 7)\n  6414: u64 [s1 + 1208] = 0\n  6418: u64 [s1 + 1200] = 0\n  6422: u64 [s1 + 1192] = 0\n  6426: a0 = 0x20\n  6429: a1 = s1 + 0x4a0\n  6433: u64 [s1 + 1184] = 0\n  6437: ra = 190, jump @9\n      : @219 [@dyn 95] (gas: 7)\n  6443: a0 = sp + 0xffffffffffffffe0\n  6446: a0 = a0 & 0xffffffffffffffe0\n  6449: u64 [s1 + 0x88] = a0\n  6453: sp = a0\n  6455: a1 = 0x40\n  6458: a0 = 0\n  6460: ra = 192, jump @15\n      : @220 [@dyn 96] (gas: 12)\n  6466: a1 = sp + 0xffffffffffffffe0\n  6469: a1 = a1 & 0xffffffffffffffe0\n  6472: u64 [s1 + 0x58] = a1\n  6475: sp = a1\n  6477: i32 a0 = a0 + 0\n  6479: i32 a2 = a1 + 0\n  6481: a1 = 0x40\n  6484: ra = 0xc2\n  6488: ecalli 10 // 'hash_keccak_256'\n  6490: a3 = u64 [s1 + 0x58]\n  6493: t0 = 0xc4\n  6497: jump @472\n      : @221 [@dyn 97] (gas: 2)\n  6500: a3 = u64 [s1 + 0x58]\n  6503: t0 = 196, jump @472\n      : @222 [@dyn 98] (gas: 7)\n  6509: a1 = u64 [s1 + 0x88]\n  6513: u64 [a1 + 0x18] = a3\n  6516: u64 [a1 + 0x10] = a2\n  6519: u64 [a1 + 0x8] = a4\n  6522: u64 [a1] = a0\n  6524: a0 = s1 + 0x480\n  6528: ra = 198, jump @11\n      : @223 [@dyn 99] (gas: 38)\n  6534: t2 = u64 [s1 + 0x498]\n  6538: a1 = s1 + 0x400\n  6542: a0 = u64 [a1 + 0x90]\n  6546: a4 = u64 [a1 + 0x80]\n  6550: a5 = u64 [a1 + 0x88]\n  6554: a1 = sp + 0xffffffffffffffe0\n  6557: a1 = a1 & 0xffffffffffffffe0\n  6560: sp = a1\n  6562: a3 = u64 [s1 + 0xa0]\n  6566: a3 = a3 + a5\n  6569: t0 = u64 [s1 + 0x98]\n  6573: t0 = t0 + a4\n  6576: a4 = t0 <u a4\n  6579: a3 = a3 + a4\n  6582: t1 = a3 ^ a5\n  6585: a2 = a3 <u a5\n  6588: a2 = a4 if t1 == 0\n  6591: a4 = u64 [s1 + 0xa8]\n  6595: a4 = a4 + a0\n  6598: a5 = a4 + a2\n  6601: t1 = a5 <u a4\n  6604: ra = u64 [s1 + 0xb0]\n  6608: ra = ra + t2\n  6611: a4 = a4 <u a0\n  6614: a4 = a4 + ra\n  6617: ra = a4 + t1\n  6620: t1 = a5 <u a0\n  6623: a4 = t2 ^ ra\n  6626: t2 = ra <u t2\n  6629: t2 = t1 if a4 == 0\n  6632: a0 = a0 ^ a5\n  6635: a0 = a0 | a4\n  6638: t2 = a2 if a0 == 0\n  6641: u64 [a1 + 0x10] = a5\n  6644: u64 [a1 + 0x8] = a3\n  6647: u64 [a1] = t0\n  6649: u64 [a1 + 0x18] = ra\n  6652: jump @358 if t2 != 0\n      : @224 (gas: 2)\n  6656: a0 = u64 [s1 + 0x88]\n  6660: ra = 200, jump @12\n      : @225 [@dyn 100] (gas: 3)\n  6666: a0 = s1 + 0x460\n  6670: a1 = 0x40\n  6673: ra = 202, jump @7\n      : @226 [@dyn 101] (gas: 13)\n  6679: a1 = s1 + 0x400\n  6683: a3 = u64 [a1 + 0x78]\n  6686: a4 = u64 [a1 + 0x70]\n  6689: a5 = u64 [a1 + 0x68]\n  6692: a0 = u64 [a1 + 0x60]\n  6695: a2 = a5 | a3\n  6698: a1 = a0 | a4\n  6701: a1 = a1 | a2\n  6704: a1 = a1 >> 0x20\n  6707: a2 = a2 | a4\n  6710: a2 = a2 << 0x20\n  6713: a1 = a1 | a2\n  6716: jump @266 if a1 != 0\n      : @227 (gas: 11)\n  6720: u64 [s1 + 1104] = 0\n  6724: u64 [s1 + 1096] = 0\n  6728: u64 [s1 + 1088] = 0\n  6732: a2 = 0x70a0823100000000\n  6742: a1 = s1 + 0x440\n  6746: u64 [s1 + 0x458] = a2\n  6750: u64 [s1 + 0x88] = a0\n  6754: u64 [s1 + 0x58] = a3\n  6757: u64 [s1 + 0x50] = a4\n  6760: u64 [s1 + 0x48] = a5\n  6763: ra = 204, jump @9\n      : @228 [@dyn 102] (gas: 4)\n  6769: a0 = u64 [s1 + 0x90]\n  6773: ra = 0xce\n  6777: ecalli 0 // 'address'\n  6778: fallthrough\n      : @229 [@dyn 103] (gas: 10)\n  6779: a4 = u64 [s1 + 0x88]\n  6783: a0 = u64 [s1 + 0x58]\n  6786: a1 = u64 [s1 + 0x50]\n  6789: a0 = a0 | a1\n  6792: a1 = 0xfffffffc\n  6802: a1 = a4 <u a1\n  6805: a2 = u64 [s1 + 0x48]\n  6808: a1 = 0 if a2 != 0\n  6810: a1 = 0 if a0 != 0\n  6812: jump @266 if a1 == 0\n      : @230 (gas: 1)\n  6816: t0 = 208, jump @464\n      : @231 [@dyn 104] (gas: 7)\n  6822: u64 [s1 + 1080] = 0\n  6826: a4 = s1 + 0x400\n  6830: u64 [a4 + 0x30] = a1\n  6833: u64 [a4 + 0x28] = a2\n  6836: a1 = s1 + 0x420\n  6840: u64 [a4 + 0x20] = a3\n  6843: ra = 210, jump @9\n      : @232 [@dyn 105] (gas: 17)\n  6849: ecalli 11 // 'ref_time_left'\n  6851: a0 = u64 [s1 + 0x70]\n  6854: a1 = u64 [s1 + 0xb8]\n  6858: u64 [a1 + 0x8] = a0\n  6861: a0 = u64 [s1 + 0x80]\n  6865: u64 [a1] = a0\n  6867: a0 = u64 [s1 + 0x78]\n  6870: u32 [a1 + 0x10] = a0\n  6873: a0 = s1 + 0x7ff\n  6877: a0 = a0 + 0x39\n  6880: u64 [a0 + 1280] = 0\n  6884: u64 [a0 + 1272] = 0\n  6888: u64 [a0 + 1264] = 0\n  6892: u64 [a0 + 1256] = 0\n  6896: a1 = 0x24\n  6899: a0 = u64 [s1 + 0x88]\n  6903: ra = 212, jump @15\n      : @233 [@dyn 106] (gas: 4)\n  6909: u64 [s1 + 0xb8] = a0\n  6913: a1 = 0x20\n  6916: a0 = u64 [s1 + 0x88]\n  6920: ra = 214, jump @15\n      : @234 [@dyn 107] (gas: 34)\n  6926: a1 = a0\n  6928: a0 = s1 + 0x7ff\n  6932: a0 = a0 + 0x39\n  6935: u32 [a0 + 1288] = 0x20\n  6940: u64 [a0 + 1344] = 0\n  6944: u64 [a0 + 1336] = 0\n  6948: u64 [a0 + 1328] = 0\n  6952: u64 [a0 + 1320] = 0\n  6956: a0 = 0x1800000000\n  6966: a2 = u64 [s1 + 0x30]\n  6969: a0 = a0 | a2\n  6972: a2 = s1 + 0x7ff\n  6976: a2 = a2 + 0x521\n  6980: a2 = a2 << 0x20\n  6983: a2 = a2 >> 0x20\n  6986: a3 = s1 + 0x7ff\n  6990: a3 = a3 + 0x561\n  6994: a3 = a3 << 0x20\n  6997: a3 = a3 | a2\n  7000: a2 = u64 [s1 + 0xb8]\n  7004: a2 = a2 << 0x20\n  7007: a2 = a2 >> 0x20\n  7010: a4 = 0x2400000000\n  7020: a4 = a4 | a2\n  7023: a1 = a1 << 0x20\n  7026: a1 = a1 >> 0x20\n  7029: a2 = s1 + 0x7ff\n  7033: a2 = a2 + 0x541\n  7037: a2 = a2 << 0x20\n  7040: a5 = a2 | a1\n  7043: a1 = 0xffffffffffffffff\n  7046: a2 = 0xffffffffffffffff\n  7049: ecalli 1 // 'call'\n  7051: fallthrough\n      : @235 (gas: 1)\n  7052: jump @299 if a0 != 0\n      : @236 (gas: 2)\n  7056: ecalli 13 // 'return_data_size'\n  7058: fallthrough\n      : @237 (gas: 2)\n  7059: a4 = 0x20\n  7062: jump @239 if a0 >=u a4\n      : @238 (gas: 3)\n  7065: ecalli 13 // 'return_data_size'\n  7067: a4 = a0\n  7069: fallthrough\n      : @239 (gas: 18)\n  7070: a2 = u64 [s1 + 0x88]\n  7074: a3 = u64 [s1 + 0x58]\n  7077: a0 = u64 [s1 + 0x50]\n  7080: a1 = u64 [s1 + 0x48]\n  7083: u64 [s1 + 144] = 0\n  7087: u64 [s1 + 0xb8] = a4\n  7091: a5 = s1 + 0x300\n  7095: u64 [a5 + 0xc0] = a4\n  7099: u64 [a5 + 0xe0] = a2\n  7103: u64 [s1 + 968] = 0\n  7107: u64 [a5 + 0xe8] = a1\n  7111: u64 [s1 + 976] = 0\n  7115: u64 [a5 + 0xf0] = a0\n  7119: u64 [s1 + 984] = 0\n  7123: a0 = s1 + 0x3e0\n  7127: a1 = s1 + 0x3c0\n  7131: u64 [a5 + 0xf8] = a3\n  7135: ra = 216, jump @398\n      : @240 [@dyn 108] (gas: 4)\n  7141: a3 = u64 [s1 + 0x90]\n  7145: a0 = a3 >u 0\n  7147: a1 = u64 [s1 + 0xb8]\n  7151: t0 = 218, jump @462\n      : @241 [@dyn 109] (gas: 1)\n  7157: jump @381 if a2 == 0\n      : @242 (gas: 3)\n  7161: a0 = s1 + 0x3a0\n  7165: a1 = u64 [s1 + 0x88]\n  7169: ra = 220, jump @7\n      : @243 [@dyn 110] (gas: 11)\n  7175: a0 = u64 [s1 + 0x3b8]\n  7179: u64 [s1 + 0x90] = a0\n  7183: a0 = u64 [s1 + 0x3b0]\n  7187: u64 [s1 + 0x88] = a0\n  7191: a0 = u64 [s1 + 0x3a8]\n  7195: u64 [s1 + 0x80] = a0\n  7199: a0 = u64 [s1 + 0x3a0]\n  7203: u64 [s1 + 0x78] = a0\n  7206: a0 = s1 + 0x380\n  7210: a1 = 0x40\n  7213: ra = 222, jump @7\n      : @244 [@dyn 111] (gas: 13)\n  7219: a0 = s1 + 0x300\n  7223: a4 = u64 [a0 + 0x98]\n  7227: a5 = u64 [a0 + 0x90]\n  7231: a3 = u64 [a0 + 0x88]\n  7235: a2 = u64 [a0 + 0x80]\n  7239: a0 = a3 | a4\n  7242: a1 = a2 | a5\n  7245: a1 = a1 | a0\n  7248: a1 = a1 >> 0x20\n  7251: a0 = a0 | a5\n  7254: a0 = a0 << 0x20\n  7257: a0 = a0 | a1\n  7260: jump @266 if a0 != 0\n      : @245 (gas: 15)\n  7264: a0 = u64 [s1 + 0x98]\n  7268: u64 [s1 + 0x360] = a0\n  7272: a0 = u64 [s1 + 0xa0]\n  7276: u64 [s1 + 0x368] = a0\n  7280: a0 = u64 [s1 + 0xa8]\n  7284: u64 [s1 + 0x370] = a0\n  7288: a1 = s1 + 0x360\n  7292: a0 = u64 [s1 + 0xb0]\n  7296: u64 [s1 + 0x378] = a0\n  7300: a0 = a2\n  7302: u64 [s1 + 0xb8] = a2\n  7306: u64 [s1 + 0xb0] = a3\n  7310: u64 [s1 + 0xa8] = a4\n  7314: u64 [s1 + 0xa0] = a5\n  7318: ra = 224, jump @9\n      : @246 [@dyn 112] (gas: 1)\n  7324: t0 = 226, jump @470\n      : @247 [@dyn 113] (gas: 1)\n  7330: jump @266 if a1 == 0\n      : @248 (gas: 11)\n  7334: i32 a0 = a2 + 0x20\n  7337: a1 = u64 [s1 + 0x78]\n  7340: u64 [s1 + 0x340] = a1\n  7344: a1 = u64 [s1 + 0x80]\n  7348: u64 [s1 + 0x348] = a1\n  7352: a1 = u64 [s1 + 0x88]\n  7356: u64 [s1 + 0x350] = a1\n  7360: a1 = s1 + 0x340\n  7364: a3 = u64 [s1 + 0x90]\n  7368: u64 [s1 + 0x358] = a3\n  7372: ra = 228, jump @9\n      : @249 [@dyn 114] (gas: 21)\n  7378: u64 [s1 + 792] = 0\n  7382: a0 = u64 [s1 + 0x40]\n  7385: a4 = s1 + 0x300\n  7389: u64 [a4 + 0x10] = a0\n  7392: a0 = u64 [s1 + 0x60]\n  7395: u64 [a4 + 0x8] = a0\n  7398: a0 = u64 [0x20020]\n  7403: a1 = u64 [0x20028]\n  7408: a2 = u64 [0x20030]\n  7413: a3 = u64 [s1 + 0x68]\n  7416: u64 [a4] = a3\n  7418: u64 [a4 + 0x38] = a0\n  7421: u64 [a4 + 0x30] = a1\n  7424: u64 [a4 + 0x28] = a2\n  7427: a0 = u64 [0x20038]\n  7432: a1 = 0x40\n  7435: a2 = s1 + 0x320\n  7439: a3 = s1 + 0x300\n  7443: u64 [a4 + 0x20] = a0\n  7446: a0 = u64 [s1 + 0xb8]\n  7450: ra = 230, jump @13\n      : @250 [@dyn 115] (gas: 3)\n  7456: a0 = 0\n  7458: a1 = 0\n  7460: ra = 232, jump @15\n      : @251 [@dyn 116] (gas: 5)\n  7466: i32 a1 = a0 + 0\n  7468: a0 = 0\n  7470: a2 = 0\n  7472: ecalli 14 // 'seal_return'\n  7474: jump @357\n      : @252 (gas: 10)\n  7477: u64 [a2 + 1024] = 0\n  7481: u64 [a2 + 1016] = 0\n  7485: u64 [a2 + 1008] = 0\n  7489: u64 [a2 + 1000] = 0\n  7493: a0 = s1 + 0x1000\n  7497: i32 a0 = a0 + 0xfffffffffffffc20\n  7501: ra = 0xea\n  7505: ecalli 17 // 'value_transferred'\n  7507: t0 = 0xec\n  7511: jump @475\n      : @253 [@dyn 117] (gas: 1)\n  7514: t0 = 236, jump @475\n      : @254 [@dyn 118] (gas: 8)\n  7520: a0 = u64 [a4 + 0xf8]\n  7524: a1 = u64 [a3 + 0x400]\n  7528: a2 = u64 [a4 + 0xf0]\n  7532: a3 = u64 [a4 + 0xe8]\n  7536: a1 = a1 | a2\n  7539: a0 = a0 | a3\n  7542: a0 = a0 | a1\n  7545: jump @348 if a0 != 0\n      : @255 (gas: 3)\n  7549: a0 = u64 [s1 + 0xb8]\n  7553: a0 = i32 [a0]\n  7555: jump @332 if a0 <=u 35\n      : @256 (gas: 2)\n  7560: a0 = s1 + 0x280\n  7564: ra = 238, jump @392\n      : @257 [@dyn 119] (gas: 11)\n  7570: a3 = s1 + 0x200\n  7574: a0 = u64 [a3 + 0x80]\n  7578: a1 = u64 [a3 + 0x88]\n  7582: a2 = u32 [s1 + 0x290]\n  7586: u64 [s1 + 632] = 0\n  7590: u64 [a3 + 0x70] = a2\n  7593: u64 [a3 + 0x68] = a1\n  7596: a1 = s1 + 0x260\n  7600: u64 [a3 + 0x60] = a0\n  7603: a0 = 0\n  7605: ra = 240, jump @9\n      : @258 [@dyn 120] (gas: 7)\n  7611: u64 [s1 + 600] = 0\n  7615: u64 [s1 + 592] = 0\n  7619: u64 [s1 + 584] = 0\n  7623: a0 = 0x20\n  7626: a1 = s1 + 0x240\n  7630: u64 [s1 + 576] = 0\n  7634: ra = 242, jump @9\n      : @259 [@dyn 121] (gas: 2)\n  7640: a1 = i32 [0x20068]\n  7645: jump @261 if a1 >u 63\n      : @260 (gas: 2)\n  7649: u32 [0x20068] = 0x40\n  7655: fallthrough\n      : @261 (gas: 13)\n  7656: a0 = sp + 0xffffffffffffffe0\n  7659: a2 = a0 & 0xffffffffffffffe0\n  7662: u64 [s1 + 0xb8] = a2\n  7666: sp = a2\n  7668: a0 = 0x20070\n  7673: i32 a0 = a0 + 0\n  7675: i32 a2 = a2 + 0\n  7677: a1 = 0x40\n  7680: ra = 0xf4\n  7684: ecalli 10 // 'hash_keccak_256'\n  7686: a3 = u64 [s1 + 0xb8]\n  7690: t0 = 0xf6\n  7694: jump @468\n      : @262 [@dyn 122] (gas: 2)\n  7697: a3 = u64 [s1 + 0xb8]\n  7701: t0 = 246, jump @468\n      : @263 [@dyn 123] (gas: 9)\n  7707: a5 = a4 + 0x400\n  7711: u64 [a5 + 0x20] = a3\n  7714: u64 [a5 + 0x18] = a2\n  7717: u64 [a5 + 0x10] = a1\n  7720: u64 [a5 + 0x8] = a0\n  7723: a0 = s1 + 0x220\n  7727: a1 = s1 + 0x7ff\n  7731: a1 = a1 + 0x441\n  7735: ra = 248, jump @11\n      : @264 [@dyn 124] (gas: 11)\n  7741: a0 = u64 [s1 + 0x238]\n  7745: u64 [s1 + 0xb8] = a0\n  7749: a0 = u64 [s1 + 0x230]\n  7753: u64 [s1 + 0xb0] = a0\n  7757: a0 = u64 [s1 + 0x228]\n  7761: u64 [s1 + 0xa8] = a0\n  7765: a0 = u64 [s1 + 0x220]\n  7769: u64 [s1 + 0xa0] = a0\n  7773: a0 = s1 + 0x200\n  7777: a1 = 0x40\n  7780: ra = 250, jump @7\n      : @265 [@dyn 125] (gas: 13)\n  7786: a4 = s1 + 0x200\n  7790: a0 = u64 [a4 + 0x18]\n  7793: a1 = u64 [a4 + 0x10]\n  7796: a2 = u64 [a4 + 0x8]\n  7799: a3 = u64 [a4]\n  7801: a0 = a0 | a2\n  7804: a2 = a3 | a1\n  7807: a2 = a2 | a0\n  7810: a2 = a2 >> 0x20\n  7813: a0 = a0 | a1\n  7816: a0 = a0 << 0x20\n  7819: a0 = a0 | a2\n  7822: jump @349 if a0 == 0\n      : @266 (gas: 1)\n  7826: trap\n      : @267 (gas: 3)\n  7827: a0 = s1 + 0x520\n  7831: a1 = 0x40\n  7834: ra = 252, jump @7\n      : @268 [@dyn 126] (gas: 13)\n  7840: a1 = s1 + 0x500\n  7844: a0 = u64 [a1 + 0x38]\n  7847: u64 [s1 + 0xb0] = a0\n  7851: a0 = u64 [a1 + 0x30]\n  7854: u64 [s1 + 0xa8] = a0\n  7858: a0 = u64 [a1 + 0x28]\n  7861: u64 [s1 + 0xa0] = a0\n  7865: a0 = u64 [a1 + 0x20]\n  7868: u64 [s1 + 0xb8] = a0\n  7872: ra = 0xfe\n  7876: ecalli 13 // 'return_data_size'\n  7878: t0 = 0x100\n  7882: jump @463\n      : @269 [@dyn 127] (gas: 1)\n  7885: t0 = 256, jump @463\n      : @270 [@dyn 128] (gas: 1)\n  7891: jump @266 if a1 != 0\n      : @271 (gas: 3)\n  7894: a2 = a0\n  7896: a0 = a0 >> 0x20\n  7899: jump @266 if a0 != 0\n      : @272 (gas: 1)\n  7902: t0 = 258, jump @473\n      : @273 [@dyn 129] (gas: 1)\n  7908: ra = 260, jump @15\n      : @274 [@dyn 130] (gas: 13)\n  7914: a1 = s1 + 0x7ff\n  7918: a1 = a1 + 0x39\n  7921: a2 = u64 [s1 + 0xa8]\n  7925: u32 [a1 + 0x4c8] = a2\n  7929: i32 a0 = a0 + 0\n  7931: a1 = s1 + 0x1000\n  7935: i32 a1 = a1 + 0xfffffffffffffd00\n  7939: a2 = 0\n  7941: ecalli 12 // 'return_data_copy'\n  7943: a0 = s1 + 0x7ff\n  7947: a0 = a0 + 0x39\n  7950: a0 = i32 [a0 + 0x4c8]\n  7954: jump @283\n      : @275 (gas: 4)\n  7957: a0 = s1 + 0x7ff\n  7961: a0 = a0 + 0x141\n  7965: a1 = 0x40\n  7968: ra = 262, jump @7\n      : @276 [@dyn 131] (gas: 15)\n  7974: a0 = s1 + 0x7ff\n  7978: a0 = a0 + 0x39\n  7981: a2 = a0 + 0x100\n  7985: a1 = u64 [a2 + 0x20]\n  7988: u64 [s1 + 0xb0] = a1\n  7992: a1 = u64 [a2 + 0x18]\n  7995: u64 [s1 + 0xa8] = a1\n  7999: a1 = u64 [a2 + 0x10]\n  8002: u64 [s1 + 0xa0] = a1\n  8006: a0 = u64 [a2 + 0x8]\n  8009: u64 [s1 + 0xb8] = a0\n  8013: ra = 0x108\n  8017: ecalli 13 // 'return_data_size'\n  8019: t0 = 0x10a\n  8023: jump @463\n      : @277 [@dyn 132] (gas: 1)\n  8026: t0 = 266, jump @463\n      : @278 [@dyn 133] (gas: 1)\n  8032: jump @266 if a1 != 0\n      : @279 (gas: 3)\n  8036: a2 = a0\n  8038: a0 = a0 >> 0x20\n  8041: jump @266 if a0 != 0\n      : @280 (gas: 1)\n  8045: t0 = 268, jump @473\n      : @281 [@dyn 134] (gas: 1)\n  8051: ra = 270, jump @15\n      : @282 [@dyn 135] (gas: 13)\n  8057: a1 = s1 + 0x7ff\n  8061: a1 = a1 + 0x39\n  8064: a2 = u64 [s1 + 0xa8]\n  8068: u32 [a1 + 0x608] = a2\n  8072: i32 a0 = a0 + 0\n  8074: a1 = s1 + 0x1000\n  8078: i32 a1 = a1 + 0xfffffffffffffe40\n  8082: a2 = 0\n  8084: ecalli 12 // 'return_data_copy'\n  8086: a0 = s1 + 0x7ff\n  8090: a0 = a0 + 0x39\n  8093: a0 = i32 [a0 + 0x608]\n  8097: fallthrough\n      : @283 (gas: 2)\n  8098: a1 = u64 [s1 + 0xb0]\n  8102: jump @266 if a0 <u a1\n      : @284 (gas: 2)\n  8106: ecalli 13 // 'return_data_size'\n  8108: fallthrough\n      : @285 (gas: 3)\n  8109: a1 = a0\n  8111: a0 = a0 >> 0x20\n  8114: jump @266 if a0 != 0\n      : @286 (gas: 3)\n  8118: a0 = u64 [s1 + 0xb8]\n  8122: u64 [s1 + 0xb0] = a1\n  8126: ra = 272, jump @15\n      : @287 [@dyn 136] (gas: 6)\n  8132: i32 a1 = a0 + 0\n  8134: a2 = i32 [s1 + 0xb0]\n  8138: a0 = 0x1\n  8141: ra = 0x15a\n  8145: ecalli 14 // 'seal_return'\n  8147: jump @384\n      : @288 (gas: 6)\n  8150: ecalli 13 // 'return_data_size'\n  8152: u64 [s1 + 0x50] = a0\n  8155: a0 = s1 + 0x7ff\n  8159: a0 = a0 + 0x41\n  8162: a1 = 0x40\n  8165: ra = 274, jump @7\n      : @289 [@dyn 137] (gas: 38)\n  8171: a5 = s1 + 0x7ff\n  8175: a5 = a5 + 0x39\n  8178: t0 = u64 [a5 + 0x20]\n  8181: u64 [s1 + 0x58] = t0\n  8184: t1 = u64 [a5 + 0x18]\n  8187: u64 [s1 + 0x48] = t1\n  8190: t2 = u64 [a5 + 0x10]\n  8193: u64 [s1 + 0x60] = t2\n  8196: ra = u64 [a5 + 0x8]\n  8199: u64 [s1 + 0x88] = ra\n  8203: a1 = u64 [s1 + 0x50]\n  8206: a0 = a1 + 0x1f\n  8209: a1 = a0 <u a1\n  8212: a0 = a0 & 0xffffffffffffffe0\n  8215: a2 = a0 + 0x20\n  8218: a0 = a2 <u a0\n  8221: a3 = a1 + a0\n  8224: a4 = a3 <u a1\n  8227: a4 = a0 if a0 == 0\n  8230: a0 = s1 + 0x1000\n  8234: u64 [a0 + 4294965272] = 0\n  8238: a0 = s1 + 0x1000\n  8242: u64 [a0 + 0xfffffffffffff800] = a2\n  8246: u64 [a5] = t0\n  8248: u64 [a5 + 0xfffffffffffffff8] = t1\n  8251: a0 = s1 + 0x1000\n  8255: u64 [a0 + 0xfffffffffffff828] = t2\n  8259: a0 = s1 + 0x1000\n  8263: u64 [a0 + 0xfffffffffffff820] = ra\n  8267: a0 = s1 + 0x1000\n  8271: u64 [a0 + 0xfffffffffffff808] = a3\n  8275: a0 = s1 + 0x7ff\n  8279: a0 = a0 + 0x21\n  8282: a1 = s1 + 0x7ff\n  8286: a1 = a1 + 0x1\n  8289: a2 = s1 + 0x1000\n  8293: u64 [a2 + 0xfffffffffffff810] = a4\n  8297: ra = 276, jump @398\n      : @290 [@dyn 138] (gas: 12)\n  8303: a0 = u64 [s1 + 0x88]\n  8307: a1 = u64 [s1 + 0x58]\n  8310: a2 = u64 [s1 + 0x60]\n  8313: a2 = a2 | a1\n  8316: a3 = u64 [s1 + 0x48]\n  8319: a1 = a0 | a3\n  8322: a1 = a1 | a2\n  8325: a1 = a1 >> 0x20\n  8328: a2 = a2 | a3\n  8331: a2 = a2 << 0x20\n  8334: a1 = a1 | a2\n  8337: jump @266 if a1 != 0\n      : @291 (gas: 7)\n  8341: u64 [s1 + 2040] = 0\n  8345: u64 [s1 + 2032] = 0\n  8349: u64 [s1 + 2024] = 0\n  8353: a1 = s1 + 0x7e0\n  8357: a2 = u64 [s1 + 0x50]\n  8360: u64 [s1 + 0x7e0] = a2\n  8364: ra = 278, jump @9\n      : @292 [@dyn 139] (gas: 2)\n  8370: ecalli 13 // 'return_data_size'\n  8372: fallthrough\n      : @293 (gas: 10)\n  8373: a3 = u64 [s1 + 0x88]\n  8377: a1 = u64 [s1 + 0x58]\n  8380: a2 = u64 [s1 + 0x48]\n  8383: a1 = a1 | a2\n  8386: a2 = 0xffffffe0\n  8396: a2 = a3 <u a2\n  8399: a4 = u64 [s1 + 0x60]\n  8402: a2 = 0 if a4 != 0\n  8404: a2 = 0 if a1 != 0\n  8406: jump @266 if a2 == 0\n      : @294 (gas: 3)\n  8410: a1 = a0\n  8412: a0 = a0 >> 0x20\n  8415: jump @266 if a0 != 0\n      : @295 (gas: 7)\n  8419: i32 a0 = a3 + 0x20\n  8422: a2 = a1\n  8424: u64 [s1 + 0x60] = a1\n  8427: i32 a1 = a1 + 0\n  8429: u64 [s1 + 0x88] = a1\n  8433: a1 = a2\n  8435: ra = 280, jump @15\n      : @296 [@dyn 140] (gas: 10)\n  8441: a1 = s1 + 0x7ff\n  8445: a1 = a1 + 0x39\n  8448: a2 = u64 [s1 + 0x60]\n  8451: u32 [a1 + 0x688] = a2\n  8455: i32 a0 = a0 + 0\n  8457: a1 = s1 + 0x1000\n  8461: i32 a1 = a1 + 0xfffffffffffffec0\n  8465: a2 = 0\n  8467: ecalli 12 // 'return_data_copy'\n  8469: fallthrough\n      : @297 (gas: 6)\n  8470: a0 = s1 + 0x7ff\n  8474: a0 = a0 + 0x39\n  8477: a0 = i32 [a0 + 0x688]\n  8481: a2 = u64 [s1 + 0x90]\n  8485: a1 = u64 [s1 + 0x88]\n  8489: jump @266 if a0 <u a1\n      : @298 (gas: 1)\n  8493: jump @123\n      : @299 (gas: 3)\n  8496: a0 = s1 + 0x400\n  8500: a1 = 0x40\n  8503: ra = 282, jump @7\n      : @300 [@dyn 141] (gas: 13)\n  8509: a1 = s1 + 0x400\n  8513: a0 = u64 [a1 + 0x18]\n  8516: u64 [s1 + 0xb0] = a0\n  8520: a0 = u64 [a1 + 0x10]\n  8523: u64 [s1 + 0xa8] = a0\n  8527: a0 = u64 [a1 + 0x8]\n  8530: u64 [s1 + 0xa0] = a0\n  8534: a0 = u64 [a1]\n  8536: u64 [s1 + 0xb8] = a0\n  8540: ra = 0x11c\n  8544: ecalli 13 // 'return_data_size'\n  8546: t0 = 0x11e\n  8550: jump @463\n      : @301 [@dyn 142] (gas: 1)\n  8553: t0 = 286, jump @463\n      : @302 [@dyn 143] (gas: 1)\n  8559: jump @266 if a1 != 0\n      : @303 (gas: 3)\n  8563: a2 = a0\n  8565: a0 = a0 >> 0x20\n  8568: jump @266 if a0 != 0\n      : @304 (gas: 1)\n  8572: t0 = 288, jump @473\n      : @305 [@dyn 144] (gas: 1)\n  8578: ra = 290, jump @15\n      : @306 [@dyn 145] (gas: 13)\n  8584: a1 = s1 + 0x7ff\n  8588: a1 = a1 + 0x39\n  8591: a2 = u64 [s1 + 0xa8]\n  8595: u32 [a1 + 0x548] = a2\n  8599: i32 a0 = a0 + 0\n  8601: a1 = s1 + 0x1000\n  8605: i32 a1 = a1 + 0xfffffffffffffd80\n  8609: a2 = 0\n  8611: ecalli 12 // 'return_data_copy'\n  8613: a0 = s1 + 0x7ff\n  8617: a0 = a0 + 0x39\n  8620: a0 = i32 [a0 + 0x548]\n  8624: jump @283\n      : @307 (gas: 3)\n  8627: a0 = s1 + 0x740\n  8631: a1 = 0x40\n  8634: ra = 292, jump @7\n      : @308 [@dyn 146] (gas: 13)\n  8640: a1 = s1 + 0x700\n  8644: a0 = u64 [a1 + 0x58]\n  8647: u64 [s1 + 0xb0] = a0\n  8651: a0 = u64 [a1 + 0x50]\n  8654: u64 [s1 + 0xa8] = a0\n  8658: a0 = u64 [a1 + 0x48]\n  8661: u64 [s1 + 0xa0] = a0\n  8665: a0 = u64 [a1 + 0x40]\n  8668: u64 [s1 + 0xb8] = a0\n  8672: ra = 0x126\n  8676: ecalli 13 // 'return_data_size'\n  8678: t0 = 0x128\n  8682: jump @463\n      : @309 [@dyn 147] (gas: 1)\n  8685: t0 = 296, jump @463\n      : @310 [@dyn 148] (gas: 1)\n  8691: jump @266 if a1 != 0\n      : @311 (gas: 3)\n  8695: a2 = a0\n  8697: a0 = a0 >> 0x20\n  8700: jump @266 if a0 != 0\n      : @312 (gas: 1)\n  8704: t0 = 298, jump @473\n      : @313 [@dyn 149] (gas: 1)\n  8710: ra = 300, jump @15\n      : @314 [@dyn 150] (gas: 13)\n  8716: a1 = s1 + 0x7ff\n  8720: a1 = a1 + 0x39\n  8723: a2 = u64 [s1 + 0xa8]\n  8727: u32 [a1 + 0x708] = a2\n  8731: i32 a0 = a0 + 0\n  8733: a1 = s1 + 0x1000\n  8737: i32 a1 = a1 + 0xffffffffffffff40\n  8741: a2 = 0\n  8743: ecalli 12 // 'return_data_copy'\n  8745: a0 = s1 + 0x7ff\n  8749: a0 = a0 + 0x39\n  8752: a0 = i32 [a0 + 0x708]\n  8756: jump @283\n      : @315 (gas: 3)\n  8759: a0 = 0\n  8761: a1 = 0\n  8763: ra = 302, jump @15\n      : @316 [@dyn 151] (gas: 5)\n  8769: i32 a1 = a0 + 0\n  8771: a0 = 0x1\n  8774: a2 = 0\n  8776: ecalli 14 // 'seal_return'\n  8778: jump @357\n      : @317 (gas: 12)\n  8781: a2 = s1 + 0x7ff\n  8785: a2 = a2 + 0x39\n  8788: u64 [a2 + 408] = 0\n  8792: u64 [a2 + 400] = 0\n  8796: a0 = 0xc39fa00400000000\n  8806: u64 [a2 + 0x1a0] = a0\n  8810: a1 = s1 + 0x7ff\n  8814: a1 = a1 + 0x1c1\n  8818: u64 [a2 + 392] = 0\n  8822: a0 = 0\n  8824: ra = 0x130\n  8828: jump @9\n      : @318 (gas: 9)\n  8831: u64 [s1 + 1520] = 0\n  8835: u64 [s1 + 1512] = 0\n  8839: u64 [s1 + 1504] = 0\n  8843: a0 = 0x2c5211c600000000\n  8853: a1 = s1 + 0x5e0\n  8857: u64 [s1 + 0x5f8] = a0\n  8861: a0 = 0\n  8863: ra = 0x130\n  8867: jump @9\n      : @319 (gas: 11)\n  8870: a2 = s1 + 0x7ff\n  8874: a2 = a2 + 0x39\n  8877: u64 [a2 + 664] = 0\n  8881: u64 [a2 + 656] = 0\n  8885: a0 = 0xc39fa00400000000\n  8895: u64 [a2 + 0x2a0] = a0\n  8899: a1 = s1 + 0x7ff\n  8903: a1 = a1 + 0x2c1\n  8907: u64 [a2 + 648] = 0\n  8911: a0 = 0\n  8913: ra = 304, jump @9\n      : @320 [@dyn 152] (gas: 3)\n  8919: a1 = 0x4\n  8922: a0 = 0\n  8924: ra = 306, jump @15\n      : @321 [@dyn 153] (gas: 2)\n  8930: i32 a1 = a0 + 0\n  8932: jump @346\n      : @322 (gas: 3)\n  8935: a1 = 0x20070\n  8940: i32 a1 = a1 + 0\n  8942: jump @356\n      : @323 (gas: 3)\n  8945: a1 = 0x20070\n  8950: i32 a1 = a1 + 0\n  8952: jump @356\n      : @324 (gas: 1)\n  8955: jump @353 if a0 != 1302766934\n      : @325 (gas: 12)\n  8963: a0 = s1 + 0x7ff\n  8967: a0 = a0 + 0x39\n  8970: u64 [a0 + 896] = 0\n  8974: u64 [a0 + 888] = 0\n  8978: u64 [a0 + 880] = 0\n  8982: u64 [a0 + 872] = 0\n  8986: a0 = s1 + 0x1000\n  8990: i32 a0 = a0 + 0xfffffffffffffba0\n  8994: ra = 0x134\n  8998: ecalli 17 // 'value_transferred'\n  9000: t0 = 0x136\n  9004: jump @475\n      : @326 [@dyn 154] (gas: 1)\n  9007: t0 = 310, jump @475\n      : @327 [@dyn 155] (gas: 1)\n  9013: t0 = 312, jump @474\n      : @328 [@dyn 156] (gas: 1)\n  9019: jump @360 if a0 == 0\n      : @329 (gas: 3)\n  9023: a1 = 0x20070\n  9028: i32 a1 = a1 + 0\n  9030: jump @356\n      : @330 (gas: 3)\n  9033: a1 = 0x20070\n  9038: i32 a1 = a1 + 0\n  9040: jump @356\n      : @331 (gas: 3)\n  9043: a1 = 0x20070\n  9048: i32 a1 = a1 + 0\n  9050: jump @356\n      : @332 (gas: 3)\n  9053: a1 = 0x20070\n  9058: i32 a1 = a1 + 0\n  9060: jump @356\n      : @333 (gas: 3)\n  9063: a1 = 0x20070\n  9068: i32 a1 = a1 + 0\n  9070: jump @356\n      : @334 (gas: 8)\n  9073: u64 [s1 + 1456] = 0\n  9077: u64 [s1 + 1448] = 0\n  9081: u64 [s1 + 1440] = 0\n  9085: a0 = 0xc39fa00400000000\n  9095: a1 = s1 + 0x5a0\n  9099: u64 [s1 + 0x5b8] = a0\n  9103: a0 = 0\n  9105: ra = 314, jump @9\n      : @335 [@dyn 157] (gas: 2)\n  9111: a1 = i32 [0x20068]\n  9116: jump @337 if a1 >u 31\n      : @336 (gas: 4)\n  9120: u32 [0x20068] = 0x20\n  9126: a1 = 0x20070\n  9131: i32 a1 = a1 + 0\n  9133: jump @346\n      : @337 (gas: 3)\n  9136: a1 = 0x20070\n  9141: i32 a1 = a1 + 0\n  9143: jump @346\n      : @338 (gas: 8)\n  9146: u64 [s1 + 1424] = 0\n  9150: u64 [s1 + 1416] = 0\n  9154: u64 [s1 + 1408] = 0\n  9158: a0 = 0x2c5211c600000000\n  9168: a1 = s1 + 0x580\n  9172: u64 [s1 + 0x598] = a0\n  9176: a0 = 0\n  9178: ra = 316, jump @9\n      : @339 [@dyn 158] (gas: 2)\n  9184: a1 = i32 [0x20068]\n  9189: jump @341 if a1 >u 31\n      : @340 (gas: 4)\n  9193: u32 [0x20068] = 0x20\n  9199: a1 = 0x20070\n  9204: i32 a1 = a1 + 0\n  9206: jump @346\n      : @341 (gas: 3)\n  9208: a1 = 0x20070\n  9213: i32 a1 = a1 + 0\n  9215: jump @346\n      : @342 (gas: 8)\n  9217: u64 [s1 + 688] = 0\n  9221: u64 [s1 + 680] = 0\n  9225: u64 [s1 + 672] = 0\n  9229: a0 = 0x2c5211c600000000\n  9239: a1 = s1 + 0x2a0\n  9243: u64 [s1 + 0x2b8] = a0\n  9247: a0 = 0\n  9249: ra = 318, jump @9\n      : @343 [@dyn 159] (gas: 2)\n  9255: a1 = i32 [0x20068]\n  9260: jump @345 if a1 >u 31\n      : @344 (gas: 4)\n  9264: u32 [0x20068] = 0x20\n  9270: a1 = 0x20070\n  9275: i32 a1 = a1 + 0\n  9277: jump @346\n      : @345 (gas: 3)\n  9279: a1 = 0x20070\n  9284: i32 a1 = a1 + 0\n  9286: fallthrough\n      : @346 (gas: 6)\n  9287: a0 = 0x1\n  9290: a2 = 0x4\n  9293: ecalli 14 // 'seal_return'\n  9295: a1 = 0x20070\n  9300: i32 a1 = a1 + 0\n  9302: jump @356\n      : @347 (gas: 3)\n  9304: a1 = 0x20070\n  9309: i32 a1 = a1 + 0\n  9311: jump @356\n      : @348 (gas: 3)\n  9313: a1 = 0x20070\n  9318: i32 a1 = a1 + 0\n  9320: jump @356\n      : @349 (gas: 13)\n  9322: a0 = u64 [s1 + 0xa0]\n  9326: a2 = s1 + 0x100\n  9330: u64 [a2 + 0xe0] = a0\n  9334: a0 = u64 [s1 + 0xa8]\n  9338: u64 [a2 + 0xe8] = a0\n  9342: a0 = u64 [s1 + 0xb0]\n  9346: u64 [a2 + 0xf0] = a0\n  9350: a1 = s1 + 0x1e0\n  9354: a0 = u64 [s1 + 0xb8]\n  9358: u64 [a2 + 0xf8] = a0\n  9362: a0 = a3\n  9364: u64 [s1 + 0xb8] = a3\n  9368: ra = 320, jump @9\n      : @350 [@dyn 160] (gas: 3)\n  9374: a1 = 0x20\n  9377: a0 = u64 [s1 + 0xb8]\n  9381: ra = 322, jump @15\n      : @351 [@dyn 161] (gas: 2)\n  9387: i32 a1 = a0 + 0\n  9389: fallthrough\n      : @352 (gas: 6)\n  9390: a2 = 0x20\n  9393: a0 = 0\n  9395: ecalli 14 // 'seal_return'\n  9397: a0 = u64 [s1 + 0xb8]\n  9401: a0 = i32 [a0]\n  9403: jump @354\n      : @353 (gas: 3)\n  9405: a0 = u64 [s1 + 0xb8]\n  9409: a0 = i32 [a0]\n  9411: fallthrough\n      : @354 (gas: 1)\n  9412: jump @357 if a0 == 0\n      : @355 (gas: 3)\n  9415: a1 = 0x20070\n  9420: i32 a1 = a1 + 0\n  9422: fallthrough\n      : @356 (gas: 4)\n  9423: a0 = 0x1\n  9426: a2 = 0\n  9428: ecalli 14 // 'seal_return'\n  9430: fallthrough\n      : @357 (gas: 6)\n  9431: a1 = 0x20070\n  9436: i32 a1 = a1 + 0\n  9438: a0 = 0\n  9440: a2 = 0\n  9442: ecalli 14 // 'seal_return'\n  9444: jump @357\n      : @358 (gas: 8)\n  9446: u64 [s1 + 752] = 0\n  9450: u64 [s1 + 744] = 0\n  9454: u64 [s1 + 736] = 0\n  9458: a0 = 0x4e487b7100000000\n  9468: a1 = s1 + 0x2e0\n  9472: u64 [s1 + 0x2f8] = a0\n  9476: a0 = 0\n  9478: ra = 324, jump @9\n      : @359 [@dyn 162] (gas: 8)\n  9484: u64 [s1 + 728] = 0\n  9488: u64 [s1 + 720] = 0\n  9492: u64 [s1 + 704] = 0x11\n  9497: a0 = 0x4\n  9500: a1 = s1 + 0x2c0\n  9504: u64 [s1 + 712] = 0\n  9508: ra = 0x148\n  9512: jump @9\n      : @360 (gas: 3)\n  9515: a0 = u64 [s1 + 0xb8]\n  9519: a0 = i32 [a0]\n  9521: jump @368 if a0 >u 35\n      : @361 (gas: 6)\n  9526: a1 = 0x20070\n  9531: i32 a1 = a1 + 0\n  9533: a0 = 0x1\n  9536: a2 = 0\n  9538: ecalli 14 // 'seal_return'\n  9540: jump @357\n      : @362 (gas: 3)\n  9542: a1 = 0x20070\n  9547: i32 a1 = a1 + 0\n  9549: jump @383\n      : @363 (gas: 12)\n  9552: a2 = s1 + 0x7ff\n  9556: a2 = a2 + 0x39\n  9559: u64 [a2 + 152] = 0\n  9563: u64 [a2 + 144] = 0\n  9567: a0 = 0xbb1205c200000000\n  9577: u64 [a2 + 0xa0] = a0\n  9581: a1 = s1 + 0x7ff\n  9585: a1 = a1 + 0xc1\n  9589: u64 [a2 + 136] = 0\n  9593: a0 = 0\n  9595: ra = 0x130\n  9599: jump @9\n      : @364 (gas: 8)\n  9602: u64 [s1 + 1584] = 0\n  9606: u64 [s1 + 1576] = 0\n  9610: u64 [s1 + 1568] = 0\n  9614: a0 = 0x4e487b7100000000\n  9624: a1 = s1 + 0x620\n  9628: u64 [s1 + 0x638] = a0\n  9632: a0 = 0\n  9634: ra = 326, jump @9\n      : @365 [@dyn 163] (gas: 7)\n  9640: u64 [s1 + 1560] = 0\n  9644: u64 [s1 + 1552] = 0\n  9648: u64 [s1 + 1536] = 0x11\n  9653: a0 = 0x4\n  9656: a1 = s1 + 0x600\n  9660: u64 [s1 + 1544] = 0\n  9664: ra = 328, jump @9\n      : @366 [@dyn 164] (gas: 3)\n  9670: a1 = 0x24\n  9673: a0 = 0\n  9675: ra = 330, jump @15\n      : @367 [@dyn 165] (gas: 7)\n  9681: i32 a1 = a0 + 0\n  9683: a0 = 0x1\n  9686: a2 = 0x24\n  9689: ecalli 14 // 'seal_return'\n  9691: a0 = s1 + 0x140\n  9695: ra = 0x14c\n  9699: jump @392\n      : @368 (gas: 2)\n  9702: a0 = s1 + 0x140\n  9706: ra = 332, jump @392\n      : @369 [@dyn 166] (gas: 11)\n  9712: a3 = s1 + 0x100\n  9716: a0 = u64 [a3 + 0x40]\n  9719: a1 = u64 [a3 + 0x48]\n  9722: a2 = u32 [s1 + 0x150]\n  9726: u64 [s1 + 312] = 0\n  9730: u64 [a3 + 0x30] = a2\n  9733: u64 [a3 + 0x28] = a1\n  9736: a1 = s1 + 0x120\n  9740: u64 [a3 + 0x20] = a0\n  9743: a0 = 0\n  9745: ra = 334, jump @9\n      : @370 [@dyn 167] (gas: 7)\n  9751: u64 [s1 + 280] = 0\n  9755: u64 [s1 + 272] = 0\n  9759: u64 [s1 + 264] = 0\n  9763: a0 = 0x20\n  9766: a1 = s1 + 0x100\n  9770: u64 [s1 + 256] = 0\n  9774: ra = 336, jump @9\n      : @371 [@dyn 168] (gas: 4)\n  9780: a0 = 0x20068\n  9785: u64 [s1 + 0xb8] = a0\n  9789: a0 = i32 [0x20068]\n  9794: jump @373 if a0 >u 63\n      : @372 (gas: 3)\n  9798: a1 = u64 [s1 + 0xb8]\n  9802: u32 [a1 + 0] = 0x40\n  9805: fallthrough\n      : @373 (gas: 14)\n  9806: a0 = sp + 0xffffffffffffffe0\n  9809: a2 = a0 & 0xffffffffffffffe0\n  9812: u64 [s1 + 0xa8] = a2\n  9816: sp = a2\n  9818: a0 = 0x20070\n  9823: u64 [s1 + 0xb0] = a0\n  9827: i32 a0 = a0 + 0\n  9829: i32 a2 = a2 + 0\n  9831: a1 = 0x40\n  9834: ra = 0x152\n  9838: ecalli 10 // 'hash_keccak_256'\n  9840: a3 = u64 [s1 + 0xa8]\n  9844: t0 = 0x154\n  9848: jump @468\n      : @374 [@dyn 169] (gas: 2)\n  9851: a3 = u64 [s1 + 0xa8]\n  9855: t0 = 340, jump @468\n      : @375 [@dyn 170] (gas: 9)\n  9861: a5 = a4 + 0x300\n  9865: u64 [a5 + 0xa0] = a3\n  9869: u64 [a5 + 0x98] = a2\n  9873: u64 [a5 + 0x90] = a1\n  9877: u64 [a5 + 0x88] = a0\n  9881: a0 = s1 + 0xe0\n  9885: a1 = s1 + 0x7ff\n  9889: a1 = a1 + 0x3c1\n  9893: ra = 342, jump @11\n      : @376 [@dyn 171] (gas: 11)\n  9899: a2 = u64 [s1 + 0xe0]\n  9903: a0 = u64 [s1 + 0xe8]\n  9907: a1 = u64 [s1 + 0xf0]\n  9911: a3 = u64 [s1 + 0xf8]\n  9915: u64 [s1 + 0xd8] = a3\n  9919: u64 [s1 + 0xd0] = a1\n  9923: u64 [s1 + 0xc8] = a0\n  9927: a0 = 0x80\n  9931: a1 = s1 + 0xc0\n  9935: u64 [s1 + 0xc0] = a2\n  9939: ra = 344, jump @9\n      : @377 [@dyn 172] (gas: 3)\n  9945: a0 = u64 [s1 + 0xb8]\n  9949: a0 = i32 [a0]\n  9951: jump @379 if a0 >u 159\n      : @378 (gas: 5)\n  9956: a1 = u64 [s1 + 0xb8]\n  9960: u32 [a1 + 0] = 0xa0\n  9964: a0 = u64 [s1 + 0xb0]\n  9968: i32 a1 = a0 + 0x80\n  9972: jump @352\n      : @379 (gas: 3)\n  9975: a0 = u64 [s1 + 0xb0]\n  9979: i32 a1 = a0 + 0x80\n  9983: jump @352\n      : @380 (gas: 9)\n  9986: u64 [s1 + 2000] = 0\n  9990: u64 [s1 + 1992] = 0\n  9994: u64 [s1 + 1984] = 0\n  9998: a0 = 0xbb1205c200000000\n 10008: a1 = s1 + 0x7c0\n 10012: u64 [s1 + 0x7d8] = a0\n 10016: a0 = 0\n 10018: ra = 0x130\n 10022: jump @9\n      : @381 (gas: 3)\n 10025: a1 = 0x20070\n 10030: i32 a1 = a1 + 0\n 10032: jump @383\n      : @382 (gas: 3)\n 10034: a1 = 0x20070\n 10039: i32 a1 = a1 + 0\n 10041: fallthrough\n      : @383 (gas: 4)\n 10042: a0 = 0x1\n 10045: ra = 0x15a\n 10049: ecalli 14 // 'seal_return'\n 10051: fallthrough\n      : @384 [@dyn 173] (gas: 18)\n 10052: sp = sp + 0xffffffffffffffc0\n 10055: u64 [sp + 0x38] = ra\n 10058: u64 [sp + 0x30] = s0\n 10061: u64 [sp + 0x28] = s1\n 10064: s0 = sp + 0x40\n 10067: sp = sp & 0xfffffffffffffff0\n 10070: a2 = u64 [a1 + 0x10]\n 10073: a3 = u64 [a1 + 0x18]\n 10076: a4 = u64 [a1 + 0x8]\n 10079: a1 = u64 [a1]\n 10081: a3 = a3 | a4\n 10084: a4 = a1 | a2\n 10087: a4 = a4 | a3\n 10090: a4 = a4 >> 0x20\n 10093: a2 = a2 | a3\n 10096: a2 = a2 << 0x20\n 10099: a2 = a2 | a4\n 10102: jump @390 if a2 != 0\n      : @385 (gas: 3)\n 10105: s1 = a0\n 10107: a0 = sp\n 10109: ra = 348, jump @7\n      : @386 [@dyn 174] (gas: 1)\n 10115: t0 = 350, jump @469\n      : @387 [@dyn 175] (gas: 1)\n 10121: jump @391 if a3 == 0\n      : @388 (gas: 1)\n 10124: t0 = 352, jump @471\n      : @389 [@dyn 176] (gas: 1)\n 10130: ret\n      : @390 (gas: 1)\n 10132: trap\n      : @391 (gas: 7)\n 10133: a1 = 0x20070\n 10138: i32 a1 = a1 + 0\n 10140: a0 = 0x1\n 10143: a2 = 0\n 10145: ra = 0x162\n 10149: ecalli 14 // 'seal_return'\n 10151: fallthrough\n      : @392 [@dyn 177] (gas: 13)\n 10152: sp = sp + 0xffffffffffffffc0\n 10155: u64 [sp + 0x38] = ra\n 10158: u64 [sp + 0x30] = s0\n 10161: u64 [sp + 0x28] = s1\n 10164: s0 = sp + 0x40\n 10167: sp = sp & 0xffffffffffffffe0\n 10170: s1 = a0\n 10172: i32 a0 = sp + 0\n 10174: a1 = 0x4\n 10177: ra = 0x164\n 10181: ecalli 3 // 'call_data_load'\n 10183: t0 = 0x166\n 10187: jump @469\n      : @393 [@dyn 178] (gas: 1)\n 10190: t0 = 358, jump @469\n      : @394 [@dyn 179] (gas: 1)\n 10196: jump @397 if a3 == 0\n      : @395 (gas: 1)\n 10199: t0 = 360, jump @471\n      : @396 [@dyn 180] (gas: 1)\n 10205: ret\n      : @397 (gas: 7)\n 10207: a1 = 0x20070\n 10212: i32 a1 = a1 + 0\n 10214: a0 = 0x1\n 10217: a2 = 0\n 10219: ra = 0x16a\n 10223: ecalli 14 // 'seal_return'\n 10225: fallthrough\n      : @398 [@dyn 181] (gas: 46)\n 10226: sp = sp + 0xffffffffffffff70\n 10230: u64 [sp + 0x88] = ra\n 10234: u64 [sp + 0x80] = s0\n 10238: u64 [sp + 0x78] = s1\n 10241: s0 = sp + 0x90\n 10245: sp = sp & 0xfffffffffffffff0\n 10248: t0 = a0\n 10250: a2 = u64 [a1]\n 10252: t2 = u64 [a0 + 0x8]\n 10255: a5 = u64 [a1 + 0x8]\n 10258: t1 = u64 [a0]\n 10260: a3 = a2 + 0x1f\n 10263: ra = a3 <u a2\n 10266: a2 = a5 + ra\n 10269: a3 = a3 & 0xffffffffffffffe0\n 10272: u64 [sp + 0x8] = t1\n 10275: t1 = t1 + a3\n 10278: a4 = t1 <u a3\n 10281: a3 = a2 + t2\n 10284: a3 = a3 + a4\n 10287: s1 = a3 ^ a2\n 10290: a0 = a3 <u a2\n 10293: a0 = a4 if s1 == 0\n 10296: a4 = u64 [t0 + 0x18]\n 10299: a5 = a2 <u a5\n 10302: s1 = u64 [a1 + 0x10]\n 10305: t0 = u64 [t0 + 0x10]\n 10308: a1 = u64 [a1 + 0x18]\n 10311: a5 = ra if ra == 0\n 10314: a5 = a5 + s1\n 10317: s1 = a5 <u s1\n 10320: a2 = a5 + t0\n 10323: a0 = a0 + a2\n 10326: a5 = a2 <u a5\n 10329: a2 = a0 <u a2\n 10332: a1 = a1 + a4\n 10335: a1 = a1 + s1\n 10338: a1 = a1 + a5\n 10341: a5 = a1 + a2\n 10344: a1 = a5 >u 0\n 10346: a2 = a0 >u 0\n 10348: a2 = a1 if a5 != 0\n 10351: a1 = a0 | a5\n 10354: s1 = a3 >u 0\n 10356: s1 = a2 if a1 != 0\n 10359: jump @402 if s1 != 0\n      : @399 (gas: 13)\n 10362: a1 = u64 [sp + 0x8]\n 10365: a1 = t1 <u a1\n 10368: a2 = a3 ^ t2\n 10371: s1 = a3 <u t2\n 10374: s1 = a1 if a2 == 0\n 10377: a1 = a0 <u t0\n 10380: a2 = a5 ^ a4\n 10383: a4 = a5 <u a4\n 10386: a4 = a1 if a2 == 0\n 10389: a1 = a0 ^ t0\n 10392: a1 = a1 | a2\n 10395: a4 = s1 if a1 == 0\n 10398: jump @402 if a4 != 0\n      : @400 (gas: 7)\n 10401: u64 [sp + 0x50] = t1\n 10404: u64 [sp + 0x58] = a3\n 10407: u64 [sp + 0x60] = a0\n 10410: a0 = 0x40\n 10413: a1 = sp + 0x50\n 10416: u64 [sp + 0x68] = a5\n 10419: ra = 364, jump @9\n      : @401 [@dyn 182] (gas: 6)\n 10425: sp = s0 + 0xffffffffffffff70\n 10429: ra = u64 [sp + 0x88]\n 10433: s0 = u64 [sp + 0x80]\n 10437: s1 = u64 [sp + 0x78]\n 10440: sp = sp + 0x90\n 10444: ret\n      : @402 (gas: 8)\n 10446: u64 [sp + 64] = 0\n 10449: u64 [sp + 56] = 0\n 10452: u64 [sp + 48] = 0\n 10455: a0 = 0x4e487b7100000000\n 10465: a1 = sp + 0x30\n 10468: u64 [sp + 0x48] = a0\n 10471: a0 = 0\n 10473: ra = 366, jump @9\n      : @403 [@dyn 183] (gas: 7)\n 10479: u64 [sp + 40] = 0\n 10482: u64 [sp + 32] = 0\n 10485: u64 [sp + 16] = 0x41\n 10489: a0 = 0x4\n 10492: a1 = sp + 0x10\n 10495: u64 [sp + 24] = 0\n 10498: ra = 368, jump @9\n      : @404 [@dyn 184] (gas: 2)\n 10504: a1 = i32 [0x20068]\n 10509: jump @406 if a1 >u 63\n      : @405 (gas: 2)\n 10513: u32 [0x20068] = 0x40\n 10519: fallthrough\n      : @406 (gas: 7)\n 10520: a1 = 0x20070\n 10525: i32 a1 = a1 + 0\n 10527: a0 = 0x1\n 10530: a2 = 0x24\n 10533: ra = 0x172\n 10537: ecalli 14 // 'seal_return'\n 10539: fallthrough\n      : @407 [@dyn 185] (gas: 17)\n 10540: sp = sp + 0xfffffffffffffba0\n 10544: a2 = sp + 0x400\n 10548: u64 [a2 + 0x58] = ra\n 10551: u64 [a2 + 0x50] = s0\n 10554: u64 [a2 + 0x48] = s1\n 10557: s0 = sp + 0x460\n 10561: sp = sp & 0xffffffffffffffe0\n 10564: a2 = u64 [a1 + 0x10]\n 10567: u64 [sp + 0x28] = a2\n 10570: a2 = u64 [a1 + 0x8]\n 10573: u64 [sp + 0x20] = a2\n 10576: a1 = u64 [a1]\n 10578: u64 [sp + 0x18] = a1\n 10581: u64 [sp + 0x48] = a0\n 10584: a0 = sp + 0x3c0\n 10588: a1 = 0x40\n 10591: ra = 372, jump @7\n      : @408 [@dyn 186] (gas: 19)\n 10597: a4 = sp + 0x300\n 10601: a0 = u64 [a4 + 0xd8]\n 10605: u64 [sp + 0xe8] = a0\n 10609: s1 = u64 [a4 + 0xd0]\n 10613: a1 = u64 [a4 + 0xc8]\n 10617: u64 [sp + 0xe0] = a1\n 10621: a2 = u64 [a4 + 0xc0]\n 10625: u64 [sp + 0xf0] = a2\n 10629: u64 [a4 + 152] = 0\n 10633: u64 [a4 + 144] = 0\n 10637: u64 [a4 + 136] = 0\n 10641: u64 [a4 + 128] = 0x40\n 10646: u64 [a4 + 0xb8] = a0\n 10650: u64 [a4 + 0xb0] = s1\n 10654: u64 [a4 + 0xa8] = a1\n 10658: a0 = sp + 0x3a0\n 10662: a1 = sp + 0x380\n 10666: u64 [a4 + 0xa0] = a2\n 10670: ra = 374, jump @398\n      : @409 [@dyn 187] (gas: 12)\n 10676: a0 = u64 [sp + 0xf0]\n 10680: a2 = u64 [sp + 0xe8]\n 10684: a1 = u64 [sp + 0xe0]\n 10688: a2 = a2 | a1\n 10691: a1 = a0 | s1\n 10694: a1 = a1 | a2\n 10697: a1 = a1 >> 0x20\n 10700: u64 [sp + 0xc8] = s1\n 10704: a2 = a2 | s1\n 10707: a2 = a2 << 0x20\n 10710: a1 = a1 | a2\n 10713: jump @453 if a1 != 0\n      : @410 (gas: 8)\n 10717: a2 = sp + 0x300\n 10721: u64 [a2 + 120] = 0\n 10724: u64 [a2 + 112] = 0\n 10727: u64 [a2 + 104] = 0\n 10730: s1 = 0x1\n 10733: a1 = sp + 0x360\n 10737: u64 [a2 + 0x60] = s1\n 10740: ra = 376, jump @9\n      : @411 [@dyn 188] (gas: 11)\n 10746: a2 = u64 [sp + 0xf0]\n 10750: a1 = u64 [sp + 0xe8]\n 10754: a0 = u64 [sp + 0xc8]\n 10758: a0 = a0 | a1\n 10761: s1 = s1 << 0x20\n 10764: s1 = s1 + 0xffffffffffffffe0\n 10767: a1 = a2 <u s1\n 10770: a3 = u64 [sp + 0xe0]\n 10774: a1 = 0 if a3 != 0\n 10776: a1 = 0 if a0 != 0\n 10778: jump @453 if a1 == 0\n      : @412 (gas: 7)\n 10782: a0 = i32 [0x20064]\n 10787: u64 [sp + 0xd8] = a0\n 10791: a0 = a2 + 0x20\n 10794: a1 = 0x20\n 10797: u64 [sp + 0xf8] = a0\n 10801: s1 = a2\n 10803: ra = 378, jump @15\n      : @413 [@dyn 189] (gas: 7)\n 10809: i32 a0 = a0 + 0\n 10811: a1 = 0x20\n 10814: a2 = u64 [sp + 0xd8]\n 10818: ecalli 2 // 'call_data_copy'\n 10820: a0 = sp + 0x340\n 10824: a1 = s1\n 10826: ra = 380, jump @7\n      : @414 [@dyn 190] (gas: 9)\n 10832: a4 = sp + 0x300\n 10836: a0 = u64 [a4 + 0x50]\n 10839: a1 = u64 [a4 + 0x58]\n 10842: a2 = u64 [a4 + 0x48]\n 10845: a3 = u64 [a4 + 0x40]\n 10848: a1 = a1 | a2\n 10851: a0 = a0 | a3\n 10854: a0 = a0 | a1\n 10857: jump @454 if a0 == 0\n      : @415 (gas: 1)\n 10861: ra = 382, jump @0\n      : @416 [@dyn 191] (gas: 12)\n 10867: s1 = 0x30090\n 10872: a0 = u64 [0x30090]\n 10877: a1 = u64 [0x30098]\n 10882: a2 = u32 [0x300a0]\n 10887: a3 = sp + 0x300\n 10891: u64 [a3 + 56] = 0\n 10894: u64 [a3 + 0x30] = a2\n 10897: u64 [a3 + 0x28] = a1\n 10900: a1 = sp + 0x320\n 10904: u64 [a3 + 0x20] = a0\n 10907: a0 = u64 [sp + 0xf8]\n 10911: ra = 384, jump @9\n      : @417 [@dyn 192] (gas: 1)\n 10917: ra = 386, jump @0\n      : @418 [@dyn 193] (gas: 25)\n 10923: a0 = u64 [s1 + 0x28]\n 10926: a1 = u64 [s1 + 0x30]\n 10929: a2 = u64 [s1 + 0x20]\n 10932: a0 = reverse a0\n 10934: a3 = a0 << 0x20\n 10937: a1 = reverse a1\n 10939: a1 = a1 >> 0x20\n 10942: a4 = a1 | a3\n 10945: a0 = a0 >> 0x20\n 10948: a1 = reverse a2\n 10950: a3 = 0x30070\n 10955: a2 = a1 << 0x20\n 10958: a0 = a0 | a2\n 10961: a1 = a1 >> 0x20\n 10964: u64 [sp + 0x38] = a1\n 10967: u32 [0x30080] = a1\n 10972: u64 [sp + 0x30] = a0\n 10975: u64 [0x30078] = a0\n 10980: u64 [sp + 0x40] = a4\n 10983: u64 [0x30070] = a4\n 10988: u64 [sp + 0x50] = a3\n 10991: i32 a0 = a3 + 0\n 10993: u64 [sp + 0xd0] = a0\n 10997: ecalli 6 // 'code_size'\n 10999: fallthrough\n      : @419 (gas: 1)\n 11000: jump @459 if a0 == 0\n      : @420 (gas: 3)\n 11004: a0 = sp + 0x300\n 11008: a1 = 0x40\n 11011: ra = 388, jump @7\n      : @421 [@dyn 194] (gas: 15)\n 11017: a3 = sp + 0x300\n 11021: a2 = u64 [a3 + 0x18]\n 11024: s1 = u64 [a3 + 0x10]\n 11027: a1 = u64 [a3 + 0x8]\n 11030: a0 = u64 [a3]\n 11032: u64 [sp + 0x60] = a1\n 11035: u64 [sp + 0x58] = a2\n 11038: a2 = a2 | a1\n 11041: a1 = a0 | s1\n 11044: a1 = a1 | a2\n 11047: a1 = a1 >> 0x20\n 11050: a2 = a2 | s1\n 11053: a2 = a2 << 0x20\n 11056: a1 = a1 | a2\n 11059: jump @453 if a1 != 0\n      : @422 (gas: 9)\n 11063: a3 = sp + 0x200\n 11067: u64 [a3 + 240] = 0\n 11071: u64 [a3 + 232] = 0\n 11075: u64 [a3 + 224] = 0\n 11079: a2 = 0x744532ae00000000\n 11089: a1 = sp + 0x2e0\n 11093: u64 [a3 + 0xf8] = a2\n 11097: u64 [sp + 0x68] = a0\n 11100: ra = 390, jump @9\n      : @423 [@dyn 195] (gas: 12)\n 11106: a1 = u64 [sp + 0x68]\n 11109: u64 [sp + 0x98] = s1\n 11113: a3 = u64 [sp + 0x58]\n 11116: a3 = a3 | s1\n 11119: s1 = 0x100000000\n 11129: a0 = 0xfffffffc\n 11139: a0 = a1 <u a0\n 11142: a2 = u64 [sp + 0x60]\n 11145: a0 = 0 if a2 != 0\n 11147: u64 [sp + 0xd8] = a3\n 11151: a0 = 0 if a3 != 0\n 11153: jump @453 if a0 == 0\n      : @424 (gas: 8)\n 11157: i32 a0 = a1 + 0x4\n 11160: a2 = sp + 0x200\n 11164: u64 [a2 + 216] = 0\n 11168: u64 [a2 + 208] = 0\n 11172: u64 [a2 + 200] = 0\n 11176: a1 = sp + 0x2c0\n 11180: u64 [a2 + 192] = 0\n 11184: ra = 392, jump @9\n      : @425 [@dyn 196] (gas: 4)\n 11190: a0 = u64 [sp + 0xd0]\n 11194: ra = 0x18a\n 11198: ecalli 0 // 'address'\n 11199: fallthrough\n      : @426 [@dyn 197] (gas: 8)\n 11200: a4 = u64 [sp + 0x68]\n 11203: a0 = s1 + 0xffffffffffffffdc\n 11206: a0 = a4 <u a0\n 11209: a1 = u64 [sp + 0x60]\n 11212: a0 = 0 if a1 != 0\n 11214: a1 = u64 [sp + 0xd8]\n 11218: a0 = 0 if a1 != 0\n 11220: jump @453 if a0 == 0\n      : @427 (gas: 4)\n 11224: a2 = u64 [sp + 0x50]\n 11227: a0 = u64 [a2 + 0x8]\n 11230: a1 = i32 [a2 + 0x10]\n 11233: t0 = 396, jump @467\n      : @428 [@dyn 198] (gas: 8)\n 11239: i32 a0 = a4 + 0x24\n 11242: a4 = sp + 0x200\n 11246: u64 [a4 + 184] = 0\n 11250: u64 [a4 + 0xb0] = a1\n 11254: u64 [a4 + 0xa8] = a2\n 11258: a1 = sp + 0x2a0\n 11262: u64 [a4 + 0xa0] = a3\n 11266: ra = 398, jump @9\n      : @429 [@dyn 199] (gas: 10)\n 11272: a1 = u64 [sp + 0x68]\n 11275: s1 = 0x100000000\n 11285: u64 [sp + 0xd0] = s1\n 11289: a0 = 0xffffffbc\n 11299: a0 = a1 <u a0\n 11302: a2 = u64 [sp + 0x60]\n 11305: a0 = 0 if a2 != 0\n 11307: a2 = u64 [sp + 0xd8]\n 11311: a0 = 0 if a2 != 0\n 11313: jump @453 if a0 == 0\n      : @430 (gas: 8)\n 11317: i32 a0 = a1 + 0x44\n 11320: a2 = sp + 0x200\n 11324: u64 [a2 + 152] = 0\n 11328: u64 [a2 + 144] = 0\n 11332: u64 [a2 + 128] = 0x60\n 11337: a1 = sp + 0x280\n 11341: u64 [a2 + 136] = 0\n 11345: ra = 400, jump @9\n      : @431 [@dyn 200] (gas: 4)\n 11351: a0 = sp + 0x260\n 11355: s1 = u64 [sp + 0xf0]\n 11359: a1 = s1\n 11361: ra = 402, jump @7\n      : @432 [@dyn 201] (gas: 9)\n 11367: a2 = u64 [sp + 0x68]\n 11370: a0 = u64 [sp + 0xd0]\n 11374: a0 = a0 + 0xffffffffffffff9c\n 11377: a0 = a2 <u a0\n 11380: a1 = u64 [sp + 0x60]\n 11383: a0 = 0 if a1 != 0\n 11385: a3 = u64 [sp + 0xd8]\n 11389: a0 = 0 if a3 != 0\n 11391: jump @453 if a0 == 0\n      : @433 (gas: 31)\n 11395: a0 = u64 [sp + 0xf8]\n 11399: a0 = a0 <u s1\n 11402: a1 = u64 [sp + 0xe0]\n 11406: a3 = a1 + a0\n 11409: u64 [sp + 0xd0] = a3\n 11413: a1 = a3 <u a1\n 11416: a1 = a0 if a0 == 0\n 11419: a0 = u64 [sp + 0xc8]\n 11423: s1 = a0 + a1\n 11426: a0 = s1 <u a0\n 11429: a1 = u64 [sp + 0xe8]\n 11433: a0 = a0 + a1\n 11436: u64 [sp + 0xd8] = a0\n 11440: a3 = u64 [sp + 0x278]\n 11444: a1 = u64 [sp + 0x270]\n 11448: a4 = u64 [sp + 0x268]\n 11452: a5 = u64 [sp + 0x260]\n 11456: a0 = 0xffffffff\n 11466: u64 [sp + 0x70] = a0\n 11469: i32 a0 = a2 + 0x64\n 11472: u64 [sp + 0x78] = a5\n 11475: a2 = sp + 0x200\n 11479: u64 [a2 + 0x40] = a5\n 11482: u64 [sp + 0x80] = a4\n 11486: u64 [a2 + 0x48] = a4\n 11489: u64 [sp + 0x88] = a1\n 11493: u64 [a2 + 0x50] = a1\n 11496: a1 = sp + 0x240\n 11500: u64 [sp + 0x90] = a3\n 11504: u64 [a2 + 0x58] = a3\n 11507: ra = 404, jump @9\n      : @434 [@dyn 202] (gas: 23)\n 11513: a4 = s1\n 11515: ra = u64 [sp + 0xd0]\n 11519: a5 = 0\n 11521: a3 = 0\n 11523: t0 = 0\n 11525: t1 = 0\n 11527: a1 = u64 [sp + 0x68]\n 11530: a0 = a1 + 0x84\n 11534: u64 [sp + 0xf0] = a0\n 11538: a0 = a0 <u a1\n 11541: s1 = u64 [sp + 0x60]\n 11544: a1 = s1 + a0\n 11547: u64 [sp + 0xe0] = a1\n 11551: s1 = a1 <u s1\n 11554: s1 = a0 if a0 == 0\n 11557: t2 = u64 [sp + 0x98]\n 11561: s1 = s1 + t2\n 11564: u64 [sp + 0xc8] = s1\n 11568: a0 = s1 <u t2\n 11571: a1 = u64 [sp + 0x58]\n 11574: a0 = a0 + a1\n 11577: u64 [sp + 0xe8] = a0\n 11581: fallthrough\n      : @435 (gas: 18)\n 11582: a0 = u64 [sp + 0x78]\n 11585: a0 = a5 <u a0\n 11588: a2 = u64 [sp + 0x80]\n 11592: a1 = a3 ^ a2\n 11595: u64 [sp + 0xc0] = a3\n 11599: a2 = a3 <u a2\n 11602: a2 = a0 if a1 == 0\n 11605: s1 = u64 [sp + 0x88]\n 11609: a0 = t0 <u s1\n 11612: a3 = u64 [sp + 0x90]\n 11616: a1 = t1 ^ a3\n 11619: u64 [sp + 0xb8] = t1\n 11623: a3 = t1 <u a3\n 11626: a3 = a0 if a1 == 0\n 11629: a0 = t0 ^ s1\n 11632: a0 = a0 | a1\n 11635: a3 = a2 if a0 == 0\n 11638: jump @441 if a3 == 0\n      : @436 (gas: 14)\n 11642: u64 [sp + 0xa0] = t0\n 11646: u64 [sp + 0xa8] = a5\n 11650: a2 = u64 [sp + 0xf8]\n 11654: a0 = a2 | a4\n 11657: u64 [sp + 0xd0] = ra\n 11661: a1 = u64 [sp + 0xd8]\n 11665: a1 = ra | a1\n 11668: a0 = a0 | a1\n 11671: a0 = a0 >> 0x20\n 11674: u64 [sp + 0xb0] = a4\n 11678: a1 = a1 | a4\n 11681: a1 = a1 << 0x20\n 11684: a0 = a0 | a1\n 11687: jump @453 if a0 != 0\n      : @437 (gas: 4)\n 11691: a0 = sp + 0x160\n 11695: u64 [sp + 0xf8] = a2\n 11699: a1 = a2\n 11701: ra = 406, jump @7\n      : @438 [@dyn 203] (gas: 12)\n 11707: a0 = u64 [sp + 0xf0]\n 11711: s1 = u64 [sp + 0xc8]\n 11715: a2 = a0 | s1\n 11718: a1 = u64 [sp + 0xe8]\n 11722: a3 = u64 [sp + 0xe0]\n 11726: a1 = a1 | a3\n 11729: a2 = a2 | a1\n 11732: a2 = a2 >> 0x20\n 11735: a1 = a1 | s1\n 11738: a1 = a1 << 0x20\n 11741: a1 = a1 | a2\n 11744: jump @453 if a1 != 0\n      : @439 (gas: 14)\n 11748: a4 = u64 [sp + 0x170]\n 11752: a1 = u64 [sp + 0x168]\n 11756: a2 = u64 [sp + 0x160]\n 11760: a3 = u64 [sp + 0x70]\n 11763: a4 = a4 & a3\n 11766: a1 = a1 & 0xffffffffffffffff\n 11769: a2 = a2 & 0xffffffffffffffff\n 11772: u64 [sp + 344] = 0\n 11776: u64 [sp + 0x140] = a2\n 11780: u64 [sp + 0x148] = a1\n 11784: a1 = sp + 0x140\n 11788: u64 [sp + 0x150] = a4\n 11792: u64 [sp + 0xf0] = a0\n 11796: ra = 408, jump @9\n      : @440 [@dyn 204] (gas: 45)\n 11802: a0 = u64 [sp + 0xf0]\n 11806: t0 = a0 + 0x20\n 11809: a2 = t0 <u a0\n 11812: a0 = u64 [sp + 0xe0]\n 11816: t2 = a0 + a2\n 11819: a3 = t2 <u a0\n 11822: a3 = a2 if a2 == 0\n 11825: ra = s1 + a3\n 11828: a2 = ra <u s1\n 11831: a0 = u64 [sp + 0xe8]\n 11835: a0 = a0 + a2\n 11838: u64 [sp + 0xe8] = a0\n 11842: a0 = u64 [sp + 0xf8]\n 11846: a2 = a0 + 0x20\n 11849: a4 = a2 <u a0\n 11852: a0 = u64 [sp + 0xd0]\n 11856: a1 = a0 + a4\n 11859: s1 = a1 <u a0\n 11862: s1 = a4 if a4 == 0\n 11865: a0 = u64 [sp + 0xb0]\n 11869: a4 = a0 + s1\n 11872: s1 = a4 <u a0\n 11875: a0 = u64 [sp + 0xd8]\n 11879: a0 = a0 + s1\n 11882: u64 [sp + 0xd8] = a0\n 11886: a5 = u64 [sp + 0xa8]\n 11890: a5 = a5 + 0x1\n 11893: s1 = a5 <u 0x1\n 11896: a3 = u64 [sp + 0xc0]\n 11900: a3 = a3 + s1\n 11903: s1 = a5 | a3\n 11906: s1 = s1 <u 0x1\n 11909: a0 = u64 [sp + 0xa0]\n 11913: s1 = s1 + a0\n 11916: a0 = s1 <u a0\n 11919: t1 = u64 [sp + 0xb8]\n 11923: t1 = t1 + a0\n 11926: u64 [sp + 0xf0] = t0\n 11930: u64 [sp + 0xe0] = t2\n 11934: u64 [sp + 0xc8] = ra\n 11938: u64 [sp + 0xf8] = a2\n 11942: ra = a1\n 11944: t0 = s1\n 11946: t2 = u64 [sp + 0x98]\n 11950: jump @435\n      : @441 (gas: 26)\n 11953: a0 = u64 [sp + 0x68]\n 11956: t0 = u64 [sp + 0xf0]\n 11960: t1 = t0 <u a0\n 11963: s1 = u64 [sp + 0x60]\n 11966: a1 = u64 [sp + 0xe0]\n 11970: a3 = a1 ^ s1\n 11973: a2 = a1 <u s1\n 11976: a2 = t1 if a3 == 0\n 11979: a3 = u64 [sp + 0xc8]\n 11983: a5 = a3 - t2\n 11986: t2 = a3 <u t2\n 11989: a4 = u64 [sp + 0xe8]\n 11993: a3 = u64 [sp + 0x58]\n 11996: a4 = a4 - a3\n 11999: a4 = a4 - t2\n 12002: a3 = a5 <u a2\n 12005: a4 = a4 - a3\n 12008: u64 [sp + 0xf8] = a4\n 12012: a5 = a5 - a2\n 12015: u64 [sp + 0xe8] = a5\n 12019: a1 = a1 - s1\n 12022: a1 = a1 - t1\n 12025: u64 [sp + 0xe0] = a1\n 12029: s1 = t0 - a0\n 12032: ecalli 11 // 'ref_time_left'\n 12034: fallthrough\n      : @442 (gas: 25)\n 12035: u64 [sp + 0xf0] = a0\n 12039: a1 = u64 [sp + 0x50]\n 12042: a0 = u64 [sp + 0x30]\n 12045: u64 [a1 + 0x8] = a0\n 12048: a0 = u64 [sp + 0x40]\n 12051: u64 [a1] = a0\n 12053: a0 = u64 [sp + 0x38]\n 12056: u32 [a1 + 0x10] = a0\n 12059: a4 = sp + 0x300\n 12063: u64 [a4 + 248] = 0\n 12067: a5 = 0\n 12069: u64 [a4 + 240] = 0\n 12073: u64 [a4 + 232] = 0\n 12077: a2 = u64 [sp + 0xe8]\n 12081: a0 = s1 | a2\n 12084: a1 = u64 [sp + 0xf8]\n 12088: a3 = u64 [sp + 0xe0]\n 12092: a1 = a1 | a3\n 12095: a0 = a0 | a1\n 12098: a0 = a0 >> 0x20\n 12101: a1 = a1 | a2\n 12104: a1 = a1 << 0x20\n 12107: a0 = a0 | a1\n 12110: u64 [a4 + 224] = 0\n 12114: jump @453 if a0 != 0\n      : @443 (gas: 7)\n 12118: i32 a0 = s1 + 0\n 12120: u64 [sp + 0xe8] = a0\n 12124: a1 = s1\n 12126: u64 [sp + 0xd8] = s1\n 12130: s1 = u64 [sp + 0x68]\n 12133: a0 = s1\n 12135: ra = 410, jump @15\n      : @444 [@dyn 205] (gas: 4)\n 12141: u64 [sp + 0xf8] = a0\n 12145: a0 = s1\n 12147: a1 = 0\n 12149: ra = 412, jump @15\n      : @445 [@dyn 206] (gas: 39)\n 12155: a4 = sp + 0x400\n 12159: u32 [a4 + 0] = 0\n 12161: a1 = u64 [sp + 0xe8]\n 12165: a1 = a1 >u 0\n 12167: a3 = u64 [sp + 0xf0]\n 12171: a2 = a3 >u 0x8fc\n 12175: a1 = a1 | a2\n 12178: a2 = -a1\n 12180: u64 [a4 + 0x38] = a2\n 12183: u64 [a4 + 0x30] = a2\n 12186: u64 [a4 + 0x28] = a2\n 12189: u64 [a4 + 0x20] = a2\n 12192: a2 = u64 [sp + 0x50]\n 12195: a2 = a2 << 0x20\n 12198: a2 = a2 >> 0x20\n 12201: a1 = a1 << 0x23\n 12204: t0 = a1 | a2\n 12207: a1 = sp + 0x3e0\n 12211: a1 = a1 << 0x20\n 12214: a1 = a1 >> 0x20\n 12217: a2 = sp + 0x420\n 12221: a2 = a2 << 0x20\n 12224: a3 = a2 | a1\n 12227: a1 = u64 [sp + 0xf8]\n 12231: a1 = a1 << 0x20\n 12234: a1 = a1 >> 0x20\n 12237: a4 = u64 [sp + 0xd8]\n 12241: a4 = a4 << 0x20\n 12244: a4 = a4 | a1\n 12247: a0 = a0 << 0x20\n 12250: a0 = a0 >> 0x20\n 12253: a1 = sp + 0x400\n 12257: a1 = a1 << 0x20\n 12260: a5 = a1 | a0\n 12263: a1 = 0xffffffffffffffff\n 12266: a2 = 0xffffffffffffffff\n 12269: a0 = t0\n 12271: ecalli 1 // 'call'\n 12273: fallthrough\n      : @446 (gas: 1)\n 12274: jump @452 if a0 != 0\n      : @447 (gas: 16)\n 12278: a3 = sp + 0x200\n 12282: u64 [a3 + 24] = 0\n 12285: u64 [a3 + 16] = 0\n 12288: u64 [a3 + 8] = 0\n 12291: u64 [a3 + 0] = 0\n 12293: a0 = u64 [sp + 0x68]\n 12296: u64 [a3 + 0x20] = a0\n 12299: a0 = u64 [sp + 0x60]\n 12302: u64 [a3 + 0x28] = a0\n 12305: a0 = u64 [sp + 0x98]\n 12309: u64 [a3 + 0x30] = a0\n 12312: a0 = sp + 0x220\n 12316: a1 = sp + 0x200\n 12320: a2 = u64 [sp + 0x58]\n 12323: u64 [a3 + 0x38] = a2\n 12326: ra = 414, jump @398\n      : @448 [@dyn 207] (gas: 3)\n 12332: a0 = sp + 0x1e0\n 12336: a1 = 0x40\n 12339: ra = 416, jump @7\n      : @449 [@dyn 208] (gas: 12)\n 12345: a0 = u64 [sp + 0x1f8]\n 12349: a1 = u64 [sp + 0x1f0]\n 12353: a2 = u64 [sp + 0x1e8]\n 12357: s1 = u64 [sp + 0x1e0]\n 12361: a0 = a0 | a2\n 12364: a2 = s1 | a1\n 12367: a2 = a2 | a0\n 12370: a2 = a2 >> 0x20\n 12373: a0 = a0 | a1\n 12376: a0 = a0 << 0x20\n 12379: a0 = a0 | a2\n 12382: jump @453 if a0 != 0\n      : @450 (gas: 7)\n 12386: u64 [sp + 472] = 0\n 12390: u64 [sp + 464] = 0\n 12394: u64 [sp + 456] = 0\n 12398: a1 = sp + 0x1c0\n 12402: u64 [sp + 448] = 0\n 12406: a0 = s1\n 12408: ra = 418, jump @9\n      : @451 [@dyn 209] (gas: 24)\n 12414: a0 = u64 [sp + 0x18]\n 12417: a0 = a0 & 0xffffffffffffffff\n 12420: a1 = u64 [sp + 0x20]\n 12423: a1 = a1 & 0xffffffffffffffff\n 12426: a2 = u64 [sp + 0x28]\n 12429: a3 = u64 [sp + 0x70]\n 12432: a2 = a2 & a3\n 12435: u64 [sp + 408] = 0\n 12439: u64 [sp + 0x190] = a2\n 12443: u64 [sp + 0x188] = a1\n 12447: a1 = u64 [0x20040]\n 12452: a2 = u64 [0x20048]\n 12457: a3 = u64 [0x20050]\n 12462: u64 [sp + 0x180] = a0\n 12466: u64 [sp + 0x1b8] = a1\n 12470: u64 [sp + 0x1b0] = a2\n 12474: u64 [sp + 0x1a8] = a3\n 12478: a0 = u64 [0x20058]\n 12483: a1 = 0x20\n 12486: a2 = sp + 0x1a0\n 12490: a3 = sp + 0x180\n 12494: u64 [sp + 0x1a0] = a0\n 12498: a0 = s1\n 12500: ra = 420, jump @13\n      : @452 [@dyn 210] (gas: 13)\n 12506: a0 = u64 [sp + 0x48]\n 12509: a1 = 0\n 12511: u64 [a0 + 24] = 0\n 12514: u64 [a0 + 16] = 0\n 12517: u64 [a0 + 8] = 0\n 12520: u64 [a0 + 0] = 0\n 12522: sp = s0 + 0xfffffffffffffba0\n 12526: a0 = sp + 0x400\n 12530: ra = u64 [a0 + 0x58]\n 12533: s0 = u64 [a0 + 0x50]\n 12536: s1 = u64 [a0 + 0x48]\n 12539: sp = sp + 0x460\n 12543: ret\n      : @453 (gas: 1)\n 12545: trap\n      : @454 (gas: 8)\n 12546: u64 [sp + 304] = 0\n 12550: u64 [sp + 296] = 0\n 12554: u64 [sp + 288] = 0\n 12558: a0 = 0x4e487b7100000000\n 12568: a1 = sp + 0x120\n 12572: u64 [sp + 0x138] = a0\n 12576: a0 = 0\n 12578: ra = 422, jump @9\n      : @455 [@dyn 211] (gas: 7)\n 12584: u64 [sp + 280] = 0\n 12588: u64 [sp + 272] = 0\n 12592: u64 [sp + 256] = 0x32\n 12597: a0 = 0x4\n 12600: a1 = sp + 0x100\n 12604: u64 [sp + 264] = 0\n 12608: ra = 424, jump @9\n      : @456 [@dyn 212] (gas: 2)\n 12614: a1 = i32 [0x20068]\n 12619: jump @458 if a1 >u 63\n      : @457 (gas: 2)\n 12623: u32 [0x20068] = 0x40\n 12629: fallthrough\n      : @458 (gas: 6)\n 12630: a1 = 0x20070\n 12635: i32 a1 = a1 + 0\n 12637: a0 = 0x1\n 12640: a2 = 0x24\n 12643: ecalli 14 // 'seal_return'\n 12645: fallthrough\n      : @459 (gas: 8)\n 12646: a1 = 0x20070\n 12651: i32 a1 = a1 + 0\n 12653: a0 = 0x1\n 12656: a2 = 0\n 12658: ecalli 14 // 'seal_return'\n 12660: a0 = 0\n 12662: ra = 0x1aa\n 12666: jump @21\n      : @460 [export #0: 'call'] (gas: 2)\n 12669: a0 = 0\n 12671: ra = 426, jump @21\n      : @461 [@dyn 213] [export #1: 'deploy'] (gas: 2)\n 12677: a0 = 0x1\n 12680: ra = 428, jump @21\n      : @462 [@dyn 214] (gas: 9)\n 12686: a1 = a1 <u 0x20\n 12689: a1 = a1 ^ 0x1\n 12692: a1 = a0 if a3 != 0\n 12695: a0 = a3 >u 0\n 12697: a2 = a3 >u 0\n 12699: a2 = a0 if a3 == 0\n 12702: a0 = a3 | a3\n 12705: a2 = a1 if a0 == 0\n 12708: jump [t0]\n      : @463 (gas: 12)\n 12710: a1 = u64 [s1 + 0xb0]\n 12714: a2 = u64 [s1 + 0xa0]\n 12718: a1 = a1 | a2\n 12721: a3 = u64 [s1 + 0xa8]\n 12725: a2 = u64 [s1 + 0xb8]\n 12729: a2 = a2 | a3\n 12732: a2 = a2 | a1\n 12735: a2 = a2 >> 0x20\n 12738: a1 = a1 | a3\n 12741: a1 = a1 << 0x20\n 12744: a1 = a1 | a2\n 12747: jump [t0]\n      : @464 (gas: 16)\n 12749: a2 = u64 [s1 + 0xb8]\n 12753: a0 = u64 [a2 + 0x8]\n 12756: a1 = i32 [a2 + 0x10]\n 12759: a2 = u64 [a2]\n 12761: a0 = reverse a0\n 12763: a3 = a0 << 0x20\n 12766: a1 = reverse a1\n 12768: a1 = a1 >> 0x20\n 12771: a3 = a3 | a1\n 12774: a0 = a0 >> 0x20\n 12777: a1 = reverse a2\n 12779: a2 = a1 << 0x20\n 12782: a2 = a2 | a0\n 12785: a1 = a1 >> 0x20\n 12788: i32 a0 = a4 + 0x4\n 12791: jump [t0]\n      : @465 (gas: 13)\n 12793: a0 = u64 [s1 + 0xb8]\n 12797: a1 = u64 [s1 + 0xa0]\n 12801: a0 = a0 | a1\n 12804: a1 = u64 [s1 + 0xa8]\n 12808: a3 = a1\n 12810: a2 = u64 [s1 + 0xb0]\n 12814: a1 = a1 | a2\n 12817: a1 = a1 | a0\n 12820: a1 = a1 >> 0x20\n 12823: a0 = a0 | a2\n 12826: a0 = a0 << 0x20\n 12829: a0 = a0 | a1\n 12832: jump [t0]\n      : @466 (gas: 14)\n 12834: a0 = u64 [a2 + 0x8]\n 12837: a1 = u64 [a2]\n 12839: a2 = i32 [a2 + 0x10]\n 12842: a0 = reverse a0\n 12844: a3 = a0 >> 0x20\n 12847: a1 = reverse a1\n 12849: a4 = a1 << 0x20\n 12852: a3 = a3 | a4\n 12855: a0 = a0 << 0x20\n 12858: a2 = reverse a2\n 12860: a2 = a2 >> 0x20\n 12863: a0 = a0 | a2\n 12866: a1 = a1 >> 0x20\n 12869: jump [t0]\n      : @467 (gas: 12)\n 12871: a2 = u64 [a2]\n 12873: a0 = reverse a0\n 12875: a3 = a0 << 0x20\n 12878: a1 = reverse a1\n 12880: a1 = a1 >> 0x20\n 12883: a3 = a3 | a1\n 12886: a0 = a0 >> 0x20\n 12889: a1 = reverse a2\n 12891: a2 = a1 << 0x20\n 12894: a2 = a2 | a0\n 12897: a1 = a1 >> 0x20\n 12900: jump [t0]\n      : @468 (gas: 11)\n 12902: a0 = u64 [a3 + 0x18]\n 12905: a1 = u64 [a3 + 0x10]\n 12908: a2 = u64 [a3 + 0x8]\n 12911: a3 = u64 [a3]\n 12913: a0 = reverse a0\n 12915: a1 = reverse a1\n 12917: a2 = reverse a2\n 12919: a3 = reverse a3\n 12921: a4 = s1 + 0x7ff\n 12925: a4 = a4 + 0x39\n 12928: jump [t0]\n      : @469 (gas: 10)\n 12930: a0 = u64 [sp + 0x10]\n 12933: a1 = u64 [sp + 0x18]\n 12936: a2 = 0x100000000\n 12946: a2 = a2 ^ a0\n 12949: a2 = a2 | a1\n 12952: a3 = a0 >> 0x20\n 12955: a3 = a3 <u 0x1\n 12958: a3 = 0 if a1 != 0\n 12960: a3 = 0 if a2 == 0\n 12962: jump [t0]\n      : @470 (gas: 10)\n 12964: a2 = u64 [s1 + 0xb8]\n 12968: a0 = u64 [s1 + 0xa8]\n 12972: a1 = u64 [s1 + 0xa0]\n 12976: a0 = a0 | a1\n 12979: a1 = 0xffffffe0\n 12989: a1 = a2 <u a1\n 12992: a3 = u64 [s1 + 0xb0]\n 12996: a1 = 0 if a3 != 0\n 12998: a1 = 0 if a0 != 0\n 13000: jump [t0]\n      : @471 (gas: 12)\n 13002: a2 = u64 [sp]\n 13004: a3 = u64 [sp + 0x8]\n 13007: u64 [s1] = a2\n 13009: u64 [s1 + 0x8] = a3\n 13012: u64 [s1 + 0x10] = a0\n 13015: u64 [s1 + 0x18] = a1\n 13018: sp = s0 + 0xffffffffffffffc0\n 13021: ra = u64 [sp + 0x38]\n 13024: s0 = u64 [sp + 0x30]\n 13027: s1 = u64 [sp + 0x28]\n 13030: sp = sp + 0x40\n 13033: jump [t0]\n      : @472 (gas: 9)\n 13035: a0 = u64 [a3 + 0x18]\n 13038: a1 = u64 [a3 + 0x10]\n 13041: a2 = u64 [a3 + 0x8]\n 13044: a3 = u64 [a3]\n 13046: a0 = reverse a0\n 13048: a4 = reverse a1\n 13050: a2 = reverse a2\n 13052: a3 = reverse a3\n 13054: jump [t0]\n      : @473 (gas: 6)\n 13056: i32 a0 = a2 + 0\n 13058: u64 [s1 + 0xb0] = a0\n 13062: a0 = u64 [s1 + 0xb8]\n 13066: a1 = a2\n 13068: u64 [s1 + 0xa8] = a2\n 13072: jump [t0]\n      : @474 (gas: 8)\n 13074: a0 = u64 [a4 + 0x78]\n 13077: a1 = u64 [a4 + 0x80]\n 13081: a2 = u64 [a4 + 0x70]\n 13084: a3 = u64 [a4 + 0x68]\n 13087: a1 = a1 | a2\n 13090: a0 = a0 | a3\n 13093: a0 = a0 | a1\n 13096: jump [t0]\n      : @475 (gas: 4)\n 13098: a3 = s1 + 0x7ff\n 13102: a3 = a3 + 0x39\n 13105: a4 = a3 + 0x300\n 13109: jump [t0]\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "claimRewards(address)": "ef5cfb8c",
              "comptroller()": "5fe3b567",
              "getPendingRewards(address)": "f6ed2017",
              "getStakedAmount(address)": "4da6a556",
              "habitTracker()": "836ee1c0",
              "mToken()": "c3b6f939",
              "stake(address,uint256)": "adc9772e",
              "unstake(address,uint256)": "c2a672e0",
              "userStakes(address)": "8da7ad23"
            }
          },
          "irOptimized": "/// @use-src 1:\"contracts/adapters/MoonwellAdapter.sol\", 2:\"contracts/interfaces/IStakingAdapter.sol\"\nobject \"MoonwellAdapter_1409\" {\n    code {\n        {\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            let _1 := memoryguard(0xe0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MoonwellAdapter_1409\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 96)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            let value2 := abi_decode_address_fromMemory(add(_1, 64))\n            /// @src 1:2611:2627  \"mToken = _mToken\"\n            mstore(128, value0)\n            /// @src 1:2637:2663  \"comptroller = _comptroller\"\n            mstore(160, value1)\n            /// @src 1:2673:2701  \"habitTracker = _habitTracker\"\n            mstore(192, value2)\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"MoonwellAdapter_1409_deployed\")\n            codecopy(_2, dataoffset(\"MoonwellAdapter_1409_deployed\"), _3)\n            setimmutable(_2, \"1130\", mload(/** @src 1:2611:2627  \"mToken = _mToken\" */ 128))\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            setimmutable(_2, \"1132\", mload(/** @src 1:2637:2663  \"comptroller = _comptroller\" */ 160))\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            setimmutable(_2, \"1134\", mload(/** @src 1:2673:2701  \"habitTracker = _habitTracker\" */ 192))\n            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n            return(_2, _3)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 1:\"contracts/adapters/MoonwellAdapter.sol\"\n    object \"MoonwellAdapter_1409_deployed\" {\n        code {\n            {\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(0))\n                    case 0x4da6a556 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        mstore(_1, sload(keccak256(0, 64)))\n                        return(_1, 32)\n                    }\n                    case 0x5fe3b567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos := mload(64)\n                        mstore(memPos, and(/** @src 1:1668:1704  \"address public immutable comptroller\" */ loadimmutable(\"1132\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos, 32)\n                    }\n                    case 0x836ee1c0 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, and(/** @src 1:1736:1773  \"address public immutable habitTracker\" */ loadimmutable(\"1134\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_1, 32)\n                    }\n                    case 0x8da7ad23 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _3 := sload(keccak256(0, 64))\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _3)\n                        return(memPos_2, 32)\n                    }\n                    case 0xadc9772e {\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 1:2269:2295  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 1:2269:2279  \"msg.sender\" */ caller(), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ and(/** @src 1:2283:2295  \"habitTracker\" */ loadimmutable(\"1134\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 1:2304:2322  \"OnlyHabitTracker()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, /** @src 1:2304:2322  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 1:3169:3216  \"if (msg.value != amount) revert InvalidAmount()\"\n                        if /** @src 1:3173:3192  \"msg.value != amount\" */ iszero(eq(/** @src 1:3173:3182  \"msg.value\" */ callvalue(), /** @src 1:3173:3192  \"msg.value != amount\" */ value))\n                        /// @src 1:3169:3216  \"if (msg.value != amount) revert InvalidAmount()\"\n                        {\n                            /// @src 1:3201:3216  \"InvalidAmount()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, /** @src 1:3201:3216  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 1:3226:3265  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 1:3230:3241  \"amount == 0\" */ iszero(value)\n                        /// @src 1:3226:3265  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 1:3250:3265  \"InvalidAmount()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, /** @src 1:3201:3216  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 1:3250:3265  \"InvalidAmount()\"\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        let _4 := and(/** @src 1:3350:3356  \"mToken\" */ loadimmutable(\"1130\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        if iszero(extcodesize(_4))\n                        {\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        let _5 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        mstore(_5, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x1249c58b))\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        let _6 := call(gas(), _4, value, _5, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 4, /** @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\" */ _5, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0)\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        if iszero(_6)\n                        {\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 1:3336:3379  \"IMTokenNative(mToken).mint{value: amount}()\"\n                        if _6\n                        {\n                            finalize_allocation(_5, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0)\n                            _2 := 0\n                        }\n                        let _7 := and(value0, sub(shl(160, 1), 1))\n                        mstore(_2, _7)\n                        mstore(32, _2)\n                        let dataSlot := keccak256(_2, 64)\n                        let _8 := sload(/** @src 1:3445:3471  \"userStakes[user] += amount\" */ dataSlot)\n                        /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                        let sum := add(_8, value)\n                        if gt(_8, sum)\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(_2, 36)\n                        }\n                        sstore(dataSlot, sum)\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let _9 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        mstore(_9, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\" */ add(_9, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 4), /** @src 1:3548:3552  \"this\" */ address())\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let _10 := staticcall(gas(), _4, _9, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 36, /** @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\" */ _9, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        if iszero(_10)\n                        {\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, _2, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let expr := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2\n                        /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        if _10\n                        {\n                            let _11 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32\n                            /// @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                            if gt(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32, /** @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\" */ returndatasize()) { _11 := returndatasize() }\n                            finalize_allocation(_9, _11)\n                            let value0_1 := /** @src -1:-1:-1 */ 0\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            if slt(sub(/** @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\" */ add(_9, _11), _9), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            value0_1 := mload(/** @src 1:3508:3554  \"IMTokenNative(mToken).balanceOf(address(this))\" */ _9)\n                            expr := value0_1\n                        }\n                        /// @src 1:3487:3555  \"Staked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\"\n                        let _12 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        mstore(_12, value)\n                        mstore(add(_12, 32), expr)\n                        /// @src 1:3487:3555  \"Staked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\"\n                        log2(_12, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 64, /** @src 1:3487:3555  \"Staked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\" */ 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90, _7)\n                        /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                        return(_2, _2)\n                    }\n                    case 0xc2a672e0 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(_2, _2) }\n                        let value0_2 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        /// @src 1:2283:2295  \"habitTracker\"\n                        let _13 := loadimmutable(\"1134\")\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 1:2269:2295  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 1:2269:2279  \"msg.sender\" */ caller(), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ and(/** @src 1:2283:2295  \"habitTracker\" */ _13, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 1:2304:2322  \"OnlyHabitTracker()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:2304:2322  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, 4)\n                        }\n                        /// @src 1:4031:4070  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 1:4035:4046  \"amount == 0\" */ iszero(value_1)\n                        /// @src 1:4031:4070  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 1:4055:4070  \"InvalidAmount()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:3201:3216  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 1:4055:4070  \"InvalidAmount()\"\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, 4)\n                        }\n                        let _14 := and(/** @src 1:4173:4179  \"mToken\" */ loadimmutable(\"1130\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        let _15 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        mstore(_15, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x852a12e3))\n                        mstore(/** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ add(_15, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 4), value_1)\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        let _16 := call(gas(), _14, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ _15, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 36, /** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ _15, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        if iszero(_16)\n                        {\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            let pos_2 := mload(64)\n                            returndatacopy(pos_2, _2, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        let expr_1 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2\n                        /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                        if _16\n                        {\n                            let _17 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32\n                            /// @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\"\n                            if gt(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32, /** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ returndatasize()) { _17 := returndatasize() }\n                            finalize_allocation(_15, _17)\n                            let value0_3 := /** @src -1:-1:-1 */ 0\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            if slt(sub(/** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ add(_15, _17), _15), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            value0_3 := mload(/** @src 1:4159:4205  \"IMTokenNative(mToken).redeemUnderlying(amount)\" */ _15)\n                            expr_1 := value0_3\n                        }\n                        /// @src 1:4215:4250  \"if (err != 0) revert RedeemFailed()\"\n                        if /** @src 1:4219:4227  \"err != 0\" */ iszero(iszero(expr_1))\n                        /// @src 1:4215:4250  \"if (err != 0) revert RedeemFailed()\"\n                        {\n                            /// @src 1:4236:4250  \"RedeemFailed()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:4236:4250  \"RedeemFailed()\" */ shl(225, 0x5d8902e1))\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, 4)\n                        }\n                        let _18 := and(value0_2, sub(shl(160, 1), 1))\n                        mstore(_2, _18)\n                        mstore(32, _2)\n                        let dataSlot_1 := keccak256(_2, 64)\n                        let _19 := sload(/** @src 1:4308:4334  \"userStakes[user] -= amount\" */ dataSlot_1)\n                        /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                        let diff := sub(_19, value_1)\n                        if gt(diff, _19)\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(_2, 36)\n                        }\n                        sstore(dataSlot_1, diff)\n                        /// @src 1:4453:4489  \"habitTracker.call{value: amount}(\\\"\\\")\"\n                        let expr_component := call(gas(), _13, value_1, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, _2, _2, _2)\n                        /// @src 1:4453:4489  \"habitTracker.call{value: amount}(\\\"\\\")\"\n                        let data := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2\n                        switch returndatasize()\n                        case 0 { data := 96 }\n                        default {\n                            let _20 := returndatasize()\n                            if gt(_20, 0xffffffffffffffff)\n                            {\n                                mstore(_2, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(_2, 36)\n                            }\n                            let memPtr := mload(64)\n                            finalize_allocation(memPtr, add(and(add(_20, 31), not(31)), 32))\n                            mstore(memPtr, _20)\n                            data := memPtr\n                            returndatacopy(add(memPtr, 32), _2, returndatasize())\n                        }\n                        /// @src 1:4499:4534  \"if (!success) revert RedeemFailed()\"\n                        if /** @src 1:4503:4511  \"!success\" */ iszero(expr_component)\n                        /// @src 1:4499:4534  \"if (!success) revert RedeemFailed()\"\n                        {\n                            /// @src 1:4520:4534  \"RedeemFailed()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:4236:4250  \"RedeemFailed()\" */ shl(225, 0x5d8902e1))\n                            /// @src 1:4520:4534  \"RedeemFailed()\"\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, 4)\n                        }\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let _21 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        mstore(_21, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\" */ add(_21, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 4), /** @src 1:4613:4617  \"this\" */ address())\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let _22 := staticcall(gas(), _14, _21, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 36, /** @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\" */ _21, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        if iszero(_22)\n                        {\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, _2, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        let expr_2 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2\n                        /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                        if _22\n                        {\n                            let _23 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32\n                            /// @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\"\n                            if gt(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32, /** @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\" */ returndatasize()) { _23 := returndatasize() }\n                            finalize_allocation(_21, _23)\n                            let value0_4 := /** @src -1:-1:-1 */ 0\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            if slt(sub(/** @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\" */ add(_21, _23), _21), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                            value0_4 := mload(/** @src 1:4573:4619  \"IMTokenNative(mToken).balanceOf(address(this))\" */ _21)\n                            expr_2 := value0_4\n                        }\n                        /// @src 1:4550:4620  \"Unstaked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\"\n                        let _24 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(64)\n                        mstore(_24, value_1)\n                        mstore(add(_24, 32), expr_2)\n                        /// @src 1:4550:4620  \"Unstaked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\"\n                        log2(_24, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 64, /** @src 1:4550:4620  \"Unstaked(user, amount, IMTokenNative(mToken).balanceOf(address(this)))\" */ 0x7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e, _18)\n                        /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                        return(_2, _2)\n                    }\n                    case 0xc3b6f939 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, and(/** @src 1:1607:1638  \"address public immutable mToken\" */ loadimmutable(\"1130\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_3, 32)\n                    }\n                    case 0xef5cfb8c {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value0_5 := abi_decode_address()\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 1:2269:2295  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 1:2269:2279  \"msg.sender\" */ caller(), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ and(/** @src 1:2283:2295  \"habitTracker\" */ loadimmutable(\"1134\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:2265:2322  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 1:2304:2322  \"OnlyHabitTracker()\"\n                            mstore(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, /** @src 1:2304:2322  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ _2, 4)\n                        }\n                        /// @src 1:2332:2333  \"_\"\n                        let _25 := /** @src 1:5071:5692  \"function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {...\" */ fun_claimRewards_inner(/** @src 1:2332:2333  \"_\" */ value0_5)\n                        /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, _25)\n                        return(memPos_4, 32)\n                    }\n                    case 0xf6ed2017 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        pop(abi_decode_address())\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _2)\n                        return(memPos_5, 32)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @src 1:5071:5692  \"function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {...\"\n            function fun_claimRewards_inner(var_user) -> var_claimed\n            {\n                /// @src 1:5196:5212  \"new address[](1)\"\n                let memPtr := /** @src -1:-1:-1 */ 0\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                let size := /** @src -1:-1:-1 */ 0\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                let _1 := /** @src -1:-1:-1 */ 0\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                _1 := /** @src -1:-1:-1 */ 0\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                size := 64\n                let memPtr_1 := mload(size)\n                finalize_allocation(memPtr_1, size)\n                mstore(memPtr_1, /** @src 1:5210:5211  \"1\" */ 0x01)\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                let dataStart := add(memPtr_1, 32)\n                calldatacopy(dataStart, calldatasize(), add(size, not(31)))\n                if iszero(mload(memPtr_1))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 0x24)\n                }\n                mstore(dataStart, and(/** @src 1:5235:5241  \"mToken\" */ loadimmutable(\"1130\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                let _2 := and(/** @src 1:5327:5338  \"comptroller\" */ loadimmutable(\"1132\"), /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\"\n                if iszero(extcodesize(_2))\n                {\n                    /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\"\n                let _3 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(size)\n                /// @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\"\n                mstore(_3, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ shl(225, 0x3a229957))\n                let tail := add(/** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ _3, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 100)\n                mstore(/** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ add(_3, 4), /** @src -1:-1:-1 */ 0)\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                mstore(add(/** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ _3, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 36), /** @src 1:5363:5367  \"this\" */ address())\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                mstore(add(/** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ _3, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 68), 96)\n                let pos := tail\n                let length := mload(memPtr_1)\n                mstore(tail, length)\n                pos := add(/** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ _3, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 132)\n                let srcPtr := dataStart\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                for { }\n                lt(i, length)\n                {\n                    i := add(i, /** @src 1:5210:5211  \"1\" */ 0x01)\n                }\n                /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, 32)\n                    srcPtr := add(srcPtr, 32)\n                }\n                /// @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\"\n                let trySuccessCondition := call(gas(), _2, /** @src -1:-1:-1 */ 0, /** @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\" */ _3, sub(pos, _3), _3, /** @src -1:-1:-1 */ 0)\n                /// @src 1:5314:5378  \"IComptroller(comptroller).claimReward(0, address(this), markets)\"\n                if trySuccessCondition\n                {\n                    finalize_allocation(_3, /** @src -1:-1:-1 */ 0)\n                    /// @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\"\n                    memPtr := /** @src -1:-1:-1 */ 0\n                }\n                /// @src 1:5310:5686  \"try IComptroller(comptroller).claimReward(0, address(this), markets) {...\"\n                switch iszero(trySuccessCondition)\n                case 0 {\n                    /// @src 1:5517:5540  \"RewardsClaimed(user, 0)\"\n                    let _4 := /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ mload(size)\n                    mstore(_4, /** @src -1:-1:-1 */ memPtr)\n                    /// @src 1:5517:5540  \"RewardsClaimed(user, 0)\"\n                    log2(_4, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ 32, /** @src 1:5517:5540  \"RewardsClaimed(user, 0)\" */ 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ and(/** @src 1:5517:5540  \"RewardsClaimed(user, 0)\" */ var_user, /** @src 1:1557:6737  \"contract MoonwellAdapter is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                    /// @src 1:5554:5562  \"return 0\"\n                    var_claimed := /** @src -1:-1:-1 */ memPtr\n                    /// @src 1:5554:5562  \"return 0\"\n                    leave\n                }\n                default /// @src 1:5310:5686  \"try IComptroller(comptroller).claimReward(0, address(this), markets) {...\"\n                {\n                    /// @src 1:5629:5637  \"return 0\"\n                    var_claimed := /** @src -1:-1:-1 */ memPtr\n                    /// @src 1:5629:5637  \"return 0\"\n                    leave\n                }\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122000bfd08798eb6c9e0b99b86cacb614433160cf7fd81756cb14d70cef116dfebe64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "fe66882e00cea02bb65103972b92fc058ae909c93129f5a4f5d48b0a82d1dfc7",
          "factoryDependencies": {}
        }
      },
      "contracts/interfaces/IStakingAdapter.sol": {
        "IStakingAdapter": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "claimRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "claimed",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getPendingRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "pending",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getStakedAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "staked",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows HabitTracker to integrate with any staking protocol Terminology: - Yield Stake: User rewards staked in external protocol (principal) - Yield Rewards: Additional rewards generated from external protocol\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Returns 0 if no yield rewards available or not supportedClaimed rewards should be sent back to HabitTracker\",\"params\":{\"user\":\"Address of the user whose yield rewards to claim\"},\"returns\":{\"claimed\":\"Amount of yield rewards claimed\"}},\"getPendingRewards(address)\":{\"details\":\"Returns 0 if not supported by protocol\",\"params\":{\"who\":\"Address to check\"},\"returns\":{\"pending\":\"Pending yield rewards\"}},\"getStakedAmount(address)\":{\"params\":{\"who\":\"Address to check\"},\"returns\":{\"staked\":\"Total yield stake by address (excludes yield rewards)\"}},\"stake(address,uint256)\":{\"details\":\"For native token staking, msg.value should equal amount\",\"params\":{\"amount\":\"Amount to stake (user's earned rewards)\",\"user\":\"Address of the user whose rewards are being staked\"}},\"unstake(address,uint256)\":{\"details\":\"Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker\",\"params\":{\"amount\":\"Amount to unstake\",\"user\":\"Address of the user whose rewards are being unstaked\"}}},\"title\":\"IStakingAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"Claim accumulated yield rewards from external protocol for a specific user\"},\"getPendingRewards(address)\":{\"notice\":\"Get pending unclaimed yield rewards for an address\"},\"getStakedAmount(address)\":{\"notice\":\"Get total yield stake amount for an address (principal only)\"},\"stake(address,uint256)\":{\"notice\":\"Create yield stake by staking user rewards into external protocol\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake from external protocol (yield stake + yield rewards)\"}},\"notice\":\"Chain-agnostic interface for external staking protocols\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakingAdapter.sol\":\"IStakingAdapter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "claimRewards(address)": "ef5cfb8c",
              "getPendingRewards(address)": "f6ed2017",
              "getStakedAmount(address)": "4da6a556",
              "stake(address,uint256)": "adc9772e",
              "unstake(address,uint256)": "c2a672e0"
            }
          },
          "irOptimized": ""
        }
      },
      "contracts/mocks/MockStakingRewards.sol": {
        "MockStakingRewards": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_ratePerSecond",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_habitTracker",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidAmount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OnlyHabitTracker",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "RewardsClaimed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Staked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Unstaked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "claimRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "claimed",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "deposits",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getContractBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getPendingRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "getStakedAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "habitTracker",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "lastUpdateTime",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ratePerSecond",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_habitTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyHabitTracker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"habitTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Linear reward rate: rewards = staked * ratePerSecond * timeStaked\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Returns 0 if no yield rewards available or not supportedClaimed rewards should be sent back to HabitTracker\",\"params\":{\"user\":\"Address of the user whose yield rewards to claim\"},\"returns\":{\"claimed\":\"Amount of yield rewards claimed\"}},\"constructor\":{\"params\":{\"_habitTracker\":\"HabitTracker contract address\",\"_ratePerSecond\":\"Reward rate (e.g., 1e15 = 0.1% per second)\"}},\"getPendingRewards(address)\":{\"details\":\"Returns 0 if not supported by protocol\",\"params\":{\"who\":\"Address to check\"},\"returns\":{\"_0\":\"Pending yield rewards\"}},\"getStakedAmount(address)\":{\"params\":{\"who\":\"Address to check\"},\"returns\":{\"_0\":\"Total yield stake by address (excludes yield rewards)\"}},\"stake(address,uint256)\":{\"details\":\"For native token staking, msg.value should equal amount\",\"params\":{\"amount\":\"Amount to stake (user's earned rewards)\",\"user\":\"Address of the user whose rewards are being staked\"}},\"unstake(address,uint256)\":{\"details\":\"Unstaked tokens (principal + yield rewards) should be sent back to HabitTracker\",\"params\":{\"amount\":\"Amount to unstake\",\"user\":\"Address of the user whose rewards are being unstaked\"}}},\"title\":\"MockStakingRewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"Claim accumulated yield rewards from external protocol for a specific user\"},\"getPendingRewards(address)\":{\"notice\":\"Get pending unclaimed yield rewards for an address\"},\"getStakedAmount(address)\":{\"notice\":\"Get total yield stake amount for an address (principal only)\"},\"stake(address,uint256)\":{\"notice\":\"Create yield stake by staking user rewards into external protocol\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake from external protocol (yield stake + yield rewards)\"}},\"notice\":\"Simple mock staking contract for testing on Passet Hub\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockStakingRewards.sol\":\"MockStakingRewards\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStakingAdapter.sol\":{\"keccak256\":\"0x837c3ef64c7cef47d2ff43e7dfcd63b354a80392d27b655947333ebc93bb53c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65a295024167de35a364eb05475f6d42dd8f9c8d7c73d129d08a354def902eb4\",\"dweb:/ipfs/QmXaVGSb6wTnQLKe3zPDeRheM1FPDqG65WAfDXXWJE7CN7\"]},\"contracts/mocks/MockStakingRewards.sol\":{\"keccak256\":\"0x89784a7a9a6fd1e4fc22aa48181da709250c14e55b1d643e270eca8064cddf36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fd3dfba046a1d8da836836678722b1167ea59c86203b751545ae24a1a17479\",\"dweb:/ipfs/QmYPsZ88ypQj49KQebD8sZL33L5uCBDcJsJyGQzjPCpX7f\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 100/65744 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 4082\n// Code size = 13814 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x20060\n    16: s0 = i32 [0x20060]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30090\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 7 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x20060]\n    41: u32 [0x20060] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x20060]\n    68: jump @46 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30090\n    77: i32 a0 = a0 + 0\n    79: ecalli 15 // 'set_immutable_data'\n    81: jump @46\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @15\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @15\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 8 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 16 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 (gas: 24)\n   874: sp = sp + 0xffffffffffffff60\n   878: u64 [sp + 0x98] = ra\n   882: u64 [sp + 0x90] = s0\n   886: u64 [sp + 0x88] = s1\n   890: s0 = sp + 0xa0\n   894: sp = sp & 0xffffffffffffffe0\n   897: a4 = u64 [a3]\n   899: u64 [sp + 0x38] = a4\n   902: a4 = u64 [a3 + 0x8]\n   905: u64 [sp + 0x30] = a4\n   908: a4 = u64 [a3 + 0x10]\n   911: u64 [sp + 0x28] = a4\n   914: a3 = u64 [a3 + 0x18]\n   917: u64 [sp + 0x20] = a3\n   920: a3 = u64 [a2]\n   922: u64 [sp + 0x18] = a3\n   925: a3 = u64 [a2 + 0x8]\n   928: u64 [sp + 0x10] = a3\n   931: a3 = u64 [a2 + 0x10]\n   934: u64 [sp + 0x8] = a3\n   937: a2 = u64 [a2 + 0x18]\n   940: u64 [sp] = a2\n   942: s1 = a1\n   944: ra = 6, jump @15\n      : @14 [@dyn 3] (gas: 35)\n   948: a1 = u64 [sp]\n   950: a1 = reverse a1\n   952: a2 = u64 [sp + 0x8]\n   955: a2 = reverse a2\n   957: a3 = u64 [sp + 0x10]\n   960: a3 = reverse a3\n   962: a4 = u64 [sp + 0x18]\n   965: a4 = reverse a4\n   967: u64 [sp + 0x58] = a4\n   970: u64 [sp + 0x50] = a3\n   973: u64 [sp + 0x48] = a2\n   976: u64 [sp + 0x40] = a1\n   979: a1 = u64 [sp + 0x20]\n   982: a1 = reverse a1\n   984: a2 = u64 [sp + 0x28]\n   987: a2 = reverse a2\n   989: a3 = u64 [sp + 0x30]\n   992: a3 = reverse a3\n   994: a4 = u64 [sp + 0x38]\n   997: a4 = reverse a4\n   999: u64 [sp + 0x78] = a4\n  1002: u64 [sp + 0x70] = a3\n  1005: u64 [sp + 0x68] = a2\n  1008: u64 [sp + 0x60] = a1\n  1011: i32 a2 = a0 + 0\n  1013: i32 a3 = s1 + 0\n  1015: i32 a0 = sp + 0x40\n  1018: a1 = 0x2\n  1021: ecalli 6 // 'deposit_event'\n  1023: sp = s0 + 0xffffffffffffff60\n  1027: ra = u64 [sp + 0x98]\n  1031: s0 = u64 [sp + 0x90]\n  1035: s1 = u64 [sp + 0x88]\n  1039: sp = sp + 0xa0\n  1043: ret\n      : @15 (gas: 2)\n  1045: i32 a2 = a0 >> 0x10\n  1048: jump @20 if a2 != 0\n      : @16 (gas: 4)\n  1051: a1 = a1 + a0\n  1054: i32 a1 = a1 + 0x1f\n  1057: a1 = a1 & 0xffffffffffffffe0\n  1060: jump @20 if a1 >u 65536\n      : @17 (gas: 3)\n  1066: a2 = 0x20068\n  1071: a3 = i32 [0x20068]\n  1076: jump @19 if a3 >=u a1\n      : @18 (gas: 2)\n  1079: u32 [0x20068] = a1\n  1084: fallthrough\n      : @19 (gas: 4)\n  1085: a1 = 0x20070\n  1090: i32 a0 = a0 + 0\n  1092: a0 = a0 + a1\n  1095: ret\n      : @20 (gas: 1)\n  1097: trap\n      : @21 (gas: 6)\n  1098: sp = sp + 0xfffffffffffffff0\n  1101: u64 [sp + 0x8] = ra\n  1104: u64 [sp] = s0\n  1106: s0 = a0 & 0x1\n  1109: ecalli 4 // 'call_data_size'\n  1111: fallthrough\n      : @22 (gas: 2)\n  1112: u32 [0x20064] = a0\n  1117: jump @24 if s0 == 0\n      : @23 (gas: 1)\n  1120: ra = 8, jump @25\n      : @24 [@dyn 4] (gas: 1)\n  1124: ra = 10, jump @49\n      : @25 [@dyn 5] (gas: 13)\n  1129: sp = sp + 0xfffffffffffffe80\n  1133: u64 [sp + 0x178] = ra\n  1137: u64 [sp + 0x170] = s0\n  1141: u64 [sp + 0x168] = s1\n  1145: s0 = sp + 0x180\n  1149: sp = sp & 0xffffffffffffffe0\n  1152: u64 [sp + 344] = 0\n  1156: u64 [sp + 336] = 0\n  1160: u64 [sp + 328] = 0\n  1164: u64 [sp + 320] = 0\n  1168: i32 a0 = sp + 0x140\n  1172: ecalli 17 // 'value_transferred'\n  1174: fallthrough\n      : @26 (gas: 8)\n  1175: a0 = u64 [sp + 0x150]\n  1179: a1 = u64 [sp + 0x158]\n  1183: a2 = u64 [sp + 0x148]\n  1187: a3 = u64 [sp + 0x140]\n  1191: a1 = a1 | a2\n  1194: a0 = a0 | a3\n  1197: a0 = a0 | a1\n  1200: jump @39 if a0 != 0\n      : @27 (gas: 15)\n  1204: s1 = i32 [0x20064]\n  1209: a0 = s1 << 0x20\n  1212: a0 = a0 >> 0x20\n  1215: a0 = a0 + 0x1f\n  1218: a0 = a0 & 0xffffffffffffffe0\n  1221: a1 = a0 + 0xc0\n  1225: a0 = a1 <u a0\n  1228: u64 [sp + 312] = 0\n  1232: u64 [sp + 0x120] = a1\n  1236: u64 [sp + 0x128] = a0\n  1240: a0 = 0 if a0 != 0\n  1242: u64 [sp + 0x130] = a0\n  1246: a0 = 0x40\n  1249: a1 = sp + 0x120\n  1253: ra = 12, jump @9\n      : @28 [@dyn 6] (gas: 3)\n  1258: a0 = 0xc0\n  1262: a1 = s1\n  1264: ra = 14, jump @15\n      : @29 [@dyn 7] (gas: 5)\n  1269: i32 a0 = a0 + 0\n  1271: a1 = s1\n  1273: a2 = 0\n  1275: ecalli 2 // 'call_data_copy'\n  1277: fallthrough\n      : @30 (gas: 1)\n  1278: jump @40 if s1 <u 64\n      : @31 (gas: 3)\n  1283: a0 = sp + 0x100\n  1287: a1 = 0xc0\n  1291: ra = 16, jump @7\n      : @32 [@dyn 8] (gas: 11)\n  1296: a0 = u64 [sp + 0x118]\n  1300: u64 [sp + 0x38] = a0\n  1303: a0 = u64 [sp + 0x110]\n  1307: u64 [sp + 0x30] = a0\n  1310: a0 = u64 [sp + 0x108]\n  1314: u64 [sp + 0x20] = a0\n  1317: a0 = u64 [sp + 0x100]\n  1321: u64 [sp + 0x18] = a0\n  1324: a0 = sp + 0xe0\n  1328: a1 = 0xe0\n  1332: ra = 18, jump @7\n      : @33 [@dyn 9] (gas: 11)\n  1337: a1 = u64 [sp + 0xf0]\n  1341: s1 = u64 [sp + 0xf8]\n  1345: a0 = 0x100000000\n  1355: a0 = a0 ^ a1\n  1358: a0 = a0 | s1\n  1361: u64 [sp + 0x28] = a1\n  1364: a1 = a1 >> 0x20\n  1367: a1 = a1 <u 0x1\n  1370: a1 = 0 if s1 != 0\n  1372: a1 = 0 if a0 == 0\n  1374: jump @41 if a1 == 0\n      : @34 (gas: 15)\n  1378: a0 = u64 [sp + 0xe8]\n  1382: u64 [sp + 0x8] = a0\n  1385: a0 = u64 [sp + 0xe0]\n  1389: u64 [sp + 0x10] = a0\n  1392: a0 = u64 [sp + 0x18]\n  1395: u64 [sp + 0xc0] = a0\n  1399: a0 = u64 [sp + 0x20]\n  1402: u64 [sp + 0xc8] = a0\n  1406: a0 = u64 [sp + 0x30]\n  1409: u64 [sp + 0xd0] = a0\n  1413: a0 = 0x80\n  1417: a1 = sp + 0xc0\n  1421: a2 = u64 [sp + 0x38]\n  1424: u64 [sp + 0xd8] = a2\n  1428: ra = 20, jump @9\n      : @35 [@dyn 10] (gas: 10)\n  1433: u64 [sp + 0xb8] = s1\n  1437: a0 = u64 [sp + 0x28]\n  1440: u64 [sp + 0xb0] = a0\n  1444: a0 = u64 [sp + 0x8]\n  1447: u64 [sp + 0xa8] = a0\n  1451: a0 = 0xa0\n  1455: a1 = sp + a0\n  1458: a2 = u64 [sp + 0x10]\n  1461: u64 [sp + 0xa0] = a2\n  1465: ra = 22, jump @9\n      : @36 [@dyn 11] (gas: 3)\n  1470: a0 = sp + 0x80\n  1474: a1 = 0x40\n  1477: ra = 24, jump @7\n      : @37 [@dyn 12] (gas: 12)\n  1482: a0 = u64 [sp + 0x98]\n  1486: a1 = u64 [sp + 0x90]\n  1490: a2 = u64 [sp + 0x88]\n  1494: s1 = u64 [sp + 0x80]\n  1498: a0 = a0 | a2\n  1501: a2 = s1 | a1\n  1504: a2 = a2 | a0\n  1507: a2 = a2 >> 0x20\n  1510: a0 = a0 | a1\n  1513: a0 = a0 << 0x20\n  1516: a0 = a0 | a2\n  1519: jump @42 if a0 == 0\n      : @38 (gas: 1)\n  1522: trap\n      : @39 (gas: 4)\n  1523: a1 = 0x20070\n  1528: i32 a1 = a1 + 0\n  1530: a0 = 0x1\n  1533: jump @48\n      : @40 (gas: 4)\n  1536: a1 = 0x20070\n  1541: i32 a1 = a1 + 0\n  1543: a0 = 0x1\n  1546: jump @48\n      : @41 (gas: 4)\n  1549: a1 = 0x20070\n  1554: i32 a1 = a1 + 0\n  1556: a0 = 0x1\n  1559: jump @48\n      : @42 (gas: 3)\n  1562: a0 = s1\n  1564: a1 = 0\n  1566: ra = 26, jump @15\n      : @43 [@dyn 13] (gas: 7)\n  1571: i32 a0 = a0 + 0\n  1573: a1 = 0\n  1575: a2 = 0\n  1577: ecalli 2 // 'call_data_copy'\n  1579: a0 = sp + 0x60\n  1582: a1 = 0x80\n  1586: ra = 28, jump @7\n      : @44 [@dyn 14] (gas: 13)\n  1591: a0 = u64 [sp + 0x78]\n  1594: a4 = 0x30090\n  1599: u64 [sp + 0x38] = a4\n  1602: a1 = u64 [sp + 0x70]\n  1605: a2 = u64 [sp + 0x68]\n  1608: a3 = u64 [sp + 0x60]\n  1611: u64 [0x300a8] = a0\n  1616: u64 [0x300a0] = a1\n  1621: u64 [0x30098] = a2\n  1626: u64 [0x30090] = a3\n  1631: a0 = sp + 0x40\n  1634: a1 = 0xa0\n  1638: ra = 30, jump @7\n      : @45 [@dyn 15] (gas: 10)\n  1643: a0 = u64 [sp + 0x58]\n  1646: a1 = u64 [sp + 0x50]\n  1649: a2 = u64 [sp + 0x48]\n  1652: a3 = u64 [sp + 0x40]\n  1655: a4 = u64 [sp + 0x38]\n  1658: u64 [a4 + 0x38] = a0\n  1661: u64 [a4 + 0x30] = a1\n  1664: u64 [a4 + 0x28] = a2\n  1667: u64 [a4 + 0x20] = a3\n  1670: jump @5\n      : @46 (gas: 3)\n  1673: a0 = s1\n  1675: a1 = 0\n  1677: ra = 32, jump @15\n      : @47 [@dyn 16] (gas: 6)\n  1682: i32 a1 = a0 + 0\n  1684: a0 = 0\n  1686: a2 = 0\n  1688: ra = 0x22\n  1691: ecalli 14 // 'seal_return'\n  1693: jump @49\n      : @48 (gas: 4)\n  1695: a2 = 0\n  1697: ra = 0x22\n  1700: ecalli 14 // 'seal_return'\n  1702: fallthrough\n      : @49 [@dyn 17] (gas: 19)\n  1703: sp = sp + 0xfffffffffffff808\n  1707: a0 = sp + 0x700\n  1711: u64 [a0 + 0xf0] = ra\n  1715: u64 [a0 + 0xe8] = s0\n  1719: u64 [a0 + 0xe0] = s1\n  1723: s0 = sp + 0x7f8\n  1727: sp = sp + 0xfffffffffffffbd8\n  1731: sp = sp & 0xffffffffffffffe0\n  1734: s1 = sp\n  1736: a2 = s1 + 0x7ff\n  1740: a2 = a2 + 0x19\n  1743: u64 [a2 + 288] = 0\n  1747: u64 [a2 + 280] = 0\n  1751: u64 [a2 + 264] = 0x80\n  1757: a0 = 0x40\n  1760: a1 = s1 + 0x7ff\n  1764: a1 = a1 + 0x121\n  1768: u64 [a2 + 272] = 0\n  1772: ra = 36, jump @9\n      : @50 [@dyn 18] (gas: 4)\n  1777: a0 = 0x20064\n  1782: u64 [s1 + 0x98] = a0\n  1786: a0 = i32 [0x20064]\n  1791: jump @52 if a0 >=u 4\n      : @51 (gas: 1)\n  1795: jump @261\n      : @52 (gas: 6)\n  1798: a0 = s1 + 0x1000\n  1802: i32 a0 = a0 + 0xfffffffffffff940\n  1806: a1 = 0\n  1808: ra = 0x26\n  1811: ecalli 3 // 'call_data_load'\n  1813: fallthrough\n      : @53 [@dyn 19] (gas: 4)\n  1814: a2 = s1 + 0x7ff\n  1818: a2 = a2 + 0x19\n  1821: a0 = i32 [a2 + 0x144]\n  1825: jump @55 if a0 != 2205082048\n      : @54 (gas: 1)\n  1832: jump @193\n      : @55 (gas: 1)\n  1835: jump @117 if a0 == 2399083160\n      : @56 (gas: 1)\n  1843: jump @168 if a0 == 2915661614\n      : @57 (gas: 1)\n  1851: jump @133 if a0 == 3265688288\n      : @58 (gas: 1)\n  1859: jump @80 if a0 == 4015848332\n      : @59 (gas: 1)\n  1867: jump @107 if a0 == 4142735383\n      : @60 (gas: 1)\n  1875: jump @93 if a0 == 4236126317\n      : @61 (gas: 1)\n  1883: jump @124 if a0 != 1302766934\n      : @62 (gas: 9)\n  1891: u64 [a2 + 416] = 0\n  1895: u64 [a2 + 408] = 0\n  1899: u64 [a2 + 400] = 0\n  1903: u64 [a2 + 392] = 0\n  1907: a0 = s1 + 0x1000\n  1911: i32 a0 = a0 + 0xfffffffffffff9a0\n  1915: ra = 0x28\n  1918: ecalli 17 // 'value_transferred'\n  1920: fallthrough\n      : @63 [@dyn 20] (gas: 4)\n  1921: a3 = s1 + 0x7ff\n  1925: a3 = a3 + 0x19\n  1928: a4 = a3 + 0x100\n  1932: t0 = 42, jump @443\n      : @64 [@dyn 21] (gas: 1)\n  1937: jump @66 if a0 == 0\n      : @65 (gas: 1)\n  1940: jump @200\n      : @66 (gas: 3)\n  1943: a0 = u64 [s1 + 0x98]\n  1947: a0 = i32 [a0]\n  1949: jump @68 if a0 >u 35\n      : @67 (gas: 1)\n  1953: jump @201\n      : @68 (gas: 2)\n  1956: a0 = s1 + 0x1e0\n  1960: ra = 44, jump @278\n      : @69 [@dyn 22] (gas: 11)\n  1965: a3 = s1 + 0x100\n  1969: a0 = u64 [a3 + 0xe0]\n  1973: a1 = u64 [a3 + 0xe8]\n  1977: a2 = u32 [s1 + 0x1f0]\n  1981: u64 [s1 + 472] = 0\n  1985: u64 [a3 + 0xd0] = a2\n  1989: u64 [a3 + 0xc8] = a1\n  1993: a1 = s1 + 0x1c0\n  1997: u64 [a3 + 0xc0] = a0\n  2001: a0 = 0\n  2003: ra = 46, jump @9\n      : @70 [@dyn 23] (gas: 7)\n  2008: u64 [s1 + 440] = 0\n  2012: u64 [s1 + 432] = 0\n  2016: u64 [s1 + 424] = 0\n  2020: a0 = 0x20\n  2023: a1 = s1 + 0x1a0\n  2027: u64 [s1 + 416] = 0\n  2031: ra = 48, jump @9\n      : @71 [@dyn 24] (gas: 2)\n  2036: a1 = i32 [0x20068]\n  2041: jump @73 if a1 >u 63\n      : @72 (gas: 2)\n  2045: u32 [0x20068] = 0x40\n  2051: fallthrough\n      : @73 (gas: 13)\n  2052: a0 = sp + 0xffffffffffffffe0\n  2055: a2 = a0 & 0xffffffffffffffe0\n  2058: u64 [s1 + 0x98] = a2\n  2062: sp = a2\n  2064: a0 = 0x20070\n  2069: i32 a0 = a0 + 0\n  2071: i32 a2 = a2 + 0\n  2073: a1 = 0x40\n  2076: ra = 0x32\n  2079: ecalli 9 // 'hash_keccak_256'\n  2081: a3 = u64 [s1 + 0x98]\n  2085: t0 = 0x34\n  2088: jump @439\n      : @74 [@dyn 25] (gas: 2)\n  2091: a3 = u64 [s1 + 0x98]\n  2095: t0 = 52, jump @439\n      : @75 [@dyn 26] (gas: 8)\n  2100: u64 [a5 + 0xc0] = a3\n  2104: u64 [a5 + 0xb8] = a2\n  2108: u64 [a5 + 0xb0] = a1\n  2112: u64 [a5 + 0xa8] = a0\n  2116: a0 = s1 + 0x180\n  2120: a1 = s1 + 0x7ff\n  2124: a1 = a1 + 0x1c1\n  2128: ra = 54, jump @11\n      : @76 [@dyn 27] (gas: 11)\n  2133: a0 = u64 [s1 + 0x198]\n  2137: u64 [s1 + 0x98] = a0\n  2141: a0 = u64 [s1 + 0x190]\n  2145: u64 [s1 + 0x90] = a0\n  2149: a0 = u64 [s1 + 0x188]\n  2153: u64 [s1 + 0x88] = a0\n  2157: a0 = u64 [s1 + 0x180]\n  2161: u64 [s1 + 0x80] = a0\n  2165: a0 = s1 + 0x160\n  2169: a1 = 0x40\n  2172: ra = 56, jump @7\n      : @77 [@dyn 28] (gas: 6)\n  2177: a4 = s1 + 0x100\n  2181: a0 = u64 [a4 + 0x78]\n  2184: a1 = u64 [a4 + 0x70]\n  2187: a2 = u64 [a4 + 0x68]\n  2190: a3 = u64 [a4 + 0x60]\n  2193: t0 = 58, jump @437\n      : @78 [@dyn 29] (gas: 1)\n  2198: jump @199 if a0 != 0\n      : @79 (gas: 14)\n  2202: a0 = u64 [s1 + 0x80]\n  2206: a2 = s1 + 0x100\n  2210: u64 [a2 + 0x40] = a0\n  2213: a0 = u64 [s1 + 0x88]\n  2217: u64 [a2 + 0x48] = a0\n  2220: a0 = u64 [s1 + 0x90]\n  2224: u64 [a2 + 0x50] = a0\n  2227: a1 = s1 + 0x140\n  2231: a0 = u64 [s1 + 0x98]\n  2235: u64 [a2 + 0x58] = a0\n  2238: a0 = a3\n  2240: u64 [s1 + 0x98] = a3\n  2244: ra = 0x6c\n  2247: jump @9\n      : @80 (gas: 8)\n  2250: u64 [a2 + 896] = 0\n  2254: u64 [a2 + 888] = 0\n  2258: u64 [a2 + 880] = 0\n  2262: u64 [a2 + 872] = 0\n  2266: a0 = s1 + 0x1000\n  2270: i32 a0 = a0 + 0xfffffffffffffb80\n  2274: ecalli 17 // 'value_transferred'\n  2276: fallthrough\n      : @81 (gas: 11)\n  2277: a3 = s1 + 0x7ff\n  2281: a3 = a3 + 0x19\n  2284: a4 = a3 + 0x300\n  2288: a0 = u64 [a4 + 0x78]\n  2291: a1 = u64 [a4 + 0x80]\n  2295: a2 = u64 [a4 + 0x70]\n  2298: a3 = u64 [a4 + 0x68]\n  2301: a1 = a1 | a2\n  2304: a0 = a0 | a3\n  2307: a0 = a0 | a1\n  2310: jump @202 if a0 != 0\n      : @82 (gas: 3)\n  2314: a0 = u64 [s1 + 0x98]\n  2318: a0 = i32 [a0]\n  2320: jump @203 if a0 <=u 35\n      : @83 (gas: 2)\n  2325: a0 = s1 + 0x7a0\n  2329: ra = 60, jump @278\n      : @84 [@dyn 30] (gas: 10)\n  2334: a1 = s1 + 0x700\n  2338: a0 = u64 [a1 + 0xb8]\n  2342: u64 [s1 + 0x98] = a0\n  2346: a0 = u64 [a1 + 0xb0]\n  2350: u64 [s1 + 0x90] = a0\n  2354: a0 = u64 [a1 + 0xa8]\n  2358: u64 [s1 + 0x88] = a0\n  2362: a0 = u64 [a1 + 0xa0]\n  2366: u64 [s1 + 0x80] = a0\n  2370: ra = 62, jump @0\n      : @85 [@dyn 31] (gas: 14)\n  2375: a1 = u64 [0x300b8]\n  2380: u64 [s1 + 0x78] = a1\n  2383: a1 = u64 [0x300b0]\n  2388: u64 [s1 + 0x70] = a1\n  2391: a0 = u32 [0x300c0]\n  2396: u64 [s1 + 0x68] = a0\n  2399: a0 = 0x30070\n  2404: u64 [s1 + 0x60] = a0\n  2407: i32 a0 = a0 + 0\n  2409: ra = 0x40\n  2412: ecalli 5 // 'caller'\n  2414: a2 = u64 [s1 + 0x60]\n  2417: t0 = 0x42\n  2420: jump @438\n      : @86 [@dyn 32] (gas: 2)\n  2423: a2 = u64 [s1 + 0x60]\n  2426: t0 = 66, jump @438\n      : @87 [@dyn 33] (gas: 9)\n  2431: a2 = u64 [s1 + 0x68]\n  2434: a1 = a1 ^ a2\n  2437: a2 = u64 [s1 + 0x70]\n  2440: a0 = a0 ^ a2\n  2443: a0 = a0 | a1\n  2446: a1 = u64 [s1 + 0x78]\n  2449: a1 = a1 ^ a3\n  2452: a0 = a0 | a1\n  2455: jump @204 if a0 != 0\n      : @88 (gas: 11)\n  2459: a0 = u64 [s1 + 0x80]\n  2463: u64 [s1 + 0x740] = a0\n  2467: a0 = u64 [s1 + 0x88]\n  2471: u64 [s1 + 0x748] = a0\n  2475: a0 = u64 [s1 + 0x90]\n  2479: u64 [s1 + 0x750] = a0\n  2483: a0 = s1 + 0x760\n  2487: a1 = s1 + 0x740\n  2491: a2 = u64 [s1 + 0x98]\n  2495: u64 [s1 + 0x758] = a2\n  2499: ra = 68, jump @311\n      : @89 [@dyn 34] (gas: 11)\n  2504: a0 = u64 [s1 + 0x778]\n  2508: u64 [s1 + 0x98] = a0\n  2512: a0 = u64 [s1 + 0x770]\n  2516: u64 [s1 + 0x90] = a0\n  2520: a0 = u64 [s1 + 0x768]\n  2524: u64 [s1 + 0x88] = a0\n  2528: a0 = u64 [s1 + 0x760]\n  2532: u64 [s1 + 0x80] = a0\n  2536: a0 = s1 + 0x720\n  2540: a1 = 0x40\n  2543: ra = 70, jump @7\n      : @90 [@dyn 35] (gas: 6)\n  2548: a4 = s1 + 0x700\n  2552: a0 = u64 [a4 + 0x38]\n  2555: a1 = u64 [a4 + 0x30]\n  2558: a2 = u64 [a4 + 0x28]\n  2561: a3 = u64 [a4 + 0x20]\n  2564: t0 = 72, jump @437\n      : @91 [@dyn 36] (gas: 1)\n  2569: jump @199 if a0 != 0\n      : @92 (gas: 14)\n  2573: a0 = u64 [s1 + 0x80]\n  2577: a2 = s1 + 0x700\n  2581: u64 [a2] = a0\n  2583: a0 = u64 [s1 + 0x88]\n  2587: u64 [a2 + 0x8] = a0\n  2590: a0 = u64 [s1 + 0x90]\n  2594: u64 [a2 + 0x10] = a0\n  2597: a1 = s1 + 0x700\n  2601: a0 = u64 [s1 + 0x98]\n  2605: u64 [a2 + 0x18] = a0\n  2608: a0 = a3\n  2610: u64 [s1 + 0x98] = a3\n  2614: ra = 0x6c\n  2617: jump @9\n      : @93 (gas: 8)\n  2620: u64 [a2 + 960] = 0\n  2624: u64 [a2 + 952] = 0\n  2628: u64 [a2 + 944] = 0\n  2632: u64 [a2 + 936] = 0\n  2636: a0 = s1 + 0x1000\n  2640: i32 a0 = a0 + 0xfffffffffffffbc0\n  2644: ecalli 17 // 'value_transferred'\n  2646: fallthrough\n      : @94 (gas: 11)\n  2647: a3 = s1 + 0x7ff\n  2651: a3 = a3 + 0x19\n  2654: a4 = a3 + 0x300\n  2658: a0 = u64 [a4 + 0xb8]\n  2662: a1 = u64 [a4 + 0xc0]\n  2666: a2 = u64 [a4 + 0xb0]\n  2670: a3 = u64 [a4 + 0xa8]\n  2674: a1 = a1 | a2\n  2677: a0 = a0 | a3\n  2680: a0 = a0 | a1\n  2683: jump @208 if a0 != 0\n      : @95 (gas: 3)\n  2687: a0 = u64 [s1 + 0x98]\n  2691: a0 = i32 [a0]\n  2693: jump @209 if a0 <=u 35\n      : @96 (gas: 3)\n  2698: a0 = s1 + 0x7ff\n  2702: a0 = a0 + 0x101\n  2706: ra = 74, jump @278\n      : @97 [@dyn 37] (gas: 13)\n  2711: a3 = s1 + 0x7ff\n  2715: a3 = a3 + 0x19\n  2718: a0 = u64 [a3 + 0xe8]\n  2722: a1 = u64 [a3 + 0xf0]\n  2726: a2 = u32 [a3 + 0xf8]\n  2730: u64 [a3 + 224] = 0\n  2734: u64 [a3 + 0xd8] = a2\n  2738: u64 [a3 + 0xd0] = a1\n  2742: a1 = s1 + 0x7ff\n  2746: a1 = a1 + 0xe1\n  2750: u64 [a3 + 0xc8] = a0\n  2754: a0 = 0\n  2756: ra = 76, jump @9\n      : @98 [@dyn 38] (gas: 11)\n  2761: a0 = s1 + 0x7ff\n  2765: a0 = a0 + 0x19\n  2768: u64 [a0 + 192] = 0\n  2772: u64 [a0 + 184] = 0\n  2776: u64 [a0 + 176] = 0\n  2780: a2 = a0\n  2782: a0 = 0x20\n  2785: a1 = s1 + 0x7ff\n  2789: a1 = a1 + 0xc1\n  2793: u64 [a2 + 168] = 0\n  2797: ra = 78, jump @9\n      : @99 [@dyn 39] (gas: 2)\n  2802: a1 = i32 [0x20068]\n  2807: jump @101 if a1 >u 63\n      : @100 (gas: 2)\n  2811: u32 [0x20068] = 0x40\n  2817: fallthrough\n      : @101 (gas: 13)\n  2818: a0 = sp + 0xffffffffffffffe0\n  2821: a2 = a0 & 0xffffffffffffffe0\n  2824: u64 [s1 + 0x98] = a2\n  2828: sp = a2\n  2830: a0 = 0x20070\n  2835: i32 a0 = a0 + 0\n  2837: i32 a2 = a2 + 0\n  2839: a1 = 0x40\n  2842: ra = 0x50\n  2845: ecalli 9 // 'hash_keccak_256'\n  2847: a3 = u64 [s1 + 0x98]\n  2851: t0 = 0x52\n  2854: jump @440\n      : @102 [@dyn 40] (gas: 2)\n  2857: a3 = u64 [s1 + 0x98]\n  2861: t0 = 82, jump @440\n      : @103 [@dyn 41] (gas: 10)\n  2866: a5 = a4 + 0x300\n  2870: u64 [a5 + 0xe0] = a3\n  2874: u64 [a5 + 0xd8] = a2\n  2878: u64 [a5 + 0xd0] = a1\n  2882: u64 [a5 + 0xc8] = a0\n  2886: a0 = s1 + 0x7ff\n  2890: a0 = a0 + 0xa1\n  2894: a1 = s1 + 0x7ff\n  2898: a1 = a1 + 0x3e1\n  2902: ra = 84, jump @11\n      : @104 [@dyn 42] (gas: 14)\n  2907: a1 = s1 + 0x7ff\n  2911: a1 = a1 + 0x19\n  2914: a0 = u64 [a1 + 0xa0]\n  2918: u64 [s1 + 0x98] = a0\n  2922: a0 = u64 [a1 + 0x98]\n  2926: u64 [s1 + 0x90] = a0\n  2930: a0 = u64 [a1 + 0x90]\n  2934: u64 [s1 + 0x88] = a0\n  2938: a0 = u64 [a1 + 0x88]\n  2942: u64 [s1 + 0x80] = a0\n  2946: a0 = s1 + 0x7ff\n  2950: a0 = a0 + 0x81\n  2954: a1 = 0x40\n  2957: ra = 86, jump @7\n      : @105 [@dyn 43] (gas: 14)\n  2962: a3 = s1 + 0x7ff\n  2966: a3 = a3 + 0x19\n  2969: a0 = u64 [a3 + 0x80]\n  2973: a1 = u64 [a3 + 0x78]\n  2976: a2 = u64 [a3 + 0x70]\n  2979: a4 = u64 [a3 + 0x68]\n  2982: a0 = a0 | a2\n  2985: a2 = a4 | a1\n  2988: a2 = a2 | a0\n  2991: a2 = a2 >> 0x20\n  2994: a0 = a0 | a1\n  2997: a0 = a0 << 0x20\n  3000: a0 = a0 | a2\n  3003: jump @199 if a0 != 0\n      : @106 (gas: 14)\n  3007: a0 = u64 [s1 + 0x80]\n  3011: u64 [a3 + 0x48] = a0\n  3014: a0 = u64 [s1 + 0x88]\n  3018: u64 [a3 + 0x50] = a0\n  3021: a0 = u64 [s1 + 0x90]\n  3025: u64 [a3 + 0x58] = a0\n  3028: a1 = s1 + 0x7ff\n  3032: a1 = a1 + 0x61\n  3035: a0 = u64 [s1 + 0x98]\n  3039: u64 [a3 + 0x60] = a0\n  3042: a0 = a4\n  3044: u64 [s1 + 0x98] = a4\n  3048: ra = 0x6c\n  3051: jump @9\n      : @107 (gas: 9)\n  3054: u64 [a2 + 928] = 0\n  3058: u64 [a2 + 920] = 0\n  3062: u64 [a2 + 912] = 0\n  3066: u64 [a2 + 904] = 0\n  3070: a0 = s1 + 0x1000\n  3074: i32 a0 = a0 + 0xfffffffffffffba0\n  3078: ra = 0x58\n  3081: ecalli 17 // 'value_transferred'\n  3083: fallthrough\n      : @108 [@dyn 44] (gas: 4)\n  3084: a3 = s1 + 0x7ff\n  3088: a3 = a3 + 0x19\n  3091: a4 = a3 + 0x300\n  3095: t0 = 90, jump @443\n      : @109 [@dyn 45] (gas: 1)\n  3100: jump @210 if a0 != 0\n      : @110 (gas: 3)\n  3104: a0 = u64 [s1 + 0x98]\n  3108: a0 = i32 [a0]\n  3110: jump @211 if a0 <=u 35\n      : @111 (gas: 3)\n  3115: a0 = s1 + 0x7ff\n  3119: a0 = a0 + 0x41\n  3122: ra = 92, jump @278\n      : @112 [@dyn 46] (gas: 17)\n  3127: a4 = s1 + 0x7ff\n  3131: a4 = a4 + 0x19\n  3134: a2 = u64 [a4 + 0x28]\n  3137: a0 = u64 [a4 + 0x30]\n  3140: a1 = u64 [a4 + 0x38]\n  3143: a3 = u64 [a4 + 0x40]\n  3146: u64 [a4] = a3\n  3148: u64 [a4 + 0xfffffffffffffff8] = a1\n  3151: a1 = s1 + 0x1000\n  3155: u64 [a1 + 0xfffffffffffff808] = a0\n  3159: a0 = s1 + 0x7ff\n  3163: a0 = a0 + 0x21\n  3166: a1 = s1 + 0x7ff\n  3170: a1 = a1 + 0x1\n  3173: a3 = s1 + 0x1000\n  3177: u64 [a3 + 0xfffffffffffff800] = a2\n  3181: ra = 94, jump @379\n      : @113 [@dyn 47] (gas: 13)\n  3186: a1 = s1 + 0x7ff\n  3190: a1 = a1 + 0x19\n  3193: a0 = u64 [a1 + 0x20]\n  3196: u64 [s1 + 0x98] = a0\n  3200: a0 = u64 [a1 + 0x18]\n  3203: u64 [s1 + 0x90] = a0\n  3207: a0 = u64 [a1 + 0x10]\n  3210: u64 [s1 + 0x88] = a0\n  3214: a0 = u64 [a1 + 0x8]\n  3217: u64 [s1 + 0x80] = a0\n  3221: a0 = s1 + 0x7e0\n  3225: a1 = 0x40\n  3228: ra = 96, jump @7\n      : @114 [@dyn 48] (gas: 6)\n  3233: a4 = s1 + 0x700\n  3237: a0 = u64 [a4 + 0xf8]\n  3241: a1 = u64 [a4 + 0xf0]\n  3245: a2 = u64 [a4 + 0xe8]\n  3249: a3 = u64 [a4 + 0xe0]\n  3253: t0 = 98, jump @437\n      : @115 [@dyn 49] (gas: 1)\n  3258: jump @199 if a0 != 0\n      : @116 (gas: 14)\n  3262: a0 = u64 [s1 + 0x80]\n  3266: a2 = s1 + 0x700\n  3270: u64 [a2 + 0xc0] = a0\n  3274: a0 = u64 [s1 + 0x88]\n  3278: u64 [a2 + 0xc8] = a0\n  3282: a0 = u64 [s1 + 0x90]\n  3286: u64 [a2 + 0xd0] = a0\n  3290: a1 = s1 + 0x7c0\n  3294: a0 = u64 [s1 + 0x98]\n  3298: u64 [a2 + 0xd8] = a0\n  3302: a0 = a3\n  3304: u64 [s1 + 0x98] = a3\n  3308: ra = 0x6c\n  3311: jump @9\n      : @117 (gas: 8)\n  3314: u64 [a2 + 576] = 0\n  3318: u64 [a2 + 568] = 0\n  3322: u64 [a2 + 560] = 0\n  3326: u64 [a2 + 552] = 0\n  3330: a0 = s1 + 0x1000\n  3334: i32 a0 = a0 + 0xfffffffffffffa40\n  3338: ecalli 17 // 'value_transferred'\n  3340: fallthrough\n      : @118 (gas: 11)\n  3341: a3 = s1 + 0x7ff\n  3345: a3 = a3 + 0x19\n  3348: a4 = a3 + 0x200\n  3352: a0 = u64 [a4 + 0x38]\n  3355: a1 = u64 [a4 + 0x40]\n  3358: a2 = u64 [a4 + 0x30]\n  3361: a3 = u64 [a4 + 0x28]\n  3364: a1 = a1 | a2\n  3367: a0 = a0 | a3\n  3370: a0 = a0 | a1\n  3373: jump @212 if a0 != 0\n      : @119 (gas: 3)\n  3377: a0 = u64 [s1 + 0x98]\n  3381: a0 = i32 [a0]\n  3383: jump @213 if a0 <=u 3\n      : @120 (gas: 3)\n  3388: a0 = s1 + 0x2a0\n  3392: a1 = 0x40\n  3395: ra = 100, jump @7\n      : @121 [@dyn 50] (gas: 10)\n  3400: a1 = s1 + 0x200\n  3404: a0 = u64 [a1 + 0xb8]\n  3408: u64 [s1 + 0x98] = a0\n  3412: a0 = u64 [a1 + 0xb0]\n  3416: u64 [s1 + 0x90] = a0\n  3420: a0 = u64 [a1 + 0xa8]\n  3424: u64 [s1 + 0x80] = a0\n  3428: a0 = u64 [a1 + 0xa0]\n  3432: u64 [s1 + 0x88] = a0\n  3436: ra = 102, jump @0\n      : @122 [@dyn 51] (gas: 13)\n  3441: a0 = u64 [s1 + 0x98]\n  3445: a1 = u64 [s1 + 0x80]\n  3449: a0 = a0 | a1\n  3452: a1 = u64 [s1 + 0x88]\n  3456: a4 = a1\n  3458: a2 = u64 [s1 + 0x90]\n  3462: a1 = a1 | a2\n  3465: a1 = a1 | a0\n  3468: a1 = a1 >> 0x20\n  3471: a0 = a0 | a2\n  3474: a0 = a0 << 0x20\n  3477: a0 = a0 | a1\n  3480: jump @199 if a0 != 0\n      : @123 (gas: 13)\n  3484: a2 = u64 [0x30090]\n  3489: a1 = u64 [0x30098]\n  3494: a3 = u64 [0x300a0]\n  3499: a0 = u64 [0x300a8]\n  3504: a5 = s1 + 0x200\n  3508: u64 [a5 + 0x98] = a0\n  3512: u64 [a5 + 0x90] = a3\n  3516: u64 [a5 + 0x88] = a1\n  3520: a1 = s1 + 0x280\n  3524: u64 [a5 + 0x80] = a2\n  3528: a0 = a4\n  3530: ra = 0xce\n  3534: jump @9\n      : @124 (gas: 1)\n  3537: jump @214 if a0 != 1872738698\n      : @125 (gas: 8)\n  3545: u64 [a2 + 480] = 0\n  3549: u64 [a2 + 472] = 0\n  3553: u64 [a2 + 464] = 0\n  3557: u64 [a2 + 456] = 0\n  3561: a0 = s1 + 0x1000\n  3565: i32 a0 = a0 + 0xfffffffffffff9e0\n  3569: ecalli 17 // 'value_transferred'\n  3571: fallthrough\n      : @126 (gas: 11)\n  3572: a3 = s1 + 0x7ff\n  3576: a3 = a3 + 0x19\n  3579: a4 = a3 + 0x100\n  3583: a0 = u64 [a4 + 0xd8]\n  3587: a1 = u64 [a4 + 0xe0]\n  3591: a2 = u64 [a4 + 0xd0]\n  3595: a3 = u64 [a4 + 0xc8]\n  3599: a1 = a1 | a2\n  3602: a0 = a0 | a3\n  3605: a0 = a0 | a1\n  3608: jump @218 if a0 != 0\n      : @127 (gas: 3)\n  3612: a0 = u64 [s1 + 0x98]\n  3616: a0 = i32 [a0]\n  3618: jump @219 if a0 <=u 3\n      : @128 (gas: 17)\n  3623: a0 = s1 + 0x1000\n  3627: i32 a0 = a0 + 0xfffffffffffffa00\n  3631: ecalli 0 // 'balance'\n  3632: a0 = s1 + 0x7ff\n  3636: a0 = a0 + 0x19\n  3639: a1 = u64 [a0 + 0x200]\n  3643: u64 [s1 + 0x98] = a1\n  3647: a2 = a0 + 0x100\n  3651: a1 = u64 [a2 + 0xf8]\n  3655: u64 [s1 + 0x90] = a1\n  3659: a1 = u64 [a2 + 0xf0]\n  3663: u64 [s1 + 0x88] = a1\n  3667: a0 = u64 [a2 + 0xe8]\n  3671: u64 [s1 + 0x80] = a0\n  3675: a0 = s1 + 0x220\n  3679: a1 = 0x40\n  3682: ra = 104, jump @7\n      : @129 [@dyn 52] (gas: 6)\n  3687: a4 = s1 + 0x200\n  3691: a0 = u64 [a4 + 0x38]\n  3694: a1 = u64 [a4 + 0x30]\n  3697: a2 = u64 [a4 + 0x28]\n  3700: a3 = u64 [a4 + 0x20]\n  3703: t0 = 106, jump @437\n      : @130 [@dyn 53] (gas: 1)\n  3708: jump @199 if a0 != 0\n      : @131 (gas: 13)\n  3712: a0 = u64 [s1 + 0x80]\n  3716: a2 = s1 + 0x200\n  3720: u64 [a2] = a0\n  3722: a0 = u64 [s1 + 0x88]\n  3726: u64 [a2 + 0x8] = a0\n  3729: a0 = u64 [s1 + 0x90]\n  3733: u64 [a2 + 0x10] = a0\n  3736: a1 = s1 + 0x200\n  3740: a0 = u64 [s1 + 0x98]\n  3744: u64 [a2 + 0x18] = a0\n  3747: a0 = a3\n  3749: u64 [s1 + 0x98] = a3\n  3753: ra = 108, jump @9\n      : @132 [@dyn 54] (gas: 4)\n  3758: a1 = 0x20\n  3761: a0 = u64 [s1 + 0x98]\n  3765: ra = 0xd0\n  3769: jump @15\n      : @133 (gas: 9)\n  3772: u64 [a2 + 672] = 0\n  3776: u64 [a2 + 664] = 0\n  3780: u64 [a2 + 656] = 0\n  3784: u64 [a2 + 648] = 0\n  3788: a0 = s1 + 0x1000\n  3792: i32 a0 = a0 + 0xfffffffffffffaa0\n  3796: ra = 0x6e\n  3799: ecalli 17 // 'value_transferred'\n  3801: fallthrough\n      : @134 [@dyn 55] (gas: 4)\n  3802: a3 = s1 + 0x7ff\n  3806: a3 = a3 + 0x19\n  3809: a4 = a3 + 0x200\n  3813: t0 = 112, jump @443\n      : @135 [@dyn 56] (gas: 1)\n  3818: jump @220 if a0 != 0\n      : @136 (gas: 3)\n  3822: a0 = u64 [s1 + 0x98]\n  3826: a0 = i32 [a0]\n  3828: jump @221 if a0 <=u 67\n      : @137 (gas: 2)\n  3833: a0 = s1 + 0x6e0\n  3837: ra = 114, jump @278\n      : @138 [@dyn 57] (gas: 25)\n  3842: a1 = s1 + 0x600\n  3846: a0 = u64 [a1 + 0xf8]\n  3850: u64 [s1 + 0x20] = a0\n  3853: a0 = u64 [a1 + 0xf0]\n  3857: u64 [s1 + 0x58] = a0\n  3860: a0 = u64 [a1 + 0xe8]\n  3864: u64 [s1 + 0x70] = a0\n  3867: a0 = u64 [a1 + 0xe0]\n  3871: u64 [s1 + 0x78] = a0\n  3874: a0 = s1 + 0x1000\n  3878: i32 a0 = a0 + 0xfffffffffffffac0\n  3882: a1 = 0x24\n  3885: ecalli 3 // 'call_data_load'\n  3887: a0 = s1 + 0x7ff\n  3891: a0 = a0 + 0x19\n  3894: a2 = a0 + 0x200\n  3898: a1 = u64 [a2 + 0xc0]\n  3902: u64 [s1 + 0x98] = a1\n  3906: a1 = u64 [a2 + 0xb8]\n  3910: u64 [s1 + 0x90] = a1\n  3914: a1 = u64 [a2 + 0xb0]\n  3918: u64 [s1 + 0x88] = a1\n  3922: a0 = u64 [a2 + 0xa8]\n  3926: u64 [s1 + 0x80] = a0\n  3930: ra = 116, jump @0\n      : @139 [@dyn 58] (gas: 11)\n  3935: a1 = u64 [0x300b8]\n  3940: u64 [s1 + 0x68] = a1\n  3943: a1 = u64 [0x300b0]\n  3948: u64 [s1 + 0x50] = a1\n  3951: a0 = u32 [0x300c0]\n  3956: u64 [s1 + 0x48] = a0\n  3959: a0 = 0x30070\n  3964: u64 [s1 + 0x60] = a0\n  3967: i32 a0 = a0 + 0\n  3969: ecalli 5 // 'caller'\n  3971: fallthrough\n      : @140 (gas: 23)\n  3972: a0 = u64 [s1 + 0x60]\n  3975: t0 = u64 [a0 + 0x8]\n  3978: a4 = u64 [a0]\n  3980: a5 = u32 [a0 + 0x10]\n  3983: a0 = reverse t0\n  3985: a1 = a0 >> 0x20\n  3988: a2 = reverse a4\n  3990: a3 = a2 << 0x20\n  3993: a1 = a1 | a3\n  3996: a0 = a0 << 0x20\n  3999: a3 = reverse a5\n  4001: a3 = a3 >> 0x20\n  4004: a0 = a0 | a3\n  4007: a2 = a2 >> 0x20\n  4010: a3 = u64 [s1 + 0x48]\n  4013: a2 = a2 ^ a3\n  4016: a3 = u64 [s1 + 0x50]\n  4019: a0 = a0 ^ a3\n  4022: a0 = a0 | a2\n  4025: a2 = u64 [s1 + 0x68]\n  4028: a1 = a1 ^ a2\n  4031: a0 = a0 | a1\n  4034: jump @222 if a0 != 0\n      : @141 (gas: 11)\n  4038: u64 [s1 + 0x30] = a5\n  4041: u64 [s1 + 0x38] = t0\n  4044: u64 [s1 + 0x40] = a4\n  4047: a0 = u64 [s1 + 0x90]\n  4051: a1 = u64 [s1 + 0x80]\n  4055: a0 = a0 | a1\n  4058: a1 = u64 [s1 + 0x98]\n  4062: a2 = u64 [s1 + 0x88]\n  4066: a1 = a1 | a2\n  4069: a0 = a0 | a1\n  4072: jump @226 if a0 == 0\n      : @142 (gas: 14)\n  4076: a0 = u64 [s1 + 0x58]\n  4079: a0 = a0 << 0x20\n  4082: a2 = a0 >> 0x20\n  4085: u64 [s1 + 1720] = 0\n  4089: a0 = u64 [s1 + 0x78]\n  4092: a3 = s1 + 0x600\n  4096: u64 [a3 + 0xa0] = a0\n  4100: a0 = u64 [s1 + 0x70]\n  4103: u64 [a3 + 0xa8] = a0\n  4107: a1 = s1 + 0x6a0\n  4111: u64 [s1 + 0x48] = a2\n  4114: u64 [a3 + 0xb0] = a2\n  4118: a0 = 0\n  4120: ra = 118, jump @9\n      : @143 [@dyn 59] (gas: 7)\n  4125: u64 [s1 + 1688] = 0\n  4129: u64 [s1 + 1680] = 0\n  4133: u64 [s1 + 1672] = 0\n  4137: a0 = 0x20\n  4140: a1 = s1 + 0x680\n  4144: u64 [s1 + 1664] = 0\n  4148: ra = 120, jump @9\n      : @144 [@dyn 60] (gas: 4)\n  4153: a0 = 0x20068\n  4158: u64 [s1 + 0x68] = a0\n  4161: a0 = i32 [0x20068]\n  4166: jump @146 if a0 >u 63\n      : @145 (gas: 3)\n  4170: a1 = u64 [s1 + 0x68]\n  4173: u32 [a1 + 0] = 0x40\n  4176: fallthrough\n      : @146 (gas: 15)\n  4177: a0 = sp + 0xffffffffffffffe0\n  4180: a2 = a0 & 0xffffffffffffffe0\n  4183: u64 [s1 + 0x18] = a2\n  4186: sp = a2\n  4188: a0 = 0x20070\n  4193: u64 [s1 + 0x28] = a0\n  4196: i32 a0 = a0 + 0\n  4198: i32 a2 = a2 + 0\n  4200: a1 = 0x40\n  4203: u64 [s1 + 0x50] = a0\n  4206: ra = 0x7a\n  4209: ecalli 9 // 'hash_keccak_256'\n  4211: a3 = u64 [s1 + 0x18]\n  4214: t0 = 0x7c\n  4217: jump @440\n      : @147 [@dyn 61] (gas: 2)\n  4220: a3 = u64 [s1 + 0x18]\n  4223: t0 = 124, jump @440\n      : @148 [@dyn 62] (gas: 9)\n  4228: a5 = a4 + 0x200\n  4232: u64 [a5 + 0xe0] = a3\n  4236: u64 [a5 + 0xd8] = a2\n  4240: u64 [a5 + 0xd0] = a1\n  4244: u64 [a5 + 0xc8] = a0\n  4248: a0 = s1 + 0x660\n  4252: a1 = s1 + 0x7ff\n  4256: a1 = a1 + 0x2e1\n  4260: ra = 126, jump @11\n      : @149 [@dyn 63] (gas: 21)\n  4265: a1 = s1 + 0x600\n  4269: a0 = u64 [a1 + 0x78]\n  4272: t0 = u64 [s1 + 0x660]\n  4276: a2 = u64 [a1 + 0x70]\n  4279: a3 = u64 [a1 + 0x68]\n  4282: a5 = u64 [s1 + 0x98]\n  4286: a4 = a0 ^ a5\n  4289: a1 = a0 <u a5\n  4292: a0 = u64 [s1 + 0x90]\n  4296: a5 = a2 <u a0\n  4299: a5 = a1 if a4 != 0\n  4302: a1 = u64 [s1 + 0x88]\n  4306: t1 = a3 ^ a1\n  4309: a3 = a3 <u a1\n  4312: a1 = u64 [s1 + 0x80]\n  4316: a1 = t0 <u a1\n  4319: a1 = a3 if t1 != 0\n  4322: a0 = a0 ^ a2\n  4325: a0 = a0 | a4\n  4328: a1 = a5 if a0 != 0\n  4331: jump @230 if a1 != 0\n      : @150 (gas: 10)\n  4335: a0 = u64 [s1 + 0x78]\n  4338: u64 [s1 + 0x640] = a0\n  4342: a0 = u64 [s1 + 0x70]\n  4345: u64 [s1 + 0x648] = a0\n  4349: a0 = u64 [s1 + 0x58]\n  4352: u64 [s1 + 0x650] = a0\n  4356: a0 = s1 + 0x640\n  4360: a1 = u64 [s1 + 0x20]\n  4363: u64 [s1 + 0x658] = a1\n  4367: ra = 128, jump @354\n      : @151 [@dyn 64] (gas: 11)\n  4373: u64 [s1 + 1592] = 0\n  4377: a0 = u64 [s1 + 0x48]\n  4380: a2 = s1 + 0x600\n  4384: u64 [a2 + 0x30] = a0\n  4387: a0 = u64 [s1 + 0x70]\n  4390: u64 [a2 + 0x28] = a0\n  4393: a1 = s1 + 0x620\n  4397: a0 = u64 [s1 + 0x78]\n  4400: u64 [a2 + 0x20] = a0\n  4403: a0 = 0\n  4405: ra = 130, jump @9\n      : @152 [@dyn 65] (gas: 7)\n  4411: u64 [s1 + 1560] = 0\n  4415: u64 [s1 + 1552] = 0\n  4419: u64 [s1 + 1544] = 0\n  4423: a0 = 0x20\n  4426: a1 = s1 + 0x600\n  4430: u64 [s1 + 1536] = 0\n  4434: ra = 132, jump @9\n      : @153 [@dyn 66] (gas: 7)\n  4440: a0 = sp + 0xffffffffffffffe0\n  4443: a0 = a0 & 0xffffffffffffffe0\n  4446: u64 [s1 + 0x58] = a0\n  4449: sp = a0\n  4451: a0 = u64 [s1 + 0x68]\n  4454: a0 = i32 [a0]\n  4456: jump @155 if a0 >u 63\n      : @154 (gas: 3)\n  4460: a1 = u64 [s1 + 0x68]\n  4463: u32 [a1 + 0] = 0x40\n  4466: fallthrough\n      : @155 (gas: 12)\n  4467: a0 = sp + 0xffffffffffffffe0\n  4470: a0 = a0 & 0xffffffffffffffe0\n  4473: u64 [s1 + 0x20] = a0\n  4476: sp = a0\n  4478: i32 a2 = a0 + 0\n  4480: a1 = 0x40\n  4483: a0 = u64 [s1 + 0x50]\n  4486: ra = 0x86\n  4490: ecalli 9 // 'hash_keccak_256'\n  4492: a3 = u64 [s1 + 0x20]\n  4495: t0 = 0x88\n  4499: jump @441\n      : @156 [@dyn 67] (gas: 2)\n  4502: a3 = u64 [s1 + 0x20]\n  4505: t0 = 136, jump @441\n      : @157 [@dyn 68] (gas: 7)\n  4511: a1 = u64 [s1 + 0x58]\n  4514: u64 [a1 + 0x18] = a3\n  4517: u64 [a1 + 0x10] = a2\n  4520: u64 [a1 + 0x8] = a4\n  4523: u64 [a1] = a0\n  4525: a0 = s1 + 0x5e0\n  4529: ra = 138, jump @11\n      : @158 [@dyn 69] (gas: 20)\n  4535: a3 = u64 [s1 + 0x5e0]\n  4539: a0 = u64 [s1 + 0x5e8]\n  4543: a1 = u64 [s1 + 0x5f0]\n  4547: a2 = u64 [s1 + 0x5f8]\n  4551: a4 = u64 [s1 + 0x98]\n  4555: u64 [s1 + 0x598] = a4\n  4559: a4 = u64 [s1 + 0x90]\n  4563: u64 [s1 + 0x590] = a4\n  4567: a4 = u64 [s1 + 0x88]\n  4571: u64 [s1 + 0x588] = a4\n  4575: a4 = u64 [s1 + 0x80]\n  4579: u64 [s1 + 0x580] = a4\n  4583: u64 [s1 + 0x5b8] = a2\n  4587: u64 [s1 + 0x5b0] = a1\n  4591: u64 [s1 + 0x5a8] = a0\n  4595: a0 = s1 + 0x5c0\n  4599: a1 = s1 + 0x5a0\n  4603: a2 = s1 + 0x580\n  4607: u64 [s1 + 0x5a0] = a3\n  4611: ra = 140, jump @282\n      : @159 [@dyn 70] (gas: 16)\n  4617: a4 = s1 + 0x500\n  4621: a0 = u64 [a4 + 0xd8]\n  4625: a1 = u64 [a4 + 0xd0]\n  4629: a2 = u64 [a4 + 0xc8]\n  4633: a3 = u64 [a4 + 0xc0]\n  4637: a4 = s1 + 0x7ff\n  4641: a4 = a4 + 0x19\n  4644: u64 [a4 + 0x300] = a0\n  4648: a0 = a4 + 0x200\n  4652: u64 [a0 + 0xf8] = a1\n  4656: u64 [a0 + 0xf0] = a2\n  4660: u64 [a0 + 0xe8] = a3\n  4664: a1 = s1 + 0x7ff\n  4668: a1 = a1 + 0x301\n  4672: a0 = u64 [s1 + 0x58]\n  4675: ra = 142, jump @12\n      : @160 [@dyn 71] (gas: 51)\n  4681: ecalli 11 // 'ref_time_left'\n  4683: a2 = u64 [s1 + 0x60]\n  4686: a1 = u64 [s1 + 0x38]\n  4689: u64 [a2 + 0x8] = a1\n  4692: a1 = u64 [s1 + 0x40]\n  4695: u64 [a2] = a1\n  4697: a1 = u64 [s1 + 0x30]\n  4700: u32 [a2 + 0x10] = a1\n  4703: a0 = a0 >u 0x8fc\n  4707: a1 = -a0\n  4709: a3 = s1 + 0x7ff\n  4713: a3 = a3 + 0x19\n  4716: a4 = a3 + 0x300\n  4720: u64 [a4 + 0x60] = a1\n  4723: u64 [a4 + 0x58] = a1\n  4726: u64 [a4 + 0x50] = a1\n  4729: u64 [a4 + 0x48] = a1\n  4732: a1 = u64 [s1 + 0x98]\n  4736: u64 [a4 + 0x20] = a1\n  4739: a1 = u64 [s1 + 0x90]\n  4743: u64 [a4 + 0x18] = a1\n  4746: a1 = u64 [s1 + 0x88]\n  4750: u64 [a4 + 0x10] = a1\n  4753: a1 = u64 [s1 + 0x80]\n  4757: u64 [a4 + 0x8] = a1\n  4760: u32 [a3 + 808] = 0\n  4764: a1 = a2 << 0x20\n  4767: a1 = a1 >> 0x20\n  4770: a0 = a0 << 0x23\n  4773: a0 = a0 | a1\n  4776: a1 = s1 + 0x7ff\n  4780: a1 = a1 + 0x321\n  4784: a1 = a1 << 0x20\n  4787: a1 = a1 >> 0x20\n  4790: a2 = s1 + 0x7ff\n  4794: a2 = a2 + 0x361\n  4798: a2 = a2 << 0x20\n  4801: a3 = a2 | a1\n  4804: a4 = u64 [s1 + 0x28]\n  4807: a4 = a4 << 0x20\n  4810: a4 = a4 >> 0x20\n  4813: a1 = s1 + 0x7ff\n  4817: a1 = a1 + 0x341\n  4821: a1 = a1 << 0x20\n  4824: a5 = a1 | a4\n  4827: a1 = 0xffffffffffffffff\n  4830: a2 = 0xffffffffffffffff\n  4833: ecalli 1 // 'call'\n  4835: u64 [s1 + 0x60] = a0\n  4838: a0 = s1 + 0x560\n  4842: ra = 144, jump @289\n      : @161 [@dyn 72] (gas: 2)\n  4848: a0 = u64 [s1 + 0x60]\n  4851: jump @231 if a0 != 0\n      : @162 (gas: 3)\n  4855: a0 = s1 + 0x520\n  4859: a1 = 0x40\n  4862: ra = 146, jump @7\n      : @163 [@dyn 73] (gas: 6)\n  4868: a4 = s1 + 0x500\n  4872: a0 = u64 [a4 + 0x38]\n  4875: a1 = u64 [a4 + 0x30]\n  4878: a2 = u64 [a4 + 0x28]\n  4881: a3 = u64 [a4 + 0x20]\n  4884: t0 = 148, jump @437\n      : @164 [@dyn 74] (gas: 1)\n  4890: jump @199 if a0 != 0\n      : @165 (gas: 13)\n  4894: a0 = u64 [s1 + 0x80]\n  4898: a2 = s1 + 0x500\n  4902: u64 [a2] = a0\n  4904: a0 = u64 [s1 + 0x88]\n  4908: u64 [a2 + 0x8] = a0\n  4911: a0 = u64 [s1 + 0x90]\n  4915: u64 [a2 + 0x10] = a0\n  4918: a1 = s1 + 0x500\n  4922: a0 = u64 [s1 + 0x98]\n  4926: u64 [a2 + 0x18] = a0\n  4929: a0 = a3\n  4931: u64 [s1 + 0x98] = a3\n  4935: ra = 150, jump @9\n      : @166 [@dyn 75] (gas: 21)\n  4941: u64 [s1 + 1240] = 0\n  4945: a0 = u64 [s1 + 0x48]\n  4948: a4 = s1 + 0x400\n  4952: u64 [a4 + 0xd0] = a0\n  4956: a0 = u64 [s1 + 0x70]\n  4959: u64 [a4 + 0xc8] = a0\n  4963: a0 = u64 [0x20000]\n  4968: a1 = u64 [0x20008]\n  4973: a2 = u64 [0x20010]\n  4978: a3 = u64 [s1 + 0x78]\n  4981: u64 [a4 + 0xc0] = a3\n  4985: u64 [a4 + 0xf8] = a0\n  4989: u64 [a4 + 0xf0] = a1\n  4993: u64 [a4 + 0xe8] = a2\n  4997: a0 = u64 [0x20018]\n  5002: a1 = 0x20\n  5005: a2 = s1 + 0x4e0\n  5009: a3 = s1 + 0x4c0\n  5013: u64 [a4 + 0xe0] = a0\n  5017: a0 = u64 [s1 + 0x98]\n  5021: ra = 152, jump @13\n      : @167 [@dyn 76] (gas: 5)\n  5027: a0 = 0\n  5029: a1 = u64 [s1 + 0x50]\n  5032: a2 = 0\n  5034: ecalli 14 // 'seal_return'\n  5036: jump @263\n      : @168 (gas: 3)\n  5039: a0 = u64 [s1 + 0x98]\n  5043: a0 = i32 [a0]\n  5045: jump @235 if a0 <=u 67\n      : @169 (gas: 2)\n  5050: a0 = s1 + 0x460\n  5054: ra = 154, jump @278\n      : @170 [@dyn 77] (gas: 25)\n  5060: a1 = s1 + 0x400\n  5064: a0 = u64 [a1 + 0x78]\n  5067: u64 [s1 + 0x60] = a0\n  5070: a0 = u64 [a1 + 0x70]\n  5073: u64 [s1 + 0x68] = a0\n  5076: a0 = u64 [a1 + 0x68]\n  5079: u64 [s1 + 0x90] = a0\n  5083: a0 = u64 [a1 + 0x60]\n  5086: u64 [s1 + 0x98] = a0\n  5090: a0 = s1 + 0x1000\n  5094: i32 a0 = a0 + 0xfffffffffffffa60\n  5098: a1 = 0x24\n  5101: ecalli 3 // 'call_data_load'\n  5103: a1 = s1 + 0x7ff\n  5107: a1 = a1 + 0x19\n  5110: a2 = a1 + 0x200\n  5114: a0 = u64 [a2 + 0x60]\n  5117: u64 [s1 + 0x88] = a0\n  5121: a0 = u64 [a2 + 0x58]\n  5124: u64 [s1 + 0x80] = a0\n  5128: a0 = u64 [a2 + 0x50]\n  5131: u64 [s1 + 0x78] = a0\n  5134: a0 = u64 [a2 + 0x48]\n  5137: u64 [s1 + 0x70] = a0\n  5140: ra = 156, jump @0\n      : @171 [@dyn 78] (gas: 14)\n  5146: a1 = u64 [0x300b8]\n  5151: u64 [s1 + 0x58] = a1\n  5154: a1 = u64 [0x300b0]\n  5159: u64 [s1 + 0x50] = a1\n  5162: a0 = u32 [0x300c0]\n  5167: u64 [s1 + 0x48] = a0\n  5170: a0 = 0x30070\n  5175: u64 [s1 + 0x40] = a0\n  5178: i32 a0 = a0 + 0\n  5180: ra = 0x9e\n  5184: ecalli 5 // 'caller'\n  5186: a2 = u64 [s1 + 0x40]\n  5189: t0 = 0xa0\n  5193: jump @438\n      : @172 [@dyn 79] (gas: 2)\n  5196: a2 = u64 [s1 + 0x40]\n  5199: t0 = 160, jump @438\n      : @173 [@dyn 80] (gas: 9)\n  5205: a2 = u64 [s1 + 0x48]\n  5208: a1 = a1 ^ a2\n  5211: a2 = u64 [s1 + 0x50]\n  5214: a0 = a0 ^ a2\n  5217: a0 = a0 | a1\n  5220: a1 = u64 [s1 + 0x58]\n  5223: a1 = a1 ^ a3\n  5226: a0 = a0 | a1\n  5229: jump @236 if a0 != 0\n      : @174 (gas: 10)\n  5233: a0 = s1 + 0x7ff\n  5237: a0 = a0 + 0x19\n  5240: u64 [a0 + 640] = 0\n  5244: u64 [a0 + 632] = 0\n  5248: u64 [a0 + 624] = 0\n  5252: u64 [a0 + 616] = 0\n  5256: a0 = s1 + 0x1000\n  5260: i32 a0 = a0 + 0xfffffffffffffa80\n  5264: ecalli 17 // 'value_transferred'\n  5266: fallthrough\n      : @175 (gas: 19)\n  5267: a2 = s1 + 0x7ff\n  5271: a2 = a2 + 0x19\n  5274: a3 = a2 + 0x200\n  5278: a0 = u64 [a3 + 0x80]\n  5282: a1 = u64 [a3 + 0x70]\n  5285: t0 = u64 [a2 + 0x268]\n  5289: a2 = u64 [a3 + 0x78]\n  5292: t1 = u64 [s1 + 0x88]\n  5296: a0 = a0 ^ t1\n  5299: a3 = u64 [s1 + 0x78]\n  5302: a1 = a1 ^ a3\n  5305: a0 = a0 | a1\n  5308: a5 = u64 [s1 + 0x80]\n  5312: a1 = a2 ^ a5\n  5315: a4 = u64 [s1 + 0x70]\n  5318: a2 = t0 ^ a4\n  5321: a1 = a1 | a2\n  5324: a0 = a0 | a1\n  5327: jump @240 if a0 != 0\n      : @176 (gas: 4)\n  5331: a0 = a4 | a5\n  5334: a1 = a3 | t1\n  5337: a0 = a0 | a1\n  5340: jump @244 if a0 == 0\n      : @177 (gas: 11)\n  5344: a0 = u64 [s1 + 0x98]\n  5348: a2 = s1 + 0x400\n  5352: u64 [a2] = a0\n  5354: a0 = u64 [s1 + 0x90]\n  5358: u64 [a2 + 0x8] = a0\n  5361: a0 = u64 [s1 + 0x60]\n  5364: u64 [a2 + 0x18] = a0\n  5367: a0 = s1 + 0x400\n  5371: a1 = u64 [s1 + 0x68]\n  5374: u64 [a2 + 0x10] = a1\n  5377: ra = 162, jump @354\n      : @178 [@dyn 81] (gas: 14)\n  5383: a0 = u64 [s1 + 0x68]\n  5386: a0 = a0 << 0x20\n  5389: a0 = a0 >> 0x20\n  5392: u64 [s1 + 1016] = 0\n  5396: u64 [s1 + 0x50] = a0\n  5399: a2 = s1 + 0x300\n  5403: u64 [a2 + 0xf0] = a0\n  5407: a0 = u64 [s1 + 0x90]\n  5411: u64 [a2 + 0xe8] = a0\n  5415: a1 = s1 + 0x3e0\n  5419: a0 = u64 [s1 + 0x98]\n  5423: u64 [a2 + 0xe0] = a0\n  5427: a0 = 0\n  5429: ra = 164, jump @9\n      : @179 [@dyn 82] (gas: 7)\n  5435: u64 [s1 + 984] = 0\n  5439: u64 [s1 + 976] = 0\n  5443: u64 [s1 + 968] = 0\n  5447: a0 = 0x20\n  5450: a1 = s1 + 0x3c0\n  5454: u64 [s1 + 960] = 0\n  5458: ra = 166, jump @9\n      : @180 [@dyn 83] (gas: 7)\n  5464: a0 = sp + 0xffffffffffffffe0\n  5467: a0 = a0 & 0xffffffffffffffe0\n  5470: u64 [s1 + 0x68] = a0\n  5473: sp = a0\n  5475: a2 = 0x20068\n  5480: a0 = i32 [0x20068]\n  5485: jump @182 if a0 >u 63\n      : @181 (gas: 2)\n  5489: u32 [0x20068] = 0x40\n  5495: fallthrough\n      : @182 (gas: 15)\n  5496: u64 [s1 + 0x48] = a2\n  5499: a0 = sp + 0xffffffffffffffe0\n  5502: a2 = a0 & 0xffffffffffffffe0\n  5505: u64 [s1 + 0x60] = a2\n  5508: sp = a2\n  5510: a0 = 0x20070\n  5515: i32 a0 = a0 + 0\n  5517: i32 a2 = a2 + 0\n  5519: a1 = 0x40\n  5522: u64 [s1 + 0x58] = a0\n  5525: ra = 0xa8\n  5529: ecalli 9 // 'hash_keccak_256'\n  5531: a3 = u64 [s1 + 0x60]\n  5534: t0 = 0xaa\n  5538: jump @441\n      : @183 [@dyn 84] (gas: 2)\n  5541: a3 = u64 [s1 + 0x60]\n  5544: t0 = 170, jump @441\n      : @184 [@dyn 85] (gas: 7)\n  5550: a1 = u64 [s1 + 0x68]\n  5553: u64 [a1 + 0x18] = a3\n  5556: u64 [a1 + 0x10] = a2\n  5559: u64 [a1 + 0x8] = a4\n  5562: u64 [a1] = a0\n  5564: a0 = s1 + 0x3a0\n  5568: ra = 172, jump @11\n      : @185 [@dyn 86] (gas: 38)\n  5574: t2 = u64 [s1 + 0x3b8]\n  5578: a1 = s1 + 0x300\n  5582: a0 = u64 [a1 + 0xb0]\n  5586: a4 = u64 [a1 + 0xa0]\n  5590: a5 = u64 [a1 + 0xa8]\n  5594: a1 = sp + 0xffffffffffffffe0\n  5597: a1 = a1 & 0xffffffffffffffe0\n  5600: sp = a1\n  5602: a3 = u64 [s1 + 0x78]\n  5605: a3 = a3 + a5\n  5608: t0 = u64 [s1 + 0x70]\n  5611: t0 = t0 + a4\n  5614: a4 = t0 <u a4\n  5617: a3 = a3 + a4\n  5620: t1 = a3 ^ a5\n  5623: a2 = a3 <u a5\n  5626: a2 = a4 if t1 == 0\n  5629: a4 = u64 [s1 + 0x80]\n  5633: a4 = a4 + a0\n  5636: a5 = a4 + a2\n  5639: t1 = a5 <u a4\n  5642: ra = u64 [s1 + 0x88]\n  5646: ra = ra + t2\n  5649: a4 = a4 <u a0\n  5652: a4 = a4 + ra\n  5655: ra = a4 + t1\n  5658: t1 = a5 <u a0\n  5661: a4 = t2 ^ ra\n  5664: t2 = ra <u t2\n  5667: t2 = t1 if a4 == 0\n  5670: a0 = a0 ^ a5\n  5673: a0 = a0 | a4\n  5676: t2 = a2 if a0 == 0\n  5679: u64 [a1 + 0x10] = a5\n  5682: u64 [a1 + 0x8] = a3\n  5685: u64 [a1] = t0\n  5687: u64 [a1 + 0x18] = ra\n  5690: jump @249 if t2 != 0\n      : @186 (gas: 2)\n  5694: a0 = u64 [s1 + 0x68]\n  5697: ra = 174, jump @12\n      : @187 [@dyn 87] (gas: 3)\n  5703: a0 = s1 + 0x380\n  5707: a1 = 0x40\n  5710: ra = 176, jump @7\n      : @188 [@dyn 88] (gas: 6)\n  5716: a4 = s1 + 0x300\n  5720: a0 = u64 [a4 + 0x98]\n  5724: a1 = u64 [a4 + 0x90]\n  5728: a2 = u64 [a4 + 0x88]\n  5732: a3 = u64 [a4 + 0x80]\n  5736: t0 = 178, jump @437\n      : @189 [@dyn 89] (gas: 1)\n  5742: jump @199 if a0 != 0\n      : @190 (gas: 12)\n  5746: a0 = u64 [s1 + 0x70]\n  5749: u64 [s1 + 0x360] = a0\n  5753: a0 = u64 [s1 + 0x78]\n  5756: u64 [s1 + 0x368] = a0\n  5760: a0 = u64 [s1 + 0x80]\n  5764: u64 [s1 + 0x370] = a0\n  5768: a1 = s1 + 0x360\n  5772: a0 = u64 [s1 + 0x88]\n  5776: u64 [s1 + 0x378] = a0\n  5780: a0 = a3\n  5782: u64 [s1 + 0x88] = a3\n  5786: ra = 180, jump @9\n      : @191 [@dyn 90] (gas: 21)\n  5792: u64 [s1 + 824] = 0\n  5796: a0 = u64 [s1 + 0x50]\n  5799: a4 = s1 + 0x300\n  5803: u64 [a4 + 0x30] = a0\n  5806: a0 = u64 [s1 + 0x90]\n  5810: u64 [a4 + 0x28] = a0\n  5813: a0 = u64 [0x20020]\n  5818: a1 = u64 [0x20028]\n  5823: a2 = u64 [0x20030]\n  5828: a3 = u64 [s1 + 0x98]\n  5832: u64 [a4 + 0x20] = a3\n  5835: u64 [a4 + 0x58] = a0\n  5838: u64 [a4 + 0x50] = a1\n  5841: u64 [a4 + 0x48] = a2\n  5844: a0 = u64 [0x20038]\n  5849: a1 = 0x20\n  5852: a2 = s1 + 0x340\n  5856: a3 = s1 + 0x320\n  5860: u64 [a4 + 0x40] = a0\n  5863: a0 = u64 [s1 + 0x88]\n  5867: ra = 182, jump @13\n      : @192 [@dyn 91] (gas: 5)\n  5873: a0 = 0\n  5875: a1 = u64 [s1 + 0x58]\n  5878: a2 = 0\n  5880: ecalli 14 // 'seal_return'\n  5882: jump @263\n      : @193 (gas: 8)\n  5885: u64 [a2 + 544] = 0\n  5889: u64 [a2 + 536] = 0\n  5893: u64 [a2 + 528] = 0\n  5897: u64 [a2 + 520] = 0\n  5901: a0 = s1 + 0x1000\n  5905: i32 a0 = a0 + 0xfffffffffffffa20\n  5909: ecalli 17 // 'value_transferred'\n  5911: fallthrough\n      : @194 (gas: 11)\n  5912: a3 = s1 + 0x7ff\n  5916: a3 = a3 + 0x19\n  5919: a4 = a3 + 0x200\n  5923: a0 = u64 [a4 + 0x18]\n  5926: a1 = u64 [a4 + 0x20]\n  5929: a2 = u64 [a4 + 0x10]\n  5932: a3 = u64 [a4 + 0x8]\n  5935: a1 = a1 | a2\n  5938: a0 = a0 | a3\n  5941: a0 = a0 | a1\n  5944: jump @254 if a0 != 0\n      : @195 (gas: 3)\n  5948: a0 = u64 [s1 + 0x98]\n  5952: a0 = i32 [a0]\n  5954: jump @255 if a0 <=u 3\n      : @196 (gas: 3)\n  5959: a0 = s1 + 0x260\n  5963: a1 = 0x40\n  5966: ra = 184, jump @7\n      : @197 [@dyn 92] (gas: 10)\n  5972: a1 = s1 + 0x200\n  5976: a0 = u64 [a1 + 0x78]\n  5979: u64 [s1 + 0x98] = a0\n  5983: a0 = u64 [a1 + 0x70]\n  5986: u64 [s1 + 0x90] = a0\n  5990: a0 = u64 [a1 + 0x68]\n  5993: u64 [s1 + 0x80] = a0\n  5997: a0 = u64 [a1 + 0x60]\n  6000: u64 [s1 + 0x88] = a0\n  6004: ra = 186, jump @0\n      : @198 [@dyn 93] (gas: 13)\n  6010: a0 = u64 [s1 + 0x98]\n  6014: a1 = u64 [s1 + 0x80]\n  6018: a0 = a0 | a1\n  6021: a1 = u64 [s1 + 0x88]\n  6025: a3 = a1\n  6027: a2 = u64 [s1 + 0x90]\n  6031: a1 = a1 | a2\n  6034: a1 = a1 | a0\n  6037: a1 = a1 >> 0x20\n  6040: a0 = a0 | a2\n  6043: a0 = a0 << 0x20\n  6046: a0 = a0 | a1\n  6049: jump @256 if a0 == 0\n      : @199 (gas: 1)\n  6053: trap\n      : @200 (gas: 6)\n  6054: a1 = 0x20070\n  6059: i32 a1 = a1 + 0\n  6061: a0 = 0x1\n  6064: a2 = 0\n  6066: ecalli 14 // 'seal_return'\n  6068: jump @263\n      : @201 (gas: 6)\n  6071: a1 = 0x20070\n  6076: i32 a1 = a1 + 0\n  6078: a0 = 0x1\n  6081: a2 = 0\n  6083: ecalli 14 // 'seal_return'\n  6085: jump @263\n      : @202 (gas: 6)\n  6088: a1 = 0x20070\n  6093: i32 a1 = a1 + 0\n  6095: a0 = 0x1\n  6098: a2 = 0\n  6100: ecalli 14 // 'seal_return'\n  6102: jump @263\n      : @203 (gas: 6)\n  6105: a1 = 0x20070\n  6110: i32 a1 = a1 + 0\n  6112: a0 = 0x1\n  6115: a2 = 0\n  6117: ecalli 14 // 'seal_return'\n  6119: jump @263\n      : @204 (gas: 8)\n  6122: u64 [s1 + 1936] = 0\n  6126: u64 [s1 + 1928] = 0\n  6130: u64 [s1 + 1920] = 0\n  6134: a0 = 0xc39fa00400000000\n  6144: a1 = s1 + 0x780\n  6148: u64 [s1 + 0x798] = a0\n  6152: a0 = 0\n  6154: ra = 188, jump @9\n      : @205 [@dyn 94] (gas: 2)\n  6160: a1 = i32 [0x20068]\n  6165: jump @207 if a1 >u 31\n      : @206 (gas: 3)\n  6169: u32 [0x20068] = 0x20\n  6175: a1 = 0x20070\n  6180: jump @248\n      : @207 (gas: 2)\n  6183: a1 = 0x20070\n  6188: jump @248\n      : @208 (gas: 6)\n  6191: a1 = 0x20070\n  6196: i32 a1 = a1 + 0\n  6198: a0 = 0x1\n  6201: a2 = 0\n  6203: ecalli 14 // 'seal_return'\n  6205: jump @263\n      : @209 (gas: 6)\n  6208: a1 = 0x20070\n  6213: i32 a1 = a1 + 0\n  6215: a0 = 0x1\n  6218: a2 = 0\n  6220: ecalli 14 // 'seal_return'\n  6222: jump @263\n      : @210 (gas: 6)\n  6225: a1 = 0x20070\n  6230: i32 a1 = a1 + 0\n  6232: a0 = 0x1\n  6235: a2 = 0\n  6237: ecalli 14 // 'seal_return'\n  6239: jump @263\n      : @211 (gas: 6)\n  6242: a1 = 0x20070\n  6247: i32 a1 = a1 + 0\n  6249: a0 = 0x1\n  6252: a2 = 0\n  6254: ecalli 14 // 'seal_return'\n  6256: jump @263\n      : @212 (gas: 6)\n  6259: a1 = 0x20070\n  6264: i32 a1 = a1 + 0\n  6266: a0 = 0x1\n  6269: a2 = 0\n  6271: ecalli 14 // 'seal_return'\n  6273: jump @263\n      : @213 (gas: 6)\n  6276: a1 = 0x20070\n  6281: i32 a1 = a1 + 0\n  6283: a0 = 0x1\n  6286: a2 = 0\n  6288: ecalli 14 // 'seal_return'\n  6290: jump @263\n      : @214 (gas: 1)\n  6293: jump @260 if a0 != 753512109\n      : @215 (gas: 10)\n  6301: a0 = s1 + 0x7ff\n  6305: a0 = a0 + 0x19\n  6308: u64 [a0 + 352] = 0\n  6312: u64 [a0 + 344] = 0\n  6316: u64 [a0 + 336] = 0\n  6320: u64 [a0 + 328] = 0\n  6324: a0 = s1 + 0x1000\n  6328: i32 a0 = a0 + 0xfffffffffffff960\n  6332: ecalli 17 // 'value_transferred'\n  6334: fallthrough\n      : @216 (gas: 11)\n  6335: a3 = s1 + 0x7ff\n  6339: a3 = a3 + 0x19\n  6342: a4 = a3 + 0x100\n  6346: a0 = u64 [a4 + 0x58]\n  6349: a1 = u64 [a4 + 0x60]\n  6352: a2 = u64 [a4 + 0x50]\n  6355: a3 = u64 [a4 + 0x48]\n  6358: a1 = a1 | a2\n  6361: a0 = a0 | a3\n  6364: a0 = a0 | a1\n  6367: jump @264 if a0 == 0\n      : @217 (gas: 6)\n  6371: a1 = 0x20070\n  6376: i32 a1 = a1 + 0\n  6378: a0 = 0x1\n  6381: a2 = 0\n  6383: ecalli 14 // 'seal_return'\n  6385: jump @263\n      : @218 (gas: 6)\n  6388: a1 = 0x20070\n  6393: i32 a1 = a1 + 0\n  6395: a0 = 0x1\n  6398: a2 = 0\n  6400: ecalli 14 // 'seal_return'\n  6402: jump @263\n      : @219 (gas: 6)\n  6405: a1 = 0x20070\n  6410: i32 a1 = a1 + 0\n  6412: a0 = 0x1\n  6415: a2 = 0\n  6417: ecalli 14 // 'seal_return'\n  6419: jump @263\n      : @220 (gas: 6)\n  6422: a1 = 0x20070\n  6427: i32 a1 = a1 + 0\n  6429: a0 = 0x1\n  6432: a2 = 0\n  6434: ecalli 14 // 'seal_return'\n  6436: jump @263\n      : @221 (gas: 6)\n  6439: a1 = 0x20070\n  6444: i32 a1 = a1 + 0\n  6446: a0 = 0x1\n  6449: a2 = 0\n  6451: ecalli 14 // 'seal_return'\n  6453: jump @263\n      : @222 (gas: 8)\n  6456: u64 [s1 + 1744] = 0\n  6460: u64 [s1 + 1736] = 0\n  6464: u64 [s1 + 1728] = 0\n  6468: a0 = 0xc39fa00400000000\n  6478: a1 = s1 + 0x6c0\n  6482: u64 [s1 + 0x6d8] = a0\n  6486: a0 = 0\n  6488: ra = 190, jump @9\n      : @223 [@dyn 95] (gas: 2)\n  6494: a1 = i32 [0x20068]\n  6499: jump @225 if a1 >u 31\n      : @224 (gas: 3)\n  6503: u32 [0x20068] = 0x20\n  6509: a1 = 0x20070\n  6514: jump @248\n      : @225 (gas: 2)\n  6517: a1 = 0x20070\n  6522: jump @248\n      : @226 (gas: 8)\n  6525: u64 [s1 + 1168] = 0\n  6529: u64 [s1 + 1160] = 0\n  6533: u64 [s1 + 1152] = 0\n  6537: a0 = 0x2c5211c600000000\n  6547: a1 = s1 + 0x480\n  6551: u64 [s1 + 0x498] = a0\n  6555: a0 = 0\n  6557: ra = 192, jump @9\n      : @227 [@dyn 96] (gas: 2)\n  6563: a1 = i32 [0x20068]\n  6568: jump @229 if a1 >u 31\n      : @228 (gas: 3)\n  6572: u32 [0x20068] = 0x20\n  6578: a1 = 0x20070\n  6583: jump @248\n      : @229 (gas: 2)\n  6586: a1 = 0x20070\n  6591: jump @248\n      : @230 (gas: 9)\n  6594: u64 [s1 + 1200] = 0\n  6598: u64 [s1 + 1192] = 0\n  6602: u64 [s1 + 1184] = 0\n  6606: a0 = 0xf4d678b800000000\n  6616: a1 = s1 + 0x4a0\n  6620: u64 [s1 + 0x4b8] = a0\n  6624: a0 = 0\n  6626: ra = 0xc2\n  6630: jump @9\n      : @231 (gas: 8)\n  6633: u64 [s1 + 1360] = 0\n  6637: u64 [s1 + 1352] = 0\n  6641: u64 [s1 + 1344] = 0\n  6645: a0 = 0x90b8ec1800000000\n  6655: a1 = s1 + 0x540\n  6659: u64 [s1 + 0x558] = a0\n  6663: a0 = 0\n  6665: ra = 194, jump @9\n      : @232 [@dyn 97] (gas: 3)\n  6671: a0 = u64 [s1 + 0x68]\n  6674: a0 = i32 [a0]\n  6676: jump @234 if a0 >u 31\n      : @233 (gas: 3)\n  6680: a1 = u64 [s1 + 0x68]\n  6683: u32 [a1 + 0] = 0x20\n  6686: fallthrough\n      : @234 (gas: 5)\n  6687: a0 = 0x1\n  6690: a2 = 0x4\n  6693: a1 = u64 [s1 + 0x50]\n  6696: ecalli 14 // 'seal_return'\n  6698: fallthrough\n      : @235 (gas: 6)\n  6699: a1 = 0x20070\n  6704: i32 a1 = a1 + 0\n  6706: a0 = 0x1\n  6709: a2 = 0\n  6711: ecalli 14 // 'seal_return'\n  6713: jump @263\n      : @236 (gas: 8)\n  6716: u64 [s1 + 1104] = 0\n  6720: u64 [s1 + 1096] = 0\n  6724: u64 [s1 + 1088] = 0\n  6728: a0 = 0xc39fa00400000000\n  6738: a1 = s1 + 0x440\n  6742: u64 [s1 + 0x458] = a0\n  6746: a0 = 0\n  6748: ra = 196, jump @9\n      : @237 [@dyn 98] (gas: 2)\n  6754: a1 = i32 [0x20068]\n  6759: jump @239 if a1 >u 31\n      : @238 (gas: 3)\n  6763: u32 [0x20068] = 0x20\n  6769: a1 = 0x20070\n  6774: jump @248\n      : @239 (gas: 2)\n  6777: a1 = 0x20070\n  6782: jump @248\n      : @240 (gas: 8)\n  6785: u64 [s1 + 1072] = 0\n  6789: u64 [s1 + 1064] = 0\n  6793: u64 [s1 + 1056] = 0\n  6797: a0 = 0x2c5211c600000000\n  6807: a1 = s1 + 0x420\n  6811: u64 [s1 + 0x438] = a0\n  6815: a0 = 0\n  6817: ra = 198, jump @9\n      : @241 [@dyn 99] (gas: 2)\n  6823: a1 = i32 [0x20068]\n  6828: jump @243 if a1 >u 31\n      : @242 (gas: 3)\n  6832: u32 [0x20068] = 0x20\n  6838: a1 = 0x20070\n  6843: jump @248\n      : @243 (gas: 2)\n  6845: a1 = 0x20070\n  6850: jump @248\n      : @244 (gas: 8)\n  6852: u64 [s1 + 720] = 0\n  6856: u64 [s1 + 712] = 0\n  6860: u64 [s1 + 704] = 0\n  6864: a0 = 0x2c5211c600000000\n  6874: a1 = s1 + 0x2c0\n  6878: u64 [s1 + 0x2d8] = a0\n  6882: a0 = 0\n  6884: ra = 200, jump @9\n      : @245 [@dyn 100] (gas: 2)\n  6890: a1 = i32 [0x20068]\n  6895: jump @247 if a1 >u 31\n      : @246 (gas: 3)\n  6899: u32 [0x20068] = 0x20\n  6905: a1 = 0x20070\n  6910: jump @248\n      : @247 (gas: 2)\n  6912: a1 = 0x20070\n  6917: fallthrough\n      : @248 (gas: 5)\n  6918: i32 a1 = a1 + 0\n  6920: a0 = 0x1\n  6923: a2 = 0x4\n  6926: ecalli 14 // 'seal_return'\n  6928: fallthrough\n      : @249 (gas: 8)\n  6929: u64 [s1 + 784] = 0\n  6933: u64 [s1 + 776] = 0\n  6937: u64 [s1 + 768] = 0\n  6941: a0 = 0x4e487b7100000000\n  6951: a1 = s1 + 0x300\n  6955: u64 [s1 + 0x318] = a0\n  6959: a0 = 0\n  6961: ra = 202, jump @9\n      : @250 [@dyn 101] (gas: 7)\n  6967: u64 [s1 + 760] = 0\n  6971: u64 [s1 + 752] = 0\n  6975: u64 [s1 + 736] = 0x11\n  6980: a0 = 0x4\n  6983: a1 = s1 + 0x2e0\n  6987: u64 [s1 + 744] = 0\n  6991: ra = 204, jump @9\n      : @251 [@dyn 102] (gas: 3)\n  6997: a0 = u64 [s1 + 0x48]\n  7000: a0 = i32 [a0]\n  7002: jump @253 if a0 >u 63\n      : @252 (gas: 3)\n  7006: a1 = u64 [s1 + 0x48]\n  7009: u32 [a1 + 0] = 0x40\n  7012: fallthrough\n      : @253 (gas: 5)\n  7013: a0 = 0x1\n  7016: a2 = 0x24\n  7019: a1 = u64 [s1 + 0x58]\n  7022: ecalli 14 // 'seal_return'\n  7024: fallthrough\n      : @254 (gas: 6)\n  7025: a1 = 0x20070\n  7030: i32 a1 = a1 + 0\n  7032: a0 = 0x1\n  7035: a2 = 0\n  7037: ecalli 14 // 'seal_return'\n  7039: jump @263\n      : @255 (gas: 6)\n  7041: a1 = 0x20070\n  7046: i32 a1 = a1 + 0\n  7048: a0 = 0x1\n  7051: a2 = 0\n  7053: ecalli 14 // 'seal_return'\n  7055: jump @263\n      : @256 (gas: 11)\n  7057: a2 = u64 [0x300b0]\n  7062: a1 = u64 [0x300b8]\n  7067: a0 = u32 [0x300c0]\n  7072: u64 [s1 + 600] = 0\n  7076: a4 = s1 + 0x200\n  7080: u64 [a4 + 0x50] = a0\n  7083: u64 [a4 + 0x48] = a1\n  7086: a1 = s1 + 0x240\n  7090: u64 [a4 + 0x40] = a2\n  7093: a0 = a3\n  7095: ra = 206, jump @9\n      : @257 [@dyn 103] (gas: 3)\n  7101: a1 = 0x20\n  7104: a0 = u64 [s1 + 0x88]\n  7108: ra = 208, jump @15\n      : @258 [@dyn 104] (gas: 2)\n  7114: i32 a1 = a0 + 0\n  7116: fallthrough\n      : @259 (gas: 6)\n  7117: a2 = 0x20\n  7120: a0 = 0\n  7122: ecalli 14 // 'seal_return'\n  7124: a0 = u64 [s1 + 0x98]\n  7128: a0 = i32 [a0]\n  7130: jump @261\n      : @260 (gas: 3)\n  7132: a0 = u64 [s1 + 0x98]\n  7136: a0 = i32 [a0]\n  7138: fallthrough\n      : @261 (gas: 1)\n  7139: jump @263 if a0 == 0\n      : @262 (gas: 6)\n  7142: a1 = 0x20070\n  7147: i32 a1 = a1 + 0\n  7149: a0 = 0x1\n  7152: a2 = 0\n  7154: ecalli 14 // 'seal_return'\n  7156: fallthrough\n      : @263 (gas: 6)\n  7157: a1 = 0x20070\n  7162: i32 a1 = a1 + 0\n  7164: a0 = 0\n  7166: a2 = 0\n  7168: ecalli 14 // 'seal_return'\n  7170: jump @263\n      : @264 (gas: 3)\n  7172: a0 = u64 [s1 + 0x98]\n  7176: a0 = i32 [a0]\n  7178: jump @266 if a0 >u 35\n      : @265 (gas: 6)\n  7182: a1 = 0x20070\n  7187: i32 a1 = a1 + 0\n  7189: a0 = 0x1\n  7192: a2 = 0\n  7194: ecalli 14 // 'seal_return'\n  7196: jump @263\n      : @266 (gas: 2)\n  7198: a0 = s1 + 0x120\n  7202: ra = 210, jump @278\n      : @267 [@dyn 105] (gas: 11)\n  7208: a3 = s1 + 0x100\n  7212: a0 = u64 [a3 + 0x20]\n  7215: a1 = u64 [a3 + 0x28]\n  7218: a2 = u32 [s1 + 0x130]\n  7222: u64 [s1 + 280] = 0\n  7226: u64 [a3 + 0x10] = a2\n  7229: u64 [a3 + 0x8] = a1\n  7232: a1 = s1 + 0x100\n  7236: u64 [a3] = a0\n  7238: a0 = 0\n  7240: ra = 212, jump @9\n      : @268 [@dyn 106] (gas: 7)\n  7246: u64 [s1 + 248] = 0\n  7250: u64 [s1 + 240] = 0\n  7254: u64 [s1 + 224] = 0x1\n  7259: a0 = 0x20\n  7262: a1 = s1 + 0xe0\n  7266: u64 [s1 + 232] = 0\n  7270: ra = 214, jump @9\n      : @269 [@dyn 107] (gas: 4)\n  7276: a0 = 0x20068\n  7281: u64 [s1 + 0x98] = a0\n  7285: a0 = i32 [0x20068]\n  7290: jump @271 if a0 >u 63\n      : @270 (gas: 3)\n  7294: a1 = u64 [s1 + 0x98]\n  7298: u32 [a1 + 0] = 0x40\n  7301: fallthrough\n      : @271 (gas: 14)\n  7302: a0 = sp + 0xffffffffffffffe0\n  7305: a2 = a0 & 0xffffffffffffffe0\n  7308: u64 [s1 + 0x88] = a2\n  7312: sp = a2\n  7314: a0 = 0x20070\n  7319: u64 [s1 + 0x90] = a0\n  7323: i32 a0 = a0 + 0\n  7325: i32 a2 = a2 + 0\n  7327: a1 = 0x40\n  7330: ra = 0xd8\n  7334: ecalli 9 // 'hash_keccak_256'\n  7336: a3 = u64 [s1 + 0x88]\n  7340: t0 = 0xda\n  7344: jump @439\n      : @272 [@dyn 108] (gas: 2)\n  7347: a3 = u64 [s1 + 0x88]\n  7351: t0 = 218, jump @439\n      : @273 [@dyn 109] (gas: 8)\n  7357: u64 [a5 + 0x80] = a3\n  7361: u64 [a5 + 0x78] = a2\n  7364: u64 [a5 + 0x70] = a1\n  7367: u64 [a5 + 0x68] = a0\n  7370: a0 = s1 + 0xc0\n  7374: a1 = s1 + 0x7ff\n  7378: a1 = a1 + 0x181\n  7382: ra = 220, jump @11\n      : @274 [@dyn 110] (gas: 11)\n  7388: a2 = u64 [s1 + 0xc0]\n  7392: a0 = u64 [s1 + 0xc8]\n  7396: a1 = u64 [s1 + 0xd0]\n  7400: a3 = u64 [s1 + 0xd8]\n  7404: u64 [s1 + 0xb8] = a3\n  7408: u64 [s1 + 0xb0] = a1\n  7412: u64 [s1 + 0xa8] = a0\n  7416: a0 = 0x80\n  7420: a1 = s1 + 0xa0\n  7424: u64 [s1 + 0xa0] = a2\n  7428: ra = 222, jump @9\n      : @275 [@dyn 111] (gas: 3)\n  7434: a0 = u64 [s1 + 0x98]\n  7438: a0 = i32 [a0]\n  7440: jump @277 if a0 >u 159\n      : @276 (gas: 5)\n  7445: a1 = u64 [s1 + 0x98]\n  7449: u32 [a1 + 0] = 0xa0\n  7453: a0 = u64 [s1 + 0x90]\n  7457: i32 a1 = a0 + 0x80\n  7461: jump @259\n      : @277 (gas: 3)\n  7464: a0 = u64 [s1 + 0x90]\n  7468: i32 a1 = a0 + 0x80\n  7472: jump @259\n      : @278 (gas: 11)\n  7475: sp = sp + 0xffffffffffffffc0\n  7478: u64 [sp + 0x38] = ra\n  7481: u64 [sp + 0x30] = s0\n  7484: u64 [sp + 0x28] = s1\n  7487: s0 = sp + 0x40\n  7490: sp = sp & 0xffffffffffffffe0\n  7493: s1 = a0\n  7495: i32 a0 = sp + 0\n  7497: a1 = 0x4\n  7500: ecalli 3 // 'call_data_load'\n  7502: fallthrough\n      : @279 (gas: 10)\n  7503: a0 = u64 [sp + 0x10]\n  7506: a1 = u64 [sp + 0x18]\n  7509: a2 = 0x100000000\n  7519: a2 = a2 ^ a0\n  7522: a2 = a2 | a1\n  7525: a3 = a0 >> 0x20\n  7528: a3 = a3 <u 0x1\n  7531: a3 = 0 if a1 != 0\n  7533: a3 = 0 if a2 == 0\n  7535: jump @281 if a3 == 0\n      : @280 (gas: 12)\n  7538: a2 = u64 [sp]\n  7540: a3 = u64 [sp + 0x8]\n  7543: u64 [s1] = a2\n  7545: u64 [s1 + 0x8] = a3\n  7548: u64 [s1 + 0x10] = a0\n  7551: u64 [s1 + 0x18] = a1\n  7554: sp = s0 + 0xffffffffffffffc0\n  7557: ra = u64 [sp + 0x38]\n  7560: s0 = u64 [sp + 0x30]\n  7563: s1 = u64 [sp + 0x28]\n  7566: sp = sp + 0x40\n  7569: ret\n      : @281 (gas: 7)\n  7571: a1 = 0x20070\n  7576: i32 a1 = a1 + 0\n  7578: a0 = 0x1\n  7581: a2 = 0\n  7583: ra = 0xe0\n  7587: ecalli 14 // 'seal_return'\n  7589: fallthrough\n      : @282 [@dyn 112] (gas: 30)\n  7590: sp = sp + 0xffffffffffffff80\n  7593: u64 [sp + 0x78] = ra\n  7596: u64 [sp + 0x70] = s0\n  7599: u64 [sp + 0x68] = s1\n  7602: s0 = sp + 0x80\n  7606: sp = sp & 0xfffffffffffffff0\n  7609: a4 = u64 [a2]\n  7611: a3 = u64 [a1]\n  7613: s1 = u64 [a2 + 0x8]\n  7616: t1 = u64 [a1 + 0x8]\n  7619: t2 = u64 [a2 + 0x10]\n  7622: a5 = u64 [a1 + 0x10]\n  7625: a2 = u64 [a2 + 0x18]\n  7628: a1 = u64 [a1 + 0x18]\n  7631: t0 = t1 ^ s1\n  7634: u64 [sp + 0x8] = s1\n  7637: s1 = t1 <u s1\n  7640: u64 [sp + 0x18] = a4\n  7643: u64 [sp + 0x10] = a3\n  7646: a3 = a3 <u a4\n  7649: u64 [sp] = a3\n  7651: s1 = a3 if t0 == 0\n  7654: a3 = a1 ^ a2\n  7657: ra = a1 <u a2\n  7660: t0 = a5 <u t2\n  7663: ra = t0 if a3 == 0\n  7666: a4 = a5 ^ t2\n  7669: a3 = a3 | a4\n  7672: ra = s1 if a3 == 0\n  7675: jump @284 if ra != 0\n      : @283 (gas: 23)\n  7678: a3 = a5 - t2\n  7681: a1 = a1 - a2\n  7684: a1 = a1 - t0\n  7687: a2 = a3 <u s1\n  7690: a1 = a1 - a2\n  7693: a3 = a3 - s1\n  7696: a2 = u64 [sp + 0x8]\n  7699: a2 = t1 - a2\n  7702: a4 = u64 [sp]\n  7704: a2 = a2 - a4\n  7707: a4 = u64 [sp + 0x18]\n  7710: a5 = u64 [sp + 0x10]\n  7713: a4 = a5 - a4\n  7716: u64 [a0] = a4\n  7718: u64 [a0 + 0x8] = a2\n  7721: u64 [a0 + 0x10] = a3\n  7724: u64 [a0 + 0x18] = a1\n  7727: sp = s0 + 0xffffffffffffff80\n  7730: ra = u64 [sp + 0x78]\n  7733: s0 = u64 [sp + 0x70]\n  7736: s1 = u64 [sp + 0x68]\n  7739: sp = sp + 0x80\n  7743: ret\n      : @284 (gas: 8)\n  7745: u64 [sp + 80] = 0\n  7748: u64 [sp + 72] = 0\n  7751: u64 [sp + 64] = 0\n  7754: a0 = 0x4e487b7100000000\n  7764: a1 = sp + 0x40\n  7767: u64 [sp + 0x58] = a0\n  7770: a0 = 0\n  7772: ra = 226, jump @9\n      : @285 [@dyn 113] (gas: 7)\n  7778: u64 [sp + 56] = 0\n  7781: u64 [sp + 48] = 0\n  7784: u64 [sp + 32] = 0x11\n  7788: a0 = 0x4\n  7791: a1 = sp + 0x20\n  7794: u64 [sp + 40] = 0\n  7797: ra = 228, jump @9\n      : @286 [@dyn 114] (gas: 2)\n  7803: a1 = i32 [0x20068]\n  7808: jump @288 if a1 >u 63\n      : @287 (gas: 2)\n  7812: u32 [0x20068] = 0x40\n  7818: fallthrough\n      : @288 (gas: 7)\n  7819: a1 = 0x20070\n  7824: i32 a1 = a1 + 0\n  7826: a0 = 0x1\n  7829: a2 = 0x24\n  7832: ra = 0xe6\n  7836: ecalli 14 // 'seal_return'\n  7838: fallthrough\n      : @289 [@dyn 115] (gas: 9)\n  7839: sp = sp + 0xffffffffffffff00\n  7843: u64 [sp + 0xf8] = ra\n  7847: u64 [sp + 0xf0] = s0\n  7851: u64 [sp + 0xe8] = s1\n  7855: s0 = sp + 0x100\n  7859: sp = sp & 0xffffffffffffffe0\n  7862: s1 = a0\n  7864: ecalli 13 // 'return_data_size'\n  7866: fallthrough\n      : @290 (gas: 1)\n  7867: jump @304 if a0 == 0\n      : @291 (gas: 6)\n  7871: u64 [sp + 0x10] = s1\n  7874: ecalli 13 // 'return_data_size'\n  7876: s1 = a0\n  7878: a0 = sp + 0xc0\n  7882: a1 = 0x40\n  7885: ra = 232, jump @7\n      : @292 [@dyn 116] (gas: 30)\n  7891: t1 = u64 [sp + 0xd8]\n  7895: t2 = u64 [sp + 0xd0]\n  7899: ra = u64 [sp + 0xc8]\n  7903: t0 = u64 [sp + 0xc0]\n  7907: a0 = s1 + 0x1f\n  7910: u64 [sp + 0x18] = s1\n  7913: a1 = a0 <u s1\n  7916: a0 = a0 & 0xffffffffffffffe0\n  7919: a2 = a0 + 0x3f\n  7922: a0 = a2 <u a0\n  7925: a3 = a1 + a0\n  7928: a2 = a2 & 0xffffffffffffffe0\n  7931: a1 = a3 + ra\n  7934: u64 [sp + 0x38] = t0\n  7937: t0 = t0 + a2\n  7940: a2 = t0 <u a2\n  7943: a1 = a1 + a2\n  7946: a4 = a1 ^ a3\n  7949: a3 = a1 <u a3\n  7952: a3 = a2 if a4 == 0\n  7955: a3 = a3 + t2\n  7958: a4 = a3 <u t2\n  7961: a2 = t1 + a4\n  7964: a5 = a3 >u 0\n  7966: s1 = a2 >u 0\n  7968: s1 = a5 if a2 == 0\n  7971: a5 = a3 | a2\n  7974: a0 = a1 >u 0\n  7976: a0 = s1 if a5 != 0\n  7979: jump @306 if a0 != 0\n      : @293 (gas: 12)\n  7983: a0 = u64 [sp + 0x38]\n  7986: a0 = t0 <u a0\n  7989: a5 = a1 ^ ra\n  7992: s1 = a1 <u ra\n  7995: s1 = a0 if a5 == 0\n  7998: a0 = a2 ^ t1\n  8001: a5 = a2 <u t1\n  8004: a4 = a5 if a0 != 0\n  8007: a5 = a3 ^ t2\n  8010: a0 = a0 | a5\n  8013: a4 = s1 if a0 == 0\n  8016: jump @306 if a4 != 0\n      : @294 (gas: 10)\n  8020: u64 [sp + 0xa0] = t0\n  8024: u64 [sp + 0xa8] = a1\n  8028: u64 [sp + 0xb0] = a3\n  8032: a0 = 0x40\n  8035: a1 = sp + 0xa0\n  8039: u64 [sp + 0xb8] = a2\n  8043: u64 [sp + 0x30] = t1\n  8046: s1 = t2\n  8048: u64 [sp + 0x28] = ra\n  8051: ra = 234, jump @9\n      : @295 [@dyn 117] (gas: 12)\n  8057: a2 = u64 [sp + 0x38]\n  8060: a0 = a2 | s1\n  8063: a1 = u64 [sp + 0x30]\n  8066: a3 = u64 [sp + 0x28]\n  8069: a1 = a1 | a3\n  8072: a0 = a0 | a1\n  8075: a0 = a0 >> 0x20\n  8078: u64 [sp + 0x20] = s1\n  8081: a1 = a1 | s1\n  8084: a1 = a1 << 0x20\n  8087: a1 = a1 | a0\n  8090: jump @303 if a1 != 0\n      : @296 (gas: 8)\n  8094: a0 = a2\n  8096: u64 [sp + 152] = 0\n  8100: u64 [sp + 144] = 0\n  8104: u64 [sp + 136] = 0\n  8108: a1 = sp + 0x80\n  8112: a2 = u64 [sp + 0x18]\n  8115: u64 [sp + 0x80] = a2\n  8119: ra = 236, jump @9\n      : @297 [@dyn 118] (gas: 2)\n  8125: ecalli 13 // 'return_data_size'\n  8127: fallthrough\n      : @298 (gas: 10)\n  8128: a4 = u64 [sp + 0x38]\n  8131: a1 = u64 [sp + 0x20]\n  8134: a2 = u64 [sp + 0x30]\n  8137: a1 = a1 | a2\n  8140: a2 = 0xffffffe0\n  8150: a2 = a4 <u a2\n  8153: a3 = u64 [sp + 0x28]\n  8156: a2 = 0 if a3 != 0\n  8158: a2 = 0 if a1 != 0\n  8160: jump @303 if a2 == 0\n      : @299 (gas: 3)\n  8163: s1 = a0\n  8165: a0 = a0 >> 0x20\n  8168: jump @303 if a0 != 0\n      : @300 (gas: 5)\n  8171: i32 a0 = a4 + 0x20\n  8174: i32 a1 = s1 + 0\n  8176: u64 [sp + 0x18] = a1\n  8179: a1 = s1\n  8181: ra = 238, jump @15\n      : @301 [@dyn 119] (gas: 6)\n  8187: u32 [sp + 0xe0] = s1\n  8191: i32 a0 = a0 + 0\n  8193: i32 a1 = sp + 0xe0\n  8197: a2 = 0\n  8199: ecalli 12 // 'return_data_copy'\n  8201: fallthrough\n      : @302 (gas: 8)\n  8202: a4 = u64 [sp + 0x38]\n  8205: a0 = i32 [sp + 0xe0]\n  8209: s1 = u64 [sp + 0x10]\n  8212: a1 = u64 [sp + 0x30]\n  8215: a2 = u64 [sp + 0x20]\n  8218: a3 = u64 [sp + 0x28]\n  8221: a5 = u64 [sp + 0x18]\n  8224: jump @305 if a0 >=u a5\n      : @303 (gas: 1)\n  8227: trap\n      : @304 (gas: 5)\n  8228: a3 = 0\n  8230: a2 = 0\n  8232: a1 = 0\n  8234: a4 = 0x60\n  8237: fallthrough\n      : @305 (gas: 10)\n  8238: u64 [s1] = a4\n  8240: u64 [s1 + 0x8] = a3\n  8243: u64 [s1 + 0x10] = a2\n  8246: u64 [s1 + 0x18] = a1\n  8249: sp = s0 + 0xffffffffffffff00\n  8253: ra = u64 [sp + 0xf8]\n  8257: s0 = u64 [sp + 0xf0]\n  8261: s1 = u64 [sp + 0xe8]\n  8265: sp = sp + 0x100\n  8269: ret\n      : @306 (gas: 8)\n  8271: u64 [sp + 112] = 0\n  8274: u64 [sp + 104] = 0\n  8277: u64 [sp + 96] = 0\n  8280: a0 = 0x4e487b7100000000\n  8290: a1 = sp + 0x60\n  8293: u64 [sp + 0x78] = a0\n  8296: a0 = 0\n  8298: ra = 240, jump @9\n      : @307 [@dyn 120] (gas: 7)\n  8304: u64 [sp + 88] = 0\n  8307: u64 [sp + 80] = 0\n  8310: u64 [sp + 64] = 0x41\n  8314: a0 = 0x4\n  8317: a1 = sp + 0x40\n  8320: u64 [sp + 72] = 0\n  8323: ra = 242, jump @9\n      : @308 [@dyn 121] (gas: 2)\n  8329: a1 = i32 [0x20068]\n  8334: jump @310 if a1 >u 63\n      : @309 (gas: 2)\n  8338: u32 [0x20068] = 0x40\n  8344: fallthrough\n      : @310 (gas: 7)\n  8345: a1 = 0x20070\n  8350: i32 a1 = a1 + 0\n  8352: a0 = 0x1\n  8355: a2 = 0x24\n  8358: ra = 0xf4\n  8362: ecalli 14 // 'seal_return'\n  8364: fallthrough\n      : @311 [@dyn 122] (gas: 24)\n  8365: sp = sp + 0xfffffffffffffce0\n  8369: a2 = sp + 0x300\n  8373: u64 [a2 + 0x18] = ra\n  8376: u64 [a2 + 0x10] = s0\n  8379: u64 [a2 + 0x8] = s1\n  8382: s0 = sp + 0x320\n  8386: sp = sp & 0xffffffffffffffe0\n  8389: s1 = sp\n  8391: a2 = u64 [a1]\n  8393: a3 = u64 [a1 + 0x8]\n  8396: a4 = u64 [a1 + 0x10]\n  8399: a1 = u64 [a1 + 0x18]\n  8402: u64 [s1 + 0x20] = a0\n  8405: a5 = s1 + 0x100\n  8409: u64 [a5 + 0xf8] = a1\n  8413: u64 [s1 + 0x8] = a4\n  8416: u64 [a5 + 0xf0] = a4\n  8420: u64 [s1 + 0x10] = a3\n  8423: u64 [a5 + 0xe8] = a3\n  8427: a0 = s1 + 0x200\n  8431: a1 = s1 + 0x1e0\n  8435: u64 [s1 + 0x18] = a2\n  8438: u64 [a5 + 0xe0] = a2\n  8442: ra = 246, jump @379\n      : @312 [@dyn 123] (gas: 11)\n  8448: a0 = u64 [s1 + 0x218]\n  8452: u64 [s1 + 0x40] = a0\n  8455: a0 = u64 [s1 + 0x210]\n  8459: u64 [s1 + 0x48] = a0\n  8462: a0 = u64 [s1 + 0x208]\n  8466: u64 [s1 + 0x50] = a0\n  8469: a0 = u64 [s1 + 0x200]\n  8473: u64 [s1 + 0x58] = a0\n  8476: i32 a0 = s1 + 0x220\n  8480: ecalli 0 // 'balance'\n  8481: fallthrough\n      : @313 (gas: 8)\n  8482: a5 = u64 [s1 + 0x238]\n  8486: t1 = u64 [s1 + 0x230]\n  8490: t0 = u64 [s1 + 0x228]\n  8494: ra = u64 [s1 + 0x220]\n  8498: a0 = t0 | a5\n  8501: a1 = ra | t1\n  8504: a0 = a0 | a1\n  8507: jump @347 if a0 == 0\n      : @314 (gas: 51)\n  8511: a0 = a0 <u 0x1\n  8514: u64 [s1 + 0xd8] = a0\n  8518: a1 = clz t1\n  8520: a2 = a1 + 0x40\n  8523: a1 = clz a5\n  8525: a1 = a2 if a5 == 0\n  8528: a2 = clz ra\n  8530: a2 = a2 + 0x40\n  8533: a3 = clz t0\n  8535: a3 = a2 if t0 == 0\n  8538: a2 = a3 + 0x80\n  8542: a4 = t1 | a5\n  8545: a1 = a2 if a4 == 0\n  8548: u64 [s1 + 0x38] = t0\n  8551: u64 [s1 + 0x60] = a5\n  8554: a5 = a2 <u a3\n  8557: a5 = 0 if a4 != 0\n  8559: a3 = a5 >u 0\n  8561: a2 = a1 <u 0xfd\n  8565: a4 = a2 ^ 0x1\n  8568: a3 = a4 if a5 == 0\n  8571: a2 = a3 <u 0x1\n  8574: a2 = a2 + 0xffffffffffffffff\n  8577: t2 = -a3\n  8579: a5 = -a5\n  8581: t0 = a5 - a4\n  8584: a0 = 0xfc - a1\n  8588: u64 [s1 + 0xc0] = t2\n  8592: a1 = t2 >u 0\n  8594: a4 = a2 >u 0\n  8596: u64 [s1 + 0xc8] = a2\n  8600: a4 = a1 if a2 == 0\n  8603: a1 = t0 >u 0\n  8605: u64 [s1 + 0xd0] = a0\n  8609: a0 = a0 <u 0x100\n  8613: a0 = a0 ^ 0x1\n  8616: a0 = a1 if t0 != 0\n  8619: a0 = a4 if a3 != 0\n  8622: a2 = u64 [s1 + 0xd8]\n  8626: a2 = a2 | a0\n  8629: a4 = u64 [s1 + 0x60]\n  8632: a4 = 0 if a2 != 0\n  8634: u64 [s1 + 0x28] = t1\n  8637: a1 = t1\n  8639: a1 = 0 if a2 != 0\n  8641: a3 = u64 [s1 + 0x38]\n  8644: a3 = 0 if a2 != 0\n  8646: a5 = ra\n  8648: a5 = 0 if a2 != 0\n  8650: u64 [s1 + 0x30] = ra\n  8653: jump @330 if a2 != 0\n      : @315 (gas: 8)\n  8657: a0 = u64 [s1 + 0xd0]\n  8661: a2 = a0 ^ 0xff\n  8665: t1 = u64 [s1 + 0xc0]\n  8669: a0 = a2 | t1\n  8672: t2 = u64 [s1 + 0xc8]\n  8676: a2 = t0 | t2\n  8679: a2 = a2 | a0\n  8682: jump @330 if a2 == 0\n      : @316 (gas: 19)\n  8686: a2 = u64 [s1 + 0xd0]\n  8690: a1 = a2 + 0x1\n  8693: u64 [s1 + 0xd8] = a1\n  8697: a0 = a1 <u 0x1\n  8700: a0 = a0 + t0\n  8703: u64 [s1 + 0xb8] = a0\n  8707: a0 = a0 | a1\n  8710: a0 = a0 <u 0x1\n  8713: a0 = a0 + t1\n  8716: u64 [s1 + 0xa8] = a0\n  8720: a0 = a0 <u t1\n  8723: a0 = a0 + t2\n  8726: u64 [s1 + 0xb0] = a0\n  8730: a1 = 0xff - a2\n  8734: u64 [s1 + 0xc0] = a1\n  8738: a2 = 0x80 - a1\n  8742: a0 = u64 [s1 + 0x30]\n  8745: a1 = u64 [s1 + 0x38]\n  8748: ra = 248, jump @444\n      : @317 [@dyn 124] (gas: 6)\n  8754: u64 [s1 + 0xc8] = a0\n  8758: u64 [s1 + 0x98] = a1\n  8762: a0 = u64 [s1 + 0x28]\n  8765: a1 = u64 [s1 + 0x60]\n  8768: a2 = u64 [s1 + 0xc0]\n  8772: ra = 250, jump @449\n      : @318 [@dyn 125] (gas: 9)\n  8778: u64 [s1 + 0xa0] = a0\n  8782: a0 = u64 [s1 + 0x98]\n  8786: a0 = a0 | a1\n  8789: u64 [s1 + 0x98] = a0\n  8793: a1 = u64 [s1 + 0xd0]\n  8797: a2 = 0x7f - a1\n  8800: a0 = u64 [s1 + 0x30]\n  8803: a1 = u64 [s1 + 0x38]\n  8806: ra = 252, jump @449\n      : @319 [@dyn 126] (gas: 18)\n  8812: a2 = u64 [s1 + 0xc0]\n  8816: a3 = a2 <u 0x80\n  8820: u64 [s1 + 0xd0] = a3\n  8824: a4 = u64 [s1 + 0x98]\n  8828: a1 = a4 if a3 != 0\n  8831: a4 = u64 [s1 + 0x60]\n  8834: a1 = a4 if a2 == 0\n  8837: u64 [s1 + 0x90] = a1\n  8841: a1 = u64 [s1 + 0xc8]\n  8845: a4 = u64 [s1 + 0xa0]\n  8849: a1 = a1 | a4\n  8852: a1 = a0 if a3 == 0\n  8855: a0 = u64 [s1 + 0x28]\n  8858: a1 = a0 if a2 == 0\n  8861: u64 [s1 + 0xc8] = a1\n  8865: a0 = u64 [s1 + 0x30]\n  8868: a1 = u64 [s1 + 0x38]\n  8871: ra = 254, jump @449\n      : @320 [@dyn 127] (gas: 13)\n  8877: a4 = u64 [s1 + 0xa8]\n  8881: a5 = u64 [s1 + 0xb0]\n  8885: a2 = u64 [s1 + 0xb8]\n  8889: a5 = a5 | a2\n  8892: a3 = u64 [s1 + 0xd8]\n  8896: a3 = a3 | a4\n  8899: a3 = a3 | a5\n  8902: a2 = u64 [s1 + 0xd0]\n  8906: a1 = 0 if a2 == 0\n  8908: u64 [s1 + 0xc0] = a1\n  8912: a0 = 0 if a2 == 0\n  8914: u64 [s1 + 0xd0] = a0\n  8918: jump @328 if a3 == 0\n      : @321 (gas: 5)\n  8922: a0 = u64 [s1 + 0xd8]\n  8926: a2 = a0 + 0xffffffffffffff80\n  8929: a0 = u64 [s1 + 0x28]\n  8932: a1 = u64 [s1 + 0x60]\n  8935: ra = 256, jump @444\n      : @322 [@dyn 128] (gas: 6)\n  8941: u64 [s1 + 0x98] = a0\n  8945: u64 [s1 + 0xa0] = a1\n  8949: a0 = u64 [s1 + 0x30]\n  8952: a1 = u64 [s1 + 0x38]\n  8955: a2 = u64 [s1 + 0xd8]\n  8959: ra = 258, jump @444\n      : @323 [@dyn 129] (gas: 7)\n  8965: u64 [s1 + 0x80] = a0\n  8969: u64 [s1 + 0x88] = a1\n  8973: a1 = u64 [s1 + 0xd8]\n  8977: a2 = 0x80 - a1\n  8981: a0 = u64 [s1 + 0x28]\n  8984: a1 = u64 [s1 + 0x60]\n  8987: ra = 260, jump @449\n      : @324 [@dyn 130] (gas: 20)\n  8993: a2 = u64 [s1 + 0x88]\n  8997: a1 = a1 | a2\n  9000: a2 = u64 [s1 + 0xd8]\n  9004: a3 = a2 <u 0x80\n  9008: u64 [s1 + 0x88] = a3\n  9012: a4 = u64 [s1 + 0xa0]\n  9016: a1 = a4 if a3 == 0\n  9019: a4 = u64 [s1 + 0x38]\n  9022: a1 = a4 if a2 == 0\n  9025: u64 [s1 + 0xa0] = a1\n  9029: a1 = u64 [s1 + 0x80]\n  9033: a0 = a0 | a1\n  9036: a1 = u64 [s1 + 0x98]\n  9040: a0 = a1 if a3 == 0\n  9043: a1 = u64 [s1 + 0x30]\n  9046: a0 = a1 if a2 == 0\n  9049: u64 [s1 + 0x98] = a0\n  9053: a0 = u64 [s1 + 0x28]\n  9056: a1 = u64 [s1 + 0x60]\n  9059: ra = 262, jump @444\n      : @325 [@dyn 131] (gas: 8)\n  9065: a5 = 0\n  9067: a2 = u64 [s1 + 0x88]\n  9071: a1 = 0 if a2 == 0\n  9073: a0 = 0 if a2 == 0\n  9075: u64 [s1 + 112] = 0x9\n  9079: u64 [s1 + 104] = 0\n  9082: ra = u64 [s1 + 0x90]\n  9086: fallthrough\n      : @326 (gas: 91)\n  9087: u64 [s1 + 0x80] = a1\n  9091: u64 [s1 + 0x88] = a5\n  9095: u64 [s1 + 120] = 0\n  9098: a1 = u64 [s1 + 0x98]\n  9102: a2 = a1 >> 0x3f\n  9105: a5 = u64 [s1 + 0xa0]\n  9109: a3 = a5 << 0x1\n  9112: t1 = a3 | a2\n  9115: a2 = a1 << 0x1\n  9118: a4 = ra >> 0x3f\n  9121: a4 = a4 | a2\n  9124: u64 [s1 + 0x90] = a4\n  9128: a3 = u64 [s1 + 0x68]\n  9131: a1 = a3 ^ t1\n  9134: u64 [s1 + 0x98] = a1\n  9138: a1 = a3 <u t1\n  9141: a2 = u64 [s1 + 0x70]\n  9144: t0 = a2 <u a4\n  9147: a2 = u64 [s1 + 0x98]\n  9151: t0 = a1 if a2 != 0\n  9154: a1 = u64 [s1 + 0x80]\n  9158: a1 = a1 << 0x1\n  9161: a4 = a0 >> 0x3f\n  9164: a1 = a1 | a4\n  9167: u64 [s1 + 0x80] = a1\n  9171: a4 = a5 >> 0x3f\n  9174: a0 = a0 << 0x1\n  9177: a4 = a4 | a0\n  9180: a0 = ra << 0x1\n  9183: a1 = u64 [s1 + 0xc8]\n  9187: a5 = a1 >> 0x3f\n  9190: a0 = a0 | a5\n  9193: u64 [s1 + 0xa0] = a0\n  9197: a5 = a1 << 0x1\n  9200: a0 = u64 [s1 + 0xc0]\n  9204: a1 = a0 >> 0x3f\n  9207: a1 = a1 | a5\n  9210: a5 = a0 << 0x1\n  9213: a0 = u64 [s1 + 0xd0]\n  9217: ra = a0 >> 0x3f\n  9220: a5 = a5 | ra\n  9223: a0 = a0 << 0x1\n  9226: a2 = u64 [s1 + 0x88]\n  9230: a0 = a0 | a2\n  9233: u64 [s1 + 0xd0] = a0\n  9237: a0 = a5 | 0\n  9239: u64 [s1 + 0xc0] = a0\n  9243: a0 = a1 | 0\n  9245: u64 [s1 + 0xc8] = a0\n  9249: a0 = u64 [s1 + 0xa0]\n  9253: ra = a0 | 0\n  9255: a0 = a3 - a4\n  9258: a0 = a0 <u t0\n  9261: a1 = a3 <u a4\n  9264: t2 = u64 [s1 + 0x80]\n  9268: a5 = a3 - t2\n  9271: a5 = a5 - a1\n  9274: a5 = a5 - a0\n  9277: t0 = a5 >>a 0x3f\n  9280: a0 = t0 & 0xa\n  9283: a2 = u64 [s1 + 0x90]\n  9287: a1 = a2 - a0\n  9290: u64 [s1 + 0x98] = a1\n  9294: a1 = a2 <u a0\n  9297: a0 = t1 - a1\n  9300: u64 [s1 + 0xa0] = a0\n  9304: a1 = 0 if t1 != 0\n  9306: a0 = a4 - a1\n  9309: a1 = a4 <u a1\n  9312: a1 = t2 - a1\n  9315: a3 = u64 [s1 + 0xd8]\n  9319: a5 = u64 [s1 + 0xb8]\n  9323: a2 = a3 | a5\n  9326: a2 = a2 <u 0x1\n  9329: a4 = u64 [s1 + 0xa8]\n  9333: t1 = a4 <u a2\n  9336: a4 = a4 - a2\n  9339: a2 = a3 <u 0x1\n  9342: a5 = a5 - a2\n  9345: a2 = u64 [s1 + 0xb0]\n  9349: a2 = a2 - t1\n  9352: a3 = a3 + 0xffffffffffffffff\n  9355: u64 [s1 + 0xb8] = a5\n  9359: u64 [s1 + 0xb0] = a2\n  9363: a2 = a2 | a5\n  9366: u64 [s1 + 0xd8] = a3\n  9370: a3 = a3 | a4\n  9373: a2 = a2 | a3\n  9376: a5 = t0 & 0x1\n  9379: u64 [s1 + 0xa8] = a4\n  9383: jump @326 if a2 != 0\n      : @327 (gas: 1)\n  9387: jump @329\n      : @328 (gas: 4)\n  9389: a5 = 0\n  9391: u64 [s1 + 120] = 0\n  9394: ra = u64 [s1 + 0x90]\n  9398: fallthrough\n      : @329 (gas: 19)\n  9399: a2 = u64 [s1 + 0xc8]\n  9403: a0 = a2 >> 0x3f\n  9406: a1 = ra << 0x1\n  9409: a0 = a0 | a1\n  9412: a3 = u64 [s1 + 0xc0]\n  9416: a1 = a3 >> 0x3f\n  9419: a2 = a2 << 0x1\n  9422: a1 = a1 | a2\n  9425: a4 = u64 [s1 + 0xd0]\n  9429: a2 = a4 >> 0x3f\n  9432: a3 = a3 << 0x1\n  9435: a4 = a4 << 0x1\n  9438: a5 = a5 | a4\n  9441: a4 = u64 [s1 + 0x78]\n  9444: a2 = a2 | a4\n  9447: a3 = a3 | a2\n  9450: a1 = a1 | a4\n  9453: a4 = a4 | a0\n  9456: fallthrough\n      : @330 (gas: 31)\n  9457: u64 [s1 + 0xc8] = a1\n  9461: t2 = u64 [s1 + 0x58]\n  9464: u64 [s1 + 0xd8] = a5\n  9468: t0 = t2 <u a5\n  9471: a0 = u64 [s1 + 0x50]\n  9474: a5 = a0 ^ a3\n  9477: t1 = a0 <u a3\n  9480: t1 = t0 if a5 == 0\n  9483: a5 = u64 [s1 + 0x48]\n  9486: ra = a5 <u a1\n  9489: a2 = u64 [s1 + 0x40]\n  9492: t0 = a2 ^ a4\n  9495: u64 [s1 + 0xd0] = a4\n  9499: a4 = a2 <u a4\n  9502: a4 = ra if t0 == 0\n  9505: ra = a0\n  9507: a1 = a3\n  9509: a3 = u64 [s1 + 0xc8]\n  9513: a0 = a5 ^ a3\n  9516: a0 = a0 | t0\n  9519: a4 = t1 if a0 == 0\n  9522: a0 = u64 [s1 + 0xd8]\n  9526: t2 = a0 if a4 == 0\n  9529: ra = a1 if a4 == 0\n  9532: a5 = a3 if a4 == 0\n  9535: a0 = u64 [s1 + 0xd0]\n  9539: a2 = a0 if a4 == 0\n  9542: a0 = ra | a2\n  9545: a1 = t2 | a5\n  9548: a0 = a0 | a1\n  9551: jump @347 if a0 == 0\n      : @331 (gas: 41)\n  9555: a1 = u64 [s1 + 0x60]\n  9558: a0 = a2 ^ a1\n  9561: u64 [s1 + 0xd8] = a0\n  9565: a0 = a1\n  9567: t1 = u64 [s1 + 0x38]\n  9570: t0 = ra ^ t1\n  9573: a4 = ra <u t1\n  9576: a1 = u64 [s1 + 0x30]\n  9579: a3 = t2 <u a1\n  9582: a3 = a4 if t0 != 0\n  9585: a1 = a2 <u a0\n  9588: t0 = u64 [s1 + 0x28]\n  9591: a4 = a5 <u t0\n  9594: a0 = u64 [s1 + 0xd8]\n  9598: a4 = a1 if a0 != 0\n  9601: a1 = a5 ^ t0\n  9604: a0 = a0 | a1\n  9607: a3 = a4 if a0 != 0\n  9610: a0 = u64 [s1 + 0x60]\n  9613: a2 = a0 if a3 == 0\n  9616: u64 [s1 + 0x40] = a2\n  9619: a5 = t0 if a3 == 0\n  9622: u64 [s1 + 0x48] = a5\n  9625: ra = t1 if a3 == 0\n  9628: u64 [s1 + 0x50] = ra\n  9631: a0 = u64 [s1 + 0x30]\n  9634: t2 = a0 if a3 == 0\n  9637: u64 [s1 + 0x58] = t2\n  9640: a0 = u64 [s1 + 0x8]\n  9643: a0 = a0 << 0x20\n  9646: a2 = a0 >> 0x20\n  9649: u64 [s1 + 472] = 0\n  9653: a0 = u64 [s1 + 0x18]\n  9656: u64 [s1 + 0x1c0] = a0\n  9660: a0 = u64 [s1 + 0x10]\n  9663: u64 [s1 + 0x1c8] = a0\n  9667: a1 = s1 + 0x1c0\n  9671: u64 [s1 + 0xa8] = a2\n  9675: u64 [s1 + 0x1d0] = a2\n  9679: a0 = 0\n  9681: ra = 264, jump @9\n      : @332 [@dyn 132] (gas: 7)\n  9687: u64 [s1 + 440] = 0\n  9691: u64 [s1 + 432] = 0\n  9695: u64 [s1 + 416] = 0x1\n  9700: a0 = 0x20\n  9703: a1 = s1 + 0x1a0\n  9707: u64 [s1 + 424] = 0\n  9711: ra = 266, jump @9\n      : @333 [@dyn 133] (gas: 3)\n  9717: i32 a0 = s1 + 0x240\n  9721: ecalli 10 // 'now'\n  9723: fallthrough\n      : @334 (gas: 12)\n  9724: a2 = 0x20068\n  9729: a3 = s1 + 0x200\n  9733: a0 = u64 [a3 + 0x58]\n  9736: u64 [s1 + 0xc0] = a0\n  9740: a0 = u64 [a3 + 0x50]\n  9743: u64 [s1 + 0xc8] = a0\n  9747: a0 = u64 [a3 + 0x48]\n  9750: u64 [s1 + 0xd0] = a0\n  9754: a0 = i32 [0x20068]\n  9759: a1 = u64 [a3 + 0x40]\n  9762: u64 [s1 + 0xb8] = a1\n  9766: jump @336 if a0 >u 63\n      : @335 (gas: 2)\n  9770: u32 [0x20068] = 0x40\n  9776: fallthrough\n      : @336 (gas: 16)\n  9777: u64 [s1 + 0xa0] = a2\n  9781: a0 = sp + 0xffffffffffffffe0\n  9784: a2 = a0 & 0xffffffffffffffe0\n  9787: u64 [s1 + 0xb0] = a2\n  9791: sp = a2\n  9793: a0 = 0x20070\n  9798: u64 [s1 + 0xd8] = a0\n  9802: i32 a0 = a0 + 0\n  9804: i32 a2 = a2 + 0\n  9806: a1 = 0x40\n  9809: u64 [s1 + 0x98] = a0\n  9813: ra = 0x10c\n  9817: ecalli 9 // 'hash_keccak_256'\n  9819: a3 = u64 [s1 + 0xb0]\n  9823: t0 = 0x10e\n  9827: jump @435\n      : @337 [@dyn 134] (gas: 2)\n  9830: a3 = u64 [s1 + 0xb0]\n  9834: t0 = 270, jump @435\n      : @338 [@dyn 135] (gas: 15)\n  9840: u64 [s1 + 0x278] = a3\n  9844: u64 [s1 + 0x270] = a2\n  9848: u64 [s1 + 0x268] = a1\n  9852: u64 [s1 + 0x260] = a0\n  9856: a0 = u64 [s1 + 0xc0]\n  9860: u64 [s1 + 0x298] = a0\n  9864: a0 = u64 [s1 + 0xc8]\n  9868: u64 [s1 + 0x290] = a0\n  9872: a0 = u64 [s1 + 0xd0]\n  9876: u64 [s1 + 0x288] = a0\n  9880: a0 = u64 [s1 + 0xb8]\n  9884: u64 [s1 + 0x280] = a0\n  9888: a0 = s1 + 0x260\n  9892: a1 = s1 + 0x280\n  9896: ra = 272, jump @12\n      : @339 [@dyn 136] (gas: 1)\n  9902: ra = 274, jump @0\n      : @340 [@dyn 137] (gas: 62)\n  9908: a1 = u64 [0x300b0]\n  9913: u64 [s1 + 0xd0] = a1\n  9917: a1 = u64 [0x300c0]\n  9922: u64 [s1 + 0xc8] = a1\n  9926: a0 = u64 [0x300b8]\n  9931: u64 [s1 + 0xc0] = a0\n  9935: ecalli 11 // 'ref_time_left'\n  9937: a1 = u64 [s1 + 0xc0]\n  9941: a1 = reverse a1\n  9943: a2 = a1 << 0x20\n  9946: a3 = u64 [s1 + 0xc8]\n  9950: a3 = reverse a3\n  9952: a3 = a3 >> 0x20\n  9955: a2 = a2 | a3\n  9958: a3 = a1 >> 0x20\n  9961: a1 = u64 [s1 + 0xd0]\n  9965: a4 = reverse a1\n  9967: a1 = 0x30070\n  9972: a5 = a4 << 0x20\n  9975: a3 = a3 | a5\n  9978: a4 = a4 >> 0x20\n  9981: u32 [0x30080] = a4\n  9986: u64 [0x30078] = a3\n  9991: u64 [0x30070] = a2\n  9996: a2 = u64 [s1 + 0x40]\n  9999: a3 = s1 + 0x200\n 10003: u64 [a3 + 0xb8] = a2\n 10007: a2 = u64 [s1 + 0x48]\n 10010: u64 [a3 + 0xb0] = a2\n 10014: a2 = u64 [s1 + 0x50]\n 10017: u64 [a3 + 0xa8] = a2\n 10021: a2 = u64 [s1 + 0x58]\n 10024: u64 [a3 + 0xa0] = a2\n 10028: u32 [s1 + 704] = 0\n 10032: a0 = a0 >u 0x8fc\n 10036: a2 = -a0\n 10038: u64 [a3 + 0xf8] = a2\n 10042: u64 [a3 + 0xf0] = a2\n 10046: u64 [a3 + 0xe8] = a2\n 10050: u64 [a3 + 0xe0] = a2\n 10054: a1 = a1 << 0x20\n 10057: a1 = a1 >> 0x20\n 10060: a0 = a0 << 0x23\n 10063: a0 = a0 | a1\n 10066: a1 = s1 + 0x2a0\n 10070: a1 = a1 << 0x20\n 10073: a1 = a1 >> 0x20\n 10076: a2 = s1 + 0x2e0\n 10080: a2 = a2 << 0x20\n 10083: a3 = a2 | a1\n 10086: a4 = u64 [s1 + 0xd8]\n 10090: a4 = a4 << 0x20\n 10093: a4 = a4 >> 0x20\n 10096: a1 = s1 + 0x2c0\n 10100: a1 = a1 << 0x20\n 10103: a5 = a1 | a4\n 10106: a1 = 0xffffffffffffffff\n 10109: a2 = 0xffffffffffffffff\n 10112: ecalli 1 // 'call'\n 10114: u64 [s1 + 0xd8] = a0\n 10118: a0 = s1 + 0x180\n 10122: ra = 276, jump @289\n      : @341 [@dyn 138] (gas: 2)\n 10128: a0 = u64 [s1 + 0xd8]\n 10132: jump @350 if a0 != 0\n      : @342 (gas: 3)\n 10136: a0 = s1 + 0x140\n 10140: a1 = 0x40\n 10143: ra = 278, jump @7\n      : @343 [@dyn 139] (gas: 13)\n 10149: a4 = s1 + 0x100\n 10153: a3 = u64 [a4 + 0x58]\n 10156: a1 = u64 [a4 + 0x50]\n 10159: a2 = u64 [a4 + 0x48]\n 10162: a0 = u64 [a4 + 0x40]\n 10165: a3 = a3 | a2\n 10168: a2 = a0 | a1\n 10171: a2 = a2 | a3\n 10174: a2 = a2 >> 0x20\n 10177: a1 = a1 | a3\n 10180: a1 = a1 << 0x20\n 10183: a1 = a1 | a2\n 10186: jump @349 if a1 != 0\n      : @344 (gas: 11)\n 10190: a1 = u64 [s1 + 0x58]\n 10193: u64 [s1 + 0x120] = a1\n 10197: a1 = u64 [s1 + 0x50]\n 10200: u64 [s1 + 0x128] = a1\n 10204: a1 = u64 [s1 + 0x48]\n 10207: u64 [s1 + 0x130] = a1\n 10211: a1 = s1 + 0x120\n 10215: a2 = u64 [s1 + 0x40]\n 10218: u64 [s1 + 0x138] = a2\n 10222: u64 [s1 + 0xd8] = a0\n 10226: ra = 280, jump @9\n      : @345 [@dyn 140] (gas: 21)\n 10232: u64 [s1 + 248] = 0\n 10236: a0 = u64 [s1 + 0xa8]\n 10240: u64 [s1 + 0xf0] = a0\n 10244: a0 = u64 [s1 + 0x10]\n 10247: u64 [s1 + 0xe8] = a0\n 10251: a0 = u64 [0x20040]\n 10256: a1 = u64 [0x20048]\n 10261: a2 = u64 [0x20050]\n 10266: a3 = u64 [s1 + 0x18]\n 10269: u64 [s1 + 0xe0] = a3\n 10273: a4 = s1 + 0x100\n 10277: u64 [a4 + 0x18] = a0\n 10280: u64 [a4 + 0x10] = a1\n 10283: u64 [a4 + 0x8] = a2\n 10286: a0 = u64 [0x20058]\n 10291: a1 = 0x20\n 10294: a2 = s1 + 0x100\n 10298: a3 = s1 + 0xe0\n 10302: u64 [a4] = a0\n 10304: a0 = u64 [s1 + 0xd8]\n 10308: ra = 282, jump @13\n      : @346 [@dyn 141] (gas: 5)\n 10314: a4 = u64 [s1 + 0x40]\n 10317: a3 = u64 [s1 + 0x48]\n 10320: a2 = u64 [s1 + 0x50]\n 10323: a1 = u64 [s1 + 0x58]\n 10326: jump @348\n      : @347 (gas: 5)\n 10328: a1 = 0\n 10330: a2 = 0\n 10332: a3 = 0\n 10334: a4 = 0\n 10336: fallthrough\n      : @348 (gas: 12)\n 10337: a0 = u64 [s1 + 0x20]\n 10340: u64 [a0] = a1\n 10342: u64 [a0 + 0x8] = a2\n 10345: u64 [a0 + 0x10] = a3\n 10348: u64 [a0 + 0x18] = a4\n 10351: sp = s0 + 0xfffffffffffffce0\n 10355: a0 = sp + 0x300\n 10359: ra = u64 [a0 + 0x18]\n 10362: s0 = u64 [a0 + 0x10]\n 10365: s1 = u64 [a0 + 0x8]\n 10368: sp = sp + 0x320\n 10372: ret\n      : @349 (gas: 1)\n 10374: trap\n      : @350 (gas: 8)\n 10375: u64 [s1 + 368] = 0\n 10379: u64 [s1 + 360] = 0\n 10383: u64 [s1 + 352] = 0\n 10387: a0 = 0x90b8ec1800000000\n 10397: a1 = s1 + 0x160\n 10401: u64 [s1 + 0x178] = a0\n 10405: a0 = 0\n 10407: ra = 284, jump @9\n      : @351 [@dyn 142] (gas: 3)\n 10413: a0 = u64 [s1 + 0xa0]\n 10417: a0 = i32 [a0]\n 10419: jump @353 if a0 >u 31\n      : @352 (gas: 3)\n 10423: a1 = u64 [s1 + 0xa0]\n 10427: u32 [a1 + 0] = 0x20\n 10430: fallthrough\n      : @353 (gas: 6)\n 10431: a0 = 0x1\n 10434: a2 = 0x4\n 10437: a1 = u64 [s1 + 0x98]\n 10441: ra = 0x11e\n 10445: ecalli 14 // 'seal_return'\n 10447: fallthrough\n      : @354 [@dyn 143] (gas: 20)\n 10448: sp = sp + 0xfffffffffffffe80\n 10452: u64 [sp + 0x178] = ra\n 10456: u64 [sp + 0x170] = s0\n 10460: u64 [sp + 0x168] = s1\n 10464: s0 = sp + 0x180\n 10468: sp = sp & 0xffffffffffffffe0\n 10471: s1 = sp\n 10473: a2 = u64 [a0]\n 10475: a1 = u64 [a0 + 0x8]\n 10478: a0 = u32 [a0 + 0x10]\n 10481: u64 [s1 + 216] = 0\n 10485: u64 [s1 + 0x28] = a0\n 10488: u64 [s1 + 0xd0] = a0\n 10492: u64 [s1 + 0x10] = a1\n 10495: u64 [s1 + 0xc8] = a1\n 10499: a1 = s1 + 0xc0\n 10503: u64 [s1 + 0x18] = a2\n 10506: u64 [s1 + 0xc0] = a2\n 10510: a0 = 0\n 10512: ra = 288, jump @9\n      : @355 [@dyn 144] (gas: 7)\n 10518: u64 [s1 + 184] = 0\n 10522: u64 [s1 + 176] = 0\n 10526: u64 [s1 + 160] = 0x1\n 10531: a0 = 0x20\n 10534: a1 = s1 + 0xa0\n 10538: u64 [s1 + 168] = 0\n 10542: ra = 290, jump @9\n      : @356 [@dyn 145] (gas: 3)\n 10548: a2 = 0x20068\n 10553: a0 = i32 [0x20068]\n 10558: jump @358 if a0 >u 63\n      : @357 (gas: 2)\n 10562: u32 [0x20068] = 0x40\n 10568: fallthrough\n      : @358 (gas: 15)\n 10569: u64 [s1 + 0x30] = a2\n 10572: a0 = sp + 0xffffffffffffffe0\n 10575: a2 = a0 & 0xffffffffffffffe0\n 10578: u64 [s1 + 0x38] = a2\n 10581: sp = a2\n 10583: a0 = 0x20070\n 10588: i32 a0 = a0 + 0\n 10590: i32 a2 = a2 + 0\n 10592: a1 = 0x40\n 10595: u64 [s1 + 0x20] = a0\n 10598: ra = 0x124\n 10602: ecalli 9 // 'hash_keccak_256'\n 10604: a3 = u64 [s1 + 0x38]\n 10607: t0 = 0x126\n 10611: jump @435\n      : @359 [@dyn 146] (gas: 2)\n 10614: a3 = u64 [s1 + 0x38]\n 10617: t0 = 294, jump @435\n      : @360 [@dyn 147] (gas: 7)\n 10623: u64 [s1 + 0xf8] = a3\n 10627: u64 [s1 + 0xf0] = a2\n 10631: u64 [s1 + 0xe8] = a1\n 10635: u64 [s1 + 0xe0] = a0\n 10639: a0 = s1 + 0x80\n 10643: a1 = s1 + 0xe0\n 10647: ra = 296, jump @11\n      : @361 [@dyn 148] (gas: 8)\n 10653: a0 = u64 [s1 + 0x90]\n 10657: a1 = u64 [s1 + 0x98]\n 10661: a2 = u64 [s1 + 0x88]\n 10665: a3 = u64 [s1 + 0x80]\n 10669: a1 = a1 | a2\n 10672: a0 = a0 | a3\n 10675: a0 = a0 | a1\n 10678: jump @370 if a0 != 0\n      : @362 (gas: 10)\n 10682: u64 [s1 + 120] = 0\n 10685: a0 = u64 [s1 + 0x18]\n 10688: u64 [s1 + 0x60] = a0\n 10691: a0 = u64 [s1 + 0x10]\n 10694: u64 [s1 + 0x68] = a0\n 10697: a1 = s1 + 0x60\n 10700: a0 = u64 [s1 + 0x28]\n 10703: u64 [s1 + 0x70] = a0\n 10706: a0 = 0\n 10708: ra = 298, jump @9\n      : @363 [@dyn 149] (gas: 7)\n 10714: u64 [s1 + 88] = 0\n 10717: u64 [s1 + 80] = 0\n 10720: u64 [s1 + 64] = 0x1\n 10724: a0 = 0x20\n 10727: a1 = s1 + 0x40\n 10730: u64 [s1 + 72] = 0\n 10733: ra = 300, jump @9\n      : @364 [@dyn 150] (gas: 3)\n 10739: i32 a0 = s1 + 0x100\n 10743: ecalli 10 // 'now'\n 10745: fallthrough\n      : @365 (gas: 12)\n 10746: a3 = s1 + 0x100\n 10750: a0 = u64 [a3 + 0x18]\n 10753: u64 [s1 + 0x18] = a0\n 10756: a0 = u64 [a3 + 0x10]\n 10759: u64 [s1 + 0x28] = a0\n 10762: a0 = u64 [a3 + 0x8]\n 10765: u64 [s1 + 0x38] = a0\n 10768: a2 = u64 [s1 + 0x30]\n 10771: a0 = i32 [a2]\n 10773: a1 = u64 [a3]\n 10775: u64 [s1 + 0x10] = a1\n 10778: jump @367 if a0 >u 63\n      : @366 (gas: 2)\n 10782: u32 [a2 + 0] = 0x40\n 10785: fallthrough\n      : @367 (gas: 12)\n 10786: a0 = sp + 0xffffffffffffffe0\n 10789: a0 = a0 & 0xffffffffffffffe0\n 10792: u64 [s1 + 0x30] = a0\n 10795: sp = a0\n 10797: i32 a2 = a0 + 0\n 10799: a1 = 0x40\n 10802: a0 = u64 [s1 + 0x20]\n 10805: ra = 0x12e\n 10809: ecalli 9 // 'hash_keccak_256'\n 10811: a3 = u64 [s1 + 0x30]\n 10814: t0 = 0x130\n 10818: jump @435\n      : @368 [@dyn 151] (gas: 2)\n 10821: a3 = u64 [s1 + 0x30]\n 10824: t0 = 304, jump @435\n      : @369 [@dyn 152] (gas: 16)\n 10830: a4 = s1 + 0x100\n 10834: u64 [a4 + 0x38] = a3\n 10837: u64 [a4 + 0x30] = a2\n 10840: u64 [a4 + 0x28] = a1\n 10843: u64 [a4 + 0x20] = a0\n 10846: a0 = u64 [s1 + 0x18]\n 10849: u64 [a4 + 0x58] = a0\n 10852: a0 = u64 [s1 + 0x28]\n 10855: u64 [a4 + 0x50] = a0\n 10858: a0 = u64 [s1 + 0x38]\n 10861: u64 [a4 + 0x48] = a0\n 10864: a0 = u64 [s1 + 0x10]\n 10867: u64 [a4 + 0x40] = a0\n 10870: a0 = s1 + 0x120\n 10874: a1 = s1 + 0x140\n 10878: ra = 306, jump @12\n      : @370 [@dyn 153] (gas: 6)\n 10884: sp = s0 + 0xfffffffffffffe80\n 10888: ra = u64 [sp + 0x178]\n 10892: s0 = u64 [sp + 0x170]\n 10896: s1 = u64 [sp + 0x168]\n 10900: sp = sp + 0x180\n 10904: ret\n      : @371 (gas: 70)\n 10906: sp = sp + 0xffffffffffffff40\n 10910: u64 [sp + 0xb8] = ra\n 10914: u64 [sp + 0xb0] = s0\n 10918: u64 [sp + 0xa8] = s1\n 10922: s0 = sp + 0xc0\n 10926: sp = sp & 0xfffffffffffffff0\n 10929: ra = u64 [a2]\n 10931: t0 = u64 [a1]\n 10933: a3 = u64 [a1 + 0x8]\n 10936: u64 [sp + 0x58] = a0\n 10939: a4 = u64 [a2 + 0x8]\n 10942: a0 = t0 mulhu ra\n 10945: s1 = a3 * ra\n 10948: a0 = a0 + s1\n 10951: s1 = a0 <u s1\n 10954: a5 = a3 mulhu ra\n 10957: a5 = a5 + s1\n 10960: s1 = t0 * a4\n 10963: a0 = a0 + s1\n 10966: u64 [sp + 0x50] = a0\n 10969: a0 = a0 <u s1\n 10972: s1 = t0 mulhu a4\n 10975: a0 = a0 + s1\n 10978: a0 = a0 + a5\n 10981: a5 = a0 <u a5\n 10984: s1 = a3 mulhu a4\n 10987: a5 = a5 + s1\n 10990: s1 = a3 * a4\n 10993: a0 = a0 + s1\n 10996: u64 [sp + 0x48] = a0\n 10999: s1 = a0 <u s1\n 11002: a5 = a5 + s1\n 11005: u64 [sp + 0x40] = a5\n 11008: t1 = u64 [a2 + 0x10]\n 11011: a2 = u64 [a2 + 0x18]\n 11014: t2 = u64 [a1 + 0x18]\n 11017: a0 = u64 [a1 + 0x10]\n 11020: a5 = a3 * t1\n 11023: u64 [sp + 0x20] = a2\n 11026: s1 = a2 * t0\n 11029: a1 = s1 + a5\n 11032: u64 [sp + 0x28] = a4\n 11035: s1 = a4 * a0\n 11038: a2 = t2 * ra\n 11041: a2 = a2 + s1\n 11044: s1 = t1 * t0\n 11047: a5 = a0 * ra\n 11050: s1 = s1 + a5\n 11053: u64 [sp + 0x30] = t1\n 11056: a4 = t1 mulhu t0\n 11059: u64 [sp + 0x10] = a4\n 11062: a4 = a4 + a1\n 11065: t1 = a0 mulhu ra\n 11068: a1 = t1 + a2\n 11071: a2 = s1 <u a5\n 11074: u64 [sp + 0x18] = a1\n 11077: u64 [sp + 0x8] = a4\n 11080: a5 = a1 + a4\n 11083: a2 = a2 + a5\n 11086: u64 [sp + 0x38] = t2\n 11089: a5 = a3 | t2\n 11092: a1 = t0 | a0\n 11095: a1 = a1 | a5\n 11098: a4 = u64 [sp + 0x40]\n 11101: a5 = u64 [sp + 0x48]\n 11104: s1 = s1 + a5\n 11107: t2 = s1 <u a5\n 11110: a2 = a2 + a4\n 11113: a2 = a2 + t2\n 11116: jump @373 if a1 == 0\n      : @372 (gas: 50)\n 11120: a1 = a2 ^ a4\n 11123: u64 [sp + 0x48] = a2\n 11126: a2 = u64 [sp + 0x48]\n 11129: a2 = a2 <u a4\n 11132: t2 = a2 if a1 != 0\n 11135: u64 [sp + 0x40] = s1\n 11138: a1 = u64 [sp + 0x10]\n 11141: a2 = u64 [sp + 0x8]\n 11144: s1 = a2 <u a1\n 11147: a2 = a3 >u 0\n 11149: a1 = u64 [sp + 0x20]\n 11152: a5 = a1 >u 0\n 11154: a2 = a2 & a5\n 11157: a5 = a1 mulhu t0\n 11160: a5 = a5 >u 0\n 11162: a2 = a2 | a5\n 11165: a4 = t1\n 11167: t1 = u64 [sp + 0x30]\n 11170: a3 = a3 mulhu t1\n 11173: a3 = a3 >u 0\n 11175: a2 = a2 | a3\n 11178: a2 = a2 | s1\n 11181: u64 [sp + 0x10] = a2\n 11184: a2 = u64 [sp + 0x18]\n 11187: a2 = a2 <u a4\n 11190: a4 = u64 [sp + 0x28]\n 11193: a3 = a4 >u 0\n 11195: s1 = u64 [sp + 0x38]\n 11198: a5 = s1 >u 0\n 11200: a3 = a3 & a5\n 11203: a5 = s1 mulhu ra\n 11206: a5 = a5 >u 0\n 11208: a3 = a3 | a5\n 11211: a5 = a4 mulhu a0\n 11214: a5 = a5 >u 0\n 11216: a3 = a3 | a5\n 11219: a2 = a2 | a3\n 11222: a3 = t1 | a1\n 11225: a5 = a0 | s1\n 11228: s1 = u64 [sp + 0x40]\n 11231: a3 = a3 >u 0\n 11233: a5 = a5 >u 0\n 11235: a3 = a3 & a5\n 11238: a2 = a2 | a3\n 11241: a1 = u64 [sp + 0x10]\n 11244: a1 = a1 | a2\n 11247: a2 = u64 [sp + 0x48]\n 11250: a0 = a1 | t2\n 11253: a0 = a0 & 0x1\n 11256: jump @374 if a0 != 0\n      : @373 (gas: 13)\n 11259: a0 = t0 * ra\n 11262: a1 = u64 [sp + 0x58]\n 11265: u64 [a1] = a0\n 11267: a0 = u64 [sp + 0x50]\n 11270: u64 [a1 + 0x8] = a0\n 11273: u64 [a1 + 0x10] = s1\n 11276: u64 [a1 + 0x18] = a2\n 11279: sp = s0 + 0xffffffffffffff40\n 11283: ra = u64 [sp + 0xb8]\n 11287: s0 = u64 [sp + 0xb0]\n 11291: s1 = u64 [sp + 0xa8]\n 11295: sp = sp + 0xc0\n 11299: ret\n      : @374 (gas: 8)\n 11301: u64 [sp + 144] = 0\n 11305: u64 [sp + 136] = 0\n 11309: u64 [sp + 128] = 0\n 11313: a0 = 0x4e487b7100000000\n 11323: a1 = sp + 0x80\n 11327: u64 [sp + 0x98] = a0\n 11331: a0 = 0\n 11333: ra = 308, jump @9\n      : @375 [@dyn 154] (gas: 7)\n 11339: u64 [sp + 120] = 0\n 11342: u64 [sp + 112] = 0\n 11345: u64 [sp + 96] = 0x11\n 11349: a0 = 0x4\n 11352: a1 = sp + 0x60\n 11355: u64 [sp + 104] = 0\n 11358: ra = 310, jump @9\n      : @376 [@dyn 155] (gas: 2)\n 11364: a1 = i32 [0x20068]\n 11369: jump @378 if a1 >u 63\n      : @377 (gas: 2)\n 11373: u32 [0x20068] = 0x40\n 11379: fallthrough\n      : @378 (gas: 7)\n 11380: a1 = 0x20070\n 11385: i32 a1 = a1 + 0\n 11387: a0 = 0x1\n 11390: a2 = 0x24\n 11393: ra = 0x138\n 11397: ecalli 14 // 'seal_return'\n 11399: fallthrough\n      : @379 [@dyn 156] (gas: 22)\n 11400: sp = sp + 0xfffffffffffffc00\n 11404: a2 = sp + 0x300\n 11408: u64 [a2 + 0xf8] = ra\n 11412: u64 [a2 + 0xf0] = s0\n 11416: u64 [a2 + 0xe8] = s1\n 11420: s0 = sp + 0x400\n 11424: sp = sp & 0xffffffffffffffe0\n 11427: s1 = sp\n 11429: a2 = u64 [a1]\n 11431: a3 = u64 [a1 + 0x8]\n 11434: a1 = u32 [a1 + 0x10]\n 11437: u64 [s1 + 0x18] = a0\n 11440: u64 [s1 + 824] = 0\n 11444: u64 [s1 + 0x88] = a1\n 11448: u64 [s1 + 0x330] = a1\n 11452: u64 [s1 + 0x90] = a3\n 11456: u64 [s1 + 0x328] = a3\n 11460: a1 = s1 + 0x320\n 11464: u64 [s1 + 0x98] = a2\n 11468: u64 [s1 + 0x320] = a2\n 11472: a0 = 0\n 11474: ra = 314, jump @9\n      : @380 [@dyn 157] (gas: 7)\n 11480: u64 [s1 + 792] = 0\n 11484: u64 [s1 + 784] = 0\n 11488: u64 [s1 + 768] = 0x1\n 11493: a0 = 0x20\n 11496: a1 = s1 + 0x300\n 11500: u64 [s1 + 776] = 0\n 11504: ra = 316, jump @9\n      : @381 [@dyn 158] (gas: 3)\n 11510: a2 = 0x20068\n 11515: a0 = i32 [0x20068]\n 11520: jump @383 if a0 >u 63\n      : @382 (gas: 2)\n 11524: u32 [0x20068] = 0x40\n 11530: fallthrough\n      : @383 (gas: 15)\n 11531: u64 [s1 + 0x80] = a2\n 11535: a0 = sp + 0xffffffffffffffe0\n 11538: a2 = a0 & 0xffffffffffffffe0\n 11541: u64 [s1 + 0x70] = a2\n 11544: sp = a2\n 11546: a0 = 0x20070\n 11551: i32 a0 = a0 + 0\n 11553: i32 a2 = a2 + 0\n 11555: a1 = 0x40\n 11558: u64 [s1 + 0x78] = a0\n 11561: ra = 0x13e\n 11565: ecalli 9 // 'hash_keccak_256'\n 11567: a3 = u64 [s1 + 0x70]\n 11570: t0 = 0x140\n 11574: jump @436\n      : @384 [@dyn 159] (gas: 2)\n 11577: a3 = u64 [s1 + 0x70]\n 11580: t0 = 320, jump @436\n      : @385 [@dyn 160] (gas: 7)\n 11586: u64 [a4 + 0x58] = a3\n 11589: u64 [a4 + 0x50] = a2\n 11592: u64 [a4 + 0x48] = a1\n 11595: u64 [a4 + 0x40] = a0\n 11598: a0 = s1 + 0x2e0\n 11602: a1 = s1 + 0x340\n 11606: ra = 322, jump @11\n      : @386 [@dyn 161] (gas: 9)\n 11612: a4 = s1 + 0x200\n 11616: a0 = u64 [a4 + 0xf0]\n 11620: a1 = u64 [a4 + 0xf8]\n 11624: a2 = u64 [a4 + 0xe8]\n 11628: a3 = u64 [a4 + 0xe0]\n 11632: a1 = a1 | a2\n 11635: a0 = a0 | a3\n 11638: a0 = a0 | a1\n 11641: jump @429 if a0 == 0\n      : @387 (gas: 11)\n 11645: u64 [s1 + 728] = 0\n 11649: a0 = u64 [s1 + 0x98]\n 11653: a2 = s1 + 0x200\n 11657: u64 [a2 + 0xc0] = a0\n 11661: a0 = u64 [s1 + 0x90]\n 11665: u64 [a2 + 0xc8] = a0\n 11669: a1 = s1 + 0x2c0\n 11673: a0 = u64 [s1 + 0x88]\n 11677: u64 [a2 + 0xd0] = a0\n 11681: a0 = 0\n 11683: ra = 324, jump @9\n      : @388 [@dyn 162] (gas: 7)\n 11689: u64 [s1 + 696] = 0\n 11693: u64 [s1 + 688] = 0\n 11697: u64 [s1 + 680] = 0\n 11701: a0 = 0x20\n 11704: a1 = s1 + 0x2a0\n 11708: u64 [s1 + 672] = 0\n 11712: ra = 326, jump @9\n      : @389 [@dyn 163] (gas: 3)\n 11718: a2 = u64 [s1 + 0x80]\n 11722: a0 = i32 [a2]\n 11724: jump @391 if a0 >u 63\n      : @390 (gas: 3)\n 11728: u32 [a2 + 0] = 0x40\n 11731: t0 = 0x148\n 11735: jump @442\n      : @391 (gas: 1)\n 11738: t0 = 328, jump @442\n      : @392 [@dyn 164] (gas: 5)\n 11744: ra = 0x14a\n 11748: ecalli 9 // 'hash_keccak_256'\n 11750: a3 = u64 [s1 + 0x70]\n 11753: t0 = 0x14c\n 11757: jump @436\n      : @393 [@dyn 165] (gas: 2)\n 11760: a3 = u64 [s1 + 0x70]\n 11763: t0 = 332, jump @436\n      : @394 [@dyn 166] (gas: 7)\n 11769: u64 [a4 + 0x78] = a3\n 11772: u64 [a4 + 0x70] = a2\n 11775: u64 [a4 + 0x68] = a1\n 11778: u64 [a4 + 0x60] = a0\n 11781: a0 = s1 + 0x280\n 11785: a1 = s1 + 0x360\n 11789: ra = 334, jump @11\n      : @395 [@dyn 167] (gas: 9)\n 11795: a4 = s1 + 0x200\n 11799: a0 = u64 [a4 + 0x90]\n 11803: a1 = u64 [a4 + 0x98]\n 11807: a2 = u64 [a4 + 0x88]\n 11811: a3 = u64 [a4 + 0x80]\n 11815: a1 = a1 | a2\n 11818: a0 = a0 | a3\n 11821: a0 = a0 | a1\n 11824: jump @429 if a0 == 0\n      : @396 (gas: 10)\n 11828: u64 [s1 + 632] = 0\n 11832: a0 = u64 [s1 + 0x98]\n 11836: u64 [s1 + 0x260] = a0\n 11840: a0 = u64 [s1 + 0x90]\n 11844: u64 [s1 + 0x268] = a0\n 11848: a1 = s1 + 0x260\n 11852: a0 = u64 [s1 + 0x88]\n 11856: u64 [s1 + 0x270] = a0\n 11860: a0 = 0\n 11862: ra = 336, jump @9\n      : @397 [@dyn 168] (gas: 7)\n 11868: u64 [s1 + 600] = 0\n 11872: u64 [s1 + 592] = 0\n 11876: u64 [s1 + 576] = 0x1\n 11881: a0 = 0x20\n 11884: a1 = s1 + 0x240\n 11888: u64 [s1 + 584] = 0\n 11892: ra = 338, jump @9\n      : @398 [@dyn 169] (gas: 3)\n 11898: a1 = u64 [s1 + 0x80]\n 11902: a0 = i32 [a1]\n 11904: jump @400 if a0 >u 63\n      : @399 (gas: 3)\n 11908: u32 [a1 + 0] = 0x40\n 11911: t0 = 0x154\n 11915: jump @442\n      : @400 (gas: 1)\n 11918: t0 = 340, jump @442\n      : @401 [@dyn 170] (gas: 5)\n 11924: ra = 0x156\n 11928: ecalli 9 // 'hash_keccak_256'\n 11930: a3 = u64 [s1 + 0x70]\n 11933: t0 = 0x158\n 11937: jump @435\n      : @402 [@dyn 171] (gas: 2)\n 11940: a3 = u64 [s1 + 0x70]\n 11943: t0 = 344, jump @435\n      : @403 [@dyn 172] (gas: 7)\n 11949: u64 [s1 + 0x398] = a3\n 11953: u64 [s1 + 0x390] = a2\n 11957: u64 [s1 + 0x388] = a1\n 11961: u64 [s1 + 0x380] = a0\n 11965: a0 = s1 + 0x220\n 11969: a1 = s1 + 0x380\n 11973: ra = 346, jump @11\n      : @404 [@dyn 173] (gas: 31)\n 11979: a0 = u64 [s1 + 0x220]\n 11983: u64 [s1 + 0x70] = a0\n 11986: a0 = u64 [s1 + 0x228]\n 11990: u64 [s1 + 0x68] = a0\n 11993: a0 = u64 [s1 + 0x230]\n 11997: u64 [s1 + 0x60] = a0\n 12000: a0 = u64 [s1 + 0x238]\n 12004: u64 [s1 + 0x58] = a0\n 12007: i32 a0 = s1 + 0x3a0\n 12011: ecalli 10 // 'now'\n 12013: a4 = s1 + 0x300\n 12017: a3 = u64 [a4 + 0xa0]\n 12021: a0 = u64 [a4 + 0xa8]\n 12025: a1 = u64 [a4 + 0xb0]\n 12029: a2 = u64 [a4 + 0xb8]\n 12033: a4 = u64 [s1 + 0x58]\n 12036: u64 [s1 + 0x1d8] = a4\n 12040: a4 = u64 [s1 + 0x60]\n 12043: u64 [s1 + 0x1d0] = a4\n 12047: a4 = u64 [s1 + 0x68]\n 12050: u64 [s1 + 0x1c8] = a4\n 12054: a4 = u64 [s1 + 0x70]\n 12057: u64 [s1 + 0x1c0] = a4\n 12061: u64 [s1 + 0x1f8] = a2\n 12065: u64 [s1 + 0x1f0] = a1\n 12069: u64 [s1 + 0x1e8] = a0\n 12073: a0 = s1 + 0x200\n 12077: a1 = s1 + 0x1e0\n 12081: a2 = s1 + 0x1c0\n 12085: u64 [s1 + 0x1e0] = a3\n 12089: ra = 348, jump @282\n      : @405 [@dyn 174] (gas: 20)\n 12095: a1 = s1 + 0x200\n 12099: a0 = u64 [a1 + 0x18]\n 12102: u64 [s1 + 0x58] = a0\n 12105: a0 = u64 [a1 + 0x10]\n 12108: u64 [s1 + 0x60] = a0\n 12111: a0 = u64 [a1 + 0x8]\n 12114: u64 [s1 + 0x68] = a0\n 12117: a0 = u64 [a1]\n 12119: u64 [s1 + 0x70] = a0\n 12122: u64 [s1 + 440] = 0\n 12126: a0 = u64 [s1 + 0x88]\n 12130: a2 = s1 + 0x100\n 12134: u64 [a2 + 0xb0] = a0\n 12138: a0 = u64 [s1 + 0x90]\n 12142: u64 [a2 + 0xa8] = a0\n 12146: a1 = s1 + 0x1a0\n 12150: a0 = u64 [s1 + 0x98]\n 12154: u64 [a2 + 0xa0] = a0\n 12158: a0 = 0\n 12160: ra = 350, jump @9\n      : @406 [@dyn 175] (gas: 7)\n 12166: u64 [s1 + 408] = 0\n 12170: u64 [s1 + 400] = 0\n 12174: u64 [s1 + 392] = 0\n 12178: a0 = 0x20\n 12181: a1 = s1 + 0x180\n 12185: u64 [s1 + 384] = 0\n 12189: ra = 352, jump @9\n      : @407 [@dyn 176] (gas: 3)\n 12195: a1 = u64 [s1 + 0x80]\n 12199: a0 = i32 [a1]\n 12201: jump @409 if a0 >u 63\n      : @408 (gas: 2)\n 12205: u32 [a1 + 0] = 0x40\n 12208: fallthrough\n      : @409 (gas: 12)\n 12209: a0 = sp + 0xffffffffffffffe0\n 12212: a0 = a0 & 0xffffffffffffffe0\n 12215: u64 [s1 + 0x98] = a0\n 12219: sp = a0\n 12221: i32 a2 = a0 + 0\n 12223: a1 = 0x40\n 12226: a0 = u64 [s1 + 0x78]\n 12229: ra = 0x162\n 12233: ecalli 9 // 'hash_keccak_256'\n 12235: a3 = u64 [s1 + 0x98]\n 12239: t0 = 0x164\n 12243: jump @436\n      : @410 [@dyn 177] (gas: 2)\n 12246: a3 = u64 [s1 + 0x98]\n 12250: t0 = 356, jump @436\n      : @411 [@dyn 178] (gas: 7)\n 12256: u64 [a4 + 0xd8] = a3\n 12260: u64 [a4 + 0xd0] = a2\n 12264: u64 [a4 + 0xc8] = a1\n 12268: u64 [a4 + 0xc0] = a0\n 12272: a0 = s1 + 0x160\n 12276: a1 = s1 + 0x3c0\n 12280: ra = 358, jump @11\n      : @412 [@dyn 179] (gas: 9)\n 12286: a0 = u64 [s1 + 0x160]\n 12290: u64 [s1 + 0x98] = a0\n 12294: a0 = u64 [s1 + 0x168]\n 12298: u64 [s1 + 0x90] = a0\n 12302: a0 = u64 [s1 + 0x170]\n 12306: u64 [s1 + 0x88] = a0\n 12310: a0 = u64 [s1 + 0x178]\n 12314: u64 [s1 + 0x80] = a0\n 12318: ra = 360, jump @0\n      : @413 [@dyn 180] (gas: 20)\n 12324: a1 = u64 [0x30090]\n 12329: a2 = u64 [0x30098]\n 12334: a3 = u64 [0x300a0]\n 12339: a0 = u64 [0x300a8]\n 12344: u64 [s1 + 0x118] = a0\n 12348: u64 [s1 + 0x110] = a3\n 12352: u64 [s1 + 0x108] = a2\n 12356: u64 [s1 + 0x100] = a1\n 12360: a0 = u64 [s1 + 0x80]\n 12364: u64 [s1 + 0x138] = a0\n 12368: a0 = u64 [s1 + 0x88]\n 12372: u64 [s1 + 0x130] = a0\n 12376: a0 = u64 [s1 + 0x90]\n 12380: u64 [s1 + 0x128] = a0\n 12384: a0 = s1 + 0x140\n 12388: a1 = s1 + 0x120\n 12392: a2 = s1 + 0x100\n 12396: a3 = u64 [s1 + 0x98]\n 12400: u64 [s1 + 0x120] = a3\n 12404: ra = 362, jump @371\n      : @414 [@dyn 181] (gas: 21)\n 12410: a4 = s1 + 0x100\n 12414: a3 = u64 [a4 + 0x40]\n 12417: a0 = u64 [a4 + 0x48]\n 12420: a1 = u64 [a4 + 0x50]\n 12423: a2 = u64 [a4 + 0x58]\n 12426: a4 = u64 [s1 + 0x58]\n 12429: u64 [s1 + 0xb8] = a4\n 12433: a4 = u64 [s1 + 0x60]\n 12436: u64 [s1 + 0xb0] = a4\n 12440: a4 = u64 [s1 + 0x68]\n 12443: u64 [s1 + 0xa8] = a4\n 12447: a4 = u64 [s1 + 0x70]\n 12450: u64 [s1 + 0xa0] = a4\n 12454: u64 [s1 + 0xd8] = a2\n 12458: u64 [s1 + 0xd0] = a1\n 12462: u64 [s1 + 0xc8] = a0\n 12466: a0 = s1 + 0xe0\n 12470: a1 = s1 + 0xc0\n 12474: a2 = s1 + 0xa0\n 12478: u64 [s1 + 0xc0] = a3\n 12482: ra = 364, jump @371\n      : @415 [@dyn 182] (gas: 55)\n 12488: t0 = u64 [s1 + 0xf8]\n 12492: t2 = u64 [s1 + 0xf0]\n 12496: t1 = u64 [s1 + 0xe8]\n 12500: a1 = u64 [s1 + 0xe0]\n 12504: u64 [s1 + 0x58] = a1\n 12507: a0 = clz t0\n 12509: a2 = clz t2\n 12511: a5 = a2 + 0x40\n 12514: a5 = a0 if t0 != 0\n 12517: a0 = clz t1\n 12519: a2 = clz a1\n 12521: a2 = a2 + 0x40\n 12524: a2 = a0 if t1 != 0\n 12527: a0 = a2 + 0x80\n 12531: a3 = t2 | t0\n 12534: a5 = a0 if a3 == 0\n 12537: a2 = a0 <u a2\n 12540: a2 = 0 if a3 != 0\n 12542: a3 = a2 >u 0\n 12544: a0 = a5 <u 0xc5\n 12548: a4 = a0 ^ 0x1\n 12551: a3 = a4 if a2 == 0\n 12554: a0 = a3 <u 0x1\n 12557: a0 = a0 + 0xffffffffffffffff\n 12560: ra = -a3\n 12562: a2 = -a2\n 12564: a1 = a2 - a4\n 12567: a2 = 0xc4 - a5\n 12571: u64 [s1 + 0x88] = ra\n 12575: a5 = ra >u 0\n 12577: a4 = a0 >u 0\n 12579: u64 [s1 + 0x80] = a0\n 12583: a4 = a5 if a0 == 0\n 12586: u64 [s1 + 0x90] = a2\n 12590: a0 = a2 <u 0x100\n 12594: a0 = a0 ^ 0x1\n 12597: a5 = a1 >u 0\n 12599: a0 = a5 if a1 != 0\n 12602: a0 = a4 if a3 != 0\n 12605: a3 = t1 | t0\n 12608: ra = u64 [s1 + 0x58]\n 12611: a4 = ra | t2\n 12614: a3 = a3 | a4\n 12617: a3 = a3 <u 0x1\n 12620: a0 = a0 | a3\n 12623: u64 [s1 + 0x50] = t0\n 12626: a2 = t0\n 12628: a2 = 0 if a0 != 0\n 12630: a5 = t2\n 12632: a5 = 0 if a0 != 0\n 12634: a4 = t1\n 12636: a4 = 0 if a0 != 0\n 12638: t0 = ra\n 12640: t0 = 0 if a0 != 0\n 12642: jump @432 if a0 != 0\n      : @416 (gas: 9)\n 12646: ra = t2\n 12648: a0 = u64 [s1 + 0x90]\n 12652: a0 = a0 ^ 0xff\n 12656: a3 = u64 [s1 + 0x88]\n 12660: t2 = a0 | a3\n 12663: a3 = u64 [s1 + 0x80]\n 12667: a0 = a1 | a3\n 12670: a0 = t2 | a0\n 12673: jump @432 if a0 == 0\n      : @417 (gas: 22)\n 12677: a4 = u64 [s1 + 0x90]\n 12681: a2 = a4 + 0x1\n 12684: u64 [s1 + 0x98] = a2\n 12688: a0 = a2 <u 0x1\n 12691: a0 = a0 + a1\n 12694: u64 [s1 + 0x70] = a0\n 12697: a0 = a0 | a2\n 12700: a0 = a0 <u 0x1\n 12703: a2 = u64 [s1 + 0x88]\n 12707: a0 = a0 + a2\n 12710: u64 [s1 + 0x60] = a0\n 12713: a0 = a0 <u a2\n 12716: a0 = a0 + a3\n 12719: u64 [s1 + 0x68] = a0\n 12722: a1 = 0xff - a4\n 12726: u64 [s1 + 0x78] = a1\n 12729: a2 = 0x80 - a1\n 12733: a0 = u64 [s1 + 0x58]\n 12736: a1 = t1\n 12738: u64 [s1 + 0x48] = t1\n 12741: u64 [s1 + 0x40] = ra\n 12744: ra = 366, jump @444\n      : @418 [@dyn 183] (gas: 6)\n 12750: u64 [s1 + 0x88] = a0\n 12754: u64 [s1 + 0x80] = a1\n 12758: a0 = u64 [s1 + 0x40]\n 12761: a1 = u64 [s1 + 0x50]\n 12764: a2 = u64 [s1 + 0x78]\n 12767: ra = 368, jump @449\n      : @419 [@dyn 184] (gas: 9)\n 12773: u64 [s1 + 0x38] = a0\n 12776: a0 = u64 [s1 + 0x80]\n 12780: a0 = a0 | a1\n 12783: u64 [s1 + 0x80] = a0\n 12787: a1 = u64 [s1 + 0x90]\n 12791: a2 = 0x7f - a1\n 12794: a0 = u64 [s1 + 0x58]\n 12797: a1 = u64 [s1 + 0x48]\n 12800: ra = 370, jump @449\n      : @420 [@dyn 185] (gas: 18)\n 12806: a2 = u64 [s1 + 0x78]\n 12809: a3 = a2 <u 0x80\n 12813: u64 [s1 + 0x90] = a3\n 12817: a4 = u64 [s1 + 0x80]\n 12821: a1 = a4 if a3 != 0\n 12824: a4 = u64 [s1 + 0x50]\n 12827: a1 = a4 if a2 == 0\n 12830: u64 [s1 + 0x80] = a1\n 12834: a1 = u64 [s1 + 0x88]\n 12838: a4 = u64 [s1 + 0x38]\n 12841: a1 = a1 | a4\n 12844: a1 = a0 if a3 == 0\n 12847: a0 = u64 [s1 + 0x40]\n 12850: a1 = a0 if a2 == 0\n 12853: u64 [s1 + 0x88] = a1\n 12857: a0 = u64 [s1 + 0x58]\n 12860: a1 = u64 [s1 + 0x48]\n 12863: ra = 372, jump @449\n      : @421 [@dyn 186] (gas: 13)\n 12869: a3 = u64 [s1 + 0x60]\n 12872: a4 = u64 [s1 + 0x68]\n 12875: a2 = u64 [s1 + 0x70]\n 12878: a2 = a2 | a4\n 12881: a5 = u64 [s1 + 0x98]\n 12885: a5 = a5 | a3\n 12888: a2 = a2 | a5\n 12891: a3 = u64 [s1 + 0x90]\n 12895: a1 = 0 if a3 == 0\n 12897: u64 [s1 + 0x78] = a1\n 12900: a0 = 0 if a3 == 0\n 12902: u64 [s1 + 0x90] = a0\n 12906: jump @430 if a2 == 0\n      : @422 (gas: 7)\n 12910: a0 = 0xde0b6b3a7640000\n 12920: u64 [s1 + 0x30] = a0\n 12923: a0 = u64 [s1 + 0x98]\n 12927: a2 = a0 + 0xffffffffffffff80\n 12930: a0 = u64 [s1 + 0x40]\n 12933: a1 = u64 [s1 + 0x50]\n 12936: ra = 374, jump @444\n      : @423 [@dyn 187] (gas: 6)\n 12942: u64 [s1 + 0x38] = a0\n 12945: u64 [s1 + 0x20] = a1\n 12948: a0 = u64 [s1 + 0x58]\n 12951: a1 = u64 [s1 + 0x48]\n 12954: a2 = u64 [s1 + 0x98]\n 12958: ra = 376, jump @444\n      : @424 [@dyn 188] (gas: 7)\n 12964: u64 [s1 + 0x10] = a0\n 12967: u64 [s1 + 0x28] = a1\n 12970: a1 = u64 [s1 + 0x98]\n 12974: a2 = 0x80 - a1\n 12978: a0 = u64 [s1 + 0x40]\n 12981: a1 = u64 [s1 + 0x50]\n 12984: ra = 378, jump @449\n      : @425 [@dyn 189] (gas: 21)\n 12990: a2 = u64 [s1 + 0x28]\n 12993: a1 = a1 | a2\n 12996: a3 = u64 [s1 + 0x98]\n 13000: a4 = a3 <u 0x80\n 13004: u64 [s1 + 0x28] = a4\n 13007: a2 = u64 [s1 + 0x20]\n 13010: a1 = a2 if a4 == 0\n 13013: a2 = u64 [s1 + 0x48]\n 13016: a2 = a1 if a3 != 0\n 13019: u64 [s1 + 0x48] = a2\n 13022: a1 = u64 [s1 + 0x10]\n 13025: a0 = a0 | a1\n 13028: a1 = u64 [s1 + 0x38]\n 13031: a0 = a1 if a4 == 0\n 13034: a1 = u64 [s1 + 0x58]\n 13037: a1 = a0 if a3 != 0\n 13040: a2 = a3\n 13042: u64 [s1 + 0x58] = a1\n 13045: a0 = u64 [s1 + 0x40]\n 13048: a1 = u64 [s1 + 0x50]\n 13051: ra = 380, jump @444\n      : @426 [@dyn 190] (gas: 13)\n 13057: a5 = 0\n 13059: a2 = u64 [s1 + 0x28]\n 13062: a1 = 0 if a2 == 0\n 13064: a0 = 0 if a2 == 0\n 13066: a4 = u64 [s1 + 0x30]\n 13069: a2 = a4 + 0xffffffffffffffff\n 13072: u64 [s1 + 0x28] = a2\n 13075: a2 = a4 >u 0\n 13077: a2 = a2 + 0xffffffffffffffff\n 13080: u64 [s1 + 0x20] = a2\n 13083: t2 = u64 [s1 + 0x48]\n 13086: t0 = u64 [s1 + 0x58]\n 13089: fallthrough\n      : @427 (gas: 90)\n 13090: u64 [s1 + 0x48] = a1\n 13093: u64 [s1 + 0x50] = a5\n 13096: u64 [s1 + 56] = 0\n 13099: a2 = t0 >> 0x3f\n 13102: a3 = t2 << 0x1\n 13105: a3 = a3 | a2\n 13108: a2 = t0 << 0x1\n 13111: ra = u64 [s1 + 0x80]\n 13115: a4 = ra >> 0x3f\n 13118: a4 = a4 | a2\n 13121: u64 [s1 + 0x58] = a4\n 13124: a2 = u64 [s1 + 0x20]\n 13127: a1 = a2 ^ a3\n 13130: u64 [s1 + 0x40] = a1\n 13133: a1 = a2 <u a3\n 13136: a5 = u64 [s1 + 0x28]\n 13139: t0 = a5 <u a4\n 13142: a4 = u64 [s1 + 0x40]\n 13145: t0 = a1 if a4 != 0\n 13148: a1 = u64 [s1 + 0x48]\n 13151: a1 = a1 << 0x1\n 13154: a4 = a0 >> 0x3f\n 13157: a1 = a1 | a4\n 13160: u64 [s1 + 0x48] = a1\n 13163: a4 = t2 >> 0x3f\n 13166: a0 = a0 << 0x1\n 13169: a4 = a4 | a0\n 13172: a0 = ra << 0x1\n 13175: a1 = u64 [s1 + 0x88]\n 13179: a5 = a1 >> 0x3f\n 13182: a0 = a0 | a5\n 13185: u64 [s1 + 0x80] = a0\n 13189: a5 = a1 << 0x1\n 13192: a0 = u64 [s1 + 0x78]\n 13195: a1 = a0 >> 0x3f\n 13198: t2 = a5 | a1\n 13201: a5 = a0 << 0x1\n 13204: a0 = u64 [s1 + 0x90]\n 13208: ra = a0 >> 0x3f\n 13211: a5 = a5 | ra\n 13214: a0 = a0 << 0x1\n 13217: a1 = u64 [s1 + 0x50]\n 13220: a0 = a0 | a1\n 13223: u64 [s1 + 0x90] = a0\n 13227: a0 = a5 | 0\n 13229: u64 [s1 + 0x78] = a0\n 13232: a0 = t2 | 0\n 13234: u64 [s1 + 0x88] = a0\n 13238: a0 = u64 [s1 + 0x80]\n 13242: a0 = a0 | 0\n 13244: u64 [s1 + 0x80] = a0\n 13248: a0 = a2 - a4\n 13251: a0 = a0 <u t0\n 13254: a1 = a2 <u a4\n 13257: t1 = u64 [s1 + 0x48]\n 13260: a5 = a2 - t1\n 13263: a5 = a5 - a1\n 13266: a5 = a5 - a0\n 13269: ra = a5 >>a 0x3f\n 13272: a0 = u64 [s1 + 0x30]\n 13275: a0 = ra & a0\n 13278: a1 = u64 [s1 + 0x58]\n 13281: t0 = a1 - a0\n 13284: a1 = a1 <u a0\n 13287: t2 = a3 - a1\n 13290: a1 = 0 if a3 != 0\n 13292: a0 = a4 - a1\n 13295: a1 = a4 <u a1\n 13298: a1 = t1 - a1\n 13301: a3 = u64 [s1 + 0x98]\n 13305: a5 = u64 [s1 + 0x70]\n 13308: a2 = a3 | a5\n 13311: a2 = a2 <u 0x1\n 13314: a4 = u64 [s1 + 0x60]\n 13317: t1 = a4 <u a2\n 13320: a4 = a4 - a2\n 13323: a2 = a3 <u 0x1\n 13326: a5 = a5 - a2\n 13329: a2 = u64 [s1 + 0x68]\n 13332: a2 = a2 - t1\n 13335: a3 = a3 + 0xffffffffffffffff\n 13338: u64 [s1 + 0x70] = a5\n 13341: u64 [s1 + 0x68] = a2\n 13344: a2 = a2 | a5\n 13347: u64 [s1 + 0x98] = a3\n 13351: a3 = a3 | a4\n 13354: a2 = a2 | a3\n 13357: a5 = ra & 0x1\n 13360: u64 [s1 + 0x60] = a4\n 13363: jump @427 if a2 != 0\n      : @428 (gas: 1)\n 13367: jump @431\n      : @429 (gas: 5)\n 13369: t0 = 0\n 13371: a4 = 0\n 13373: a5 = 0\n 13375: a2 = 0\n 13377: jump @432\n      : @430 (gas: 3)\n 13379: a5 = 0\n 13381: u64 [s1 + 56] = 0\n 13384: fallthrough\n      : @431 (gas: 20)\n 13385: a2 = u64 [s1 + 0x88]\n 13389: a0 = a2 >> 0x3f\n 13392: a1 = u64 [s1 + 0x80]\n 13396: a1 = a1 << 0x1\n 13399: t1 = a1 | a0\n 13402: a4 = u64 [s1 + 0x78]\n 13405: a1 = a4 >> 0x3f\n 13408: a2 = a2 << 0x1\n 13411: a1 = a1 | a2\n 13414: a3 = u64 [s1 + 0x90]\n 13418: a2 = a3 >> 0x3f\n 13421: a4 = a4 << 0x1\n 13424: a3 = a3 << 0x1\n 13427: t0 = a5 | a3\n 13430: a0 = u64 [s1 + 0x38]\n 13433: a2 = a2 | a0\n 13436: a4 = a4 | a2\n 13439: a5 = a0 | a1\n 13442: a2 = a0 | t1\n 13445: fallthrough\n      : @432 (gas: 12)\n 13446: a1 = u64 [s1 + 0x18]\n 13449: u64 [a1] = t0\n 13451: u64 [a1 + 0x8] = a4\n 13454: u64 [a1 + 0x10] = a5\n 13457: u64 [a1 + 0x18] = a2\n 13460: sp = s0 + 0xfffffffffffffc00\n 13464: a0 = sp + 0x300\n 13468: ra = u64 [a0 + 0xf8]\n 13472: s0 = u64 [a0 + 0xf0]\n 13476: s1 = u64 [a0 + 0xe8]\n 13480: sp = sp + 0x400\n 13484: ret\n      : @433 [export #0: 'call'] (gas: 2)\n 13486: a0 = 0\n 13488: ra = 382, jump @21\n      : @434 [@dyn 191] [export #1: 'deploy'] (gas: 2)\n 13494: a0 = 0x1\n 13497: ra = 384, jump @21\n      : @435 [@dyn 192] (gas: 9)\n 13503: a0 = u64 [a3 + 0x18]\n 13506: a1 = u64 [a3 + 0x10]\n 13509: a2 = u64 [a3 + 0x8]\n 13512: a3 = u64 [a3]\n 13514: a0 = reverse a0\n 13516: a1 = reverse a1\n 13518: a2 = reverse a2\n 13520: a3 = reverse a3\n 13522: jump [t0]\n      : @436 (gas: 10)\n 13524: a0 = u64 [a3 + 0x18]\n 13527: a1 = u64 [a3 + 0x10]\n 13530: a2 = u64 [a3 + 0x8]\n 13533: a3 = u64 [a3]\n 13535: a0 = reverse a0\n 13537: a1 = reverse a1\n 13539: a2 = reverse a2\n 13541: a3 = reverse a3\n 13543: a4 = s1 + 0x300\n 13547: jump [t0]\n      : @437 (gas: 8)\n 13549: a0 = a0 | a2\n 13552: a2 = a3 | a1\n 13555: a2 = a2 | a0\n 13558: a2 = a2 >> 0x20\n 13561: a0 = a0 | a1\n 13564: a0 = a0 << 0x20\n 13567: a0 = a0 | a2\n 13570: jump [t0]\n      : @438 (gas: 14)\n 13572: a0 = u64 [a2 + 0x8]\n 13575: a1 = u64 [a2]\n 13577: a2 = i32 [a2 + 0x10]\n 13580: a0 = reverse a0\n 13582: a3 = a0 >> 0x20\n 13585: a1 = reverse a1\n 13587: a4 = a1 << 0x20\n 13590: a3 = a3 | a4\n 13593: a0 = a0 << 0x20\n 13596: a2 = reverse a2\n 13598: a2 = a2 >> 0x20\n 13601: a0 = a0 | a2\n 13604: a1 = a1 >> 0x20\n 13607: jump [t0]\n      : @439 (gas: 12)\n 13609: a0 = u64 [a3 + 0x18]\n 13612: a1 = u64 [a3 + 0x10]\n 13615: a2 = u64 [a3 + 0x8]\n 13618: a3 = u64 [a3]\n 13620: a0 = reverse a0\n 13622: a1 = reverse a1\n 13624: a2 = reverse a2\n 13626: a3 = reverse a3\n 13628: a4 = s1 + 0x7ff\n 13632: a4 = a4 + 0x19\n 13635: a5 = a4 + 0x100\n 13639: jump [t0]\n      : @440 (gas: 11)\n 13641: a0 = u64 [a3 + 0x18]\n 13644: a1 = u64 [a3 + 0x10]\n 13647: a2 = u64 [a3 + 0x8]\n 13650: a3 = u64 [a3]\n 13652: a0 = reverse a0\n 13654: a1 = reverse a1\n 13656: a2 = reverse a2\n 13658: a3 = reverse a3\n 13660: a4 = s1 + 0x7ff\n 13664: a4 = a4 + 0x19\n 13667: jump [t0]\n      : @441 (gas: 9)\n 13669: a0 = u64 [a3 + 0x18]\n 13672: a1 = u64 [a3 + 0x10]\n 13675: a2 = u64 [a3 + 0x8]\n 13678: a3 = u64 [a3]\n 13680: a0 = reverse a0\n 13682: a4 = reverse a1\n 13684: a2 = reverse a2\n 13686: a3 = reverse a3\n 13688: jump [t0]\n      : @442 (gas: 8)\n 13690: a0 = sp + 0xffffffffffffffe0\n 13693: a0 = a0 & 0xffffffffffffffe0\n 13696: u64 [s1 + 0x70] = a0\n 13699: sp = a0\n 13701: i32 a2 = a0 + 0\n 13703: a1 = 0x40\n 13706: a0 = u64 [s1 + 0x78]\n 13709: jump [t0]\n      : @443 (gas: 8)\n 13711: a0 = u64 [a4 + 0x98]\n 13715: a1 = u64 [a4 + 0xa0]\n 13719: a2 = u64 [a4 + 0x90]\n 13723: a3 = u64 [a4 + 0x88]\n 13727: a1 = a1 | a2\n 13730: a0 = a0 | a3\n 13733: a0 = a0 | a1\n 13736: jump [t0]\n      : @444 (gas: 2)\n 13738: a3 = a2 & 0x40\n 13741: jump @448 if a3 != 0\n      : @445 (gas: 1)\n 13744: jump @447 if a2 == 0\n      : @446 (gas: 6)\n 13747: i32 a3 = 0x40 - a2\n 13750: a3 = a1 << a3\n 13753: a1 = a1 >> a2\n 13756: a0 = a0 >> a2\n 13759: a0 = a0 | a3\n 13762: ret\n      : @447 (gas: 1)\n 13764: ret\n      : @448 (gas: 4)\n 13766: a0 = a2 + 0xffffffffffffffc0\n 13769: a0 = a1 >> a0\n 13772: a1 = 0\n 13774: ret\n      : @449 (gas: 2)\n 13776: a3 = a2 & 0x40\n 13779: jump @453 if a3 != 0\n      : @450 (gas: 1)\n 13782: jump @452 if a2 == 0\n      : @451 (gas: 6)\n 13785: i32 a3 = 0x40 - a2\n 13788: a3 = a0 >> a3\n 13791: a0 = a0 << a2\n 13794: a1 = a1 << a2\n 13797: a1 = a1 | a3\n 13800: ret\n      : @452 (gas: 1)\n 13802: ret\n      : @453 (gas: 4)\n 13804: a1 = a2 + 0xffffffffffffffc0\n 13807: a1 = a0 << a1\n 13810: a0 = 0\n 13812: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "claimRewards(address)": "ef5cfb8c",
              "deposits(address)": "fc7e286d",
              "getContractBalance()": "6f9fb98a",
              "getPendingRewards(address)": "f6ed2017",
              "getStakedAmount(address)": "4da6a556",
              "habitTracker()": "836ee1c0",
              "lastUpdateTime(address)": "2ce9aead",
              "ratePerSecond()": "8eff1a98",
              "stake(address,uint256)": "adc9772e",
              "unstake(address,uint256)": "c2a672e0"
            }
          },
          "irOptimized": "/// @use-src 2:\"contracts/interfaces/IStakingAdapter.sol\", 3:\"contracts/mocks/MockStakingRewards.sol\"\nobject \"MockStakingRewards_1813\" {\n    code {\n        {\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            let _1 := memoryguard(0xc0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MockStakingRewards_1813\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            let value := mload(_1)\n            let value_1 := mload(add(_1, 32))\n            if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1))))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:1209:1239  \"ratePerSecond = _ratePerSecond\"\n            mstore(128, value)\n            /// @src 3:1249:1277  \"habitTracker = _habitTracker\"\n            mstore(160, value_1)\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"MockStakingRewards_1813_deployed\")\n            codecopy(_2, dataoffset(\"MockStakingRewards_1813_deployed\"), _3)\n            setimmutable(_2, \"1461\", mload(/** @src 3:1209:1239  \"ratePerSecond = _ratePerSecond\" */ 128))\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            setimmutable(_2, \"1463\", mload(/** @src 3:1249:1277  \"habitTracker = _habitTracker\" */ 160))\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            return(_2, _3)\n        }\n    }\n    /// @use-src 3:\"contracts/mocks/MockStakingRewards.sol\"\n    object \"MockStakingRewards_1813_deployed\" {\n        code {\n            {\n                /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x2ce9aead {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 3:521:570  \"mapping(address => uint256) public lastUpdateTime\" */ 1)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        mstore(_1, sload(keccak256(0, 64)))\n                        return(_1, 32)\n                    }\n                    case 0x4da6a556 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _2 := sload(keccak256(0, 64))\n                        let memPos := mload(64)\n                        mstore(memPos, _2)\n                        return(memPos, 32)\n                    }\n                    case 0x6f9fb98a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := /** @src 3:3201:3222  \"address(this).balance\" */ selfbalance()\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, ret)\n                        return(memPos_1, 32)\n                    }\n                    case 0x836ee1c0 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, and(/** @src 3:428:465  \"address public immutable habitTracker\" */ loadimmutable(\"1463\"), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_2, 32)\n                    }\n                    case 0x8eff1a98 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, /** @src 3:333:371  \"uint256 public immutable ratePerSecond\" */ loadimmutable(\"1461\"))\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0xadc9772e {\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 3:917:943  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 3:917:927  \"msg.sender\" */ caller(), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ and(/** @src 3:931:943  \"habitTracker\" */ loadimmutable(\"1463\"), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 3:952:970  \"OnlyHabitTracker()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:952:970  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:1379:1426  \"if (msg.value != amount) revert InvalidAmount()\"\n                        if /** @src 3:1383:1402  \"msg.value != amount\" */ iszero(eq(/** @src 3:1383:1392  \"msg.value\" */ callvalue(), /** @src 3:1383:1402  \"msg.value != amount\" */ value))\n                        /// @src 3:1379:1426  \"if (msg.value != amount) revert InvalidAmount()\"\n                        {\n                            /// @src 3:1411:1426  \"InvalidAmount()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:1411:1426  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:1436:1475  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 3:1440:1451  \"amount == 0\" */ iszero(value)\n                        /// @src 3:1436:1475  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 3:1460:1475  \"InvalidAmount()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:1411:1426  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 3:1460:1475  \"InvalidAmount()\"\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:1501:1505  \"user\"\n                        fun_updateRewards(value0)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        let _3 := and(value0, sub(shl(160, 1), 1))\n                        mstore(0, _3)\n                        mstore(32, 0)\n                        let dataSlot := keccak256(0, 64)\n                        let _4 := sload(/** @src 3:1516:1540  \"deposits[user] += amount\" */ dataSlot)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        let sum := add(_4, value)\n                        if gt(_4, sum)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 36)\n                        }\n                        sstore(dataSlot, sum)\n                        /// @src 3:1556:1576  \"Staked(user, amount)\"\n                        let _5 := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ mload(64)\n                        mstore(_5, value)\n                        /// @src 3:1556:1576  \"Staked(user, amount)\"\n                        log2(_5, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 32, /** @src 3:1556:1576  \"Staked(user, amount)\" */ 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d, _3)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        return(0, 0)\n                    }\n                    case 0xc2a672e0 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        /// @src 3:931:943  \"habitTracker\"\n                        let _6 := loadimmutable(\"1463\")\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 3:917:943  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 3:917:927  \"msg.sender\" */ caller(), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ and(/** @src 3:931:943  \"habitTracker\" */ _6, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 3:952:970  \"OnlyHabitTracker()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:952:970  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:1672:1711  \"if (amount == 0) revert InvalidAmount()\"\n                        if /** @src 3:1676:1687  \"amount == 0\" */ iszero(value_1)\n                        /// @src 3:1672:1711  \"if (amount == 0) revert InvalidAmount()\"\n                        {\n                            /// @src 3:1696:1711  \"InvalidAmount()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:1411:1426  \"InvalidAmount()\" */ shl(225, 0x162908e3))\n                            /// @src 3:1696:1711  \"InvalidAmount()\"\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        let _7 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _7)\n                        mstore(32, 0)\n                        /// @src 3:1721:1778  \"if (deposits[user] < amount) revert InsufficientBalance()\"\n                        if /** @src 3:1725:1748  \"deposits[user] < amount\" */ lt(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(keccak256(0, 64)), /** @src 3:1725:1748  \"deposits[user] < amount\" */ value_1)\n                        /// @src 3:1721:1778  \"if (deposits[user] < amount) revert InsufficientBalance()\"\n                        {\n                            /// @src 3:1757:1778  \"InsufficientBalance()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:1757:1778  \"InsufficientBalance()\" */ shl(227, 0x1e9acf17))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:1804:1808  \"user\"\n                        fun_updateRewards(value0_1)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        mstore(0, _7)\n                        mstore(32, 0)\n                        let dataSlot_1 := keccak256(0, 64)\n                        sstore(dataSlot_1, /** @src 3:1819:1843  \"deposits[user] -= amount\" */ checked_sub_uint256(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(/** @src 3:1819:1843  \"deposits[user] -= amount\" */ dataSlot_1), value_1))\n                        /// @src 3:1910:1946  \"habitTracker.call{value: amount}(\\\"\\\")\"\n                        let expr_component := call(gas(), _6, value_1, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 0, 0, 0)\n                        /// @src 3:1910:1946  \"habitTracker.call{value: amount}(\\\"\\\")\"\n                        pop(extract_returndata())\n                        /// @src 3:1956:1993  \"if (!success) revert TransferFailed()\"\n                        if /** @src 3:1960:1968  \"!success\" */ iszero(expr_component)\n                        /// @src 3:1956:1993  \"if (!success) revert TransferFailed()\"\n                        {\n                            /// @src 3:1977:1993  \"TransferFailed()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:1977:1993  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:2009:2031  \"Unstaked(user, amount)\"\n                        let _8 := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ mload(64)\n                        mstore(_8, value_1)\n                        /// @src 3:2009:2031  \"Unstaked(user, amount)\"\n                        log2(_8, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 32, /** @src 3:2009:2031  \"Unstaked(user, amount)\" */ 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75, _7)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        return(0, 0)\n                    }\n                    case 0xef5cfb8c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        if /** @src 3:917:943  \"msg.sender != habitTracker\" */ iszero(eq(/** @src 3:917:927  \"msg.sender\" */ caller(), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ and(/** @src 3:931:943  \"habitTracker\" */ loadimmutable(\"1463\"), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:913:970  \"if (msg.sender != habitTracker) revert OnlyHabitTracker()\"\n                        {\n                            /// @src 3:952:970  \"OnlyHabitTracker()\"\n                            mstore(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, /** @src 3:952:970  \"OnlyHabitTracker()\" */ shl(226, 0x30e7e801))\n                            revert(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0, 4)\n                        }\n                        /// @src 3:980:981  \"_\"\n                        let _9 := /** @src 3:2044:2881  \"function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {...\" */ fun_claimRewards_inner(/** @src 3:980:981  \"_\" */ value0_2)\n                        /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, _9)\n                        return(memPos_4, 32)\n                    }\n                    case 0xf6ed2017 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        /// @src 3:3082:3109  \"return _pendingRewards(who)\"\n                        let var := /** @src 3:3089:3109  \"_pendingRewards(who)\" */ fun_pendingRewards(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ abi_decode_address())\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, var)\n                        return(memPos_5, 32)\n                    }\n                    case 0xfc7e286d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _10 := sload(keccak256(0, 64))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, _10)\n                        return(memPos_6, 32)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    let newFreePtr := add(memPtr, and(add(and(add(_1, 31), not(31)), 63), not(31)))\n                    if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ returndatasize())\n                }\n            }\n            /// @src 3:2044:2881  \"function claimRewards(address user) external onlyHabitTracker returns (uint256 claimed) {...\"\n            function fun_claimRewards_inner(var_user) -> var_claimed\n            {\n                /// @src 3:2142:2173  \"claimed = _pendingRewards(user)\"\n                var_claimed := /** @src 3:2152:2173  \"_pendingRewards(user)\" */ fun_pendingRewards(var_user)\n                /// @src 3:2254:2275  \"address(this).balance\"\n                let expr := selfbalance()\n                /// @src 3:2285:2311  \"if (balance == 0) return 0\"\n                if /** @src 3:2289:2301  \"balance == 0\" */ iszero(expr)\n                /// @src 3:2285:2311  \"if (balance == 0) return 0\"\n                {\n                    /// @src 3:2303:2311  \"return 0\"\n                    var_claimed := /** @src 3:2300:2301  \"0\" */ 0x00\n                    /// @src 3:2303:2311  \"return 0\"\n                    leave\n                }\n                /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                let r := div(expr, /** @src 3:2410:2412  \"10\" */ 0x0a)\n                /// @src 3:2422:2464  \"if (claimed > maxClaim) claimed = maxClaim\"\n                if /** @src 3:2426:2444  \"claimed > maxClaim\" */ gt(var_claimed, r)\n                /// @src 3:2422:2464  \"if (claimed > maxClaim) claimed = maxClaim\"\n                {\n                    /// @src 3:2446:2464  \"claimed = maxClaim\"\n                    var_claimed := r\n                }\n                /// @src 3:2534:2574  \"if (claimed > balance) claimed = balance\"\n                if /** @src 3:2538:2555  \"claimed > balance\" */ gt(var_claimed, expr)\n                /// @src 3:2534:2574  \"if (claimed > balance) claimed = balance\"\n                {\n                    /// @src 3:2557:2574  \"claimed = balance\"\n                    var_claimed := expr\n                }\n                /// @src 3:2593:2842  \"if (claimed > 0) {...\"\n                if /** @src 3:2597:2608  \"claimed > 0\" */ iszero(iszero(var_claimed))\n                /// @src 3:2593:2842  \"if (claimed > 0) {...\"\n                {\n                    /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                    let _1 := and(var_user, sub(shl(160, 1), 1))\n                    mstore(/** @src 3:2300:2301  \"0\" */ 0x00, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ _1)\n                    mstore(0x20, /** @src 3:2624:2638  \"lastUpdateTime\" */ 0x01)\n                    /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                    sstore(keccak256(/** @src 3:2300:2301  \"0\" */ 0x00, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x40), /** @src 3:2647:2662  \"block.timestamp\" */ timestamp())\n                    /// @src 3:2695:2732  \"habitTracker.call{value: claimed}(\\\"\\\")\"\n                    let expr_component := call(gas(), /** @src 3:2695:2707  \"habitTracker\" */ loadimmutable(\"1463\"), /** @src 3:2695:2732  \"habitTracker.call{value: claimed}(\\\"\\\")\" */ var_claimed, /** @src 3:2300:2301  \"0\" */ 0x00, 0x00, 0x00, 0x00)\n                    /// @src 3:2695:2732  \"habitTracker.call{value: claimed}(\\\"\\\")\"\n                    pop(extract_returndata())\n                    /// @src 3:2746:2783  \"if (!success) revert TransferFailed()\"\n                    if /** @src 3:2750:2758  \"!success\" */ iszero(expr_component)\n                    /// @src 3:2746:2783  \"if (!success) revert TransferFailed()\"\n                    {\n                        /// @src 3:2767:2783  \"TransferFailed()\"\n                        mstore(/** @src 3:2300:2301  \"0\" */ 0x00, /** @src 3:1977:1993  \"TransferFailed()\" */ shl(227, 0x12171d83))\n                        /// @src 3:2767:2783  \"TransferFailed()\"\n                        revert(/** @src 3:2300:2301  \"0\" */ 0x00, /** @src 3:2767:2783  \"TransferFailed()\" */ 4)\n                    }\n                    /// @src 3:2802:2831  \"RewardsClaimed(user, claimed)\"\n                    let _2 := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ mload(0x40)\n                    mstore(_2, var_claimed)\n                    /// @src 3:2802:2831  \"RewardsClaimed(user, claimed)\"\n                    log2(_2, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x20, /** @src 3:2802:2831  \"RewardsClaimed(user, claimed)\" */ 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe, _1)\n                }\n                /// @src 3:2860:2874  \"return claimed\"\n                var_claimed := var_claimed\n            }\n            /// @ast-id 1764 @src 3:3235:3392  \"function _updateRewards(address user) internal {...\"\n            function fun_updateRewards(var_user)\n            {\n                /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                let _1 := and(var_user, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ _1)\n                mstore(0x20, /** @src 3:3296:3310  \"lastUpdateTime\" */ 0x01)\n                /// @src 3:3292:3386  \"if (lastUpdateTime[user] == 0) {...\"\n                if /** @src 3:3296:3321  \"lastUpdateTime[user] == 0\" */ iszero(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x40)))\n                /// @src 3:3292:3386  \"if (lastUpdateTime[user] == 0) {...\"\n                {\n                    /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ _1)\n                    mstore(0x20, /** @src 3:3296:3310  \"lastUpdateTime\" */ 0x01)\n                    /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0x40), /** @src 3:3360:3375  \"block.timestamp\" */ timestamp())\n                }\n            }\n            /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n            function checked_mul_uint256(x, y) -> product\n            {\n                product := mul(x, y)\n                if iszero(or(iszero(x), eq(y, div(product, x))))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @ast-id 1807 @src 3:3398:3778  \"function _pendingRewards(address user) internal view returns (uint256) {...\"\n            function fun_pendingRewards(var_user) -> var\n            {\n                /// @src 3:3460:3467  \"uint256\"\n                var := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0\n                let _1 := and(var_user, sub(shl(160, 1), 1))\n                mstore(0, _1)\n                mstore(0x20, /** @src 3:3483:3497  \"lastUpdateTime\" */ 0x01)\n                /// @src 3:3483:3531  \"lastUpdateTime[user] == 0 || deposits[user] == 0\"\n                let expr := /** @src 3:3483:3508  \"lastUpdateTime[user] == 0\" */ iszero(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(keccak256(0, 0x40)))\n                /// @src 3:3483:3531  \"lastUpdateTime[user] == 0 || deposits[user] == 0\"\n                if iszero(expr)\n                {\n                    /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                    mstore(0, _1)\n                    mstore(0x20, 0)\n                    /// @src 3:3483:3531  \"lastUpdateTime[user] == 0 || deposits[user] == 0\"\n                    expr := /** @src 3:3512:3531  \"deposits[user] == 0\" */ iszero(/** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(keccak256(0, 0x40)))\n                }\n                /// @src 3:3479:3566  \"if (lastUpdateTime[user] == 0 || deposits[user] == 0) {...\"\n                if expr\n                {\n                    /// @src 3:3547:3555  \"return 0\"\n                    var := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ 0\n                    /// @src 3:3547:3555  \"return 0\"\n                    leave\n                }\n                /// @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\"\n                mstore(0, _1)\n                mstore(0x20, /** @src 3:3483:3497  \"lastUpdateTime\" */ 0x01)\n                /// @src 3:3598:3636  \"block.timestamp - lastUpdateTime[user]\"\n                let expr_1 := checked_sub_uint256(/** @src 3:3598:3613  \"block.timestamp\" */ timestamp(), /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ sload(keccak256(0, 0x40)))\n                mstore(0, _1)\n                mstore(0x20, 0)\n                let _2 := sload(keccak256(0, 0x40))\n                /// @src 3:3711:3771  \"return (deposits[user] * ratePerSecond * timeElapsed) / 1e18\"\n                var := /** @src 3:280:3882  \"contract MockStakingRewards is IStakingAdapter {...\" */ div(/** @src 3:3719:3763  \"deposits[user] * ratePerSecond * timeElapsed\" */ checked_mul_uint256(/** @src 3:3719:3749  \"deposits[user] * ratePerSecond\" */ checked_mul_uint256(_2, /** @src 3:3736:3749  \"ratePerSecond\" */ loadimmutable(\"1461\")), /** @src 3:3719:3763  \"deposits[user] * ratePerSecond * timeElapsed\" */ expr_1), /** @src 3:3767:3771  \"1e18\" */ 0x0de0b6b3a7640000)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201886a7bf663b550ba29aea883536dfd0fb8937718171e542ddec0e469685f27d64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "658368076cd0566c8923baec17a91e37cdb65b94b86d621b2c8dbd66d15a2243",
          "factoryDependencies": {}
        }
      }
    }
  }
}